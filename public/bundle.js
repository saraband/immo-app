!function(t){var e={};function n(r){if(e[r])return e[r].exports;var o=e[r]={i:r,l:!1,exports:{}};return t[r].call(o.exports,o,o.exports,n),o.l=!0,o.exports}n.m=t,n.c=e,n.d=function(t,e,r){n.o(t,e)||Object.defineProperty(t,e,{configurable:!1,enumerable:!0,get:r})},n.r=function(t){Object.defineProperty(t,"__esModule",{value:!0})},n.n=function(t){var e=t&&t.__esModule?function(){return t.default}:function(){return t};return n.d(e,"a",e),e},n.o=function(t,e){return Object.prototype.hasOwnProperty.call(t,e)},n.p="",n(n.s=388)}([function(t,e,n){var r=n(2),o=n(23),i=n(14),a=n(13),u=n(22),c=function(t,e,n){var l,s,f,p,d=t&c.F,h=t&c.G,v=t&c.S,y=t&c.P,m=t&c.B,g=h?r:v?r[e]||(r[e]={}):(r[e]||{}).prototype,b=h?o:o[e]||(o[e]={}),_=b.prototype||(b.prototype={});for(l in h&&(n=e),n)f=((s=!d&&g&&void 0!==g[l])?g:n)[l],p=m&&s?u(f,r):y&&"function"==typeof f?u(Function.call,f):f,g&&a(g,l,f,t&c.U),b[l]!=f&&i(b,l,p),y&&_[l]!=f&&(_[l]=f)};r.core=o,c.F=1,c.G=2,c.S=4,c.P=8,c.B=16,c.W=32,c.U=64,c.R=128,t.exports=c},function(t,e,n){var r=n(4);t.exports=function(t){if(!r(t))throw TypeError(t+" is not an object!");return t}},function(t,e){var n=t.exports="undefined"!=typeof window&&window.Math==Math?window:"undefined"!=typeof self&&self.Math==Math?self:Function("return this")();"number"==typeof __g&&(__g=n)},function(t,e){t.exports=function(t){try{return!!t()}catch(t){return!0}}},function(t,e){t.exports=function(t){return"object"==typeof t?null!==t:"function"==typeof t}},function(t,e,n){var r=n(67)("wks"),o=n(42),i=n(2).Symbol,a="function"==typeof i;(t.exports=function(t){return r[t]||(r[t]=a&&i[t]||(a?i:o)("Symbol."+t))}).store=r},function(t,e,n){var r=n(26),o=Math.min;t.exports=function(t){return t>0?o(r(t),9007199254740991):0}},function(t,e,n){var r=n(1),o=n(141),i=n(28),a=Object.defineProperty;e.f=n(8)?Object.defineProperty:function(t,e,n){if(r(t),e=i(e,!0),r(n),o)try{return a(t,e,n)}catch(t){}if("get"in n||"set"in n)throw TypeError("Accessors not supported!");return"value"in n&&(t[e]=n.value),t}},function(t,e,n){t.exports=!n(3)(function(){return 7!=Object.defineProperty({},"a",{get:function(){return 7}}).a})},function(t,e,n){var r=n(27);t.exports=function(t){return Object(r(t))}},function(t,e,n){"use strict";t.exports=n(184)},function(t,e){t.exports=function(t){if("function"!=typeof t)throw TypeError(t+" is not a function!");return t}},function(t,e,n){var r=n(0),o=n(3),i=n(27),a=/"/g,u=function(t,e,n,r){var o=String(i(t)),u="<"+e;return""!==n&&(u+=" "+n+'="'+String(r).replace(a,"&quot;")+'"'),u+">"+o+"</"+e+">"};t.exports=function(t,e){var n={};n[t]=e(u),r(r.P+r.F*o(function(){var e=""[t]('"');return e!==e.toLowerCase()||e.split('"').length>3}),"String",n)}},function(t,e,n){var r=n(2),o=n(14),i=n(19),a=n(42)("src"),u=Function.toString,c=(""+u).split("toString");n(23).inspectSource=function(t){return u.call(t)},(t.exports=function(t,e,n,u){var l="function"==typeof n;l&&(i(n,"name")||o(n,"name",e)),t[e]!==n&&(l&&(i(n,a)||o(n,a,t[e]?""+t[e]:c.join(String(e)))),t===r?t[e]=n:u?t[e]?t[e]=n:o(t,e,n):(delete t[e],o(t,e,n)))})(Function.prototype,"toString",function(){return"function"==typeof this&&this[a]||u.call(this)})},function(t,e,n){var r=n(7),o=n(43);t.exports=n(8)?function(t,e,n){return r.f(t,e,o(1,n))}:function(t,e,n){return t[e]=n,t}},function(t,e,n){t.exports=n(175)()},function(t,e,n){var r=n(19),o=n(9),i=n(98)("IE_PROTO"),a=Object.prototype;t.exports=Object.getPrototypeOf||function(t){return t=o(t),r(t,i)?t[i]:"function"==typeof t.constructor&&t instanceof t.constructor?t.constructor.prototype:t instanceof Object?a:null}},function(t,e,n){var r=n(51),o=n(43),i=n(18),a=n(28),u=n(19),c=n(141),l=Object.getOwnPropertyDescriptor;e.f=n(8)?l:function(t,e){if(t=i(t),e=a(e,!0),c)try{return l(t,e)}catch(t){}if(u(t,e))return o(!r.f.call(t,e),t[e])}},function(t,e,n){var r=n(52),o=n(27);t.exports=function(t){return r(o(t))}},function(t,e){var n={}.hasOwnProperty;t.exports=function(t,e){return n.call(t,e)}},function(t,e,n){"use strict";var r=n(3);t.exports=function(t,e){return!!t&&r(function(){e?t.call(null,function(){},1):t.call(null)})}},function(t,e){var n={}.toString;t.exports=function(t){return n.call(t).slice(8,-1)}},function(t,e,n){var r=n(11);t.exports=function(t,e,n){if(r(t),void 0===e)return t;switch(n){case 1:return function(n){return t.call(e,n)};case 2:return function(n,r){return t.call(e,n,r)};case 3:return function(n,r,o){return t.call(e,n,r,o)}}return function(){return t.apply(e,arguments)}}},function(t,e){var n=t.exports={version:"2.5.6"};"number"==typeof __e&&(__e=n)},function(t,e,n){var r=n(22),o=n(52),i=n(9),a=n(6),u=n(81);t.exports=function(t,e){var n=1==t,c=2==t,l=3==t,s=4==t,f=6==t,p=5==t||f,d=e||u;return function(e,u,h){for(var v,y,m=i(e),g=o(m),b=r(u,h,3),_=a(g.length),w=0,x=n?d(e,_):c?d(e,0):void 0;_>w;w++)if((p||w in g)&&(y=b(v=g[w],w,m),t))if(n)x[w]=y;else if(y)switch(t){case 3:return!0;case 5:return v;case 6:return w;case 2:x.push(v)}else if(s)return!1;return f?-1:l||s?s:x}}},function(t,e,n){var r=n(0),o=n(23),i=n(3);t.exports=function(t,e){var n=(o.Object||{})[t]||Object[t],a={};a[t]=e(n),r(r.S+r.F*i(function(){n(1)}),"Object",a)}},function(t,e){var n=Math.ceil,r=Math.floor;t.exports=function(t){return isNaN(t=+t)?0:(t>0?r:n)(t)}},function(t,e){t.exports=function(t){if(void 0==t)throw TypeError("Can't call method on  "+t);return t}},function(t,e,n){var r=n(4);t.exports=function(t,e){if(!r(t))return t;var n,o;if(e&&"function"==typeof(n=t.toString)&&!r(o=n.call(t)))return o;if("function"==typeof(n=t.valueOf)&&!r(o=n.call(t)))return o;if(!e&&"function"==typeof(n=t.toString)&&!r(o=n.call(t)))return o;throw TypeError("Can't convert object to primitive value")}},function(t,e,n){var r=n(120),o=n(0),i=n(67)("metadata"),a=i.store||(i.store=new(n(117))),u=function(t,e,n){var o=a.get(t);if(!o){if(!n)return;a.set(t,o=new r)}var i=o.get(e);if(!i){if(!n)return;o.set(e,i=new r)}return i};t.exports={store:a,map:u,has:function(t,e,n){var r=u(e,n,!1);return void 0!==r&&r.has(t)},get:function(t,e,n){var r=u(e,n,!1);return void 0===r?void 0:r.get(t)},set:function(t,e,n,r){u(n,r,!0).set(t,e)},keys:function(t,e){var n=u(t,e,!1),r=[];return n&&n.forEach(function(t,e){r.push(e)}),r},key:function(t){return void 0===t||"symbol"==typeof t?t:String(t)},exp:function(t){o(o.S,"Reflect",t)}}},function(t,e,n){"use strict";if(n(8)){var r=n(32),o=n(2),i=n(3),a=n(0),u=n(56),c=n(75),l=n(22),s=n(36),f=n(43),p=n(14),d=n(34),h=n(26),v=n(6),y=n(115),m=n(40),g=n(28),b=n(19),_=n(50),w=n(4),x=n(9),E=n(84),S=n(39),T=n(16),P=n(38).f,O=n(82),k=n(42),C=n(5),N=n(24),R=n(66),A=n(59),M=n(79),j=n(46),L=n(62),I=n(37),F=n(80),D=n(125),U=n(7),B=n(17),z=U.f,W=B.f,H=o.RangeError,V=o.TypeError,q=o.Uint8Array,G=Array.prototype,Y=c.ArrayBuffer,$=c.DataView,Q=N(0),K=N(2),X=N(3),J=N(4),Z=N(5),tt=N(6),et=R(!0),nt=R(!1),rt=M.values,ot=M.keys,it=M.entries,at=G.lastIndexOf,ut=G.reduce,ct=G.reduceRight,lt=G.join,st=G.sort,ft=G.slice,pt=G.toString,dt=G.toLocaleString,ht=C("iterator"),vt=C("toStringTag"),yt=k("typed_constructor"),mt=k("def_constructor"),gt=u.CONSTR,bt=u.TYPED,_t=u.VIEW,wt=N(1,function(t,e){return Pt(A(t,t[mt]),e)}),xt=i(function(){return 1===new q(new Uint16Array([1]).buffer)[0]}),Et=!!q&&!!q.prototype.set&&i(function(){new q(1).set({})}),St=function(t,e){var n=h(t);if(n<0||n%e)throw H("Wrong offset!");return n},Tt=function(t){if(w(t)&&bt in t)return t;throw V(t+" is not a typed array!")},Pt=function(t,e){if(!(w(t)&&yt in t))throw V("It is not a typed array constructor!");return new t(e)},Ot=function(t,e){return kt(A(t,t[mt]),e)},kt=function(t,e){for(var n=0,r=e.length,o=Pt(t,r);r>n;)o[n]=e[n++];return o},Ct=function(t,e,n){z(t,e,{get:function(){return this._d[n]}})},Nt=function(t){var e,n,r,o,i,a,u=x(t),c=arguments.length,s=c>1?arguments[1]:void 0,f=void 0!==s,p=O(u);if(void 0!=p&&!E(p)){for(a=p.call(u),r=[],e=0;!(i=a.next()).done;e++)r.push(i.value);u=r}for(f&&c>2&&(s=l(s,arguments[2],2)),e=0,n=v(u.length),o=Pt(this,n);n>e;e++)o[e]=f?s(u[e],e):u[e];return o},Rt=function(){for(var t=0,e=arguments.length,n=Pt(this,e);e>t;)n[t]=arguments[t++];return n},At=!!q&&i(function(){dt.call(new q(1))}),Mt=function(){return dt.apply(At?ft.call(Tt(this)):Tt(this),arguments)},jt={copyWithin:function(t,e){return D.call(Tt(this),t,e,arguments.length>2?arguments[2]:void 0)},every:function(t){return J(Tt(this),t,arguments.length>1?arguments[1]:void 0)},fill:function(t){return F.apply(Tt(this),arguments)},filter:function(t){return Ot(this,K(Tt(this),t,arguments.length>1?arguments[1]:void 0))},find:function(t){return Z(Tt(this),t,arguments.length>1?arguments[1]:void 0)},findIndex:function(t){return tt(Tt(this),t,arguments.length>1?arguments[1]:void 0)},forEach:function(t){Q(Tt(this),t,arguments.length>1?arguments[1]:void 0)},indexOf:function(t){return nt(Tt(this),t,arguments.length>1?arguments[1]:void 0)},includes:function(t){return et(Tt(this),t,arguments.length>1?arguments[1]:void 0)},join:function(t){return lt.apply(Tt(this),arguments)},lastIndexOf:function(t){return at.apply(Tt(this),arguments)},map:function(t){return wt(Tt(this),t,arguments.length>1?arguments[1]:void 0)},reduce:function(t){return ut.apply(Tt(this),arguments)},reduceRight:function(t){return ct.apply(Tt(this),arguments)},reverse:function(){for(var t,e=Tt(this).length,n=Math.floor(e/2),r=0;r<n;)t=this[r],this[r++]=this[--e],this[e]=t;return this},some:function(t){return X(Tt(this),t,arguments.length>1?arguments[1]:void 0)},sort:function(t){return st.call(Tt(this),t)},subarray:function(t,e){var n=Tt(this),r=n.length,o=m(t,r);return new(A(n,n[mt]))(n.buffer,n.byteOffset+o*n.BYTES_PER_ELEMENT,v((void 0===e?r:m(e,r))-o))}},Lt=function(t,e){return Ot(this,ft.call(Tt(this),t,e))},It=function(t){Tt(this);var e=St(arguments[1],1),n=this.length,r=x(t),o=v(r.length),i=0;if(o+e>n)throw H("Wrong length!");for(;i<o;)this[e+i]=r[i++]},Ft={entries:function(){return it.call(Tt(this))},keys:function(){return ot.call(Tt(this))},values:function(){return rt.call(Tt(this))}},Dt=function(t,e){return w(t)&&t[bt]&&"symbol"!=typeof e&&e in t&&String(+e)==String(e)},Ut=function(t,e){return Dt(t,e=g(e,!0))?f(2,t[e]):W(t,e)},Bt=function(t,e,n){return!(Dt(t,e=g(e,!0))&&w(n)&&b(n,"value"))||b(n,"get")||b(n,"set")||n.configurable||b(n,"writable")&&!n.writable||b(n,"enumerable")&&!n.enumerable?z(t,e,n):(t[e]=n.value,t)};gt||(B.f=Ut,U.f=Bt),a(a.S+a.F*!gt,"Object",{getOwnPropertyDescriptor:Ut,defineProperty:Bt}),i(function(){pt.call({})})&&(pt=dt=function(){return lt.call(this)});var zt=d({},jt);d(zt,Ft),p(zt,ht,Ft.values),d(zt,{slice:Lt,set:It,constructor:function(){},toString:pt,toLocaleString:Mt}),Ct(zt,"buffer","b"),Ct(zt,"byteOffset","o"),Ct(zt,"byteLength","l"),Ct(zt,"length","e"),z(zt,vt,{get:function(){return this[bt]}}),t.exports=function(t,e,n,c){var l=t+((c=!!c)?"Clamped":"")+"Array",f="get"+t,d="set"+t,h=o[l],m=h||{},g=h&&T(h),b=!h||!u.ABV,x={},E=h&&h.prototype,O=function(t,n){z(t,n,{get:function(){return function(t,n){var r=t._d;return r.v[f](n*e+r.o,xt)}(this,n)},set:function(t){return function(t,n,r){var o=t._d;c&&(r=(r=Math.round(r))<0?0:r>255?255:255&r),o.v[d](n*e+o.o,r,xt)}(this,n,t)},enumerable:!0})};b?(h=n(function(t,n,r,o){s(t,h,l,"_d");var i,a,u,c,f=0,d=0;if(w(n)){if(!(n instanceof Y||"ArrayBuffer"==(c=_(n))||"SharedArrayBuffer"==c))return bt in n?kt(h,n):Nt.call(h,n);i=n,d=St(r,e);var m=n.byteLength;if(void 0===o){if(m%e)throw H("Wrong length!");if((a=m-d)<0)throw H("Wrong length!")}else if((a=v(o)*e)+d>m)throw H("Wrong length!");u=a/e}else u=y(n),i=new Y(a=u*e);for(p(t,"_d",{b:i,o:d,l:a,e:u,v:new $(i)});f<u;)O(t,f++)}),E=h.prototype=S(zt),p(E,"constructor",h)):i(function(){h(1)})&&i(function(){new h(-1)})&&L(function(t){new h,new h(null),new h(1.5),new h(t)},!0)||(h=n(function(t,n,r,o){var i;return s(t,h,l),w(n)?n instanceof Y||"ArrayBuffer"==(i=_(n))||"SharedArrayBuffer"==i?void 0!==o?new m(n,St(r,e),o):void 0!==r?new m(n,St(r,e)):new m(n):bt in n?kt(h,n):Nt.call(h,n):new m(y(n))}),Q(g!==Function.prototype?P(m).concat(P(g)):P(m),function(t){t in h||p(h,t,m[t])}),h.prototype=E,r||(E.constructor=h));var k=E[ht],C=!!k&&("values"==k.name||void 0==k.name),N=Ft.values;p(h,yt,!0),p(E,bt,l),p(E,_t,!0),p(E,mt,h),(c?new h(1)[vt]==l:vt in E)||z(E,vt,{get:function(){return l}}),x[l]=h,a(a.G+a.W+a.F*(h!=m),x),a(a.S,l,{BYTES_PER_ELEMENT:e}),a(a.S+a.F*i(function(){m.of.call(h,1)}),l,{from:Nt,of:Rt}),"BYTES_PER_ELEMENT"in E||p(E,"BYTES_PER_ELEMENT",e),a(a.P,l,jt),I(l),a(a.P+a.F*Et,l,{set:It}),a(a.P+a.F*!C,l,Ft),r||E.toString==pt||(E.toString=pt),a(a.P+a.F*i(function(){new h(1).slice()}),l,{slice:Lt}),a(a.P+a.F*(i(function(){return[1,2].toLocaleString()!=new h([1,2]).toLocaleString()})||!i(function(){E.toLocaleString.call([1,2])})),l,{toLocaleString:Mt}),j[l]=C?k:N,r||C||p(E,ht,N)}}else t.exports=function(){}},function(t,e,n){var r=n(5)("unscopables"),o=Array.prototype;void 0==o[r]&&n(14)(o,r,{}),t.exports=function(t){o[r][t]=!0}},function(t,e){t.exports=!1},function(t,e,n){var r=n(42)("meta"),o=n(4),i=n(19),a=n(7).f,u=0,c=Object.isExtensible||function(){return!0},l=!n(3)(function(){return c(Object.preventExtensions({}))}),s=function(t){a(t,r,{value:{i:"O"+ ++u,w:{}}})},f=t.exports={KEY:r,NEED:!1,fastKey:function(t,e){if(!o(t))return"symbol"==typeof t?t:("string"==typeof t?"S":"P")+t;if(!i(t,r)){if(!c(t))return"F";if(!e)return"E";s(t)}return t[r].i},getWeak:function(t,e){if(!i(t,r)){if(!c(t))return!0;if(!e)return!1;s(t)}return t[r].w},onFreeze:function(t){return l&&f.NEED&&c(t)&&!i(t,r)&&s(t),t}}},function(t,e,n){var r=n(13);t.exports=function(t,e,n){for(var o in e)r(t,o,e[o],n);return t}},function(t,e,n){var r=n(22),o=n(127),i=n(84),a=n(1),u=n(6),c=n(82),l={},s={};(e=t.exports=function(t,e,n,f,p){var d,h,v,y,m=p?function(){return t}:c(t),g=r(n,f,e?2:1),b=0;if("function"!=typeof m)throw TypeError(t+" is not iterable!");if(i(m)){for(d=u(t.length);d>b;b++)if((y=e?g(a(h=t[b])[0],h[1]):g(t[b]))===l||y===s)return y}else for(v=m.call(t);!(h=v.next()).done;)if((y=o(v,g,h.value,e))===l||y===s)return y}).BREAK=l,e.RETURN=s},function(t,e){t.exports=function(t,e,n,r){if(!(t instanceof e)||void 0!==r&&r in t)throw TypeError(n+": incorrect invocation!");return t}},function(t,e,n){"use strict";var r=n(2),o=n(7),i=n(8),a=n(5)("species");t.exports=function(t){var e=r[t];i&&e&&!e[a]&&o.f(e,a,{configurable:!0,get:function(){return this}})}},function(t,e,n){var r=n(139),o=n(97).concat("length","prototype");e.f=Object.getOwnPropertyNames||function(t){return r(t,o)}},function(t,e,n){var r=n(1),o=n(138),i=n(97),a=n(98)("IE_PROTO"),u=function(){},c=function(){var t,e=n(100)("iframe"),r=i.length;for(e.style.display="none",n(96).appendChild(e),e.src="javascript:",(t=e.contentWindow.document).open(),t.write("<script>document.F=Object<\/script>"),t.close(),c=t.F;r--;)delete c.prototype[i[r]];return c()};t.exports=Object.create||function(t,e){var n;return null!==t?(u.prototype=r(t),n=new u,u.prototype=null,n[a]=t):n=c(),void 0===e?n:o(n,e)}},function(t,e,n){var r=n(26),o=Math.max,i=Math.min;t.exports=function(t,e){return(t=r(t))<0?o(t+e,0):i(t,e)}},function(t,e,n){var r=n(139),o=n(97);t.exports=Object.keys||function(t){return r(t,o)}},function(t,e){var n=0,r=Math.random();t.exports=function(t){return"Symbol(".concat(void 0===t?"":t,")_",(++n+r).toString(36))}},function(t,e){t.exports=function(t,e){return{enumerable:!(1&t),configurable:!(2&t),writable:!(4&t),value:e}}},function(t,e,n){"use strict";n.r(e);var r=n(10),o=n(15),i=n.n(o),a=i.a.shape({trySubscribe:i.a.func.isRequired,tryUnsubscribe:i.a.func.isRequired,notifyNestedSubs:i.a.func.isRequired,isSubscribed:i.a.func.isRequired}),u=i.a.shape({subscribe:i.a.func.isRequired,dispatch:i.a.func.isRequired,getState:i.a.func.isRequired});function c(){var t,e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:"store",n=arguments[1]||e+"Subscription",o=function(t){function o(n,r){!function(t,e){if(!(t instanceof e))throw new TypeError("Cannot call a class as a function")}(this,o);var i=function(t,e){if(!t)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return!e||"object"!=typeof e&&"function"!=typeof e?t:e}(this,t.call(this,n,r));return i[e]=n.store,i}return function(t,e){if("function"!=typeof e&&null!==e)throw new TypeError("Super expression must either be null or a function, not "+typeof e);t.prototype=Object.create(e&&e.prototype,{constructor:{value:t,enumerable:!1,writable:!0,configurable:!0}}),e&&(Object.setPrototypeOf?Object.setPrototypeOf(t,e):t.__proto__=e)}(o,t),o.prototype.getChildContext=function(){var t;return(t={})[e]=this[e],t[n]=null,t},o.prototype.render=function(){return r.Children.only(this.props.children)},o}(r.Component);return o.propTypes={store:u.isRequired,children:i.a.element.isRequired},o.childContextTypes=((t={})[e]=u.isRequired,t[n]=a,t),o}var l=c(),s=n(143),f=n.n(s),p=n(69),d=n.n(p);var h=null,v={notify:function(){}};var y=function(){function t(e,n,r){!function(t,e){if(!(t instanceof e))throw new TypeError("Cannot call a class as a function")}(this,t),this.store=e,this.parentSub=n,this.onStateChange=r,this.unsubscribe=null,this.listeners=v}return t.prototype.addNestedSub=function(t){return this.trySubscribe(),this.listeners.subscribe(t)},t.prototype.notifyNestedSubs=function(){this.listeners.notify()},t.prototype.isSubscribed=function(){return Boolean(this.unsubscribe)},t.prototype.trySubscribe=function(){var t,e;this.unsubscribe||(this.unsubscribe=this.parentSub?this.parentSub.addNestedSub(this.onStateChange):this.store.subscribe(this.onStateChange),this.listeners=(t=[],e=[],{clear:function(){e=h,t=h},notify:function(){for(var n=t=e,r=0;r<n.length;r++)n[r]()},get:function(){return e},subscribe:function(n){var r=!0;return e===t&&(e=t.slice()),e.push(n),function(){r&&t!==h&&(r=!1,e===t&&(e=t.slice()),e.splice(e.indexOf(n),1))}}}))},t.prototype.tryUnsubscribe=function(){this.unsubscribe&&(this.unsubscribe(),this.unsubscribe=null,this.listeners.clear(),this.listeners=v)},t}(),m=Object.assign||function(t){for(var e=1;e<arguments.length;e++){var n=arguments[e];for(var r in n)Object.prototype.hasOwnProperty.call(n,r)&&(t[r]=n[r])}return t};var g=0,b={};function _(){}function w(t){var e,n,o=arguments.length>1&&void 0!==arguments[1]?arguments[1]:{},i=o.getDisplayName,c=void 0===i?function(t){return"ConnectAdvanced("+t+")"}:i,l=o.methodName,s=void 0===l?"connectAdvanced":l,p=o.renderCountProp,h=void 0===p?void 0:p,v=o.shouldHandleStateChanges,w=void 0===v||v,x=o.storeKey,E=void 0===x?"store":x,S=o.withRef,T=void 0!==S&&S,P=function(t,e){var n={};for(var r in t)e.indexOf(r)>=0||Object.prototype.hasOwnProperty.call(t,r)&&(n[r]=t[r]);return n}(o,["getDisplayName","methodName","renderCountProp","shouldHandleStateChanges","storeKey","withRef"]),O=E+"Subscription",k=g++,C=((e={})[E]=u,e[O]=a,e),N=((n={})[O]=a,n);return function(e){d()("function"==typeof e,"You must pass a component to the function returned by "+s+". Instead received "+JSON.stringify(e));var n=e.displayName||e.name||"Component",o=c(n),i=m({},P,{getDisplayName:c,methodName:s,renderCountProp:h,shouldHandleStateChanges:w,storeKey:E,withRef:T,displayName:o,wrappedComponentName:n,WrappedComponent:e}),a=function(n){function a(t,e){!function(t,e){if(!(t instanceof e))throw new TypeError("Cannot call a class as a function")}(this,a);var r=function(t,e){if(!t)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return!e||"object"!=typeof e&&"function"!=typeof e?t:e}(this,n.call(this,t,e));return r.version=k,r.state={},r.renderCount=0,r.store=t[E]||e[E],r.propsMode=Boolean(t[E]),r.setWrappedInstance=r.setWrappedInstance.bind(r),d()(r.store,'Could not find "'+E+'" in either the context or props of "'+o+'". Either wrap the root component in a <Provider>, or explicitly pass "'+E+'" as a prop to "'+o+'".'),r.initSelector(),r.initSubscription(),r}return function(t,e){if("function"!=typeof e&&null!==e)throw new TypeError("Super expression must either be null or a function, not "+typeof e);t.prototype=Object.create(e&&e.prototype,{constructor:{value:t,enumerable:!1,writable:!0,configurable:!0}}),e&&(Object.setPrototypeOf?Object.setPrototypeOf(t,e):t.__proto__=e)}(a,n),a.prototype.getChildContext=function(){var t,e=this.propsMode?null:this.subscription;return(t={})[O]=e||this.context[O],t},a.prototype.componentDidMount=function(){w&&(this.subscription.trySubscribe(),this.selector.run(this.props),this.selector.shouldComponentUpdate&&this.forceUpdate())},a.prototype.componentWillReceiveProps=function(t){this.selector.run(t)},a.prototype.shouldComponentUpdate=function(){return this.selector.shouldComponentUpdate},a.prototype.componentWillUnmount=function(){this.subscription&&this.subscription.tryUnsubscribe(),this.subscription=null,this.notifyNestedSubs=_,this.store=null,this.selector.run=_,this.selector.shouldComponentUpdate=!1},a.prototype.getWrappedInstance=function(){return d()(T,"To access the wrapped instance, you need to specify { withRef: true } in the options argument of the "+s+"() call."),this.wrappedInstance},a.prototype.setWrappedInstance=function(t){this.wrappedInstance=t},a.prototype.initSelector=function(){var e=t(this.store.dispatch,i);this.selector=function(t,e){var n={run:function(r){try{var o=t(e.getState(),r);(o!==n.props||n.error)&&(n.shouldComponentUpdate=!0,n.props=o,n.error=null)}catch(t){n.shouldComponentUpdate=!0,n.error=t}}};return n}(e,this.store),this.selector.run(this.props)},a.prototype.initSubscription=function(){if(w){var t=(this.propsMode?this.props:this.context)[O];this.subscription=new y(this.store,t,this.onStateChange.bind(this)),this.notifyNestedSubs=this.subscription.notifyNestedSubs.bind(this.subscription)}},a.prototype.onStateChange=function(){this.selector.run(this.props),this.selector.shouldComponentUpdate?(this.componentDidUpdate=this.notifyNestedSubsOnComponentDidUpdate,this.setState(b)):this.notifyNestedSubs()},a.prototype.notifyNestedSubsOnComponentDidUpdate=function(){this.componentDidUpdate=void 0,this.notifyNestedSubs()},a.prototype.isSubscribed=function(){return Boolean(this.subscription)&&this.subscription.isSubscribed()},a.prototype.addExtraProps=function(t){if(!(T||h||this.propsMode&&this.subscription))return t;var e=m({},t);return T&&(e.ref=this.setWrappedInstance),h&&(e[h]=this.renderCount++),this.propsMode&&this.subscription&&(e[O]=this.subscription),e},a.prototype.render=function(){var t=this.selector;if(t.shouldComponentUpdate=!1,t.error)throw t.error;return Object(r.createElement)(e,this.addExtraProps(t.props))},a}(r.Component);return a.WrappedComponent=e,a.displayName=o,a.childContextTypes=N,a.contextTypes=C,a.propTypes=C,f()(a,e)}}var x=Object.prototype.hasOwnProperty;function E(t,e){return t===e?0!==t||0!==e||1/t==1/e:t!=t&&e!=e}function S(t,e){if(E(t,e))return!0;if("object"!=typeof t||null===t||"object"!=typeof e||null===e)return!1;var n=Object.keys(t),r=Object.keys(e);if(n.length!==r.length)return!1;for(var o=0;o<n.length;o++)if(!x.call(e,n[o])||!E(t[n[o]],e[n[o]]))return!1;return!0}var T=n(101),P=n(389),O="object"==typeof self&&self&&self.Object===Object&&self,k=(P.a||O||Function("return this")()).Symbol,C=Object.prototype;C.hasOwnProperty,C.toString,k&&k.toStringTag;Object.prototype.toString;k&&k.toStringTag;Object.getPrototypeOf,Object;var N=Function.prototype,R=Object.prototype,A=N.toString;R.hasOwnProperty,A.call(Object);function M(t){return function(e,n){var r=t(e,n);function o(){return r}return o.dependsOnOwnProps=!1,o}}function j(t){return null!==t.dependsOnOwnProps&&void 0!==t.dependsOnOwnProps?Boolean(t.dependsOnOwnProps):1!==t.length}function L(t,e){return function(e,n){n.displayName;var r=function(t,e){return r.dependsOnOwnProps?r.mapToProps(t,e):r.mapToProps(t)};return r.dependsOnOwnProps=!0,r.mapToProps=function(e,n){r.mapToProps=t,r.dependsOnOwnProps=j(t);var o=r(e,n);return"function"==typeof o&&(r.mapToProps=o,r.dependsOnOwnProps=j(o),o=r(e,n)),o},r}}var I=[function(t){return"function"==typeof t?L(t):void 0},function(t){return t?void 0:M(function(t){return{dispatch:t}})},function(t){return t&&"object"==typeof t?M(function(e){return Object(T.bindActionCreators)(t,e)}):void 0}];var F=[function(t){return"function"==typeof t?L(t):void 0},function(t){return t?void 0:M(function(){return{}})}],D=Object.assign||function(t){for(var e=1;e<arguments.length;e++){var n=arguments[e];for(var r in n)Object.prototype.hasOwnProperty.call(n,r)&&(t[r]=n[r])}return t};function U(t,e,n){return D({},n,t,e)}var B=[function(t){return"function"==typeof t?function(t){return function(e,n){n.displayName;var r=n.pure,o=n.areMergedPropsEqual,i=!1,a=void 0;return function(e,n,u){var c=t(e,n,u);return i?r&&o(c,a)||(a=c):(i=!0,a=c),a}}}(t):void 0},function(t){return t?void 0:function(){return U}}];function z(t,e,n,r){return function(o,i){return n(t(o,i),e(r,i),i)}}function W(t,e,n,r,o){var i=o.areStatesEqual,a=o.areOwnPropsEqual,u=o.areStatePropsEqual,c=!1,l=void 0,s=void 0,f=void 0,p=void 0,d=void 0;function h(o,c){var h,v,y=!a(c,s),m=!i(o,l);return l=o,s=c,y&&m?(f=t(l,s),e.dependsOnOwnProps&&(p=e(r,s)),d=n(f,p,s)):y?(t.dependsOnOwnProps&&(f=t(l,s)),e.dependsOnOwnProps&&(p=e(r,s)),d=n(f,p,s)):m?(h=t(l,s),v=!u(h,f),f=h,v&&(d=n(f,p,s)),d):d}return function(o,i){return c?h(o,i):(f=t(l=o,s=i),p=e(r,s),d=n(f,p,s),c=!0,d)}}function H(t,e){var n=e.initMapStateToProps,r=e.initMapDispatchToProps,o=e.initMergeProps,i=function(t,e){var n={};for(var r in t)e.indexOf(r)>=0||Object.prototype.hasOwnProperty.call(t,r)&&(n[r]=t[r]);return n}(e,["initMapStateToProps","initMapDispatchToProps","initMergeProps"]),a=n(t,i),u=r(t,i),c=o(t,i);return(i.pure?W:z)(a,u,c,t,i)}var V=Object.assign||function(t){for(var e=1;e<arguments.length;e++){var n=arguments[e];for(var r in n)Object.prototype.hasOwnProperty.call(n,r)&&(t[r]=n[r])}return t};function q(t,e,n){for(var r=e.length-1;r>=0;r--){var o=e[r](t);if(o)return o}return function(e,r){throw new Error("Invalid value of type "+typeof t+" for "+n+" argument when connecting component "+r.wrappedComponentName+".")}}function G(t,e){return t===e}var Y=function(){var t=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{},e=t.connectHOC,n=void 0===e?w:e,r=t.mapStateToPropsFactories,o=void 0===r?F:r,i=t.mapDispatchToPropsFactories,a=void 0===i?I:i,u=t.mergePropsFactories,c=void 0===u?B:u,l=t.selectorFactory,s=void 0===l?H:l;return function(t,e,r){var i=arguments.length>3&&void 0!==arguments[3]?arguments[3]:{},u=i.pure,l=void 0===u||u,f=i.areStatesEqual,p=void 0===f?G:f,d=i.areOwnPropsEqual,h=void 0===d?S:d,v=i.areStatePropsEqual,y=void 0===v?S:v,m=i.areMergedPropsEqual,g=void 0===m?S:m,b=function(t,e){var n={};for(var r in t)e.indexOf(r)>=0||Object.prototype.hasOwnProperty.call(t,r)&&(n[r]=t[r]);return n}(i,["pure","areStatesEqual","areOwnPropsEqual","areStatePropsEqual","areMergedPropsEqual"]),_=q(t,o,"mapStateToProps"),w=q(e,a,"mapDispatchToProps"),x=q(r,c,"mergeProps");return n(s,V({methodName:"connect",getDisplayName:function(t){return"Connect("+t+")"},shouldHandleStateChanges:Boolean(t),initMapStateToProps:_,initMapDispatchToProps:w,initMergeProps:x,pure:l,areStatesEqual:p,areOwnPropsEqual:h,areStatePropsEqual:y,areMergedPropsEqual:g},b))}}();n.d(e,"Provider",function(){return l}),n.d(e,"createProvider",function(){return c}),n.d(e,"connectAdvanced",function(){return w}),n.d(e,"connect",function(){return Y})},function(t,e,n){var r=n(4);t.exports=function(t,e){if(!r(t)||t._t!==e)throw TypeError("Incompatible receiver, "+e+" required!");return t}},function(t,e){t.exports={}},function(t,e,n){var r=n(0),o=n(27),i=n(3),a=n(94),u="["+a+"]",c=RegExp("^"+u+u+"*"),l=RegExp(u+u+"*$"),s=function(t,e,n){var o={},u=i(function(){return!!a[t]()||"​"!="​"[t]()}),c=o[t]=u?e(f):a[t];n&&(o[n]=c),r(r.P+r.F*u,"String",o)},f=s.trim=function(t,e){return t=String(o(t)),1&e&&(t=t.replace(c,"")),2&e&&(t=t.replace(l,"")),t};t.exports=s},function(t,e,n){var r=n(7).f,o=n(19),i=n(5)("toStringTag");t.exports=function(t,e,n){t&&!o(t=n?t:t.prototype,i)&&r(t,i,{configurable:!0,value:e})}},function(t,e,n){"use strict";Object.defineProperty(e,"__esModule",{value:!0}),e.requestPropertyData=e.requestList=e.HIDE_PROPERTY_PANEL=e.SHOW_PROPERTY_PANEL=e.PROPERTY_DATA_FAILED=e.PROPERTY_DATA_SUCCESS=e.PROPERTY_DATA_REQUEST=e.LIST_REQUEST_FAILED=e.LIST_REQUEST_SUCCESS=e.LIST_REQUEST=void 0;n(104);var r=e.LIST_REQUEST="LIST_REQUEST",o=e.LIST_REQUEST_SUCCESS="LIST_REQUEST_SUCCESS",i=e.LIST_REQUEST_FAILED="LIST_REQUEST_FAILED",a=e.PROPERTY_DATA_REQUEST="PROPERTY_DATA_REQUEST",u=e.PROPERTY_DATA_SUCCESS="PROPERTY_DATA_SUCCESS",c=e.PROPERTY_DATA_FAILED="PROPERTY_DATA_FAILED";e.SHOW_PROPERTY_PANEL="SHOW_PROPERTY_PANEL",e.HIDE_PROPERTY_PANEL="HIDE_PROPERTY_PANEL",e.requestList=function(t,e){return n=regeneratorRuntime.mark(function n(a){return regeneratorRuntime.wrap(function(n){for(;;)switch(n.prev=n.next){case 0:a({type:r}),fetch("/list",{headers:{Accept:"application/json","Content-Type":"application/json"},method:"post",credentials:"same-origin",body:JSON.stringify({price:t,type:e})}).then(function(t){return t.json()},function(t){console.error(t),a({type:i})}).then(function(t){a({type:o,list:t})});case 2:case"end":return n.stop()}},n,void 0)}),a=function(){var t=n.apply(this,arguments);return new Promise(function(e,n){return function r(o,i){try{var a=t[o](i),u=a.value}catch(t){return void n(t)}if(!a.done)return Promise.resolve(u).then(function(t){r("next",t)},function(t){r("throw",t)});e(u)}("next")})},function(t){return a.apply(this,arguments)};var n,a},e.requestPropertyData=function(t){return function(e){e({type:a}),fetch("/property",{headers:{Accept:"application/json","Content-Type":"application/json"},method:"post",credentials:"same-origin",body:JSON.stringify({id:t})}).then(function(t){return t.json()},function(t){console.error(t),e({type:c})}).then(function(t){console.log(t),e({type:u,data:t})})}}},function(t,e,n){var r=n(21),o=n(5)("toStringTag"),i="Arguments"==r(function(){return arguments}());t.exports=function(t){var e,n,a;return void 0===t?"Undefined":null===t?"Null":"string"==typeof(n=function(t,e){try{return t[e]}catch(t){}}(e=Object(t),o))?n:i?r(e):"Object"==(a=r(e))&&"function"==typeof e.callee?"Arguments":a}},function(t,e){e.f={}.propertyIsEnumerable},function(t,e,n){var r=n(21);t.exports=Object("z").propertyIsEnumerable(0)?Object:function(t){return"String"==r(t)?t.split(""):Object(t)}},function(t,e,n){"use strict";var r=n(0),o=n(11),i=n(22),a=n(35);t.exports=function(t){r(r.S,t,{from:function(t){var e,n,r,u,c=arguments[1];return o(this),(e=void 0!==c)&&o(c),void 0==t?new this:(n=[],e?(r=0,u=i(c,arguments[2],2),a(t,!1,function(t){n.push(u(t,r++))})):a(t,!1,n.push,n),new this(n))}})}},function(t,e,n){"use strict";var r=n(0);t.exports=function(t){r(r.S,t,{of:function(){for(var t=arguments.length,e=new Array(t);t--;)e[t]=arguments[t];return new this(e)}})}},function(t,e,n){"use strict";t.exports=n(32)||!n(3)(function(){var t=Math.random();__defineSetter__.call(null,t,function(){}),delete n(2)[t]})},function(t,e,n){for(var r,o=n(2),i=n(14),a=n(42),u=a("typed_array"),c=a("view"),l=!(!o.ArrayBuffer||!o.DataView),s=l,f=0,p="Int8Array,Uint8Array,Uint8ClampedArray,Int16Array,Uint16Array,Int32Array,Uint32Array,Float32Array,Float64Array".split(",");f<9;)(r=o[p[f++]])?(i(r.prototype,u,!0),i(r.prototype,c,!0)):s=!1;t.exports={ABV:l,CONSTR:s,TYPED:u,VIEW:c}},function(t,e,n){"use strict";var r=n(2),o=n(0),i=n(13),a=n(34),u=n(33),c=n(35),l=n(36),s=n(4),f=n(3),p=n(62),d=n(48),h=n(93);t.exports=function(t,e,n,v,y,m){var g=r[t],b=g,_=y?"set":"add",w=b&&b.prototype,x={},E=function(t){var e=w[t];i(w,t,"delete"==t?function(t){return!(m&&!s(t))&&e.call(this,0===t?0:t)}:"has"==t?function(t){return!(m&&!s(t))&&e.call(this,0===t?0:t)}:"get"==t?function(t){return m&&!s(t)?void 0:e.call(this,0===t?0:t)}:"add"==t?function(t){return e.call(this,0===t?0:t),this}:function(t,n){return e.call(this,0===t?0:t,n),this})};if("function"==typeof b&&(m||w.forEach&&!f(function(){(new b).entries().next()}))){var S=new b,T=S[_](m?{}:-0,1)!=S,P=f(function(){S.has(1)}),O=p(function(t){new b(t)}),k=!m&&f(function(){for(var t=new b,e=5;e--;)t[_](e,e);return!t.has(-0)});O||((b=e(function(e,n){l(e,b,t);var r=h(new g,e,b);return void 0!=n&&c(n,y,r[_],r),r})).prototype=w,w.constructor=b),(P||k)&&(E("delete"),E("has"),y&&E("get")),(k||T)&&E(_),m&&w.clear&&delete w.clear}else b=v.getConstructor(e,t,y,_),a(b.prototype,n),u.NEED=!0;return d(b,t),x[t]=b,o(o.G+o.W+o.F*(b!=g),x),m||v.setStrong(b,t,y),b}},function(t,e,n){var r=n(2).navigator;t.exports=r&&r.userAgent||""},function(t,e,n){var r=n(1),o=n(11),i=n(5)("species");t.exports=function(t,e){var n,a=r(t).constructor;return void 0===a||void 0==(n=r(a)[i])?e:o(n)}},function(t,e,n){"use strict";var r=n(14),o=n(13),i=n(3),a=n(27),u=n(5);t.exports=function(t,e,n){var c=u(t),l=n(a,c,""[t]),s=l[0],f=l[1];i(function(){var e={};return e[c]=function(){return 7},7!=""[t](e)})&&(o(String.prototype,t,s),r(RegExp.prototype,c,2==e?function(t,e){return f.call(t,this,e)}:function(t){return f.call(t,this)}))}},function(t,e,n){"use strict";var r=n(1);t.exports=function(){var t=r(this),e="";return t.global&&(e+="g"),t.ignoreCase&&(e+="i"),t.multiline&&(e+="m"),t.unicode&&(e+="u"),t.sticky&&(e+="y"),e}},function(t,e,n){var r=n(5)("iterator"),o=!1;try{var i=[7][r]();i.return=function(){o=!0},Array.from(i,function(){throw 2})}catch(t){}t.exports=function(t,e){if(!e&&!o)return!1;var n=!1;try{var i=[7],a=i[r]();a.next=function(){return{done:n=!0}},i[r]=function(){return a},t(i)}catch(t){}return n}},function(t,e,n){var r=n(4),o=n(21),i=n(5)("match");t.exports=function(t){var e;return r(t)&&(void 0!==(e=t[i])?!!e:"RegExp"==o(t))}},function(t,e,n){var r=n(21);t.exports=Array.isArray||function(t){return"Array"==r(t)}},function(t,e){e.f=Object.getOwnPropertySymbols},function(t,e,n){var r=n(18),o=n(6),i=n(40);t.exports=function(t){return function(e,n,a){var u,c=r(e),l=o(c.length),s=i(a,l);if(t&&n!=n){for(;l>s;)if((u=c[s++])!=u)return!0}else for(;l>s;s++)if((t||s in c)&&c[s]===n)return t||s||0;return!t&&-1}}},function(t,e,n){var r=n(23),o=n(2),i=o["__core-js_shared__"]||(o["__core-js_shared__"]={});(t.exports=function(t,e){return i[t]||(i[t]=void 0!==e?e:{})})("versions",[]).push({version:r.version,mode:n(32)?"pure":"global",copyright:"© 2018 Denis Pushkarev (zloirock.ru)"})},function(t,e){var n;n=function(){return this}();try{n=n||Function("return this")()||(0,eval)("this")}catch(t){"object"==typeof window&&(n=window)}t.exports=n},function(t,e,n){"use strict";t.exports=function(t,e,n,r,o,i,a,u){if(!t){var c;if(void 0===e)c=new Error("Minified exception occurred; use the non-minified dev environment for the full error message and additional helpful warnings.");else{var l=[n,r,o,i,a,u],s=0;(c=new Error(e.replace(/%s/g,function(){return l[s++]}))).name="Invariant Violation"}throw c.framesToPop=1,c}}},function(t,e,n){var r,o,i={},a=(r=function(){return window&&document&&document.all&&!window.atob},function(){return void 0===o&&(o=r.apply(this,arguments)),o}),u=function(t){var e={};return function(t){if("function"==typeof t)return t();if(void 0===e[t]){var n=function(t){return document.querySelector(t)}.call(this,t);if(window.HTMLIFrameElement&&n instanceof window.HTMLIFrameElement)try{n=n.contentDocument.head}catch(t){n=null}e[t]=n}return e[t]}}(),c=null,l=0,s=[],f=n(168);function p(t,e){for(var n=0;n<t.length;n++){var r=t[n],o=i[r.id];if(o){o.refs++;for(var a=0;a<o.parts.length;a++)o.parts[a](r.parts[a]);for(;a<r.parts.length;a++)o.parts.push(g(r.parts[a],e))}else{var u=[];for(a=0;a<r.parts.length;a++)u.push(g(r.parts[a],e));i[r.id]={id:r.id,refs:1,parts:u}}}}function d(t,e){for(var n=[],r={},o=0;o<t.length;o++){var i=t[o],a=e.base?i[0]+e.base:i[0],u={css:i[1],media:i[2],sourceMap:i[3]};r[a]?r[a].parts.push(u):n.push(r[a]={id:a,parts:[u]})}return n}function h(t,e){var n=u(t.insertInto);if(!n)throw new Error("Couldn't find a style target. This probably means that the value for the 'insertInto' parameter is invalid.");var r=s[s.length-1];if("top"===t.insertAt)r?r.nextSibling?n.insertBefore(e,r.nextSibling):n.appendChild(e):n.insertBefore(e,n.firstChild),s.push(e);else if("bottom"===t.insertAt)n.appendChild(e);else{if("object"!=typeof t.insertAt||!t.insertAt.before)throw new Error("[Style Loader]\n\n Invalid value for parameter 'insertAt' ('options.insertAt') found.\n Must be 'top', 'bottom', or Object.\n (https://github.com/webpack-contrib/style-loader#insertat)\n");var o=u(t.insertInto+" "+t.insertAt.before);n.insertBefore(e,o)}}function v(t){if(null===t.parentNode)return!1;t.parentNode.removeChild(t);var e=s.indexOf(t);e>=0&&s.splice(e,1)}function y(t){var e=document.createElement("style");return void 0===t.attrs.type&&(t.attrs.type="text/css"),m(e,t.attrs),h(t,e),e}function m(t,e){Object.keys(e).forEach(function(n){t.setAttribute(n,e[n])})}function g(t,e){var n,r,o,i;if(e.transform&&t.css){if(!(i=e.transform(t.css)))return function(){};t.css=i}if(e.singleton){var a=l++;n=c||(c=y(e)),r=w.bind(null,n,a,!1),o=w.bind(null,n,a,!0)}else t.sourceMap&&"function"==typeof URL&&"function"==typeof URL.createObjectURL&&"function"==typeof URL.revokeObjectURL&&"function"==typeof Blob&&"function"==typeof btoa?(n=function(t){var e=document.createElement("link");return void 0===t.attrs.type&&(t.attrs.type="text/css"),t.attrs.rel="stylesheet",m(e,t.attrs),h(t,e),e}(e),r=function(t,e,n){var r=n.css,o=n.sourceMap,i=void 0===e.convertToAbsoluteUrls&&o;(e.convertToAbsoluteUrls||i)&&(r=f(r));o&&(r+="\n/*# sourceMappingURL=data:application/json;base64,"+btoa(unescape(encodeURIComponent(JSON.stringify(o))))+" */");var a=new Blob([r],{type:"text/css"}),u=t.href;t.href=URL.createObjectURL(a),u&&URL.revokeObjectURL(u)}.bind(null,n,e),o=function(){v(n),n.href&&URL.revokeObjectURL(n.href)}):(n=y(e),r=function(t,e){var n=e.css,r=e.media;r&&t.setAttribute("media",r);if(t.styleSheet)t.styleSheet.cssText=n;else{for(;t.firstChild;)t.removeChild(t.firstChild);t.appendChild(document.createTextNode(n))}}.bind(null,n),o=function(){v(n)});return r(t),function(e){if(e){if(e.css===t.css&&e.media===t.media&&e.sourceMap===t.sourceMap)return;r(t=e)}else o()}}t.exports=function(t,e){if("undefined"!=typeof DEBUG&&DEBUG&&"object"!=typeof document)throw new Error("The style-loader cannot be used in a non-browser environment");(e=e||{}).attrs="object"==typeof e.attrs?e.attrs:{},e.singleton||"boolean"==typeof e.singleton||(e.singleton=a()),e.insertInto||(e.insertInto="head"),e.insertAt||(e.insertAt="bottom");var n=d(t,e);return p(n,e),function(t){for(var r=[],o=0;o<n.length;o++){var a=n[o];(u=i[a.id]).refs--,r.push(u)}t&&p(d(t,e),e);for(o=0;o<r.length;o++){var u;if(0===(u=r[o]).refs){for(var c=0;c<u.parts.length;c++)u.parts[c]();delete i[u.id]}}}};var b,_=(b=[],function(t,e){return b[t]=e,b.filter(Boolean).join("\n")});function w(t,e,n,r){var o=n?"":r.css;if(t.styleSheet)t.styleSheet.cssText=_(e,o);else{var i=document.createTextNode(o),a=t.childNodes;a[e]&&t.removeChild(a[e]),a.length?t.insertBefore(i,a[e]):t.appendChild(i)}}},function(t,e){t.exports=function(t){var e=[];return e.toString=function(){return this.map(function(e){var n=function(t,e){var n=t[1]||"",r=t[3];if(!r)return n;if(e&&"function"==typeof btoa){var o=(a=r,"/*# sourceMappingURL=data:application/json;charset=utf-8;base64,"+btoa(unescape(encodeURIComponent(JSON.stringify(a))))+" */"),i=r.sources.map(function(t){return"/*# sourceURL="+r.sourceRoot+t+" */"});return[n].concat(i).concat([o]).join("\n")}var a;return[n].join("\n")}(e,t);return e[2]?"@media "+e[2]+"{"+n+"}":n}).join("")},e.i=function(t,n){"string"==typeof t&&(t=[[null,t,""]]);for(var r={},o=0;o<this.length;o++){var i=this[o][0];"number"==typeof i&&(r[i]=!0)}for(o=0;o<t.length;o++){var a=t[o];"number"==typeof a[0]&&r[a[0]]||(n&&!a[2]?a[2]=n:n&&(a[2]="("+a[2]+") and ("+n+")"),e.push(a))}},e}},function(t,e,n){"use strict";Object.defineProperty(e,"__esModule",{value:!0});var r=function(){function t(t,e){for(var n=0;n<e.length;n++){var r=e[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(t,r.key,r)}}return function(e,n,r){return n&&t(e.prototype,n),r&&t(e,r),e}}(),o=a(n(10)),i=a(n(171));function a(t){return t&&t.__esModule?t:{default:t}}var u=function(t){function e(t){!function(t,e){if(!(t instanceof e))throw new TypeError("Cannot call a class as a function")}(this,e);var n=function(t,e){if(!t)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return!e||"object"!=typeof e&&"function"!=typeof e?t:e}(this,(e.__proto__||Object.getPrototypeOf(e)).call(this,t));return n.state={isLoading:!0},n}return function(t,e){if("function"!=typeof e&&null!==e)throw new TypeError("Super expression must either be null or a function, not "+typeof e);t.prototype=Object.create(e&&e.prototype,{constructor:{value:t,enumerable:!1,writable:!0,configurable:!0}}),e&&(Object.setPrototypeOf?Object.setPrototypeOf(t,e):t.__proto__=e)}(e,o.default.Component),r(e,[{key:"render",value:function(){var t=this,e=this.state.isLoading,n=this.props,r=n.alt,a=n.src;return o.default.createElement(o.default.Fragment,null,o.default.createElement("img",{src:i.default,style:{visibility:e?"visible":"hidden",width:"50px"}}),o.default.createElement("img",{src:a,alt:r,style:{visibility:e?"hidden":"visible"},onLoad:function(){return t.setState({isLoading:!1})}}))}}]),e}();e.default=u},function(t,e,n){"use strict";function r(t){return function(){return t}}var o=function(){};o.thatReturns=r,o.thatReturnsFalse=r(!1),o.thatReturnsTrue=r(!0),o.thatReturnsNull=r(null),o.thatReturnsThis=function(){return this},o.thatReturnsArgument=function(t){return t},t.exports=o},function(t,e,n){"use strict";var r=function(t){};t.exports=function(t,e,n,o,i,a,u,c){if(r(e),!t){var l;if(void 0===e)l=new Error("Minified exception occurred; use the non-minified dev environment for the full error message and additional helpful warnings.");else{var s=[n,o,i,a,u,c],f=0;(l=new Error(e.replace(/%s/g,function(){return s[f++]}))).name="Invariant Violation"}throw l.framesToPop=1,l}}},function(t,e,n){"use strict";var r=n(2),o=n(8),i=n(32),a=n(56),u=n(14),c=n(34),l=n(3),s=n(36),f=n(26),p=n(6),d=n(115),h=n(38).f,v=n(7).f,y=n(80),m=n(48),g="prototype",b="Wrong index!",_=r.ArrayBuffer,w=r.DataView,x=r.Math,E=r.RangeError,S=r.Infinity,T=_,P=x.abs,O=x.pow,k=x.floor,C=x.log,N=x.LN2,R=o?"_b":"buffer",A=o?"_l":"byteLength",M=o?"_o":"byteOffset";function j(t,e,n){var r,o,i,a=new Array(n),u=8*n-e-1,c=(1<<u)-1,l=c>>1,s=23===e?O(2,-24)-O(2,-77):0,f=0,p=t<0||0===t&&1/t<0?1:0;for((t=P(t))!=t||t===S?(o=t!=t?1:0,r=c):(r=k(C(t)/N),t*(i=O(2,-r))<1&&(r--,i*=2),(t+=r+l>=1?s/i:s*O(2,1-l))*i>=2&&(r++,i/=2),r+l>=c?(o=0,r=c):r+l>=1?(o=(t*i-1)*O(2,e),r+=l):(o=t*O(2,l-1)*O(2,e),r=0));e>=8;a[f++]=255&o,o/=256,e-=8);for(r=r<<e|o,u+=e;u>0;a[f++]=255&r,r/=256,u-=8);return a[--f]|=128*p,a}function L(t,e,n){var r,o=8*n-e-1,i=(1<<o)-1,a=i>>1,u=o-7,c=n-1,l=t[c--],s=127&l;for(l>>=7;u>0;s=256*s+t[c],c--,u-=8);for(r=s&(1<<-u)-1,s>>=-u,u+=e;u>0;r=256*r+t[c],c--,u-=8);if(0===s)s=1-a;else{if(s===i)return r?NaN:l?-S:S;r+=O(2,e),s-=a}return(l?-1:1)*r*O(2,s-e)}function I(t){return t[3]<<24|t[2]<<16|t[1]<<8|t[0]}function F(t){return[255&t]}function D(t){return[255&t,t>>8&255]}function U(t){return[255&t,t>>8&255,t>>16&255,t>>24&255]}function B(t){return j(t,52,8)}function z(t){return j(t,23,4)}function W(t,e,n){v(t[g],e,{get:function(){return this[n]}})}function H(t,e,n,r){var o=d(+n);if(o+e>t[A])throw E(b);var i=t[R]._b,a=o+t[M],u=i.slice(a,a+e);return r?u:u.reverse()}function V(t,e,n,r,o,i){var a=d(+n);if(a+e>t[A])throw E(b);for(var u=t[R]._b,c=a+t[M],l=r(+o),s=0;s<e;s++)u[c+s]=l[i?s:e-s-1]}if(a.ABV){if(!l(function(){_(1)})||!l(function(){new _(-1)})||l(function(){return new _,new _(1.5),new _(NaN),"ArrayBuffer"!=_.name})){for(var q,G=(_=function(t){return s(this,_),new T(d(t))})[g]=T[g],Y=h(T),$=0;Y.length>$;)(q=Y[$++])in _||u(_,q,T[q]);i||(G.constructor=_)}var Q=new w(new _(2)),K=w[g].setInt8;Q.setInt8(0,2147483648),Q.setInt8(1,2147483649),!Q.getInt8(0)&&Q.getInt8(1)||c(w[g],{setInt8:function(t,e){K.call(this,t,e<<24>>24)},setUint8:function(t,e){K.call(this,t,e<<24>>24)}},!0)}else _=function(t){s(this,_,"ArrayBuffer");var e=d(t);this._b=y.call(new Array(e),0),this[A]=e},w=function(t,e,n){s(this,w,"DataView"),s(t,_,"DataView");var r=t[A],o=f(e);if(o<0||o>r)throw E("Wrong offset!");if(o+(n=void 0===n?r-o:p(n))>r)throw E("Wrong length!");this[R]=t,this[M]=o,this[A]=n},o&&(W(_,"byteLength","_l"),W(w,"buffer","_b"),W(w,"byteLength","_l"),W(w,"byteOffset","_o")),c(w[g],{getInt8:function(t){return H(this,1,t)[0]<<24>>24},getUint8:function(t){return H(this,1,t)[0]},getInt16:function(t){var e=H(this,2,t,arguments[1]);return(e[1]<<8|e[0])<<16>>16},getUint16:function(t){var e=H(this,2,t,arguments[1]);return e[1]<<8|e[0]},getInt32:function(t){return I(H(this,4,t,arguments[1]))},getUint32:function(t){return I(H(this,4,t,arguments[1]))>>>0},getFloat32:function(t){return L(H(this,4,t,arguments[1]),23,4)},getFloat64:function(t){return L(H(this,8,t,arguments[1]),52,8)},setInt8:function(t,e){V(this,1,t,F,e)},setUint8:function(t,e){V(this,1,t,F,e)},setInt16:function(t,e){V(this,2,t,D,e,arguments[2])},setUint16:function(t,e){V(this,2,t,D,e,arguments[2])},setInt32:function(t,e){V(this,4,t,U,e,arguments[2])},setUint32:function(t,e){V(this,4,t,U,e,arguments[2])},setFloat32:function(t,e){V(this,4,t,z,e,arguments[2])},setFloat64:function(t,e){V(this,8,t,B,e,arguments[2])}});m(_,"ArrayBuffer"),m(w,"DataView"),u(w[g],a.VIEW,!0),e.ArrayBuffer=_,e.DataView=w},function(t,e,n){"use strict";var r=n(11);t.exports.f=function(t){return new function(t){var e,n;this.promise=new t(function(t,r){if(void 0!==e||void 0!==n)throw TypeError("Bad Promise constructor");e=t,n=r}),this.resolve=r(e),this.reject=r(n)}(t)}},function(t,e,n){var r=n(2),o=n(78).set,i=r.MutationObserver||r.WebKitMutationObserver,a=r.process,u=r.Promise,c="process"==n(21)(a);t.exports=function(){var t,e,n,l=function(){var r,o;for(c&&(r=a.domain)&&r.exit();t;){o=t.fn,t=t.next;try{o()}catch(r){throw t?n():e=void 0,r}}e=void 0,r&&r.enter()};if(c)n=function(){a.nextTick(l)};else if(!i||r.navigator&&r.navigator.standalone)if(u&&u.resolve){var s=u.resolve(void 0);n=function(){s.then(l)}}else n=function(){o.call(r,l)};else{var f=!0,p=document.createTextNode("");new i(l).observe(p,{characterData:!0}),n=function(){p.data=f=!f}}return function(r){var o={fn:r,next:void 0};e&&(e.next=o),t||(t=o,n()),e=o}}},function(t,e,n){var r,o,i,a=n(22),u=n(134),c=n(96),l=n(100),s=n(2),f=s.process,p=s.setImmediate,d=s.clearImmediate,h=s.MessageChannel,v=s.Dispatch,y=0,m={},g=function(){var t=+this;if(m.hasOwnProperty(t)){var e=m[t];delete m[t],e()}},b=function(t){g.call(t.data)};p&&d||(p=function(t){for(var e=[],n=1;arguments.length>n;)e.push(arguments[n++]);return m[++y]=function(){u("function"==typeof t?t:Function(t),e)},r(y),y},d=function(t){delete m[t]},"process"==n(21)(f)?r=function(t){f.nextTick(a(g,t,1))}:v&&v.now?r=function(t){v.now(a(g,t,1))}:h?(i=(o=new h).port2,o.port1.onmessage=b,r=a(i.postMessage,i,1)):s.addEventListener&&"function"==typeof postMessage&&!s.importScripts?(r=function(t){s.postMessage(t+"","*")},s.addEventListener("message",b,!1)):r="onreadystatechange"in l("script")?function(t){c.appendChild(l("script")).onreadystatechange=function(){c.removeChild(this),g.call(t)}}:function(t){setTimeout(a(g,t,1),0)}),t.exports={set:p,clear:d}},function(t,e,n){"use strict";var r=n(31),o=n(124),i=n(46),a=n(18);t.exports=n(88)(Array,"Array",function(t,e){this._t=a(t),this._i=0,this._k=e},function(){var t=this._t,e=this._k,n=this._i++;return!t||n>=t.length?(this._t=void 0,o(1)):o(0,"keys"==e?n:"values"==e?t[n]:[n,t[n]])},"values"),i.Arguments=i.Array,r("keys"),r("values"),r("entries")},function(t,e,n){"use strict";var r=n(9),o=n(40),i=n(6);t.exports=function(t){for(var e=r(this),n=i(e.length),a=arguments.length,u=o(a>1?arguments[1]:void 0,n),c=a>2?arguments[2]:void 0,l=void 0===c?n:o(c,n);l>u;)e[u++]=t;return e}},function(t,e,n){var r=n(295);t.exports=function(t,e){return new(r(t))(e)}},function(t,e,n){var r=n(50),o=n(5)("iterator"),i=n(46);t.exports=n(23).getIteratorMethod=function(t){if(void 0!=t)return t[o]||t["@@iterator"]||i[r(t)]}},function(t,e,n){"use strict";var r=n(7),o=n(43);t.exports=function(t,e,n){e in t?r.f(t,e,o(0,n)):t[e]=n}},function(t,e,n){var r=n(46),o=n(5)("iterator"),i=Array.prototype;t.exports=function(t){return void 0!==t&&(r.Array===t||i[o]===t)}},function(t,e,n){var r=n(5)("match");t.exports=function(t){var e=/./;try{"/./"[t](e)}catch(n){try{return e[r]=!1,!"/./"[t](e)}catch(t){}}return!0}},function(t,e,n){var r=n(63),o=n(27);t.exports=function(t,e,n){if(r(e))throw TypeError("String#"+n+" doesn't accept regex!");return String(o(t))}},function(t,e,n){"use strict";var r=n(39),o=n(43),i=n(48),a={};n(14)(a,n(5)("iterator"),function(){return this}),t.exports=function(t,e,n){t.prototype=r(a,{next:o(1,n)}),i(t,e+" Iterator")}},function(t,e,n){"use strict";var r=n(32),o=n(0),i=n(13),a=n(14),u=n(46),c=n(87),l=n(48),s=n(16),f=n(5)("iterator"),p=!([].keys&&"next"in[].keys()),d=function(){return this};t.exports=function(t,e,n,h,v,y,m){c(n,e,h);var g,b,_,w=function(t){if(!p&&t in T)return T[t];switch(t){case"keys":case"values":return function(){return new n(this,t)}}return function(){return new n(this,t)}},x=e+" Iterator",E="values"==v,S=!1,T=t.prototype,P=T[f]||T["@@iterator"]||v&&T[v],O=P||w(v),k=v?E?w("entries"):O:void 0,C="Array"==e&&T.entries||P;if(C&&(_=s(C.call(new t)))!==Object.prototype&&_.next&&(l(_,x,!0),r||"function"==typeof _[f]||a(_,f,d)),E&&P&&"values"!==P.name&&(S=!0,O=function(){return P.call(this)}),r&&!m||!p&&!S&&T[f]||a(T,f,O),u[e]=O,u[x]=d,v)if(g={values:E?O:w("values"),keys:y?O:w("keys"),entries:k},m)for(b in g)b in T||i(T,b,g[b]);else o(o.P+o.F*(p||S),e,g);return g}},function(t,e,n){var r=n(26),o=n(27);t.exports=function(t){return function(e,n){var i,a,u=String(o(e)),c=r(n),l=u.length;return c<0||c>=l?t?"":void 0:(i=u.charCodeAt(c))<55296||i>56319||c+1===l||(a=u.charCodeAt(c+1))<56320||a>57343?t?u.charAt(c):i:t?u.slice(c,c+2):a-56320+(i-55296<<10)+65536}}},function(t,e){var n=Math.expm1;t.exports=!n||n(10)>22025.465794806718||n(10)<22025.465794806718||-2e-17!=n(-2e-17)?function(t){return 0==(t=+t)?t:t>-1e-6&&t<1e-6?t+t*t/2:Math.exp(t)-1}:n},function(t,e){t.exports=Math.sign||function(t){return 0==(t=+t)||t!=t?t:t<0?-1:1}},function(t,e,n){"use strict";var r=n(26),o=n(27);t.exports=function(t){var e=String(o(this)),n="",i=r(t);if(i<0||i==1/0)throw RangeError("Count can't be negative");for(;i>0;(i>>>=1)&&(e+=e))1&i&&(n+=e);return n}},function(t,e,n){var r=n(4),o=n(95).set;t.exports=function(t,e,n){var i,a=e.constructor;return a!==n&&"function"==typeof a&&(i=a.prototype)!==n.prototype&&r(i)&&o&&o(t,i),t}},function(t,e){t.exports="\t\n\v\f\r   ᠎             　\u2028\u2029\ufeff"},function(t,e,n){var r=n(4),o=n(1),i=function(t,e){if(o(t),!r(e)&&null!==e)throw TypeError(e+": can't set as prototype!")};t.exports={set:Object.setPrototypeOf||("__proto__"in{}?function(t,e,r){try{(r=n(22)(Function.call,n(17).f(Object.prototype,"__proto__").set,2))(t,[]),e=!(t instanceof Array)}catch(t){e=!0}return function(t,n){return i(t,n),e?t.__proto__=n:r(t,n),t}}({},!1):void 0),check:i}},function(t,e,n){var r=n(2).document;t.exports=r&&r.documentElement},function(t,e){t.exports="constructor,hasOwnProperty,isPrototypeOf,propertyIsEnumerable,toLocaleString,toString,valueOf".split(",")},function(t,e,n){var r=n(67)("keys"),o=n(42);t.exports=function(t){return r[t]||(r[t]=o(t))}},function(t,e,n){var r=n(2),o=n(23),i=n(32),a=n(140),u=n(7).f;t.exports=function(t){var e=o.Symbol||(o.Symbol=i?{}:r.Symbol||{});"_"==t.charAt(0)||t in e||u(e,t,{value:a.f(t)})}},function(t,e,n){var r=n(4),o=n(2).document,i=r(o)&&r(o.createElement);t.exports=function(t){return i?o.createElement(t):{}}},function(t,e,n){"use strict";n.r(e),n.d(e,"createStore",function(){return c}),n.d(e,"combineReducers",function(){return s}),n.d(e,"bindActionCreators",function(){return p}),n.d(e,"applyMiddleware",function(){return h}),n.d(e,"compose",function(){return d}),n.d(e,"__DO_NOT_USE__ActionTypes",function(){return o});var r=n(102),o={INIT:"@@redux/INIT"+Math.random().toString(36).substring(7).split("").join("."),REPLACE:"@@redux/REPLACE"+Math.random().toString(36).substring(7).split("").join(".")},i="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(t){return typeof t}:function(t){return t&&"function"==typeof Symbol&&t.constructor===Symbol&&t!==Symbol.prototype?"symbol":typeof t},a=Object.assign||function(t){for(var e=1;e<arguments.length;e++){var n=arguments[e];for(var r in n)Object.prototype.hasOwnProperty.call(n,r)&&(t[r]=n[r])}return t};function u(t){if("object"!==(void 0===t?"undefined":i(t))||null===t)return!1;for(var e=t;null!==Object.getPrototypeOf(e);)e=Object.getPrototypeOf(e);return Object.getPrototypeOf(t)===e}function c(t,e,n){var a;if("function"==typeof e&&void 0===n&&(n=e,e=void 0),void 0!==n){if("function"!=typeof n)throw new Error("Expected the enhancer to be a function.");return n(c)(t,e)}if("function"!=typeof t)throw new Error("Expected the reducer to be a function.");var l=t,s=e,f=[],p=f,d=!1;function h(){p===f&&(p=f.slice())}function v(){if(d)throw new Error("You may not call store.getState() while the reducer is executing. The reducer has already received the state as an argument. Pass it down from the top reducer instead of reading it from the store.");return s}function y(t){if("function"!=typeof t)throw new Error("Expected the listener to be a function.");if(d)throw new Error("You may not call store.subscribe() while the reducer is executing. If you would like to be notified after the store has been updated, subscribe from a component and invoke store.getState() in the callback to access the latest state. See https://redux.js.org/api-reference/store#subscribe(listener) for more details.");var e=!0;return h(),p.push(t),function(){if(e){if(d)throw new Error("You may not unsubscribe from a store listener while the reducer is executing. See https://redux.js.org/api-reference/store#subscribe(listener) for more details.");e=!1,h();var n=p.indexOf(t);p.splice(n,1)}}}function m(t){if(!u(t))throw new Error("Actions must be plain objects. Use custom middleware for async actions.");if(void 0===t.type)throw new Error('Actions may not have an undefined "type" property. Have you misspelled a constant?');if(d)throw new Error("Reducers may not dispatch actions.");try{d=!0,s=l(s,t)}finally{d=!1}for(var e=f=p,n=0;n<e.length;n++){(0,e[n])()}return t}return m({type:o.INIT}),(a={dispatch:m,subscribe:y,getState:v,replaceReducer:function(t){if("function"!=typeof t)throw new Error("Expected the nextReducer to be a function.");l=t,m({type:o.REPLACE})}})[r.a]=function(){var t,e=y;return(t={subscribe:function(t){if("object"!==(void 0===t?"undefined":i(t))||null===t)throw new TypeError("Expected the observer to be an object.");function n(){t.next&&t.next(v())}return n(),{unsubscribe:e(n)}}})[r.a]=function(){return this},t},a}function l(t,e){var n=e&&e.type;return"Given "+(n&&'action "'+String(n)+'"'||"an action")+', reducer "'+t+'" returned undefined. To ignore an action, you must explicitly return the previous state. If you want this reducer to hold no value, you can return null instead of undefined.'}function s(t){for(var e=Object.keys(t),n={},r=0;r<e.length;r++){var i=e[r];0,"function"==typeof t[i]&&(n[i]=t[i])}var a=Object.keys(n);var u=void 0;try{!function(t){Object.keys(t).forEach(function(e){var n=t[e];if(void 0===n(void 0,{type:o.INIT}))throw new Error('Reducer "'+e+"\" returned undefined during initialization. If the state passed to the reducer is undefined, you must explicitly return the initial state. The initial state may not be undefined. If you don't want to set a value for this reducer, you can use null instead of undefined.");if(void 0===n(void 0,{type:"@@redux/PROBE_UNKNOWN_ACTION_"+Math.random().toString(36).substring(7).split("").join(".")}))throw new Error('Reducer "'+e+"\" returned undefined when probed with a random type. Don't try to handle "+o.INIT+' or other actions in "redux/*" namespace. They are considered private. Instead, you must return the current state for any unknown actions, unless it is undefined, in which case you must return the initial state, regardless of the action type. The initial state may not be undefined, but can be null.')})}(n)}catch(t){u=t}return function(){var t=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{},e=arguments[1];if(u)throw u;for(var r=!1,o={},i=0;i<a.length;i++){var c=a[i],s=n[c],f=t[c],p=s(f,e);if(void 0===p){var d=l(c,e);throw new Error(d)}o[c]=p,r=r||p!==f}return r?o:t}}function f(t,e){return function(){return e(t.apply(this,arguments))}}function p(t,e){if("function"==typeof t)return f(t,e);if("object"!==(void 0===t?"undefined":i(t))||null===t)throw new Error("bindActionCreators expected an object or a function, instead received "+(null===t?"null":void 0===t?"undefined":i(t))+'. Did you write "import ActionCreators from" instead of "import * as ActionCreators from"?');for(var n=Object.keys(t),r={},o=0;o<n.length;o++){var a=n[o],u=t[a];"function"==typeof u&&(r[a]=f(u,e))}return r}function d(){for(var t=arguments.length,e=Array(t),n=0;n<t;n++)e[n]=arguments[n];return 0===e.length?function(t){return t}:1===e.length?e[0]:e.reduce(function(t,e){return function(){return t(e.apply(void 0,arguments))}})}function h(){for(var t=arguments.length,e=Array(t),n=0;n<t;n++)e[n]=arguments[n];return function(t){return function(){for(var n=arguments.length,r=Array(n),o=0;o<n;o++)r[o]=arguments[o];var i=t.apply(void 0,r),u=function(){throw new Error("Dispatching while constructing your middleware is not allowed. Other middleware would not be applied to this dispatch.")},c={getState:i.getState,dispatch:function(){return u.apply(void 0,arguments)}},l=e.map(function(t){return t(c)});return u=d.apply(void 0,l)(i.dispatch),a({},i,{dispatch:u})}}}},function(t,e,n){"use strict";(function(t,r){var o,i=n(142);o="undefined"!=typeof self?self:"undefined"!=typeof window?window:void 0!==t?t:r;var a=Object(i.a)(o);e.a=a}).call(this,n(68),n(173)(t))},function(t,e,n){"use strict";Object.defineProperty(e,"__esModule",{value:!0}),e.default={GLOBAL:{HIDE:"__react_tooltip_hide_event",REBUILD:"__react_tooltip_rebuild_event",SHOW:"__react_tooltip_show_event"}}},function(t,e,n){"use strict";Object.defineProperty(e,"__esModule",{value:!0});var r=Object.assign||function(t){for(var e=1;e<arguments.length;e++){var n=arguments[e];for(var r in n)Object.prototype.hasOwnProperty.call(n,r)&&(t[r]=n[r])}return t};e.getRandomInt=function(t,e){return Math.floor(Math.random()*(e-t+1)+t)};var o,i,a=[{label:"year",seconds:31536e3},{label:"month",seconds:2592e3},{label:"day",seconds:86400},{label:"hour",seconds:3600},{label:"minute",seconds:60},{label:"second",seconds:0}];e.timeSince=function(t){if((Date.now()-t)/1e3<60)return"just now";var e=Math.floor((Date.now()-t)/1e3),n=a.find(function(t){return t.seconds<e}),r=Math.floor(e/n.seconds);return r+" "+n.label+(1!==r?"s":"")+" ago"},e.fetchAsync=(o=regeneratorRuntime.mark(function t(e,n,o){return regeneratorRuntime.wrap(function(t){for(;;)switch(t.prev=t.next){case 0:return t.next=2,fetch(e,r({headers:{Accept:"application/json","Content-Type":"application/json"},method:"post",credentials:"same-origin"},o,{body:n}));case 2:return t.next=4,t.sent.json();case 4:return t.abrupt("return",t.sent);case 5:case"end":return t.stop()}},t,void 0)}),i=function(){var t=o.apply(this,arguments);return new Promise(function(e,n){return function r(o,i){try{var a=t[o](i),u=a.value}catch(t){return void n(t)}if(!a.done)return Promise.resolve(u).then(function(t){r("next",t)},function(t){r("throw",t)});e(u)}("next")})},function(t,e,n){return i.apply(this,arguments)})},function(t,e,n){"use strict";!function t(){if("undefined"!=typeof __REACT_DEVTOOLS_GLOBAL_HOOK__&&"function"==typeof __REACT_DEVTOOLS_GLOBAL_HOOK__.checkDCE)try{__REACT_DEVTOOLS_GLOBAL_HOOK__.checkDCE(t)}catch(t){console.error(t)}}(),t.exports=n(183)},function(t,e,n){"use strict";t.exports={}},function(t,e,n){"use strict";
/*
object-assign
(c) Sindre Sorhus
@license MIT
*/var r=Object.getOwnPropertySymbols,o=Object.prototype.hasOwnProperty,i=Object.prototype.propertyIsEnumerable;t.exports=function(){try{if(!Object.assign)return!1;var t=new String("abc");if(t[5]="de","5"===Object.getOwnPropertyNames(t)[0])return!1;for(var e={},n=0;n<10;n++)e["_"+String.fromCharCode(n)]=n;if("0123456789"!==Object.getOwnPropertyNames(e).map(function(t){return e[t]}).join(""))return!1;var r={};return"abcdefghijklmnopqrst".split("").forEach(function(t){r[t]=t}),"abcdefghijklmnopqrst"===Object.keys(Object.assign({},r)).join("")}catch(t){return!1}}()?Object.assign:function(t,e){for(var n,a,u=function(t){if(null===t||void 0===t)throw new TypeError("Object.assign cannot be called with null or undefined");return Object(t)}(t),c=1;c<arguments.length;c++){for(var l in n=Object(arguments[c]))o.call(n,l)&&(u[l]=n[l]);if(r){a=r(n);for(var s=0;s<a.length;s++)i.call(n,a[s])&&(u[a[s]]=n[a[s]])}}return u}},function(t,e){t.exports=Math.scale||function(t,e,n,r,o){return 0===arguments.length||t!=t||e!=e||n!=n||r!=r||o!=o?NaN:t===1/0||t===-1/0?t:(t-e)*(o-r)/(n-e)+r}},function(t,e,n){var r=n(35);t.exports=function(t,e){var n=[];return r(t,!1,n.push,n,e),n}},function(t,e,n){var r=n(50),o=n(109);t.exports=function(t){return function(){if(r(this)!=t)throw TypeError(t+"#toJSON isn't generic");return o(this)}}},function(t,e,n){var r=n(41),o=n(18),i=n(51).f;t.exports=function(t){return function(e){for(var n,a=o(e),u=r(a),c=u.length,l=0,s=[];c>l;)i.call(a,n=u[l++])&&s.push(t?[n,a[n]]:a[n]);return s}}},function(t,e,n){var r=n(6),o=n(92),i=n(27);t.exports=function(t,e,n,a){var u=String(i(t)),c=u.length,l=void 0===n?" ":String(n),s=r(e);if(s<=c||""==l)return u;var f=s-c,p=o.call(l,Math.ceil(f/l.length));return p.length>f&&(p=p.slice(0,f)),a?p+u:u+p}},function(t,e,n){"use strict";var r=n(64),o=n(4),i=n(6),a=n(22),u=n(5)("isConcatSpreadable");t.exports=function t(e,n,c,l,s,f,p,d){for(var h,v,y=s,m=0,g=!!p&&a(p,d,3);m<l;){if(m in c){if(h=g?g(c[m],m,n):c[m],v=!1,o(h)&&(v=void 0!==(v=h[u])?!!v:r(h)),v&&f>0)y=t(e,n,h,i(h.length),y,f-1)-1;else{if(y>=9007199254740991)throw TypeError();e[y]=h}y++}m++}return y}},function(t,e,n){var r=n(38),o=n(65),i=n(1),a=n(2).Reflect;t.exports=a&&a.ownKeys||function(t){var e=r.f(i(t)),n=o.f;return n?e.concat(n(t)):e}},function(t,e,n){var r=n(26),o=n(6);t.exports=function(t){if(void 0===t)return 0;var e=r(t),n=o(e);if(e!==n)throw RangeError("Wrong length!");return n}},function(t,e,n){"use strict";var r=n(34),o=n(33).getWeak,i=n(1),a=n(4),u=n(36),c=n(35),l=n(24),s=n(19),f=n(45),p=l(5),d=l(6),h=0,v=function(t){return t._l||(t._l=new y)},y=function(){this.a=[]},m=function(t,e){return p(t.a,function(t){return t[0]===e})};y.prototype={get:function(t){var e=m(this,t);if(e)return e[1]},has:function(t){return!!m(this,t)},set:function(t,e){var n=m(this,t);n?n[1]=e:this.a.push([t,e])},delete:function(t){var e=d(this.a,function(e){return e[0]===t});return~e&&this.a.splice(e,1),!!~e}},t.exports={getConstructor:function(t,e,n,i){var l=t(function(t,r){u(t,l,e,"_i"),t._t=e,t._i=h++,t._l=void 0,void 0!=r&&c(r,n,t[i],t)});return r(l.prototype,{delete:function(t){if(!a(t))return!1;var n=o(t);return!0===n?v(f(this,e)).delete(t):n&&s(n,this._i)&&delete n[this._i]},has:function(t){if(!a(t))return!1;var n=o(t);return!0===n?v(f(this,e)).has(t):n&&s(n,this._i)}}),l},def:function(t,e,n){var r=o(i(e),!0);return!0===r?v(t).set(e,n):r[t._i]=n,t},ufstore:v}},function(t,e,n){"use strict";var r,o=n(24)(0),i=n(13),a=n(33),u=n(136),c=n(116),l=n(4),s=n(3),f=n(45),p=a.getWeak,d=Object.isExtensible,h=c.ufstore,v={},y=function(t){return function(){return t(this,arguments.length>0?arguments[0]:void 0)}},m={get:function(t){if(l(t)){var e=p(t);return!0===e?h(f(this,"WeakMap")).get(t):e?e[this._i]:void 0}},set:function(t,e){return c.def(f(this,"WeakMap"),t,e)}},g=t.exports=n(57)("WeakMap",y,m,c,!0,!0);s(function(){return 7!=(new g).set((Object.freeze||Object)(v),7).get(v)})&&(u((r=c.getConstructor(y,"WeakMap")).prototype,m),a.NEED=!0,o(["delete","has","get","set"],function(t){var e=g.prototype,n=e[t];i(e,t,function(e,o){if(l(e)&&!d(e)){this._f||(this._f=new r);var i=this._f[t](e,o);return"set"==t?this:i}return n.call(this,e,o)})}))},function(t,e,n){"use strict";var r=n(119),o=n(45);t.exports=n(57)("Set",function(t){return function(){return t(this,arguments.length>0?arguments[0]:void 0)}},{add:function(t){return r.def(o(this,"Set"),t=0===t?0:t,t)}},r)},function(t,e,n){"use strict";var r=n(7).f,o=n(39),i=n(34),a=n(22),u=n(36),c=n(35),l=n(88),s=n(124),f=n(37),p=n(8),d=n(33).fastKey,h=n(45),v=p?"_s":"size",y=function(t,e){var n,r=d(e);if("F"!==r)return t._i[r];for(n=t._f;n;n=n.n)if(n.k==e)return n};t.exports={getConstructor:function(t,e,n,l){var s=t(function(t,r){u(t,s,e,"_i"),t._t=e,t._i=o(null),t._f=void 0,t._l=void 0,t[v]=0,void 0!=r&&c(r,n,t[l],t)});return i(s.prototype,{clear:function(){for(var t=h(this,e),n=t._i,r=t._f;r;r=r.n)r.r=!0,r.p&&(r.p=r.p.n=void 0),delete n[r.i];t._f=t._l=void 0,t[v]=0},delete:function(t){var n=h(this,e),r=y(n,t);if(r){var o=r.n,i=r.p;delete n._i[r.i],r.r=!0,i&&(i.n=o),o&&(o.p=i),n._f==r&&(n._f=o),n._l==r&&(n._l=i),n[v]--}return!!r},forEach:function(t){h(this,e);for(var n,r=a(t,arguments.length>1?arguments[1]:void 0,3);n=n?n.n:this._f;)for(r(n.v,n.k,this);n&&n.r;)n=n.p},has:function(t){return!!y(h(this,e),t)}}),p&&r(s.prototype,"size",{get:function(){return h(this,e)[v]}}),s},def:function(t,e,n){var r,o,i=y(t,e);return i?i.v=n:(t._l=i={i:o=d(e,!0),k:e,v:n,p:r=t._l,n:void 0,r:!1},t._f||(t._f=i),r&&(r.n=i),t[v]++,"F"!==o&&(t._i[o]=i)),t},getEntry:y,setStrong:function(t,e,n){l(t,e,function(t,n){this._t=h(t,e),this._k=n,this._l=void 0},function(){for(var t=this._k,e=this._l;e&&e.r;)e=e.p;return this._t&&(this._l=e=e?e.n:this._t._f)?s(0,"keys"==t?e.k:"values"==t?e.v:[e.k,e.v]):(this._t=void 0,s(1))},n?"entries":"values",!n,!0),f(e)}}},function(t,e,n){"use strict";var r=n(119),o=n(45);t.exports=n(57)("Map",function(t){return function(){return t(this,arguments.length>0?arguments[0]:void 0)}},{get:function(t){var e=r.getEntry(o(this,"Map"),t);return e&&e.v},set:function(t,e){return r.def(o(this,"Map"),0===t?0:t,e)}},r,!0)},function(t,e,n){var r=n(1),o=n(4),i=n(76);t.exports=function(t,e){if(r(t),o(e)&&e.constructor===t)return e;var n=i.f(t);return(0,n.resolve)(e),n.promise}},function(t,e){t.exports=function(t){try{return{e:!1,v:t()}}catch(t){return{e:!0,v:t}}}},function(t,e,n){n(8)&&"g"!=/./g.flags&&n(7).f(RegExp.prototype,"flags",{configurable:!0,get:n(61)})},function(t,e){t.exports=function(t,e){return{value:e,done:!!t}}},function(t,e,n){"use strict";var r=n(9),o=n(40),i=n(6);t.exports=[].copyWithin||function(t,e){var n=r(this),a=i(n.length),u=o(t,a),c=o(e,a),l=arguments.length>2?arguments[2]:void 0,s=Math.min((void 0===l?a:o(l,a))-c,a-u),f=1;for(c<u&&u<c+s&&(f=-1,c+=s-1,u+=s-1);s-- >0;)c in n?n[u]=n[c]:delete n[u],u+=f,c+=f;return n}},function(t,e,n){var r=n(11),o=n(9),i=n(52),a=n(6);t.exports=function(t,e,n,u,c){r(e);var l=o(t),s=i(l),f=a(l.length),p=c?f-1:0,d=c?-1:1;if(n<2)for(;;){if(p in s){u=s[p],p+=d;break}if(p+=d,c?p<0:f<=p)throw TypeError("Reduce of empty array with no initial value")}for(;c?p>=0:f>p;p+=d)p in s&&(u=e(u,s[p],p,l));return u}},function(t,e,n){var r=n(1);t.exports=function(t,e,n,o){try{return o?e(r(n)[0],n[1]):e(n)}catch(e){var i=t.return;throw void 0!==i&&r(i.call(t)),e}}},function(t,e,n){var r=n(91),o=Math.pow,i=o(2,-52),a=o(2,-23),u=o(2,127)*(2-a),c=o(2,-126);t.exports=Math.fround||function(t){var e,n,o=Math.abs(t),l=r(t);return o<c?l*(o/c/a+1/i-1/i)*c*a:(n=(e=(1+a/i)*o)-(e-o))>u||n!=n?l*(1/0):l*n}},function(t,e){t.exports=Math.log1p||function(t){return(t=+t)>-1e-8&&t<1e-8?t-t*t/2:Math.log(1+t)}},function(t,e,n){var r=n(4),o=Math.floor;t.exports=function(t){return!r(t)&&isFinite(t)&&o(t)===t}},function(t,e,n){var r=n(21);t.exports=function(t,e){if("number"!=typeof t&&"Number"!=r(t))throw TypeError(e);return+t}},function(t,e,n){var r=n(2).parseFloat,o=n(47).trim;t.exports=1/r(n(94)+"-0")!=-1/0?function(t){var e=o(String(t),3),n=r(e);return 0===n&&"-"==e.charAt(0)?-0:n}:r},function(t,e,n){var r=n(2).parseInt,o=n(47).trim,i=n(94),a=/^[-+]?0[xX]/;t.exports=8!==r(i+"08")||22!==r(i+"0x16")?function(t,e){var n=o(String(t),3);return r(n,e>>>0||(a.test(n)?16:10))}:r},function(t,e){t.exports=function(t,e,n){var r=void 0===n;switch(e.length){case 0:return r?t():t.call(n);case 1:return r?t(e[0]):t.call(n,e[0]);case 2:return r?t(e[0],e[1]):t.call(n,e[0],e[1]);case 3:return r?t(e[0],e[1],e[2]):t.call(n,e[0],e[1],e[2]);case 4:return r?t(e[0],e[1],e[2],e[3]):t.call(n,e[0],e[1],e[2],e[3])}return t.apply(n,e)}},function(t,e,n){"use strict";var r=n(11),o=n(4),i=n(134),a=[].slice,u={};t.exports=Function.bind||function(t){var e=r(this),n=a.call(arguments,1),c=function(){var r=n.concat(a.call(arguments));return this instanceof c?function(t,e,n){if(!(e in u)){for(var r=[],o=0;o<e;o++)r[o]="a["+o+"]";u[e]=Function("F,a","return new F("+r.join(",")+")")}return u[e](t,n)}(e,r.length,r):i(e,r,t)};return o(e.prototype)&&(c.prototype=e.prototype),c}},function(t,e,n){"use strict";var r=n(41),o=n(65),i=n(51),a=n(9),u=n(52),c=Object.assign;t.exports=!c||n(3)(function(){var t={},e={},n=Symbol(),r="abcdefghijklmnopqrst";return t[n]=7,r.split("").forEach(function(t){e[t]=t}),7!=c({},t)[n]||Object.keys(c({},e)).join("")!=r})?function(t,e){for(var n=a(t),c=arguments.length,l=1,s=o.f,f=i.f;c>l;)for(var p,d=u(arguments[l++]),h=s?r(d).concat(s(d)):r(d),v=h.length,y=0;v>y;)f.call(d,p=h[y++])&&(n[p]=d[p]);return n}:c},function(t,e,n){var r=n(18),o=n(38).f,i={}.toString,a="object"==typeof window&&window&&Object.getOwnPropertyNames?Object.getOwnPropertyNames(window):[];t.exports.f=function(t){return a&&"[object Window]"==i.call(t)?function(t){try{return o(t)}catch(t){return a.slice()}}(t):o(r(t))}},function(t,e,n){var r=n(7),o=n(1),i=n(41);t.exports=n(8)?Object.defineProperties:function(t,e){o(t);for(var n,a=i(e),u=a.length,c=0;u>c;)r.f(t,n=a[c++],e[n]);return t}},function(t,e,n){var r=n(19),o=n(18),i=n(66)(!1),a=n(98)("IE_PROTO");t.exports=function(t,e){var n,u=o(t),c=0,l=[];for(n in u)n!=a&&r(u,n)&&l.push(n);for(;e.length>c;)r(u,n=e[c++])&&(~i(l,n)||l.push(n));return l}},function(t,e,n){e.f=n(5)},function(t,e,n){t.exports=!n(8)&&!n(3)(function(){return 7!=Object.defineProperty(n(100)("div"),"a",{get:function(){return 7}}).a})},function(t,e,n){"use strict";function r(t){var e,n=t.Symbol;return"function"==typeof n?n.observable?e=n.observable:(e=n("observable"),n.observable=e):e="@@observable",e}n.d(e,"a",function(){return r})},function(t,e,n){t.exports=function(){"use strict";var t={childContextTypes:!0,contextTypes:!0,defaultProps:!0,displayName:!0,getDefaultProps:!0,getDerivedStateFromProps:!0,mixins:!0,propTypes:!0,type:!0},e={name:!0,length:!0,prototype:!0,caller:!0,callee:!0,arguments:!0,arity:!0},n=Object.defineProperty,r=Object.getOwnPropertyNames,o=Object.getOwnPropertySymbols,i=Object.getOwnPropertyDescriptor,a=Object.getPrototypeOf,u=a&&a(Object);return function c(l,s,f){if("string"!=typeof s){if(u){var p=a(s);p&&p!==u&&c(l,p,f)}var d=r(s);o&&(d=d.concat(o(s)));for(var h=0;h<d.length;++h){var v=d[h];if(!(t[v]||e[v]||f&&f[v])){var y=i(s,v);try{n(l,v,y)}catch(t){}}}return l}return l}}()},function(t,e,n){"use strict";function r(t){return function(e){var n=e.dispatch,r=e.getState;return function(e){return function(o){return"function"==typeof o?o(n,r,t):e(o)}}}}e.__esModule=!0;var o=r();o.withExtraArgument=r,e.default=o},function(t,e,n){"use strict";Object.defineProperty(e,"__esModule",{value:!0});var r=n(101),o=n(49);e.default=(0,r.combineReducers)({isRetrievingData:function(){var t=arguments.length>0&&void 0!==arguments[0]&&arguments[0];switch(arguments[1].type){case o.LIST_REQUEST:return!0;case o.LIST_REQUEST_SUCCESS:case o.LIST_REQUEST_FAILED:return!1;default:return t}},list:function(){var t=arguments.length>0&&void 0!==arguments[0]?arguments[0]:[],e=arguments[1];switch(e.type){case o.LIST_REQUEST_SUCCESS:return e.list;default:return t}},isRetrievingPropertyData:function(){var t=arguments.length>0&&void 0!==arguments[0]&&arguments[0];switch(arguments[1].type){case o.PROPERTY_DATA_REQUEST:return!0;case o.PROPERTY_DATA_SUCCESS:case o.PROPERTY_DATA_FAILED:return!1;default:return t}},currentPropertyData:function(){var t=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{},e=arguments[1];switch(e.type){case o.PROPERTY_DATA_SUCCESS:return e.data;default:return t}},isPropertyPanelOpen:function(){var t=arguments.length>0&&void 0!==arguments[0]&&arguments[0];switch(arguments[1].type){case o.SHOW_PROPERTY_PANEL:return!0;case o.HIDE_PROPERTY_PANEL:return!1;default:return t}}})},function(t,e,n){t.exports=n.p+"dbce9c3bd207e839d9ac40af048f6020.png"},function(t,e,n){(t.exports=n(71)(!1)).push([t.i,"#show-property-container {\n  position: fixed;\n  top: 0;\n  z-index: 42;\n  background-color: rgba(0, 0, 0, 0.6);\n  width: 100%;\n  height: 100%;\n  display: flex;\n  flex-direction: row;\n  justify-content: center;\n  align-items: center; }\n  #show-property-container #show-property-box {\n    width: 60%;\n    height: 70%;\n    background-color: white; }\n    #show-property-container #show-property-box #close-property-img {\n      width: 35px;\n      cursor: pointer;\n      float: right;\n      margin-top: 10px;\n      margin-right: 10px; }\n",""])},function(t,e,n){var r=n(147);"string"==typeof r&&(r=[[t.i,r,""]]);var o={hmr:!0,transform:void 0,insertInto:void 0};n(70)(r,o);r.locals&&(t.exports=r.locals)},function(t,e,n){"use strict";Object.defineProperty(e,"__esModule",{value:!0});var r=function(){function t(t,e){for(var n=0;n<e.length;n++){var r=e[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(t,r.key,r)}}return function(e,n,r){return n&&t(e.prototype,n),r&&t(e,r),e}}(),o=l(n(10)),i=n(44);n(148);var a=l(n(146)),u=n(49),c=l(n(72));function l(t){return t&&t.__esModule?t:{default:t}}var s=function(t){function e(t){return function(t,e){if(!(t instanceof e))throw new TypeError("Cannot call a class as a function")}(this,e),function(t,e){if(!t)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return!e||"object"!=typeof e&&"function"!=typeof e?t:e}(this,(e.__proto__||Object.getPrototypeOf(e)).call(this,t))}return function(t,e){if("function"!=typeof e&&null!==e)throw new TypeError("Super expression must either be null or a function, not "+typeof e);t.prototype=Object.create(e&&e.prototype,{constructor:{value:t,enumerable:!1,writable:!0,configurable:!0}}),e&&(Object.setPrototypeOf?Object.setPrototypeOf(t,e):t.__proto__=e)}(e,o.default.Component),r(e,[{key:"render",value:function(){var t=this.props,e=t.isRetrievingPropertyData,n=t.propertyData,r=t.hidePropertyPanel;if(e)return o.default.createElement("div",{id:"show-property-container"},o.default.createElement("div",{id:"show-property-box"},o.default.createElement("p",null,"Retrieving data")));var i=n.title,u=(n.owner,n.date,n.imgSrc);n.price,n.area;return o.default.createElement("div",{id:"show-property-container"},o.default.createElement("div",{id:"show-property-box"},o.default.createElement("img",{src:a.default,id:"close-property-img",onClick:r}),o.default.createElement("div",{id:"show-property-image"},o.default.createElement(c.default,{src:u})),o.default.createElement("div",{id:"show-property-description"},i)))}}]),e}();e.default=(0,i.connect)(function(t){return{isRetrievingPropertyData:t.isRetrievingPropertyData,propertyData:t.currentPropertyData}},function(t){return{hidePropertyPanel:function(){return t({type:u.HIDE_PROPERTY_PANEL})}}})(s)},function(t,e,n){t.exports=n.p+"4af927e2fc1041447294de7e5cbcd446.png"},function(t,e,n){(t.exports=n(71)(!1)).push([t.i,"* {\n  margin: 0;\n  padding: 0;\n  font-family: 'Helvetica Neue', Helvetica, Arial, sans-serif; }\n\n#app-container {\n  overflow-x: hidden; }\n  #app-container #banner {\n    width: 100%;\n    background-color: #efefe8;\n    padding: 15px;\n    padding-left: 35px;\n    color: #8d8d8e; }\n    #app-container #banner img {\n      width: 70px;\n      vertical-align: middle; }\n",""])},function(t,e,n){var r=n(151);"string"==typeof r&&(r=[[t.i,r,""]]);var o={hmr:!0,transform:void 0,insertInto:void 0};n(70)(r,o);r.locals&&(t.exports=r.locals)},function(t,e,n){"use strict";Object.defineProperty(e,"__esModule",{value:!0}),e.default='.__react_component_tooltip{border-radius:3px;display:inline-block;font-size:13px;left:-999em;opacity:0;padding:8px 21px;position:fixed;pointer-events:none;transition:opacity 0.3s ease-out;top:-999em;visibility:hidden;z-index:999}.__react_component_tooltip:before,.__react_component_tooltip:after{content:"";width:0;height:0;position:absolute}.__react_component_tooltip.show{opacity:0.9;margin-top:0px;margin-left:0px;visibility:visible}.__react_component_tooltip.type-dark{color:#fff;background-color:#222}.__react_component_tooltip.type-dark.place-top:after{border-top-color:#222;border-top-style:solid;border-top-width:6px}.__react_component_tooltip.type-dark.place-bottom:after{border-bottom-color:#222;border-bottom-style:solid;border-bottom-width:6px}.__react_component_tooltip.type-dark.place-left:after{border-left-color:#222;border-left-style:solid;border-left-width:6px}.__react_component_tooltip.type-dark.place-right:after{border-right-color:#222;border-right-style:solid;border-right-width:6px}.__react_component_tooltip.type-dark.border{border:1px solid #fff}.__react_component_tooltip.type-dark.border.place-top:before{border-top:8px solid #fff}.__react_component_tooltip.type-dark.border.place-bottom:before{border-bottom:8px solid #fff}.__react_component_tooltip.type-dark.border.place-left:before{border-left:8px solid #fff}.__react_component_tooltip.type-dark.border.place-right:before{border-right:8px solid #fff}.__react_component_tooltip.type-success{color:#fff;background-color:#8DC572}.__react_component_tooltip.type-success.place-top:after{border-top-color:#8DC572;border-top-style:solid;border-top-width:6px}.__react_component_tooltip.type-success.place-bottom:after{border-bottom-color:#8DC572;border-bottom-style:solid;border-bottom-width:6px}.__react_component_tooltip.type-success.place-left:after{border-left-color:#8DC572;border-left-style:solid;border-left-width:6px}.__react_component_tooltip.type-success.place-right:after{border-right-color:#8DC572;border-right-style:solid;border-right-width:6px}.__react_component_tooltip.type-success.border{border:1px solid #fff}.__react_component_tooltip.type-success.border.place-top:before{border-top:8px solid #fff}.__react_component_tooltip.type-success.border.place-bottom:before{border-bottom:8px solid #fff}.__react_component_tooltip.type-success.border.place-left:before{border-left:8px solid #fff}.__react_component_tooltip.type-success.border.place-right:before{border-right:8px solid #fff}.__react_component_tooltip.type-warning{color:#fff;background-color:#F0AD4E}.__react_component_tooltip.type-warning.place-top:after{border-top-color:#F0AD4E;border-top-style:solid;border-top-width:6px}.__react_component_tooltip.type-warning.place-bottom:after{border-bottom-color:#F0AD4E;border-bottom-style:solid;border-bottom-width:6px}.__react_component_tooltip.type-warning.place-left:after{border-left-color:#F0AD4E;border-left-style:solid;border-left-width:6px}.__react_component_tooltip.type-warning.place-right:after{border-right-color:#F0AD4E;border-right-style:solid;border-right-width:6px}.__react_component_tooltip.type-warning.border{border:1px solid #fff}.__react_component_tooltip.type-warning.border.place-top:before{border-top:8px solid #fff}.__react_component_tooltip.type-warning.border.place-bottom:before{border-bottom:8px solid #fff}.__react_component_tooltip.type-warning.border.place-left:before{border-left:8px solid #fff}.__react_component_tooltip.type-warning.border.place-right:before{border-right:8px solid #fff}.__react_component_tooltip.type-error{color:#fff;background-color:#BE6464}.__react_component_tooltip.type-error.place-top:after{border-top-color:#BE6464;border-top-style:solid;border-top-width:6px}.__react_component_tooltip.type-error.place-bottom:after{border-bottom-color:#BE6464;border-bottom-style:solid;border-bottom-width:6px}.__react_component_tooltip.type-error.place-left:after{border-left-color:#BE6464;border-left-style:solid;border-left-width:6px}.__react_component_tooltip.type-error.place-right:after{border-right-color:#BE6464;border-right-style:solid;border-right-width:6px}.__react_component_tooltip.type-error.border{border:1px solid #fff}.__react_component_tooltip.type-error.border.place-top:before{border-top:8px solid #fff}.__react_component_tooltip.type-error.border.place-bottom:before{border-bottom:8px solid #fff}.__react_component_tooltip.type-error.border.place-left:before{border-left:8px solid #fff}.__react_component_tooltip.type-error.border.place-right:before{border-right:8px solid #fff}.__react_component_tooltip.type-info{color:#fff;background-color:#337AB7}.__react_component_tooltip.type-info.place-top:after{border-top-color:#337AB7;border-top-style:solid;border-top-width:6px}.__react_component_tooltip.type-info.place-bottom:after{border-bottom-color:#337AB7;border-bottom-style:solid;border-bottom-width:6px}.__react_component_tooltip.type-info.place-left:after{border-left-color:#337AB7;border-left-style:solid;border-left-width:6px}.__react_component_tooltip.type-info.place-right:after{border-right-color:#337AB7;border-right-style:solid;border-right-width:6px}.__react_component_tooltip.type-info.border{border:1px solid #fff}.__react_component_tooltip.type-info.border.place-top:before{border-top:8px solid #fff}.__react_component_tooltip.type-info.border.place-bottom:before{border-bottom:8px solid #fff}.__react_component_tooltip.type-info.border.place-left:before{border-left:8px solid #fff}.__react_component_tooltip.type-info.border.place-right:before{border-right:8px solid #fff}.__react_component_tooltip.type-light{color:#222;background-color:#fff}.__react_component_tooltip.type-light.place-top:after{border-top-color:#fff;border-top-style:solid;border-top-width:6px}.__react_component_tooltip.type-light.place-bottom:after{border-bottom-color:#fff;border-bottom-style:solid;border-bottom-width:6px}.__react_component_tooltip.type-light.place-left:after{border-left-color:#fff;border-left-style:solid;border-left-width:6px}.__react_component_tooltip.type-light.place-right:after{border-right-color:#fff;border-right-style:solid;border-right-width:6px}.__react_component_tooltip.type-light.border{border:1px solid #222}.__react_component_tooltip.type-light.border.place-top:before{border-top:8px solid #222}.__react_component_tooltip.type-light.border.place-bottom:before{border-bottom:8px solid #222}.__react_component_tooltip.type-light.border.place-left:before{border-left:8px solid #222}.__react_component_tooltip.type-light.border.place-right:before{border-right:8px solid #222}.__react_component_tooltip.place-top{margin-top:-10px}.__react_component_tooltip.place-top:before{border-left:10px solid transparent;border-right:10px solid transparent;bottom:-8px;left:50%;margin-left:-10px}.__react_component_tooltip.place-top:after{border-left:8px solid transparent;border-right:8px solid transparent;bottom:-6px;left:50%;margin-left:-8px}.__react_component_tooltip.place-bottom{margin-top:10px}.__react_component_tooltip.place-bottom:before{border-left:10px solid transparent;border-right:10px solid transparent;top:-8px;left:50%;margin-left:-10px}.__react_component_tooltip.place-bottom:after{border-left:8px solid transparent;border-right:8px solid transparent;top:-6px;left:50%;margin-left:-8px}.__react_component_tooltip.place-left{margin-left:-10px}.__react_component_tooltip.place-left:before{border-top:6px solid transparent;border-bottom:6px solid transparent;right:-8px;top:50%;margin-top:-5px}.__react_component_tooltip.place-left:after{border-top:5px solid transparent;border-bottom:5px solid transparent;right:-6px;top:50%;margin-top:-4px}.__react_component_tooltip.place-right{margin-left:10px}.__react_component_tooltip.place-right:before{border-top:6px solid transparent;border-bottom:6px solid transparent;left:-8px;top:50%;margin-top:-5px}.__react_component_tooltip.place-right:after{border-top:5px solid transparent;border-bottom:5px solid transparent;left:-6px;top:50%;margin-top:-4px}.__react_component_tooltip .multi-line{display:block;padding:2px 0px;text-align:center}'},function(t,e,n){"use strict";Object.defineProperty(e,"__esModule",{value:!0}),e.default=function(t){var e=t.length;return t.hasOwnProperty?Array.prototype.slice.call(t):new Array(e).fill().map(function(e){return t[e]})}},function(t,e,n){"use strict";Object.defineProperty(e,"__esModule",{value:!0}),e.parseAria=function(t){var e={};return Object.keys(t).filter(function(t){return/(^aria-\w+$|^role$)/.test(t)}).forEach(function(n){e[n]=t[n]}),e}},function(t,e,n){"use strict";Object.defineProperty(e,"__esModule",{value:!0}),e.default=function(t,e,n,r){if(e)return e;if(void 0!==n&&null!==n)return n;if(null===n)return null;var o=/<br\s*\/?>/;return r&&"false"!==r&&o.test(t)?t.split(o).map(function(t,e){return i.default.createElement("span",{key:e,className:"multi-line"},t)}):t};var r,o=n(10),i=(r=o)&&r.__esModule?r:{default:r}},function(t,e,n){"use strict";Object.defineProperty(e,"__esModule",{value:!0}),e.default=function(t,e,n,c,l,s,f){var p,d,h,v=r(n),y=v.width,m=v.height,g=r(e),b=g.width,_=g.height,w=o(t,e,s),x=w.mouseX,E=w.mouseY,S=i(s,b,_,y,m),T=a(f),P=T.extraOffset_X,O=T.extraOffset_Y,k=window.innerWidth,C=window.innerHeight,N=u(n),R=N.parentTop,A=N.parentLeft,M=function(t){var e=S[t].l;return x+e+P},j=function(t){var e=S[t].r;return x+e+P},L=function(t){var e=S[t].t;return E+e+O},I=function(t){var e=S[t].b;return E+e+O},F=function(){var t=!1,e=void 0;return L("left")<0&&I("left")<=C&&I("bottom")<=C?(t=!0,e="bottom"):I("left")>C&&L("left")>=0&&L("top")>=0&&(t=!0,e="top"),{result:t,newPlace:e}},D=function(){var t=!1,e=void 0;return M("top")<0&&j("top")<=k&&j("right")<=k?(t=!0,e="right"):j("top")>k&&M("top")>=0&&M("left")>=0&&(t=!0,e="left"),{result:t,newPlace:e}},U=(p=F(),d=p.result,h=p.newPlace,d&&D().result?{result:!1}:(!d&&M("left")<0&&j("right")<=k&&(d=!0,h="right"),{result:d,newPlace:h})),B=function(){var t=F(),e=t.result,n=t.newPlace;return e&&D().result?{result:!1}:(!e&&j("right")>k&&M("left")>=0&&(e=!0,n="left"),{result:e,newPlace:n})}(),z=function(){var t=D(),e=t.result,n=t.newPlace;return e&&F().result?{result:!1}:(!e&&L("top")<0&&I("bottom")<=C&&(e=!0,n="bottom"),{result:e,newPlace:n})}(),W=function(){var t=D(),e=t.result,n=t.newPlace;return e&&F().result?{result:!1}:(!e&&I("bottom")>C&&L("top")>=0&&(e=!0,n="top"),{result:e,newPlace:n})}();if("left"===c&&U.result)return{isNewState:!0,newState:{place:U.newPlace}};if("right"===c&&B.result)return{isNewState:!0,newState:{place:B.newPlace}};if("top"===c&&z.result)return{isNewState:!0,newState:{place:z.newPlace}};if("bottom"===c&&W.result)return{isNewState:!0,newState:{place:W.newPlace}};if(c!==l){if("top"===l&&!z.result)return{isNewState:!0,newState:{place:"top"}};if("left"===l&&!U.result)return{isNewState:!0,newState:{place:"left"}};if("right"===l&&!B.result)return{isNewState:!0,newState:{place:"right"}};if("bottom"===l&&!W.result)return{isNewState:!0,newState:{place:"bottom"}}}return{isNewState:!1,position:{left:parseInt(M(c)-A,10),top:parseInt(L(c)-R,10)}}};var r=function(t){var e=t.getBoundingClientRect(),n=e.height,r=e.width;return{height:parseInt(n,10),width:parseInt(r,10)}},o=function(t,e,n){var o=e.getBoundingClientRect(),i=o.top,a=o.left,u=r(e),c=u.width,l=u.height;return"float"===n?{mouseX:t.clientX,mouseY:t.clientY}:{mouseX:a+c/2,mouseY:i+l/2}},i=function(t,e,n,r,o){var i=void 0,a=void 0,u=void 0,c=void 0;return"float"===t?(i={l:-r/2,r:r/2,t:-(o+3+2),b:-3},u={l:-r/2,r:r/2,t:15,b:o+3+2+12},c={l:-(r+3+2),r:-3,t:-o/2,b:o/2},a={l:3,r:r+3+2,t:-o/2,b:o/2}):"solid"===t&&(i={l:-r/2,r:r/2,t:-(n/2+o+2),b:-n/2},u={l:-r/2,r:r/2,t:n/2,b:n/2+o+2},c={l:-(r+e/2+2),r:-e/2,t:-o/2,b:o/2},a={l:e/2,r:r+e/2+2,t:-o/2,b:o/2}),{top:i,bottom:u,left:c,right:a}},a=function(t){var e=0,n=0;for(var r in"[object String]"===Object.prototype.toString.apply(t)&&(t=JSON.parse(t.toString().replace(/\'/g,'"'))),t)"top"===r?n-=parseInt(t[r],10):"bottom"===r?n+=parseInt(t[r],10):"left"===r?e-=parseInt(t[r],10):"right"===r&&(e+=parseInt(t[r],10));return{extraOffset_X:e,extraOffset_Y:n}},u=function(t){for(var e=t;e&&"none"===window.getComputedStyle(e).getPropertyValue("transform");)e=e.parentElement;return{parentTop:e&&e.getBoundingClientRect().top||0,parentLeft:e&&e.getBoundingClientRect().left||0}}},function(t,e,n){"use strict";Object.defineProperty(e,"__esModule",{value:!0}),e.default=function(t){t.prototype.bindRemovalTracker=function(){var t=this,e=r();if(null!=e){var n=new e(function(e){for(var n=0;n<e.length;n++)for(var r=e[n],o=0;o<r.removedNodes.length;o++){if(r.removedNodes[o]===t.state.currentTarget)return void t.hideTooltip()}});n.observe(window.document,{childList:!0,subtree:!0}),this.removalTracker=n}},t.prototype.unbindRemovalTracker=function(){this.removalTracker&&(this.removalTracker.disconnect(),this.removalTracker=null)}};var r=function(){return window.MutationObserver||window.WebKitMutationObserver||window.MozMutationObserver}},function(t,e,n){"use strict";Object.defineProperty(e,"__esModule",{value:!0}),e.default=function(t){t.prototype.getEffect=function(t){return t.getAttribute("data-effect")||this.props.effect||"float"}}},function(t,e,n){"use strict";Object.defineProperty(e,"__esModule",{value:!0}),e.default=function(t){t.prototype.isCapture=function(t){var e=t.getAttribute("data-iscapture");return e&&"true"===e||this.props.isCapture||!1}}},function(t,e,n){"use strict";Object.defineProperty(e,"__esModule",{value:!0}),e.default=function(t){t.prototype.isCustomEvent=function(t){return this.state.event||!!t.getAttribute("data-event")},t.prototype.customBindListener=function(t){var e=this,n=this.state,o=n.event,a=n.eventOff,u=t.getAttribute("data-event")||o,c=t.getAttribute("data-event-off")||a;u.split(" ").forEach(function(n){t.removeEventListener(n,i),i=r.bind(e,c),t.addEventListener(n,i,!1)}),c&&c.split(" ").forEach(function(n){t.removeEventListener(n,e.hideTooltip),t.addEventListener(n,e.hideTooltip,!1)})},t.prototype.customUnbindListener=function(t){var e=this.state,n=e.event,r=e.eventOff,o=n||t.getAttribute("data-event"),a=r||t.getAttribute("data-event-off");t.removeEventListener(o,i),a&&t.removeEventListener(a,this.hideTooltip)}};var r=function(t,e){var n=this.state.show,r=this.props.id,i=e.currentTarget.getAttribute("data-iscapture"),a=i&&"true"===i||this.props.isCapture,u=e.currentTarget.getAttribute("currentItem");a||e.stopPropagation(),n&&"true"===u?t||this.hideTooltip(e):(e.currentTarget.setAttribute("currentItem","true"),o(e.currentTarget,this.getTargetArray(r)),this.showTooltip(e))},o=function(t,e){for(var n=0;n<e.length;n++)t!==e[n]?e[n].setAttribute("currentItem","false"):e[n].setAttribute("currentItem","true")},i=void 0},function(t,e,n){"use strict";Object.defineProperty(e,"__esModule",{value:!0}),e.default=function(t){t.prototype.bindWindowEvents=function(t){window.removeEventListener(i.default.GLOBAL.HIDE,this.globalHide),window.addEventListener(i.default.GLOBAL.HIDE,this.globalHide,!1),window.removeEventListener(i.default.GLOBAL.REBUILD,this.globalRebuild),window.addEventListener(i.default.GLOBAL.REBUILD,this.globalRebuild,!1),window.removeEventListener(i.default.GLOBAL.SHOW,this.globalShow),window.addEventListener(i.default.GLOBAL.SHOW,this.globalShow,!1),t&&(window.removeEventListener("resize",this.onWindowResize),window.addEventListener("resize",this.onWindowResize,!1))},t.prototype.unbindWindowEvents=function(){window.removeEventListener(i.default.GLOBAL.HIDE,this.globalHide),window.removeEventListener(i.default.GLOBAL.REBUILD,this.globalRebuild),window.removeEventListener(i.default.GLOBAL.SHOW,this.globalShow),window.removeEventListener("resize",this.onWindowResize)},t.prototype.onWindowResize=function(){this.mount&&this.hideTooltip()}};var r,o=n(103),i=(r=o)&&r.__esModule?r:{default:r}},function(t,e,n){"use strict";Object.defineProperty(e,"__esModule",{value:!0}),e.default=function(t){t.hide=function(t){a(i.default.GLOBAL.HIDE,{target:t})},t.rebuild=function(){a(i.default.GLOBAL.REBUILD)},t.show=function(t){a(i.default.GLOBAL.SHOW,{target:t})},t.prototype.globalRebuild=function(){this.mount&&(this.unbindListener(),this.bindListener())},t.prototype.globalShow=function(t){if(this.mount){var e={currentTarget:t.detail.target};this.showTooltip(e,!0)}},t.prototype.globalHide=function(t){if(this.mount){var e=!!(t&&t.detail&&t.detail.target);this.hideTooltip({currentTarget:e&&t.detail.target},e)}}};var r,o=n(103),i=(r=o)&&r.__esModule?r:{default:r};var a=function(t,e){var n=void 0;"function"==typeof window.CustomEvent?n=new window.CustomEvent(t,{detail:e}):((n=document.createEvent("Event")).initEvent(t,!1,!0),n.detail=e),window.dispatchEvent(n)}},function(t,e,n){var r;
/*!
  Copyright (c) 2016 Jed Watson.
  Licensed under the MIT License (MIT), see
  http://jedwatson.github.io/classnames
*/
/*!
  Copyright (c) 2016 Jed Watson.
  Licensed under the MIT License (MIT), see
  http://jedwatson.github.io/classnames
*/
!function(){"use strict";var n={}.hasOwnProperty;function o(){for(var t=[],e=0;e<arguments.length;e++){var r=arguments[e];if(r){var i=typeof r;if("string"===i||"number"===i)t.push(r);else if(Array.isArray(r))t.push(o.apply(null,r));else if("object"===i)for(var a in r)n.call(r,a)&&r[a]&&t.push(a)}}return t.join(" ")}void 0!==t&&t.exports?t.exports=o:void 0===(r=function(){return o}.apply(e,[]))||(t.exports=r)}()},function(t,e,n){"use strict";var r,o,i,a=Object.assign||function(t){for(var e=1;e<arguments.length;e++){var n=arguments[e];for(var r in n)Object.prototype.hasOwnProperty.call(n,r)&&(t[r]=n[r])}return t},u=function(){function t(t,e){for(var n=0;n<e.length;n++){var r=e[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(t,r.key,r)}}return function(e,n,r){return n&&t(e.prototype,n),r&&t(e,r),e}}(),c=E(n(10)),l=E(n(15)),s=E(n(105)),f=E(n(164)),p=E(n(163)),d=E(n(162)),h=E(n(161)),v=E(n(160)),y=E(n(159)),m=E(n(158)),g=E(n(157)),b=E(n(156)),_=n(155),w=E(n(154)),x=E(n(153));function E(t){return t&&t.__esModule?t:{default:t}}var S=(0,p.default)(r=(0,d.default)(r=(0,h.default)(r=(0,v.default)(r=(0,y.default)(r=(0,m.default)((i=o=function(t){function e(t){!function(t,e){if(!(t instanceof e))throw new TypeError("Cannot call a class as a function")}(this,e);var n=function(t,e){if(!t)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return!e||"object"!=typeof e&&"function"!=typeof e?t:e}(this,(e.__proto__||Object.getPrototypeOf(e)).call(this,t));return n.state={place:"top",type:"dark",effect:"float",show:!1,border:!1,offset:{},extraClass:"",html:!1,delayHide:0,delayShow:0,event:t.event||null,eventOff:t.eventOff||null,currentEvent:null,currentTarget:null,ariaProps:(0,_.parseAria)(t),isEmptyTip:!1,disable:!1,originTooltip:null,isMultiline:!1},n.bind(["showTooltip","updateTooltip","hideTooltip","getTooltipContent","globalRebuild","globalShow","globalHide","onWindowResize"]),n.mount=!0,n.delayShowLoop=null,n.delayHideLoop=null,n.intervalUpdateContent=null,n}return function(t,e){if("function"!=typeof e&&null!==e)throw new TypeError("Super expression must either be null or a function, not "+typeof e);t.prototype=Object.create(e&&e.prototype,{constructor:{value:t,enumerable:!1,writable:!0,configurable:!0}}),e&&(Object.setPrototypeOf?Object.setPrototypeOf(t,e):t.__proto__=e)}(e,c.default.Component),u(e,[{key:"bind",value:function(t){var e=this;t.forEach(function(t){e[t]=e[t].bind(e)})}},{key:"componentDidMount",value:function(){var t=this.props,e=t.insecure,n=t.resizeHide;e&&this.setStyleHeader(),this.bindListener(),this.bindWindowEvents(n)}},{key:"componentWillReceiveProps",value:function(t){var e=this.state.ariaProps,n=(0,_.parseAria)(t);Object.keys(n).some(function(t){return n[t]!==e[t]})&&this.setState({ariaProps:n})}},{key:"componentWillUnmount",value:function(){this.mount=!1,this.clearTimer(),this.unbindListener(),this.removeScrollListener(),this.unbindWindowEvents()}},{key:"getTargetArray",value:function(t){var e=void 0;if(t){var n=t.replace(/\\/g,"\\\\").replace(/"/g,'\\"');e=document.querySelectorAll('[data-tip][data-for="'+n+'"]')}else e=document.querySelectorAll("[data-tip]:not([data-for])");return(0,w.default)(e)}},{key:"bindListener",value:function(){var t=this,e=this.props,n=e.id,r=e.globalEventOff;this.getTargetArray(n).forEach(function(e){var n=t.isCapture(e),r=t.getEffect(e);null===e.getAttribute("currentItem")&&e.setAttribute("currentItem","false"),t.unbindBasicListener(e),t.isCustomEvent(e)?t.customBindListener(e):(e.addEventListener("mouseenter",t.showTooltip,n),"float"===r&&e.addEventListener("mousemove",t.updateTooltip,n),e.addEventListener("mouseleave",t.hideTooltip,n))}),r&&(window.removeEventListener(r,this.hideTooltip),window.addEventListener(r,this.hideTooltip,!1)),this.bindRemovalTracker()}},{key:"unbindListener",value:function(){var t=this,e=this.props,n=e.id,r=e.globalEventOff;this.getTargetArray(n).forEach(function(e){t.unbindBasicListener(e),t.isCustomEvent(e)&&t.customUnbindListener(e)}),r&&window.removeEventListener(r,this.hideTooltip),this.unbindRemovalTracker()}},{key:"unbindBasicListener",value:function(t){var e=this.isCapture(t);t.removeEventListener("mouseenter",this.showTooltip,e),t.removeEventListener("mousemove",this.updateTooltip,e),t.removeEventListener("mouseleave",this.hideTooltip,e)}},{key:"getTooltipContent",value:function(){var t=this.props,e=t.getContent,n=t.children,r=void 0;return e&&(r=Array.isArray(e)?e[0]&&e[0](this.state.originTooltip):e(this.state.originTooltip)),(0,b.default)(this.state.originTooltip,n,r,this.state.isMultiline)}},{key:"isEmptyTip",value:function(t){return"string"==typeof t&&""===t||null===t}},{key:"showTooltip",value:function(t,e){var n=this;if(e&&!this.getTargetArray(this.props.id).some(function(e){return e===t.currentTarget}))return;var r=this.props,o=r.multiline,i=r.getContent,a=t.currentTarget.getAttribute("data-tip"),u=t.currentTarget.getAttribute("data-multiline")||o||!1,c=t instanceof window.FocusEvent||e,l=!0;t.currentTarget.getAttribute("data-scroll-hide")?l="true"===t.currentTarget.getAttribute("data-scroll-hide"):null!=this.props.scrollHide&&(l=this.props.scrollHide),this.clearTimer(),this.setState({originTooltip:a,isMultiline:u,desiredPlace:t.currentTarget.getAttribute("data-place")||this.props.place||"top",place:t.currentTarget.getAttribute("data-place")||this.props.place||"top",type:t.currentTarget.getAttribute("data-type")||this.props.type||"dark",effect:c?"solid":this.getEffect(t.currentTarget),offset:t.currentTarget.getAttribute("data-offset")||this.props.offset||{},html:t.currentTarget.getAttribute("data-html")?"true"===t.currentTarget.getAttribute("data-html"):this.props.html||!1,delayShow:t.currentTarget.getAttribute("data-delay-show")||this.props.delayShow||0,delayHide:t.currentTarget.getAttribute("data-delay-hide")||this.props.delayHide||0,border:t.currentTarget.getAttribute("data-border")?"true"===t.currentTarget.getAttribute("data-border"):this.props.border||!1,extraClass:t.currentTarget.getAttribute("data-class")||this.props.class||this.props.className||"",disable:t.currentTarget.getAttribute("data-tip-disable")?"true"===t.currentTarget.getAttribute("data-tip-disable"):this.props.disable||!1},function(){l&&n.addScrollListener(t),n.updateTooltip(t),i&&Array.isArray(i)&&(n.intervalUpdateContent=setInterval(function(){if(n.mount){var t=n.props.getContent,e=(0,b.default)(a,"",t[0](),u),r=n.isEmptyTip(e);n.setState({isEmptyTip:r}),n.updatePosition()}},i[1]))})}},{key:"updateTooltip",value:function(t){var e=this,n=this.state,r=n.delayShow,o=n.show,i=n.disable,a=this.props.afterShow,u=this.getTooltipContent(),c=o?0:parseInt(r,10),l=t.currentTarget;if(!this.isEmptyTip(u)&&!i){var s=function(){if(Array.isArray(u)&&u.length>0||u){var n=!e.state.show;e.setState({currentEvent:t,currentTarget:l,show:!0},function(){e.updatePosition(),n&&a&&a()})}};clearTimeout(this.delayShowLoop),r?this.delayShowLoop=setTimeout(s,c):s()}}},{key:"hideTooltip",value:function(t,e){var n=this,r=this.state,o=r.delayHide,i=r.disable,a=this.props.afterHide,u=this.getTooltipContent();if(this.mount&&!this.isEmptyTip(u)&&!i){if(e)if(!this.getTargetArray(this.props.id).some(function(e){return e===t.currentTarget})||!this.state.show)return;var c=function(){var t=n.state.show;n.setState({show:!1},function(){n.removeScrollListener(),t&&a&&a()})};this.clearTimer(),o?this.delayHideLoop=setTimeout(c,parseInt(o,10)):c()}}},{key:"addScrollListener",value:function(t){var e=this.isCapture(t.currentTarget);window.addEventListener("scroll",this.hideTooltip,e)}},{key:"removeScrollListener",value:function(){window.removeEventListener("scroll",this.hideTooltip)}},{key:"updatePosition",value:function(){var t=this,e=this.state,n=e.currentEvent,r=e.currentTarget,o=e.place,i=e.desiredPlace,a=e.effect,u=e.offset,c=s.default.findDOMNode(this),l=(0,g.default)(n,r,c,o,i,a,u);if(l.isNewState)return this.setState(l.newState,function(){t.updatePosition()});c.style.left=l.position.left+"px",c.style.top=l.position.top+"px"}},{key:"setStyleHeader",value:function(){var t=document.getElementsByTagName("head")[0];if(!t.querySelector('style[id="react-tooltip"]')){var e=document.createElement("style");e.id="react-tooltip",e.innerHTML=x.default,t.insertBefore(e,t.firstChild)}}},{key:"clearTimer",value:function(){clearTimeout(this.delayShowLoop),clearTimeout(this.delayHideLoop),clearInterval(this.intervalUpdateContent)}},{key:"render",value:function(){var t=this.state,n=t.extraClass,r=t.html,o=t.ariaProps,i=t.disable,u=this.getTooltipContent(),l=this.isEmptyTip(u),s=(0,f.default)("__react_component_tooltip",{show:this.state.show&&!i&&!l},{border:this.state.border},{"place-top":"top"===this.state.place},{"place-bottom":"bottom"===this.state.place},{"place-left":"left"===this.state.place},{"place-right":"right"===this.state.place},{"type-dark":"dark"===this.state.type},{"type-success":"success"===this.state.type},{"type-warning":"warning"===this.state.type},{"type-error":"error"===this.state.type},{"type-info":"info"===this.state.type},{"type-light":"light"===this.state.type}),p=this.props.wrapper;return e.supportedWrappers.indexOf(p)<0&&(p=e.defaultProps.wrapper),r?c.default.createElement(p,a({className:s+" "+n,id:this.props.id},o,{"data-id":"tooltip",dangerouslySetInnerHTML:{__html:u}})):c.default.createElement(p,a({className:s+" "+n,id:this.props.id},o,{"data-id":"tooltip"}),u)}}]),e}(),o.propTypes={children:l.default.any,place:l.default.string,type:l.default.string,effect:l.default.string,offset:l.default.object,multiline:l.default.bool,border:l.default.bool,insecure:l.default.bool,class:l.default.string,className:l.default.string,id:l.default.string,html:l.default.bool,delayHide:l.default.number,delayShow:l.default.number,event:l.default.string,eventOff:l.default.string,watchWindow:l.default.bool,isCapture:l.default.bool,globalEventOff:l.default.string,getContent:l.default.any,afterShow:l.default.func,afterHide:l.default.func,disable:l.default.bool,scrollHide:l.default.bool,resizeHide:l.default.bool,wrapper:l.default.string},o.defaultProps={insecure:!0,resizeHide:!0,wrapper:"div"},o.supportedWrappers=["div","span"],o.displayName="ReactTooltip",r=i))||r)||r)||r)||r)||r)||r;t.exports=S},function(t,e,n){"use strict";Object.defineProperty(e,"__esModule",{value:!0});var r=function(){function t(t,e){for(var n=0;n<e.length;n++){var r=e[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(t,r.key,r)}}return function(e,n,r){return n&&t(e.prototype,n),r&&t(e,r),e}}(),o=c(n(10)),i=c(n(165)),a=n(44),u=n(49);function c(t){return t&&t.__esModule?t:{default:t}}var l=function(t){function e(t){!function(t,e){if(!(t instanceof e))throw new TypeError("Cannot call a class as a function")}(this,e);var n=function(t,e){if(!t)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return!e||"object"!=typeof e&&"function"!=typeof e?t:e}(this,(e.__proto__||Object.getPrototypeOf(e)).call(this,t));return n.handleChange=function(t){var e,r,o;n.setState((e={},r=t.target.name,o=t.target.value,r in e?Object.defineProperty(e,r,{value:o,enumerable:!0,configurable:!0,writable:!0}):e[r]=o,e))},n.handleSubmit=function(t){t.preventDefault();var e=n.state,r=e.priceFrom,o=e.priceTo,i=e.type;!isNaN(r)&&!isNaN(o)&&o&&r&&(console.log({price:{to:o,from:r},type:i}),n.props.requestList({to:parseInt(o),from:parseInt(r)},i))},n.state={priceFrom:"",priceTo:"",type:"all"},n}return function(t,e){if("function"!=typeof e&&null!==e)throw new TypeError("Super expression must either be null or a function, not "+typeof e);t.prototype=Object.create(e&&e.prototype,{constructor:{value:t,enumerable:!1,writable:!0,configurable:!0}}),e&&(Object.setPrototypeOf?Object.setPrototypeOf(t,e):t.__proto__=e)}(e,o.default.Component),r(e,[{key:"render",value:function(){var t=this.state,e=t.priceFrom,n=t.priceTo,r=t.type,a=this.props.isRetrievingData;return o.default.createElement("div",{id:"input-container",class:"form-group"},o.default.createElement(i.default,{effect:"solid"}),o.default.createElement("p",null,"input-container"),o.default.createElement("form",{onSubmit:this.handleSubmit},o.default.createElement("input",{type:"text",name:"priceFrom",placeholder:"From",value:e,onChange:this.handleChange,class:"form-control-plaintext"}),o.default.createElement("input",{type:"text",name:"priceTo",placeholder:"To",value:n,onChange:this.handleChange}),o.default.createElement("select",{name:"type",onChange:this.handleChange,value:r},o.default.createElement("option",{value:"all"},"All"),o.default.createElement("option",{value:"appartment"},"Appartment"),o.default.createElement("option",{value:"house"},"House")),o.default.createElement("button",{disabled:a,class:"btn btn-primary mb-2","data-tip":"Redux"},"Search")))}}]),e}();e.default=(0,a.connect)(function(t){return{isRetrievingData:t.isRetrievingData}},function(t){return{requestList:function(e,n){return t((0,u.requestList)(e,n))}}})(l)},function(t,e,n){"use strict";Object.defineProperty(e,"__esModule",{value:!0});var r=function(){function t(t,e){for(var n=0;n<e.length;n++){var r=e[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(t,r.key,r)}}return function(e,n,r){return n&&t(e.prototype,n),r&&t(e,r),e}}(),o=l(n(10)),i=n(44),a=n(104),u=l(n(72)),c=n(49);function l(t){return t&&t.__esModule?t:{default:t}}var s=function(t){function e(t){!function(t,e){if(!(t instanceof e))throw new TypeError("Cannot call a class as a function")}(this,e);var n=function(t,e){if(!t)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return!e||"object"!=typeof e&&"function"!=typeof e?t:e}(this,(e.__proto__||Object.getPrototypeOf(e)).call(this,t));return n.handleClick=function(){var t=n.props,e=t.id,r=t.showPropertyPanel;(0,t.requestPropertyData)(e),r()},n}return function(t,e){if("function"!=typeof e&&null!==e)throw new TypeError("Super expression must either be null or a function, not "+typeof e);t.prototype=Object.create(e&&e.prototype,{constructor:{value:t,enumerable:!1,writable:!0,configurable:!0}}),e&&(Object.setPrototypeOf?Object.setPrototypeOf(t,e):t.__proto__=e)}(e,o.default.Component),r(e,[{key:"render",value:function(){var t=this.props,e=t.id,n=t.imgSrc,r=(t.owner,t.title),i=t.price,c=t.date,l=t.area,s=t.description;return o.default.createElement("div",{class:"list-item",onClick:this.handleClick},o.default.createElement("div",{class:"list-item-image"},o.default.createElement(u.default,{src:n+"&id="+e,alt:name})),o.default.createElement("div",{class:"list-item-description"},o.default.createElement("h3",null,r),o.default.createElement("h5",null,i," € for ",l," m² ",o.default.createElement("span",{className:"list-item-date"},(0,a.timeSince)(1e3*c))),o.default.createElement("p",null,s)))}}]),e}();e.default=(0,i.connect)(function(t){},function(t){return{requestPropertyData:function(e){return t((0,c.requestPropertyData)(e))},showPropertyPanel:function(){return t({type:c.SHOW_PROPERTY_PANEL})}}})(s)},function(t,e){t.exports=function(t){var e="undefined"!=typeof window&&window.location;if(!e)throw new Error("fixUrls requires window.location");if(!t||"string"!=typeof t)return t;var n=e.protocol+"//"+e.host,r=n+e.pathname.replace(/\/[^\/]*$/,"/");return t.replace(/url\s*\(((?:[^)(]|\((?:[^)(]+|\([^)(]*\))*\))*)\)/gi,function(t,e){var o,i=e.trim().replace(/^"(.*)"$/,function(t,e){return e}).replace(/^'(.*)'$/,function(t,e){return e});return/^(#|data:|http:\/\/|https:\/\/|file:\/\/\/|\s*$)/i.test(i)?t:(o=0===i.indexOf("//")?i:0===i.indexOf("/")?n+i:r+i.replace(/^\.\//,""),"url("+JSON.stringify(o)+")")})}},function(t,e,n){(t.exports=n(71)(!1)).push([t.i,"@keyframes rotation {\n  from {\n    transform: rotate(0deg); }\n  to {\n    transform: rotate(359deg); } }\n\n@keyframes shimmer {\n  from {\n    background-position: -200px 0; }\n  to {\n    background-position: 800px 0; } }\n\n#list-container {\n  display: flex;\n  flex-direction: row;\n  justify-content: center;\n  flex-wrap: wrap;\n  width: 100%; }\n  #list-container .list-item {\n    border: 1px solid #efefe8;\n    box-shadow: 0px 0px 5px #efefe8;\n    width: 350px;\n    height: 400px;\n    margin: 15px;\n    display: block;\n    cursor: pointer; }\n    #list-container .list-item .list-item-image {\n      width: 350px;\n      height: 200px;\n      position: relative;\n      display: flex;\n      flex-direction: column;\n      justify-content: center;\n      align-items: center; }\n      #list-container .list-item .list-item-image img {\n        position: absolute; }\n      #list-container .list-item .list-item-image img:first-child {\n        animation: 1s rotation infinite linear; }\n    #list-container .list-item .list-item-description {\n      color: #8d8d8e;\n      padding: 10px; }\n      #list-container .list-item .list-item-description h3 {\n        margin-bottom: 10px; }\n      #list-container .list-item .list-item-description .list-item-date {\n        float: right; }\n\n.placeHolder {\n  background: #efefe8;\n  background: linear-gradient(to right, #efefe8 0px, #D1D1BD 50px, #efefe8 200px);\n  animation: 1s shimmer linear infinite; }\n",""])},function(t,e,n){var r=n(169);"string"==typeof r&&(r=[[t.i,r,""]]);var o={hmr:!0,transform:void 0,insertInto:void 0};n(70)(r,o);r.locals&&(t.exports=r.locals)},function(t,e,n){t.exports=n.p+"cce757eb84dc497b0f5a3a6f298c3f9e.png"},function(t,e,n){"use strict";Object.defineProperty(e,"__esModule",{value:!0});var r=Object.assign||function(t){for(var e=1;e<arguments.length;e++){var n=arguments[e];for(var r in n)Object.prototype.hasOwnProperty.call(n,r)&&(t[r]=n[r])}return t},o=function(){function t(t,e){for(var n=0;n<e.length;n++){var r=e[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(t,r.key,r)}}return function(e,n,r){return n&&t(e.prototype,n),r&&t(e,r),e}}(),i=l(n(10)),a=n(44),u=n(49);l(n(72));n(170);var c=l(n(167));function l(t){return t&&t.__esModule?t:{default:t}}var s=function(t){function e(t){return function(t,e){if(!(t instanceof e))throw new TypeError("Cannot call a class as a function")}(this,e),function(t,e){if(!t)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return!e||"object"!=typeof e&&"function"!=typeof e?t:e}(this,(e.__proto__||Object.getPrototypeOf(e)).call(this,t))}return function(t,e){if("function"!=typeof e&&null!==e)throw new TypeError("Super expression must either be null or a function, not "+typeof e);t.prototype=Object.create(e&&e.prototype,{constructor:{value:t,enumerable:!1,writable:!0,configurable:!0}}),e&&(Object.setPrototypeOf?Object.setPrototypeOf(t,e):t.__proto__=e)}(e,i.default.Component),o(e,[{key:"render",value:function(){var t=this.props,e=(t.requestList,t.isRetrievingData),n=t.list;return n.length?e?i.default.createElement("div",{id:"list-container"},i.default.createElement("p",null,"Retrieving data from API...")):i.default.createElement("div",{id:"list-container"},n.map(function(t){return i.default.createElement(c.default,r({key:t.id},t))})):i.default.createElement("div",{id:"list-container"},i.default.createElement("p",null,"No results yet, time to hit the form !"))}},{key:"componentDidMount",value:function(){this.props.requestList({from:0,to:1e5},"house")}}]),e}();e.default=(0,a.connect)(function(t){return{isRetrievingData:t.isRetrievingData,list:t.list}},function(t){return{requestList:function(e,n){return t((0,u.requestList)(e,n))}}})(s)},function(t,e){t.exports=function(t){if(!t.webpackPolyfill){var e=Object.create(t);e.children||(e.children=[]),Object.defineProperty(e,"loaded",{enumerable:!0,get:function(){return e.l}}),Object.defineProperty(e,"id",{enumerable:!0,get:function(){return e.i}}),Object.defineProperty(e,"exports",{enumerable:!0}),e.webpackPolyfill=1}return e}},function(t,e,n){"use strict";t.exports="SECRET_DO_NOT_PASS_THIS_OR_YOU_WILL_BE_FIRED"},function(t,e,n){"use strict";var r=n(73),o=n(74),i=n(174);t.exports=function(){function t(t,e,n,r,a,u){u!==i&&o(!1,"Calling PropTypes validators directly is not supported by the `prop-types` package. Use PropTypes.checkPropTypes() to call them. Read more at http://fb.me/use-check-prop-types")}function e(){return t}t.isRequired=t;var n={array:t,bool:t,func:t,number:t,object:t,string:t,symbol:t,any:t,arrayOf:e,element:t,instanceOf:e,node:t,objectOf:e,oneOf:e,oneOfType:e,shape:e,exact:e};return n.checkPropTypes=r,n.PropTypes=n,n}},function(t,e,n){"use strict";Object.defineProperty(e,"__esModule",{value:!0});var r=function(){function t(t,e){for(var n=0;n<e.length;n++){var r=e[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(t,r.key,r)}}return function(e,n,r){return n&&t(e.prototype,n),r&&t(e,r),e}}(),o=s(n(10)),i=n(44),a=s(n(172)),u=s(n(166));n(152);var c=s(n(150)),l=s(n(149));function s(t){return t&&t.__esModule?t:{default:t}}var f=function(t){function e(t){return function(t,e){if(!(t instanceof e))throw new TypeError("Cannot call a class as a function")}(this,e),function(t,e){if(!t)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return!e||"object"!=typeof e&&"function"!=typeof e?t:e}(this,(e.__proto__||Object.getPrototypeOf(e)).call(this,t))}return function(t,e){if("function"!=typeof e&&null!==e)throw new TypeError("Super expression must either be null or a function, not "+typeof e);t.prototype=Object.create(e&&e.prototype,{constructor:{value:t,enumerable:!1,writable:!0,configurable:!0}}),e&&(Object.setPrototypeOf?Object.setPrototypeOf(t,e):t.__proto__=e)}(e,o.default.Component),r(e,[{key:"render",value:function(){var t=this.props.isPropertyPanelOpen;return o.default.createElement("div",{id:"app-container"},t?o.default.createElement(l.default,null):null,o.default.createElement("h1",{id:"banner"},o.default.createElement("img",{src:c.default}),"Immo-App"),o.default.createElement(u.default,null),o.default.createElement(a.default,null))}}]),e}();e.default=(0,i.connect)(function(t){return{isPropertyPanelOpen:t.isPropertyPanelOpen}})(f)},function(t,e,n){"use strict";t.exports=function(t){var e=(t?t.ownerDocument||t:document).defaultView||window;return!(!t||!("function"==typeof e.Node?t instanceof e.Node:"object"==typeof t&&"number"==typeof t.nodeType&&"string"==typeof t.nodeName))}},function(t,e,n){"use strict";var r=n(177);t.exports=function(t){return r(t)&&3==t.nodeType}},function(t,e,n){"use strict";var r=n(178);t.exports=function t(e,n){return!(!e||!n)&&(e===n||!r(e)&&(r(n)?t(e,n.parentNode):"contains"in e?e.contains(n):!!e.compareDocumentPosition&&!!(16&e.compareDocumentPosition(n))))}},function(t,e,n){"use strict";var r=Object.prototype.hasOwnProperty;function o(t,e){return t===e?0!==t||0!==e||1/t==1/e:t!=t&&e!=e}t.exports=function(t,e){if(o(t,e))return!0;if("object"!=typeof t||null===t||"object"!=typeof e||null===e)return!1;var n=Object.keys(t),i=Object.keys(e);if(n.length!==i.length)return!1;for(var a=0;a<n.length;a++)if(!r.call(e,n[a])||!o(t[n[a]],e[n[a]]))return!1;return!0}},function(t,e,n){"use strict";t.exports=function(t){if(void 0===(t=t||("undefined"!=typeof document?document:void 0)))return null;try{return t.activeElement||t.body}catch(e){return t.body}}},function(t,e,n){"use strict";var r=!("undefined"==typeof window||!window.document||!window.document.createElement),o={canUseDOM:r,canUseWorkers:"undefined"!=typeof Worker,canUseEventListeners:r&&!(!window.addEventListener&&!window.attachEvent),canUseViewport:r&&!!window.screen,isInWorker:!r};t.exports=o},function(t,e,n){"use strict";
/** @license React v16.4.0
 * react-dom.production.min.js
 *
 * Copyright (c) 2013-present, Facebook, Inc.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 */var r=n(74),o=n(10),i=n(182),a=n(107),u=n(73),c=n(181),l=n(180),s=n(179),f=n(106);function p(t){for(var e=arguments.length-1,n="https://reactjs.org/docs/error-decoder.html?invariant="+t,o=0;o<e;o++)n+="&args[]="+encodeURIComponent(arguments[o+1]);r(!1,"Minified React error #"+t+"; visit %s for the full message or use the non-minified dev environment for full errors and additional helpful warnings. ",n)}o||p("227");var d={_caughtError:null,_hasCaughtError:!1,_rethrowError:null,_hasRethrowError:!1,invokeGuardedCallback:function(t,e,n,r,o,i,a,u,c){(function(t,e,n,r,o,i,a,u,c){this._hasCaughtError=!1,this._caughtError=null;var l=Array.prototype.slice.call(arguments,3);try{e.apply(n,l)}catch(t){this._caughtError=t,this._hasCaughtError=!0}}).apply(d,arguments)},invokeGuardedCallbackAndCatchFirstError:function(t,e,n,r,o,i,a,u,c){if(d.invokeGuardedCallback.apply(this,arguments),d.hasCaughtError()){var l=d.clearCaughtError();d._hasRethrowError||(d._hasRethrowError=!0,d._rethrowError=l)}},rethrowCaughtError:function(){return function(){if(d._hasRethrowError){var t=d._rethrowError;throw d._rethrowError=null,d._hasRethrowError=!1,t}}.apply(d,arguments)},hasCaughtError:function(){return d._hasCaughtError},clearCaughtError:function(){if(d._hasCaughtError){var t=d._caughtError;return d._caughtError=null,d._hasCaughtError=!1,t}p("198")}};var h=null,v={};function y(){if(h)for(var t in v){var e=v[t],n=h.indexOf(t);if(-1<n||p("96",t),!g[n])for(var r in e.extractEvents||p("97",t),g[n]=e,n=e.eventTypes){var o=void 0,i=n[r],a=e,u=r;b.hasOwnProperty(u)&&p("99",u),b[u]=i;var c=i.phasedRegistrationNames;if(c){for(o in c)c.hasOwnProperty(o)&&m(c[o],a,u);o=!0}else i.registrationName?(m(i.registrationName,a,u),o=!0):o=!1;o||p("98",r,t)}}}function m(t,e,n){_[t]&&p("100",t),_[t]=e,w[t]=e.eventTypes[n].dependencies}var g=[],b={},_={},w={};function x(t){h&&p("101"),h=Array.prototype.slice.call(t),y()}function E(t){var e,n=!1;for(e in t)if(t.hasOwnProperty(e)){var r=t[e];v.hasOwnProperty(e)&&v[e]===r||(v[e]&&p("102",e),v[e]=r,n=!0)}n&&y()}var S={plugins:g,eventNameDispatchConfigs:b,registrationNameModules:_,registrationNameDependencies:w,possibleRegistrationNames:null,injectEventPluginOrder:x,injectEventPluginsByName:E},T=null,P=null,O=null;function k(t,e,n,r){e=t.type||"unknown-event",t.currentTarget=O(r),d.invokeGuardedCallbackAndCatchFirstError(e,n,void 0,t),t.currentTarget=null}function C(t,e){return null==e&&p("30"),null==t?e:Array.isArray(t)?Array.isArray(e)?(t.push.apply(t,e),t):(t.push(e),t):Array.isArray(e)?[t].concat(e):[t,e]}function N(t,e,n){Array.isArray(t)?t.forEach(e,n):t&&e.call(n,t)}var R=null;function A(t,e){if(t){var n=t._dispatchListeners,r=t._dispatchInstances;if(Array.isArray(n))for(var o=0;o<n.length&&!t.isPropagationStopped();o++)k(t,e,n[o],r[o]);else n&&k(t,e,n,r);t._dispatchListeners=null,t._dispatchInstances=null,t.isPersistent()||t.constructor.release(t)}}function M(t){return A(t,!0)}function j(t){return A(t,!1)}var L={injectEventPluginOrder:x,injectEventPluginsByName:E};function I(t,e){var n=t.stateNode;if(!n)return null;var r=T(n);if(!r)return null;n=r[e];t:switch(e){case"onClick":case"onClickCapture":case"onDoubleClick":case"onDoubleClickCapture":case"onMouseDown":case"onMouseDownCapture":case"onMouseMove":case"onMouseMoveCapture":case"onMouseUp":case"onMouseUpCapture":(r=!r.disabled)||(r=!("button"===(t=t.type)||"input"===t||"select"===t||"textarea"===t)),t=!r;break t;default:t=!1}return t?null:(n&&"function"!=typeof n&&p("231",e,typeof n),n)}function F(t,e){null!==t&&(R=C(R,t)),t=R,R=null,t&&(N(t,e?M:j),R&&p("95"),d.rethrowCaughtError())}function D(t,e,n,r){for(var o=null,i=0;i<g.length;i++){var a=g[i];a&&(a=a.extractEvents(t,e,n,r))&&(o=C(o,a))}F(o,!1)}var U={injection:L,getListener:I,runEventsInBatch:F,runExtractedEventsInBatch:D},B=Math.random().toString(36).slice(2),z="__reactInternalInstance$"+B,W="__reactEventHandlers$"+B;function H(t){if(t[z])return t[z];for(;!t[z];){if(!t.parentNode)return null;t=t.parentNode}return 5===(t=t[z]).tag||6===t.tag?t:null}function V(t){if(5===t.tag||6===t.tag)return t.stateNode;p("33")}function q(t){return t[W]||null}var G={precacheFiberNode:function(t,e){e[z]=t},getClosestInstanceFromNode:H,getInstanceFromNode:function(t){return!(t=t[z])||5!==t.tag&&6!==t.tag?null:t},getNodeFromInstance:V,getFiberCurrentPropsFromNode:q,updateFiberProps:function(t,e){t[W]=e}};function Y(t){do{t=t.return}while(t&&5!==t.tag);return t||null}function $(t,e,n){for(var r=[];t;)r.push(t),t=Y(t);for(t=r.length;0<t--;)e(r[t],"captured",n);for(t=0;t<r.length;t++)e(r[t],"bubbled",n)}function Q(t,e,n){(e=I(t,n.dispatchConfig.phasedRegistrationNames[e]))&&(n._dispatchListeners=C(n._dispatchListeners,e),n._dispatchInstances=C(n._dispatchInstances,t))}function K(t){t&&t.dispatchConfig.phasedRegistrationNames&&$(t._targetInst,Q,t)}function X(t){if(t&&t.dispatchConfig.phasedRegistrationNames){var e=t._targetInst;$(e=e?Y(e):null,Q,t)}}function J(t,e,n){t&&n&&n.dispatchConfig.registrationName&&(e=I(t,n.dispatchConfig.registrationName))&&(n._dispatchListeners=C(n._dispatchListeners,e),n._dispatchInstances=C(n._dispatchInstances,t))}function Z(t){t&&t.dispatchConfig.registrationName&&J(t._targetInst,null,t)}function tt(t){N(t,K)}function et(t,e,n,r){if(n&&r)t:{for(var o=n,i=r,a=0,u=o;u;u=Y(u))a++;u=0;for(var c=i;c;c=Y(c))u++;for(;0<a-u;)o=Y(o),a--;for(;0<u-a;)i=Y(i),u--;for(;a--;){if(o===i||o===i.alternate)break t;o=Y(o),i=Y(i)}o=null}else o=null;for(i=o,o=[];n&&n!==i&&(null===(a=n.alternate)||a!==i);)o.push(n),n=Y(n);for(n=[];r&&r!==i&&(null===(a=r.alternate)||a!==i);)n.push(r),r=Y(r);for(r=0;r<o.length;r++)J(o[r],"bubbled",t);for(t=n.length;0<t--;)J(n[t],"captured",e)}var nt={accumulateTwoPhaseDispatches:tt,accumulateTwoPhaseDispatchesSkipTarget:function(t){N(t,X)},accumulateEnterLeaveDispatches:et,accumulateDirectDispatches:function(t){N(t,Z)}};function rt(t,e){var n={};return n[t.toLowerCase()]=e.toLowerCase(),n["Webkit"+t]="webkit"+e,n["Moz"+t]="moz"+e,n["ms"+t]="MS"+e,n["O"+t]="o"+e.toLowerCase(),n}var ot={animationend:rt("Animation","AnimationEnd"),animationiteration:rt("Animation","AnimationIteration"),animationstart:rt("Animation","AnimationStart"),transitionend:rt("Transition","TransitionEnd")},it={},at={};function ut(t){if(it[t])return it[t];if(!ot[t])return t;var e,n=ot[t];for(e in n)if(n.hasOwnProperty(e)&&e in at)return it[t]=n[e];return t}i.canUseDOM&&(at=document.createElement("div").style,"AnimationEvent"in window||(delete ot.animationend.animation,delete ot.animationiteration.animation,delete ot.animationstart.animation),"TransitionEvent"in window||delete ot.transitionend.transition);var ct=ut("animationend"),lt=ut("animationiteration"),st=ut("animationstart"),ft=ut("transitionend"),pt="abort canplay canplaythrough durationchange emptied encrypted ended error loadeddata loadedmetadata loadstart pause play playing progress ratechange seeked seeking stalled suspend timeupdate volumechange waiting".split(" "),dt=null;function ht(){return!dt&&i.canUseDOM&&(dt="textContent"in document.documentElement?"textContent":"innerText"),dt}var vt={_root:null,_startText:null,_fallbackText:null};function yt(){if(vt._fallbackText)return vt._fallbackText;var t,e,n=vt._startText,r=n.length,o=mt(),i=o.length;for(t=0;t<r&&n[t]===o[t];t++);var a=r-t;for(e=1;e<=a&&n[r-e]===o[i-e];e++);return vt._fallbackText=o.slice(t,1<e?1-e:void 0),vt._fallbackText}function mt(){return"value"in vt._root?vt._root.value:vt._root[ht()]}var gt="dispatchConfig _targetInst nativeEvent isDefaultPrevented isPropagationStopped _dispatchListeners _dispatchInstances".split(" "),bt={type:null,target:null,currentTarget:u.thatReturnsNull,eventPhase:null,bubbles:null,cancelable:null,timeStamp:function(t){return t.timeStamp||Date.now()},defaultPrevented:null,isTrusted:null};function _t(t,e,n,r){for(var o in this.dispatchConfig=t,this._targetInst=e,this.nativeEvent=n,t=this.constructor.Interface)t.hasOwnProperty(o)&&((e=t[o])?this[o]=e(n):"target"===o?this.target=r:this[o]=n[o]);return this.isDefaultPrevented=(null!=n.defaultPrevented?n.defaultPrevented:!1===n.returnValue)?u.thatReturnsTrue:u.thatReturnsFalse,this.isPropagationStopped=u.thatReturnsFalse,this}function wt(t,e,n,r){if(this.eventPool.length){var o=this.eventPool.pop();return this.call(o,t,e,n,r),o}return new this(t,e,n,r)}function xt(t){t instanceof this||p("223"),t.destructor(),10>this.eventPool.length&&this.eventPool.push(t)}function Et(t){t.eventPool=[],t.getPooled=wt,t.release=xt}a(_t.prototype,{preventDefault:function(){this.defaultPrevented=!0;var t=this.nativeEvent;t&&(t.preventDefault?t.preventDefault():"unknown"!=typeof t.returnValue&&(t.returnValue=!1),this.isDefaultPrevented=u.thatReturnsTrue)},stopPropagation:function(){var t=this.nativeEvent;t&&(t.stopPropagation?t.stopPropagation():"unknown"!=typeof t.cancelBubble&&(t.cancelBubble=!0),this.isPropagationStopped=u.thatReturnsTrue)},persist:function(){this.isPersistent=u.thatReturnsTrue},isPersistent:u.thatReturnsFalse,destructor:function(){var t,e=this.constructor.Interface;for(t in e)this[t]=null;for(e=0;e<gt.length;e++)this[gt[e]]=null}}),_t.Interface=bt,_t.extend=function(t){function e(){}function n(){return r.apply(this,arguments)}var r=this;e.prototype=r.prototype;var o=new e;return a(o,n.prototype),n.prototype=o,n.prototype.constructor=n,n.Interface=a({},r.Interface,t),n.extend=r.extend,Et(n),n},Et(_t);var St=_t.extend({data:null}),Tt=_t.extend({data:null}),Pt=[9,13,27,32],Ot=i.canUseDOM&&"CompositionEvent"in window,kt=null;i.canUseDOM&&"documentMode"in document&&(kt=document.documentMode);var Ct=i.canUseDOM&&"TextEvent"in window&&!kt,Nt=i.canUseDOM&&(!Ot||kt&&8<kt&&11>=kt),Rt=String.fromCharCode(32),At={beforeInput:{phasedRegistrationNames:{bubbled:"onBeforeInput",captured:"onBeforeInputCapture"},dependencies:["compositionend","keypress","textInput","paste"]},compositionEnd:{phasedRegistrationNames:{bubbled:"onCompositionEnd",captured:"onCompositionEndCapture"},dependencies:"blur compositionend keydown keypress keyup mousedown".split(" ")},compositionStart:{phasedRegistrationNames:{bubbled:"onCompositionStart",captured:"onCompositionStartCapture"},dependencies:"blur compositionstart keydown keypress keyup mousedown".split(" ")},compositionUpdate:{phasedRegistrationNames:{bubbled:"onCompositionUpdate",captured:"onCompositionUpdateCapture"},dependencies:"blur compositionupdate keydown keypress keyup mousedown".split(" ")}},Mt=!1;function jt(t,e){switch(t){case"keyup":return-1!==Pt.indexOf(e.keyCode);case"keydown":return 229!==e.keyCode;case"keypress":case"mousedown":case"blur":return!0;default:return!1}}function Lt(t){return"object"==typeof(t=t.detail)&&"data"in t?t.data:null}var It=!1;var Ft={eventTypes:At,extractEvents:function(t,e,n,r){var o=void 0,i=void 0;if(Ot)t:{switch(t){case"compositionstart":o=At.compositionStart;break t;case"compositionend":o=At.compositionEnd;break t;case"compositionupdate":o=At.compositionUpdate;break t}o=void 0}else It?jt(t,n)&&(o=At.compositionEnd):"keydown"===t&&229===n.keyCode&&(o=At.compositionStart);return o?(Nt&&(It||o!==At.compositionStart?o===At.compositionEnd&&It&&(i=yt()):(vt._root=r,vt._startText=mt(),It=!0)),o=St.getPooled(o,e,n,r),i?o.data=i:null!==(i=Lt(n))&&(o.data=i),tt(o),i=o):i=null,(t=Ct?function(t,e){switch(t){case"compositionend":return Lt(e);case"keypress":return 32!==e.which?null:(Mt=!0,Rt);case"textInput":return(t=e.data)===Rt&&Mt?null:t;default:return null}}(t,n):function(t,e){if(It)return"compositionend"===t||!Ot&&jt(t,e)?(t=yt(),vt._root=null,vt._startText=null,vt._fallbackText=null,It=!1,t):null;switch(t){case"paste":return null;case"keypress":if(!(e.ctrlKey||e.altKey||e.metaKey)||e.ctrlKey&&e.altKey){if(e.char&&1<e.char.length)return e.char;if(e.which)return String.fromCharCode(e.which)}return null;case"compositionend":return Nt?null:e.data;default:return null}}(t,n))?((e=Tt.getPooled(At.beforeInput,e,n,r)).data=t,tt(e)):e=null,null===i?e:null===e?i:[i,e]}},Dt=null,Ut={injectFiberControlledHostComponent:function(t){Dt=t}},Bt=null,zt=null;function Wt(t){if(t=P(t)){Dt&&"function"==typeof Dt.restoreControlledState||p("194");var e=T(t.stateNode);Dt.restoreControlledState(t.stateNode,t.type,e)}}function Ht(t){Bt?zt?zt.push(t):zt=[t]:Bt=t}function Vt(){return null!==Bt||null!==zt}function qt(){if(Bt){var t=Bt,e=zt;if(zt=Bt=null,Wt(t),e)for(t=0;t<e.length;t++)Wt(e[t])}}var Gt={injection:Ut,enqueueStateRestore:Ht,needsStateRestore:Vt,restoreStateIfNeeded:qt};function Yt(t,e){return t(e)}function $t(t,e,n){return t(e,n)}function Qt(){}var Kt=!1;function Xt(t,e){if(Kt)return t(e);Kt=!0;try{return Yt(t,e)}finally{Kt=!1,Vt()&&(Qt(),qt())}}var Jt={color:!0,date:!0,datetime:!0,"datetime-local":!0,email:!0,month:!0,number:!0,password:!0,range:!0,search:!0,tel:!0,text:!0,time:!0,url:!0,week:!0};function Zt(t){var e=t&&t.nodeName&&t.nodeName.toLowerCase();return"input"===e?!!Jt[t.type]:"textarea"===e}function te(t){return(t=t.target||window).correspondingUseElement&&(t=t.correspondingUseElement),3===t.nodeType?t.parentNode:t}function ee(t,e){return!(!i.canUseDOM||e&&!("addEventListener"in document))&&((e=(t="on"+t)in document)||((e=document.createElement("div")).setAttribute(t,"return;"),e="function"==typeof e[t]),e)}function ne(t){var e=t.type;return(t=t.nodeName)&&"input"===t.toLowerCase()&&("checkbox"===e||"radio"===e)}function re(t){t._valueTracker||(t._valueTracker=function(t){var e=ne(t)?"checked":"value",n=Object.getOwnPropertyDescriptor(t.constructor.prototype,e),r=""+t[e];if(!t.hasOwnProperty(e)&&void 0!==n&&"function"==typeof n.get&&"function"==typeof n.set){var o=n.get,i=n.set;return Object.defineProperty(t,e,{configurable:!0,get:function(){return o.call(this)},set:function(t){r=""+t,i.call(this,t)}}),Object.defineProperty(t,e,{enumerable:n.enumerable}),{getValue:function(){return r},setValue:function(t){r=""+t},stopTracking:function(){t._valueTracker=null,delete t[e]}}}}(t))}function oe(t){if(!t)return!1;var e=t._valueTracker;if(!e)return!0;var n=e.getValue(),r="";return t&&(r=ne(t)?t.checked?"true":"false":t.value),(t=r)!==n&&(e.setValue(t),!0)}var ie=o.__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED.ReactCurrentOwner,ae="function"==typeof Symbol&&Symbol.for,ue=ae?Symbol.for("react.element"):60103,ce=ae?Symbol.for("react.portal"):60106,le=ae?Symbol.for("react.fragment"):60107,se=ae?Symbol.for("react.strict_mode"):60108,fe=ae?Symbol.for("react.profiler"):60114,pe=ae?Symbol.for("react.provider"):60109,de=ae?Symbol.for("react.context"):60110,he=ae?Symbol.for("react.async_mode"):60111,ve=ae?Symbol.for("react.forward_ref"):60112,ye=ae?Symbol.for("react.timeout"):60113,me="function"==typeof Symbol&&Symbol.iterator;function ge(t){return null===t||void 0===t?null:"function"==typeof(t=me&&t[me]||t["@@iterator"])?t:null}function be(t){var e=t.type;if("function"==typeof e)return e.displayName||e.name;if("string"==typeof e)return e;switch(e){case he:return"AsyncMode";case de:return"Context.Consumer";case le:return"ReactFragment";case ce:return"ReactPortal";case fe:return"Profiler("+t.pendingProps.id+")";case pe:return"Context.Provider";case se:return"StrictMode";case ye:return"Timeout"}if("object"==typeof e&&null!==e)switch(e.$$typeof){case ve:return""!==(t=e.render.displayName||e.render.name||"")?"ForwardRef("+t+")":"ForwardRef"}return null}function _e(t){var e="";do{t:switch(t.tag){case 0:case 1:case 2:case 5:var n=t._debugOwner,r=t._debugSource,o=be(t),i=null;n&&(i=be(n)),n=r,o="\n    in "+(o||"Unknown")+(n?" (at "+n.fileName.replace(/^.*[\\\/]/,"")+":"+n.lineNumber+")":i?" (created by "+i+")":"");break t;default:o=""}e+=o,t=t.return}while(t);return e}var we=/^[:A-Z_a-z\u00C0-\u00D6\u00D8-\u00F6\u00F8-\u02FF\u0370-\u037D\u037F-\u1FFF\u200C-\u200D\u2070-\u218F\u2C00-\u2FEF\u3001-\uD7FF\uF900-\uFDCF\uFDF0-\uFFFD][:A-Z_a-z\u00C0-\u00D6\u00D8-\u00F6\u00F8-\u02FF\u0370-\u037D\u037F-\u1FFF\u200C-\u200D\u2070-\u218F\u2C00-\u2FEF\u3001-\uD7FF\uF900-\uFDCF\uFDF0-\uFFFD\-.0-9\u00B7\u0300-\u036F\u203F-\u2040]*$/,xe={},Ee={};function Se(t,e,n,r,o){this.acceptsBooleans=2===e||3===e||4===e,this.attributeName=r,this.attributeNamespace=o,this.mustUseProperty=n,this.propertyName=t,this.type=e}var Te={};"children dangerouslySetInnerHTML defaultValue defaultChecked innerHTML suppressContentEditableWarning suppressHydrationWarning style".split(" ").forEach(function(t){Te[t]=new Se(t,0,!1,t,null)}),[["acceptCharset","accept-charset"],["className","class"],["htmlFor","for"],["httpEquiv","http-equiv"]].forEach(function(t){var e=t[0];Te[e]=new Se(e,1,!1,t[1],null)}),["contentEditable","draggable","spellCheck","value"].forEach(function(t){Te[t]=new Se(t,2,!1,t.toLowerCase(),null)}),["autoReverse","externalResourcesRequired","preserveAlpha"].forEach(function(t){Te[t]=new Se(t,2,!1,t,null)}),"allowFullScreen async autoFocus autoPlay controls default defer disabled formNoValidate hidden loop noModule noValidate open playsInline readOnly required reversed scoped seamless itemScope".split(" ").forEach(function(t){Te[t]=new Se(t,3,!1,t.toLowerCase(),null)}),["checked","multiple","muted","selected"].forEach(function(t){Te[t]=new Se(t,3,!0,t.toLowerCase(),null)}),["capture","download"].forEach(function(t){Te[t]=new Se(t,4,!1,t.toLowerCase(),null)}),["cols","rows","size","span"].forEach(function(t){Te[t]=new Se(t,6,!1,t.toLowerCase(),null)}),["rowSpan","start"].forEach(function(t){Te[t]=new Se(t,5,!1,t.toLowerCase(),null)});var Pe=/[\-:]([a-z])/g;function Oe(t){return t[1].toUpperCase()}function ke(t,e,n,r){var o=Te.hasOwnProperty(e)?Te[e]:null;(null!==o?0===o.type:!r&&(2<e.length&&("o"===e[0]||"O"===e[0])&&("n"===e[1]||"N"===e[1])))||(function(t,e,n,r){if(null===e||void 0===e||function(t,e,n,r){if(null!==n&&0===n.type)return!1;switch(typeof e){case"function":case"symbol":return!0;case"boolean":return!r&&(null!==n?!n.acceptsBooleans:"data-"!==(t=t.toLowerCase().slice(0,5))&&"aria-"!==t);default:return!1}}(t,e,n,r))return!0;if(r)return!1;if(null!==n)switch(n.type){case 3:return!e;case 4:return!1===e;case 5:return isNaN(e);case 6:return isNaN(e)||1>e}return!1}(e,n,o,r)&&(n=null),r||null===o?function(t){return!!Ee.hasOwnProperty(t)||!xe.hasOwnProperty(t)&&(we.test(t)?Ee[t]=!0:(xe[t]=!0,!1))}(e)&&(null===n?t.removeAttribute(e):t.setAttribute(e,""+n)):o.mustUseProperty?t[o.propertyName]=null===n?3!==o.type&&"":n:(e=o.attributeName,r=o.attributeNamespace,null===n?t.removeAttribute(e):(n=3===(o=o.type)||4===o&&!0===n?"":""+n,r?t.setAttributeNS(r,e,n):t.setAttribute(e,n))))}function Ce(t,e){var n=e.checked;return a({},e,{defaultChecked:void 0,defaultValue:void 0,value:void 0,checked:null!=n?n:t._wrapperState.initialChecked})}function Ne(t,e){var n=null==e.defaultValue?"":e.defaultValue,r=null!=e.checked?e.checked:e.defaultChecked;n=Le(null!=e.value?e.value:n),t._wrapperState={initialChecked:r,initialValue:n,controlled:"checkbox"===e.type||"radio"===e.type?null!=e.checked:null!=e.value}}function Re(t,e){null!=(e=e.checked)&&ke(t,"checked",e,!1)}function Ae(t,e){Re(t,e);var n=Le(e.value);null!=n&&("number"===e.type?(0===n&&""===t.value||t.value!=n)&&(t.value=""+n):t.value!==""+n&&(t.value=""+n)),e.hasOwnProperty("value")?je(t,e.type,n):e.hasOwnProperty("defaultValue")&&je(t,e.type,Le(e.defaultValue)),null==e.checked&&null!=e.defaultChecked&&(t.defaultChecked=!!e.defaultChecked)}function Me(t,e){(e.hasOwnProperty("value")||e.hasOwnProperty("defaultValue"))&&(""===t.value&&(t.value=""+t._wrapperState.initialValue),t.defaultValue=""+t._wrapperState.initialValue),""!==(e=t.name)&&(t.name=""),t.defaultChecked=!t.defaultChecked,t.defaultChecked=!t.defaultChecked,""!==e&&(t.name=e)}function je(t,e,n){"number"===e&&t.ownerDocument.activeElement===t||(null==n?t.defaultValue=""+t._wrapperState.initialValue:t.defaultValue!==""+n&&(t.defaultValue=""+n))}function Le(t){switch(typeof t){case"boolean":case"number":case"object":case"string":case"undefined":return t;default:return""}}"accent-height alignment-baseline arabic-form baseline-shift cap-height clip-path clip-rule color-interpolation color-interpolation-filters color-profile color-rendering dominant-baseline enable-background fill-opacity fill-rule flood-color flood-opacity font-family font-size font-size-adjust font-stretch font-style font-variant font-weight glyph-name glyph-orientation-horizontal glyph-orientation-vertical horiz-adv-x horiz-origin-x image-rendering letter-spacing lighting-color marker-end marker-mid marker-start overline-position overline-thickness paint-order panose-1 pointer-events rendering-intent shape-rendering stop-color stop-opacity strikethrough-position strikethrough-thickness stroke-dasharray stroke-dashoffset stroke-linecap stroke-linejoin stroke-miterlimit stroke-opacity stroke-width text-anchor text-decoration text-rendering underline-position underline-thickness unicode-bidi unicode-range units-per-em v-alphabetic v-hanging v-ideographic v-mathematical vector-effect vert-adv-y vert-origin-x vert-origin-y word-spacing writing-mode xmlns:xlink x-height".split(" ").forEach(function(t){var e=t.replace(Pe,Oe);Te[e]=new Se(e,1,!1,t,null)}),"xlink:actuate xlink:arcrole xlink:href xlink:role xlink:show xlink:title xlink:type".split(" ").forEach(function(t){var e=t.replace(Pe,Oe);Te[e]=new Se(e,1,!1,t,"http://www.w3.org/1999/xlink")}),["xml:base","xml:lang","xml:space"].forEach(function(t){var e=t.replace(Pe,Oe);Te[e]=new Se(e,1,!1,t,"http://www.w3.org/XML/1998/namespace")}),Te.tabIndex=new Se("tabIndex",1,!1,"tabindex",null);var Ie={change:{phasedRegistrationNames:{bubbled:"onChange",captured:"onChangeCapture"},dependencies:"blur change click focus input keydown keyup selectionchange".split(" ")}};function Fe(t,e,n){return(t=_t.getPooled(Ie.change,t,e,n)).type="change",Ht(n),tt(t),t}var De=null,Ue=null;function Be(t){F(t,!1)}function ze(t){if(oe(V(t)))return t}function We(t,e){if("change"===t)return e}var He=!1;function Ve(){De&&(De.detachEvent("onpropertychange",qe),Ue=De=null)}function qe(t){"value"===t.propertyName&&ze(Ue)&&Xt(Be,t=Fe(Ue,t,te(t)))}function Ge(t,e,n){"focus"===t?(Ve(),Ue=n,(De=e).attachEvent("onpropertychange",qe)):"blur"===t&&Ve()}function Ye(t){if("selectionchange"===t||"keyup"===t||"keydown"===t)return ze(Ue)}function $e(t,e){if("click"===t)return ze(e)}function Qe(t,e){if("input"===t||"change"===t)return ze(e)}i.canUseDOM&&(He=ee("input")&&(!document.documentMode||9<document.documentMode));var Ke={eventTypes:Ie,_isInputEventSupported:He,extractEvents:function(t,e,n,r){var o=e?V(e):window,i=void 0,a=void 0,u=o.nodeName&&o.nodeName.toLowerCase();if("select"===u||"input"===u&&"file"===o.type?i=We:Zt(o)?He?i=Qe:(i=Ye,a=Ge):(u=o.nodeName)&&"input"===u.toLowerCase()&&("checkbox"===o.type||"radio"===o.type)&&(i=$e),i&&(i=i(t,e)))return Fe(i,n,r);a&&a(t,o,e),"blur"===t&&null!=e&&(t=e._wrapperState||o._wrapperState)&&t.controlled&&"number"===o.type&&je(o,"number",o.value)}},Xe=_t.extend({view:null,detail:null}),Je={Alt:"altKey",Control:"ctrlKey",Meta:"metaKey",Shift:"shiftKey"};function Ze(t){var e=this.nativeEvent;return e.getModifierState?e.getModifierState(t):!!(t=Je[t])&&!!e[t]}function tn(){return Ze}var en=Xe.extend({screenX:null,screenY:null,clientX:null,clientY:null,pageX:null,pageY:null,ctrlKey:null,shiftKey:null,altKey:null,metaKey:null,getModifierState:tn,button:null,buttons:null,relatedTarget:function(t){return t.relatedTarget||(t.fromElement===t.srcElement?t.toElement:t.fromElement)}}),nn=en.extend({pointerId:null,width:null,height:null,pressure:null,tiltX:null,tiltY:null,pointerType:null,isPrimary:null}),rn={mouseEnter:{registrationName:"onMouseEnter",dependencies:["mouseout","mouseover"]},mouseLeave:{registrationName:"onMouseLeave",dependencies:["mouseout","mouseover"]},pointerEnter:{registrationName:"onPointerEnter",dependencies:["pointerout","pointerover"]},pointerLeave:{registrationName:"onPointerLeave",dependencies:["pointerout","pointerover"]}},on={eventTypes:rn,extractEvents:function(t,e,n,r){var o="mouseover"===t||"pointerover"===t,i="mouseout"===t||"pointerout"===t;if(o&&(n.relatedTarget||n.fromElement)||!i&&!o)return null;if(o=r.window===r?r:(o=r.ownerDocument)?o.defaultView||o.parentWindow:window,i?(i=e,e=(e=n.relatedTarget||n.toElement)?H(e):null):i=null,i===e)return null;var a=void 0,u=void 0,c=void 0,l=void 0;return"mouseout"===t||"mouseover"===t?(a=en,u=rn.mouseLeave,c=rn.mouseEnter,l="mouse"):"pointerout"!==t&&"pointerover"!==t||(a=nn,u=rn.pointerLeave,c=rn.pointerEnter,l="pointer"),t=null==i?o:V(i),o=null==e?o:V(e),(u=a.getPooled(u,i,n,r)).type=l+"leave",u.target=t,u.relatedTarget=o,(n=a.getPooled(c,e,n,r)).type=l+"enter",n.target=o,n.relatedTarget=t,et(u,n,i,e),[u,n]}};function an(t){var e=t;if(t.alternate)for(;e.return;)e=e.return;else{if(0!=(2&e.effectTag))return 1;for(;e.return;)if(0!=(2&(e=e.return).effectTag))return 1}return 3===e.tag?2:3}function un(t){2!==an(t)&&p("188")}function cn(t){var e=t.alternate;if(!e)return 3===(e=an(t))&&p("188"),1===e?null:t;for(var n=t,r=e;;){var o=n.return,i=o?o.alternate:null;if(!o||!i)break;if(o.child===i.child){for(var a=o.child;a;){if(a===n)return un(o),t;if(a===r)return un(o),e;a=a.sibling}p("188")}if(n.return!==r.return)n=o,r=i;else{a=!1;for(var u=o.child;u;){if(u===n){a=!0,n=o,r=i;break}if(u===r){a=!0,r=o,n=i;break}u=u.sibling}if(!a){for(u=i.child;u;){if(u===n){a=!0,n=i,r=o;break}if(u===r){a=!0,r=i,n=o;break}u=u.sibling}a||p("189")}}n.alternate!==r&&p("190")}return 3!==n.tag&&p("188"),n.stateNode.current===n?t:e}function ln(t){if(!(t=cn(t)))return null;for(var e=t;;){if(5===e.tag||6===e.tag)return e;if(e.child)e.child.return=e,e=e.child;else{if(e===t)break;for(;!e.sibling;){if(!e.return||e.return===t)return null;e=e.return}e.sibling.return=e.return,e=e.sibling}}return null}var sn=_t.extend({animationName:null,elapsedTime:null,pseudoElement:null}),fn=_t.extend({clipboardData:function(t){return"clipboardData"in t?t.clipboardData:window.clipboardData}}),pn=Xe.extend({relatedTarget:null});function dn(t){var e=t.keyCode;return"charCode"in t?0===(t=t.charCode)&&13===e&&(t=13):t=e,10===t&&(t=13),32<=t||13===t?t:0}var hn={Esc:"Escape",Spacebar:" ",Left:"ArrowLeft",Up:"ArrowUp",Right:"ArrowRight",Down:"ArrowDown",Del:"Delete",Win:"OS",Menu:"ContextMenu",Apps:"ContextMenu",Scroll:"ScrollLock",MozPrintableKey:"Unidentified"},vn={8:"Backspace",9:"Tab",12:"Clear",13:"Enter",16:"Shift",17:"Control",18:"Alt",19:"Pause",20:"CapsLock",27:"Escape",32:" ",33:"PageUp",34:"PageDown",35:"End",36:"Home",37:"ArrowLeft",38:"ArrowUp",39:"ArrowRight",40:"ArrowDown",45:"Insert",46:"Delete",112:"F1",113:"F2",114:"F3",115:"F4",116:"F5",117:"F6",118:"F7",119:"F8",120:"F9",121:"F10",122:"F11",123:"F12",144:"NumLock",145:"ScrollLock",224:"Meta"},yn=Xe.extend({key:function(t){if(t.key){var e=hn[t.key]||t.key;if("Unidentified"!==e)return e}return"keypress"===t.type?13===(t=dn(t))?"Enter":String.fromCharCode(t):"keydown"===t.type||"keyup"===t.type?vn[t.keyCode]||"Unidentified":""},location:null,ctrlKey:null,shiftKey:null,altKey:null,metaKey:null,repeat:null,locale:null,getModifierState:tn,charCode:function(t){return"keypress"===t.type?dn(t):0},keyCode:function(t){return"keydown"===t.type||"keyup"===t.type?t.keyCode:0},which:function(t){return"keypress"===t.type?dn(t):"keydown"===t.type||"keyup"===t.type?t.keyCode:0}}),mn=en.extend({dataTransfer:null}),gn=Xe.extend({touches:null,targetTouches:null,changedTouches:null,altKey:null,metaKey:null,ctrlKey:null,shiftKey:null,getModifierState:tn}),bn=_t.extend({propertyName:null,elapsedTime:null,pseudoElement:null}),_n=en.extend({deltaX:function(t){return"deltaX"in t?t.deltaX:"wheelDeltaX"in t?-t.wheelDeltaX:0},deltaY:function(t){return"deltaY"in t?t.deltaY:"wheelDeltaY"in t?-t.wheelDeltaY:"wheelDelta"in t?-t.wheelDelta:0},deltaZ:null,deltaMode:null}),wn=[["abort","abort"],[ct,"animationEnd"],[lt,"animationIteration"],[st,"animationStart"],["canplay","canPlay"],["canplaythrough","canPlayThrough"],["drag","drag"],["dragenter","dragEnter"],["dragexit","dragExit"],["dragleave","dragLeave"],["dragover","dragOver"],["durationchange","durationChange"],["emptied","emptied"],["encrypted","encrypted"],["ended","ended"],["error","error"],["gotpointercapture","gotPointerCapture"],["load","load"],["loadeddata","loadedData"],["loadedmetadata","loadedMetadata"],["loadstart","loadStart"],["lostpointercapture","lostPointerCapture"],["mousemove","mouseMove"],["mouseout","mouseOut"],["mouseover","mouseOver"],["playing","playing"],["pointermove","pointerMove"],["pointerout","pointerOut"],["pointerover","pointerOver"],["progress","progress"],["scroll","scroll"],["seeking","seeking"],["stalled","stalled"],["suspend","suspend"],["timeupdate","timeUpdate"],["toggle","toggle"],["touchmove","touchMove"],[ft,"transitionEnd"],["waiting","waiting"],["wheel","wheel"]],xn={},En={};function Sn(t,e){var n=t[0],r="on"+((t=t[1])[0].toUpperCase()+t.slice(1));e={phasedRegistrationNames:{bubbled:r,captured:r+"Capture"},dependencies:[n],isInteractive:e},xn[t]=e,En[n]=e}[["blur","blur"],["cancel","cancel"],["click","click"],["close","close"],["contextmenu","contextMenu"],["copy","copy"],["cut","cut"],["dblclick","doubleClick"],["dragend","dragEnd"],["dragstart","dragStart"],["drop","drop"],["focus","focus"],["input","input"],["invalid","invalid"],["keydown","keyDown"],["keypress","keyPress"],["keyup","keyUp"],["mousedown","mouseDown"],["mouseup","mouseUp"],["paste","paste"],["pause","pause"],["play","play"],["pointercancel","pointerCancel"],["pointerdown","pointerDown"],["pointerup","pointerUp"],["ratechange","rateChange"],["reset","reset"],["seeked","seeked"],["submit","submit"],["touchcancel","touchCancel"],["touchend","touchEnd"],["touchstart","touchStart"],["volumechange","volumeChange"]].forEach(function(t){Sn(t,!0)}),wn.forEach(function(t){Sn(t,!1)});var Tn={eventTypes:xn,isInteractiveTopLevelEventType:function(t){return void 0!==(t=En[t])&&!0===t.isInteractive},extractEvents:function(t,e,n,r){var o=En[t];if(!o)return null;switch(t){case"keypress":if(0===dn(n))return null;case"keydown":case"keyup":t=yn;break;case"blur":case"focus":t=pn;break;case"click":if(2===n.button)return null;case"dblclick":case"mousedown":case"mousemove":case"mouseup":case"mouseout":case"mouseover":case"contextmenu":t=en;break;case"drag":case"dragend":case"dragenter":case"dragexit":case"dragleave":case"dragover":case"dragstart":case"drop":t=mn;break;case"touchcancel":case"touchend":case"touchmove":case"touchstart":t=gn;break;case ct:case lt:case st:t=sn;break;case ft:t=bn;break;case"scroll":t=Xe;break;case"wheel":t=_n;break;case"copy":case"cut":case"paste":t=fn;break;case"gotpointercapture":case"lostpointercapture":case"pointercancel":case"pointerdown":case"pointermove":case"pointerout":case"pointerover":case"pointerup":t=nn;break;default:t=_t}return tt(e=t.getPooled(o,e,n,r)),e}},Pn=Tn.isInteractiveTopLevelEventType,On=[];function kn(t){var e=t.targetInst;do{if(!e){t.ancestors.push(e);break}var n;for(n=e;n.return;)n=n.return;if(!(n=3!==n.tag?null:n.stateNode.containerInfo))break;t.ancestors.push(e),e=H(n)}while(e);for(n=0;n<t.ancestors.length;n++)e=t.ancestors[n],D(t.topLevelType,e,t.nativeEvent,te(t.nativeEvent))}var Cn=!0;function Nn(t){Cn=!!t}function Rn(t,e){if(!e)return null;var n=(Pn(t)?Mn:jn).bind(null,t);e.addEventListener(t,n,!1)}function An(t,e){if(!e)return null;var n=(Pn(t)?Mn:jn).bind(null,t);e.addEventListener(t,n,!0)}function Mn(t,e){$t(jn,t,e)}function jn(t,e){if(Cn){var n=te(e);if(null===(n=H(n))||"number"!=typeof n.tag||2===an(n)||(n=null),On.length){var r=On.pop();r.topLevelType=t,r.nativeEvent=e,r.targetInst=n,t=r}else t={topLevelType:t,nativeEvent:e,targetInst:n,ancestors:[]};try{Xt(kn,t)}finally{t.topLevelType=null,t.nativeEvent=null,t.targetInst=null,t.ancestors.length=0,10>On.length&&On.push(t)}}}var Ln={get _enabled(){return Cn},setEnabled:Nn,isEnabled:function(){return Cn},trapBubbledEvent:Rn,trapCapturedEvent:An,dispatchEvent:jn},In={},Fn=0,Dn="_reactListenersID"+(""+Math.random()).slice(2);function Un(t){return Object.prototype.hasOwnProperty.call(t,Dn)||(t[Dn]=Fn++,In[t[Dn]]={}),In[t[Dn]]}function Bn(t){for(;t&&t.firstChild;)t=t.firstChild;return t}function zn(t,e){var n,r=Bn(t);for(t=0;r;){if(3===r.nodeType){if(n=t+r.textContent.length,t<=e&&n>=e)return{node:r,offset:e-t};t=n}t:{for(;r;){if(r.nextSibling){r=r.nextSibling;break t}r=r.parentNode}r=void 0}r=Bn(r)}}function Wn(t){var e=t&&t.nodeName&&t.nodeName.toLowerCase();return e&&("input"===e&&"text"===t.type||"textarea"===e||"true"===t.contentEditable)}var Hn=i.canUseDOM&&"documentMode"in document&&11>=document.documentMode,Vn={select:{phasedRegistrationNames:{bubbled:"onSelect",captured:"onSelectCapture"},dependencies:"blur contextmenu focus keydown keyup mousedown mouseup selectionchange".split(" ")}},qn=null,Gn=null,Yn=null,$n=!1;function Qn(t,e){if($n||null==qn||qn!==c())return null;var n=qn;return"selectionStart"in n&&Wn(n)?n={start:n.selectionStart,end:n.selectionEnd}:window.getSelection?n={anchorNode:(n=window.getSelection()).anchorNode,anchorOffset:n.anchorOffset,focusNode:n.focusNode,focusOffset:n.focusOffset}:n=void 0,Yn&&l(Yn,n)?null:(Yn=n,(t=_t.getPooled(Vn.select,Gn,t,e)).type="select",t.target=qn,tt(t),t)}var Kn={eventTypes:Vn,extractEvents:function(t,e,n,r){var o,i=r.window===r?r.document:9===r.nodeType?r:r.ownerDocument;if(!(o=!i)){t:{i=Un(i),o=w.onSelect;for(var a=0;a<o.length;a++){var u=o[a];if(!i.hasOwnProperty(u)||!i[u]){i=!1;break t}}i=!0}o=!i}if(o)return null;switch(i=e?V(e):window,t){case"focus":(Zt(i)||"true"===i.contentEditable)&&(qn=i,Gn=e,Yn=null);break;case"blur":Yn=Gn=qn=null;break;case"mousedown":$n=!0;break;case"contextmenu":case"mouseup":return $n=!1,Qn(n,r);case"selectionchange":if(Hn)break;case"keydown":case"keyup":return Qn(n,r)}return null}};L.injectEventPluginOrder("ResponderEventPlugin SimpleEventPlugin TapEventPlugin EnterLeaveEventPlugin ChangeEventPlugin SelectEventPlugin BeforeInputEventPlugin".split(" ")),T=G.getFiberCurrentPropsFromNode,P=G.getInstanceFromNode,O=G.getNodeFromInstance,L.injectEventPluginsByName({SimpleEventPlugin:Tn,EnterLeaveEventPlugin:on,ChangeEventPlugin:Ke,SelectEventPlugin:Kn,BeforeInputEventPlugin:Ft});var Xn=void 0;Xn="object"==typeof performance&&"function"==typeof performance.now?function(){return performance.now()}:function(){return Date.now()};var Jn=void 0,Zn=void 0;if(i.canUseDOM){var tr=[],er=0,nr={},rr=-1,or=!1,ir=!1,ar=0,ur=33,cr=33,lr={didTimeout:!1,timeRemaining:function(){var t=ar-Xn();return 0<t?t:0}},sr=function(t,e){if(nr[e])try{t(lr)}finally{delete nr[e]}},fr="__reactIdleCallback$"+Math.random().toString(36).slice(2);window.addEventListener("message",function(t){if(t.source===window&&t.data===fr&&(or=!1,0!==tr.length)){if(0!==tr.length&&(t=Xn(),!(-1===rr||rr>t))){rr=-1,lr.didTimeout=!0;for(var e=0,n=tr.length;e<n;e++){var r=tr[e],o=r.timeoutTime;-1!==o&&o<=t?sr(r.scheduledCallback,r.callbackId):-1!==o&&(-1===rr||o<rr)&&(rr=o)}}for(t=Xn();0<ar-t&&0<tr.length;)t=tr.shift(),lr.didTimeout=!1,sr(t.scheduledCallback,t.callbackId),t=Xn();0<tr.length&&!ir&&(ir=!0,requestAnimationFrame(pr))}},!1);var pr=function(t){ir=!1;var e=t-ar+cr;e<cr&&ur<cr?(8>e&&(e=8),cr=e<ur?ur:e):ur=e,ar=t+cr,or||(or=!0,window.postMessage(fr,"*"))};Jn=function(t,e){var n=-1;return null!=e&&"number"==typeof e.timeout&&(n=Xn()+e.timeout),(-1===rr||-1!==n&&n<rr)&&(rr=n),e=++er,tr.push({scheduledCallback:t,callbackId:e,timeoutTime:n}),nr[e]=!0,ir||(ir=!0,requestAnimationFrame(pr)),e},Zn=function(t){delete nr[t]}}else{var dr=0,hr={};Jn=function(t){var e=dr++,n=setTimeout(function(){t({timeRemaining:function(){return 1/0},didTimeout:!1})});return hr[e]=n,e},Zn=function(t){var e=hr[t];delete hr[t],clearTimeout(e)}}function vr(t,e){return t=a({children:void 0},e),(e=function(t){var e="";return o.Children.forEach(t,function(t){null==t||"string"!=typeof t&&"number"!=typeof t||(e+=t)}),e}(e.children))&&(t.children=e),t}function yr(t,e,n,r){if(t=t.options,e){e={};for(var o=0;o<n.length;o++)e["$"+n[o]]=!0;for(n=0;n<t.length;n++)o=e.hasOwnProperty("$"+t[n].value),t[n].selected!==o&&(t[n].selected=o),o&&r&&(t[n].defaultSelected=!0)}else{for(n=""+n,e=null,o=0;o<t.length;o++){if(t[o].value===n)return t[o].selected=!0,void(r&&(t[o].defaultSelected=!0));null!==e||t[o].disabled||(e=t[o])}null!==e&&(e.selected=!0)}}function mr(t,e){var n=e.value;t._wrapperState={initialValue:null!=n?n:e.defaultValue,wasMultiple:!!e.multiple}}function gr(t,e){return null!=e.dangerouslySetInnerHTML&&p("91"),a({},e,{value:void 0,defaultValue:void 0,children:""+t._wrapperState.initialValue})}function br(t,e){var n=e.value;null==n&&(n=e.defaultValue,null!=(e=e.children)&&(null!=n&&p("92"),Array.isArray(e)&&(1>=e.length||p("93"),e=e[0]),n=""+e),null==n&&(n="")),t._wrapperState={initialValue:""+n}}function _r(t,e){var n=e.value;null!=n&&((n=""+n)!==t.value&&(t.value=n),null==e.defaultValue&&(t.defaultValue=n)),null!=e.defaultValue&&(t.defaultValue=e.defaultValue)}function wr(t){var e=t.textContent;e===t._wrapperState.initialValue&&(t.value=e)}var xr={html:"http://www.w3.org/1999/xhtml",mathml:"http://www.w3.org/1998/Math/MathML",svg:"http://www.w3.org/2000/svg"};function Er(t){switch(t){case"svg":return"http://www.w3.org/2000/svg";case"math":return"http://www.w3.org/1998/Math/MathML";default:return"http://www.w3.org/1999/xhtml"}}function Sr(t,e){return null==t||"http://www.w3.org/1999/xhtml"===t?Er(e):"http://www.w3.org/2000/svg"===t&&"foreignObject"===e?"http://www.w3.org/1999/xhtml":t}var Tr,Pr=void 0,Or=(Tr=function(t,e){if(t.namespaceURI!==xr.svg||"innerHTML"in t)t.innerHTML=e;else{for((Pr=Pr||document.createElement("div")).innerHTML="<svg>"+e+"</svg>",e=Pr.firstChild;t.firstChild;)t.removeChild(t.firstChild);for(;e.firstChild;)t.appendChild(e.firstChild)}},"undefined"!=typeof MSApp&&MSApp.execUnsafeLocalFunction?function(t,e,n,r){MSApp.execUnsafeLocalFunction(function(){return Tr(t,e)})}:Tr);function kr(t,e){if(e){var n=t.firstChild;if(n&&n===t.lastChild&&3===n.nodeType)return void(n.nodeValue=e)}t.textContent=e}var Cr={animationIterationCount:!0,borderImageOutset:!0,borderImageSlice:!0,borderImageWidth:!0,boxFlex:!0,boxFlexGroup:!0,boxOrdinalGroup:!0,columnCount:!0,columns:!0,flex:!0,flexGrow:!0,flexPositive:!0,flexShrink:!0,flexNegative:!0,flexOrder:!0,gridRow:!0,gridRowEnd:!0,gridRowSpan:!0,gridRowStart:!0,gridColumn:!0,gridColumnEnd:!0,gridColumnSpan:!0,gridColumnStart:!0,fontWeight:!0,lineClamp:!0,lineHeight:!0,opacity:!0,order:!0,orphans:!0,tabSize:!0,widows:!0,zIndex:!0,zoom:!0,fillOpacity:!0,floodOpacity:!0,stopOpacity:!0,strokeDasharray:!0,strokeDashoffset:!0,strokeMiterlimit:!0,strokeOpacity:!0,strokeWidth:!0},Nr=["Webkit","ms","Moz","O"];function Rr(t,e){for(var n in t=t.style,e)if(e.hasOwnProperty(n)){var r=0===n.indexOf("--"),o=n,i=e[n];o=null==i||"boolean"==typeof i||""===i?"":r||"number"!=typeof i||0===i||Cr.hasOwnProperty(o)&&Cr[o]?(""+i).trim():i+"px","float"===n&&(n="cssFloat"),r?t.setProperty(n,o):t[n]=o}}Object.keys(Cr).forEach(function(t){Nr.forEach(function(e){e=e+t.charAt(0).toUpperCase()+t.substring(1),Cr[e]=Cr[t]})});var Ar=a({menuitem:!0},{area:!0,base:!0,br:!0,col:!0,embed:!0,hr:!0,img:!0,input:!0,keygen:!0,link:!0,meta:!0,param:!0,source:!0,track:!0,wbr:!0});function Mr(t,e,n){e&&(Ar[t]&&(null!=e.children||null!=e.dangerouslySetInnerHTML)&&p("137",t,n()),null!=e.dangerouslySetInnerHTML&&(null!=e.children&&p("60"),"object"==typeof e.dangerouslySetInnerHTML&&"__html"in e.dangerouslySetInnerHTML||p("61")),null!=e.style&&"object"!=typeof e.style&&p("62",n()))}function jr(t,e){if(-1===t.indexOf("-"))return"string"==typeof e.is;switch(t){case"annotation-xml":case"color-profile":case"font-face":case"font-face-src":case"font-face-uri":case"font-face-format":case"font-face-name":case"missing-glyph":return!1;default:return!0}}var Lr=u.thatReturns("");function Ir(t,e){var n=Un(t=9===t.nodeType||11===t.nodeType?t:t.ownerDocument);e=w[e];for(var r=0;r<e.length;r++){var o=e[r];if(!n.hasOwnProperty(o)||!n[o]){switch(o){case"scroll":An("scroll",t);break;case"focus":case"blur":An("focus",t),An("blur",t),n.blur=!0,n.focus=!0;break;case"cancel":case"close":ee(o,!0)&&An(o,t);break;case"invalid":case"submit":case"reset":break;default:-1===pt.indexOf(o)&&Rn(o,t)}n[o]=!0}}}function Fr(t,e,n,r){return n=9===n.nodeType?n:n.ownerDocument,r===xr.html&&(r=Er(t)),r===xr.html?"script"===t?((t=n.createElement("div")).innerHTML="<script><\/script>",t=t.removeChild(t.firstChild)):t="string"==typeof e.is?n.createElement(t,{is:e.is}):n.createElement(t):t=n.createElementNS(r,t),t}function Dr(t,e){return(9===e.nodeType?e:e.ownerDocument).createTextNode(t)}function Ur(t,e,n,r){var o=jr(e,n);switch(e){case"iframe":case"object":Rn("load",t);var i=n;break;case"video":case"audio":for(i=0;i<pt.length;i++)Rn(pt[i],t);i=n;break;case"source":Rn("error",t),i=n;break;case"img":case"image":case"link":Rn("error",t),Rn("load",t),i=n;break;case"form":Rn("reset",t),Rn("submit",t),i=n;break;case"details":Rn("toggle",t),i=n;break;case"input":Ne(t,n),i=Ce(t,n),Rn("invalid",t),Ir(r,"onChange");break;case"option":i=vr(t,n);break;case"select":mr(t,n),i=a({},n,{value:void 0}),Rn("invalid",t),Ir(r,"onChange");break;case"textarea":br(t,n),i=gr(t,n),Rn("invalid",t),Ir(r,"onChange");break;default:i=n}Mr(e,i,Lr);var c,l=i;for(c in l)if(l.hasOwnProperty(c)){var s=l[c];"style"===c?Rr(t,s):"dangerouslySetInnerHTML"===c?null!=(s=s?s.__html:void 0)&&Or(t,s):"children"===c?"string"==typeof s?("textarea"!==e||""!==s)&&kr(t,s):"number"==typeof s&&kr(t,""+s):"suppressContentEditableWarning"!==c&&"suppressHydrationWarning"!==c&&"autoFocus"!==c&&(_.hasOwnProperty(c)?null!=s&&Ir(r,c):null!=s&&ke(t,c,s,o))}switch(e){case"input":re(t),Me(t,n);break;case"textarea":re(t),wr(t);break;case"option":null!=n.value&&t.setAttribute("value",n.value);break;case"select":t.multiple=!!n.multiple,null!=(e=n.value)?yr(t,!!n.multiple,e,!1):null!=n.defaultValue&&yr(t,!!n.multiple,n.defaultValue,!0);break;default:"function"==typeof i.onClick&&(t.onclick=u)}}function Br(t,e,n,r,o){var i=null;switch(e){case"input":n=Ce(t,n),r=Ce(t,r),i=[];break;case"option":n=vr(t,n),r=vr(t,r),i=[];break;case"select":n=a({},n,{value:void 0}),r=a({},r,{value:void 0}),i=[];break;case"textarea":n=gr(t,n),r=gr(t,r),i=[];break;default:"function"!=typeof n.onClick&&"function"==typeof r.onClick&&(t.onclick=u)}Mr(e,r,Lr),e=t=void 0;var c=null;for(t in n)if(!r.hasOwnProperty(t)&&n.hasOwnProperty(t)&&null!=n[t])if("style"===t){var l=n[t];for(e in l)l.hasOwnProperty(e)&&(c||(c={}),c[e]="")}else"dangerouslySetInnerHTML"!==t&&"children"!==t&&"suppressContentEditableWarning"!==t&&"suppressHydrationWarning"!==t&&"autoFocus"!==t&&(_.hasOwnProperty(t)?i||(i=[]):(i=i||[]).push(t,null));for(t in r){var s=r[t];if(l=null!=n?n[t]:void 0,r.hasOwnProperty(t)&&s!==l&&(null!=s||null!=l))if("style"===t)if(l){for(e in l)!l.hasOwnProperty(e)||s&&s.hasOwnProperty(e)||(c||(c={}),c[e]="");for(e in s)s.hasOwnProperty(e)&&l[e]!==s[e]&&(c||(c={}),c[e]=s[e])}else c||(i||(i=[]),i.push(t,c)),c=s;else"dangerouslySetInnerHTML"===t?(s=s?s.__html:void 0,l=l?l.__html:void 0,null!=s&&l!==s&&(i=i||[]).push(t,""+s)):"children"===t?l===s||"string"!=typeof s&&"number"!=typeof s||(i=i||[]).push(t,""+s):"suppressContentEditableWarning"!==t&&"suppressHydrationWarning"!==t&&(_.hasOwnProperty(t)?(null!=s&&Ir(o,t),i||l===s||(i=[])):(i=i||[]).push(t,s))}return c&&(i=i||[]).push("style",c),i}function zr(t,e,n,r,o){"input"===n&&"radio"===o.type&&null!=o.name&&Re(t,o),jr(n,r),r=jr(n,o);for(var i=0;i<e.length;i+=2){var a=e[i],u=e[i+1];"style"===a?Rr(t,u):"dangerouslySetInnerHTML"===a?Or(t,u):"children"===a?kr(t,u):ke(t,a,u,r)}switch(n){case"input":Ae(t,o);break;case"textarea":_r(t,o);break;case"select":t._wrapperState.initialValue=void 0,e=t._wrapperState.wasMultiple,t._wrapperState.wasMultiple=!!o.multiple,null!=(n=o.value)?yr(t,!!o.multiple,n,!1):e!==!!o.multiple&&(null!=o.defaultValue?yr(t,!!o.multiple,o.defaultValue,!0):yr(t,!!o.multiple,o.multiple?[]:"",!1))}}function Wr(t,e,n,r,o){switch(e){case"iframe":case"object":Rn("load",t);break;case"video":case"audio":for(r=0;r<pt.length;r++)Rn(pt[r],t);break;case"source":Rn("error",t);break;case"img":case"image":case"link":Rn("error",t),Rn("load",t);break;case"form":Rn("reset",t),Rn("submit",t);break;case"details":Rn("toggle",t);break;case"input":Ne(t,n),Rn("invalid",t),Ir(o,"onChange");break;case"select":mr(t,n),Rn("invalid",t),Ir(o,"onChange");break;case"textarea":br(t,n),Rn("invalid",t),Ir(o,"onChange")}for(var i in Mr(e,n,Lr),r=null,n)if(n.hasOwnProperty(i)){var a=n[i];"children"===i?"string"==typeof a?t.textContent!==a&&(r=["children",a]):"number"==typeof a&&t.textContent!==""+a&&(r=["children",""+a]):_.hasOwnProperty(i)&&null!=a&&Ir(o,i)}switch(e){case"input":re(t),Me(t,n);break;case"textarea":re(t),wr(t);break;case"select":case"option":break;default:"function"==typeof n.onClick&&(t.onclick=u)}return r}function Hr(t,e){return t.nodeValue!==e}var Vr={createElement:Fr,createTextNode:Dr,setInitialProperties:Ur,diffProperties:Br,updateProperties:zr,diffHydratedProperties:Wr,diffHydratedText:Hr,warnForUnmatchedText:function(){},warnForDeletedHydratableElement:function(){},warnForDeletedHydratableText:function(){},warnForInsertedHydratedElement:function(){},warnForInsertedHydratedText:function(){},restoreControlledState:function(t,e,n){switch(e){case"input":if(Ae(t,n),e=n.name,"radio"===n.type&&null!=e){for(n=t;n.parentNode;)n=n.parentNode;for(n=n.querySelectorAll("input[name="+JSON.stringify(""+e)+'][type="radio"]'),e=0;e<n.length;e++){var r=n[e];if(r!==t&&r.form===t.form){var o=q(r);o||p("90"),oe(r),Ae(r,o)}}}break;case"textarea":_r(t,n);break;case"select":null!=(e=n.value)&&yr(t,!!n.multiple,e,!1)}}},qr=null,Gr=null;function Yr(t,e){switch(t){case"button":case"input":case"select":case"textarea":return!!e.autoFocus}return!1}function $r(t,e){return"textarea"===t||"string"==typeof e.children||"number"==typeof e.children||"object"==typeof e.dangerouslySetInnerHTML&&null!==e.dangerouslySetInnerHTML&&"string"==typeof e.dangerouslySetInnerHTML.__html}var Qr=Xn,Kr=Jn,Xr=Zn;function Jr(t){for(t=t.nextSibling;t&&1!==t.nodeType&&3!==t.nodeType;)t=t.nextSibling;return t}function Zr(t){for(t=t.firstChild;t&&1!==t.nodeType&&3!==t.nodeType;)t=t.nextSibling;return t}new Set;var to=[],eo=-1;function no(t){return{current:t}}function ro(t){0>eo||(t.current=to[eo],to[eo]=null,eo--)}function oo(t,e){to[++eo]=t.current,t.current=e}var io=no(f),ao=no(!1),uo=f;function co(t){return so(t)?uo:io.current}function lo(t,e){var n=t.type.contextTypes;if(!n)return f;var r=t.stateNode;if(r&&r.__reactInternalMemoizedUnmaskedChildContext===e)return r.__reactInternalMemoizedMaskedChildContext;var o,i={};for(o in n)i[o]=e[o];return r&&((t=t.stateNode).__reactInternalMemoizedUnmaskedChildContext=e,t.__reactInternalMemoizedMaskedChildContext=i),i}function so(t){return 2===t.tag&&null!=t.type.childContextTypes}function fo(t){so(t)&&(ro(ao),ro(io))}function po(t){ro(ao),ro(io)}function ho(t,e,n){io.current!==f&&p("168"),oo(io,e),oo(ao,n)}function vo(t,e){var n=t.stateNode,r=t.type.childContextTypes;if("function"!=typeof n.getChildContext)return e;for(var o in n=n.getChildContext())o in r||p("108",be(t)||"Unknown",o);return a({},e,n)}function yo(t){if(!so(t))return!1;var e=t.stateNode;return e=e&&e.__reactInternalMemoizedMergedChildContext||f,uo=io.current,oo(io,e),oo(ao,ao.current),!0}function mo(t,e){var n=t.stateNode;if(n||p("169"),e){var r=vo(t,uo);n.__reactInternalMemoizedMergedChildContext=r,ro(ao),ro(io),oo(io,r)}else ro(ao);oo(ao,e)}function go(t,e,n,r){this.tag=t,this.key=n,this.sibling=this.child=this.return=this.stateNode=this.type=null,this.index=0,this.ref=null,this.pendingProps=e,this.memoizedState=this.updateQueue=this.memoizedProps=null,this.mode=r,this.effectTag=0,this.lastEffect=this.firstEffect=this.nextEffect=null,this.expirationTime=0,this.alternate=null}function bo(t,e,n){var r=t.alternate;return null===r?((r=new go(t.tag,e,t.key,t.mode)).type=t.type,r.stateNode=t.stateNode,r.alternate=t,t.alternate=r):(r.pendingProps=e,r.effectTag=0,r.nextEffect=null,r.firstEffect=null,r.lastEffect=null),r.expirationTime=n,r.child=t.child,r.memoizedProps=t.memoizedProps,r.memoizedState=t.memoizedState,r.updateQueue=t.updateQueue,r.sibling=t.sibling,r.index=t.index,r.ref=t.ref,r}function _o(t,e,n){var r=t.type,o=t.key;if(t=t.props,"function"==typeof r)var i=r.prototype&&r.prototype.isReactComponent?2:0;else if("string"==typeof r)i=5;else switch(r){case le:return wo(t.children,e,n,o);case he:i=11,e|=3;break;case se:i=11,e|=2;break;case fe:return(r=new go(15,t,o,4|e)).type=fe,r.expirationTime=n,r;case ye:i=16,e|=2;break;default:t:{switch("object"==typeof r&&null!==r?r.$$typeof:null){case pe:i=13;break t;case de:i=12;break t;case ve:i=14;break t;default:p("130",null==r?r:typeof r,"")}i=void 0}}return(e=new go(i,t,o,e)).type=r,e.expirationTime=n,e}function wo(t,e,n,r){return(t=new go(10,t,r,e)).expirationTime=n,t}function xo(t,e,n){return(t=new go(6,t,null,e)).expirationTime=n,t}function Eo(t,e,n){return(e=new go(4,null!==t.children?t.children:[],t.key,e)).expirationTime=n,e.stateNode={containerInfo:t.containerInfo,pendingChildren:null,implementation:t.implementation},e}function So(t,e,n){return t={current:e=new go(3,null,null,e?3:0),containerInfo:t,pendingChildren:null,earliestPendingTime:0,latestPendingTime:0,earliestSuspendedTime:0,latestSuspendedTime:0,latestPingedTime:0,pendingCommitExpirationTime:0,finishedWork:null,context:null,pendingContext:null,hydrate:n,remainingExpirationTime:0,firstBatch:null,nextScheduledRoot:null},e.stateNode=t}var To=null,Po=null;function Oo(t){return function(e){try{return t(e)}catch(t){}}}function ko(t){"function"==typeof To&&To(t)}function Co(t){"function"==typeof Po&&Po(t)}var No=!1;function Ro(t){return{expirationTime:0,baseState:t,firstUpdate:null,lastUpdate:null,firstCapturedUpdate:null,lastCapturedUpdate:null,firstEffect:null,lastEffect:null,firstCapturedEffect:null,lastCapturedEffect:null}}function Ao(t){return{expirationTime:t.expirationTime,baseState:t.baseState,firstUpdate:t.firstUpdate,lastUpdate:t.lastUpdate,firstCapturedUpdate:null,lastCapturedUpdate:null,firstEffect:null,lastEffect:null,firstCapturedEffect:null,lastCapturedEffect:null}}function Mo(t){return{expirationTime:t,tag:0,payload:null,callback:null,next:null,nextEffect:null}}function jo(t,e,n){null===t.lastUpdate?t.firstUpdate=t.lastUpdate=e:(t.lastUpdate.next=e,t.lastUpdate=e),(0===t.expirationTime||t.expirationTime>n)&&(t.expirationTime=n)}function Lo(t,e,n){var r=t.alternate;if(null===r){var o=t.updateQueue,i=null;null===o&&(o=t.updateQueue=Ro(t.memoizedState))}else o=t.updateQueue,i=r.updateQueue,null===o?null===i?(o=t.updateQueue=Ro(t.memoizedState),i=r.updateQueue=Ro(r.memoizedState)):o=t.updateQueue=Ao(i):null===i&&(i=r.updateQueue=Ao(o));null===i||o===i?jo(o,e,n):null===o.lastUpdate||null===i.lastUpdate?(jo(o,e,n),jo(i,e,n)):(jo(o,e,n),i.lastUpdate=e)}function Io(t,e,n){var r=t.updateQueue;null===(r=null===r?t.updateQueue=Ro(t.memoizedState):Fo(t,r)).lastCapturedUpdate?r.firstCapturedUpdate=r.lastCapturedUpdate=e:(r.lastCapturedUpdate.next=e,r.lastCapturedUpdate=e),(0===r.expirationTime||r.expirationTime>n)&&(r.expirationTime=n)}function Fo(t,e){var n=t.alternate;return null!==n&&e===n.updateQueue&&(e=t.updateQueue=Ao(e)),e}function Do(t,e,n,r,o,i){switch(n.tag){case 1:return"function"==typeof(t=n.payload)?t.call(i,r,o):t;case 3:t.effectTag=-1025&t.effectTag|64;case 0:if(null===(o="function"==typeof(t=n.payload)?t.call(i,r,o):t)||void 0===o)break;return a({},r,o);case 2:No=!0}return r}function Uo(t,e,n,r,o){if(No=!1,!(0===e.expirationTime||e.expirationTime>o)){for(var i=(e=Fo(t,e)).baseState,a=null,u=0,c=e.firstUpdate,l=i;null!==c;){var s=c.expirationTime;s>o?(null===a&&(a=c,i=l),(0===u||u>s)&&(u=s)):(l=Do(t,0,c,l,n,r),null!==c.callback&&(t.effectTag|=32,c.nextEffect=null,null===e.lastEffect?e.firstEffect=e.lastEffect=c:(e.lastEffect.nextEffect=c,e.lastEffect=c))),c=c.next}for(s=null,c=e.firstCapturedUpdate;null!==c;){var f=c.expirationTime;f>o?(null===s&&(s=c,null===a&&(i=l)),(0===u||u>f)&&(u=f)):(l=Do(t,0,c,l,n,r),null!==c.callback&&(t.effectTag|=32,c.nextEffect=null,null===e.lastCapturedEffect?e.firstCapturedEffect=e.lastCapturedEffect=c:(e.lastCapturedEffect.nextEffect=c,e.lastCapturedEffect=c))),c=c.next}null===a&&(e.lastUpdate=null),null===s?e.lastCapturedUpdate=null:t.effectTag|=32,null===a&&null===s&&(i=l),e.baseState=i,e.firstUpdate=a,e.firstCapturedUpdate=s,e.expirationTime=u,t.memoizedState=l}}function Bo(t,e){"function"!=typeof t&&p("191",t),t.call(e)}function zo(t,e,n){for(null!==e.firstCapturedUpdate&&(null!==e.lastUpdate&&(e.lastUpdate.next=e.firstCapturedUpdate,e.lastUpdate=e.lastCapturedUpdate),e.firstCapturedUpdate=e.lastCapturedUpdate=null),t=e.firstEffect,e.firstEffect=e.lastEffect=null;null!==t;){var r=t.callback;null!==r&&(t.callback=null,Bo(r,n)),t=t.nextEffect}for(t=e.firstCapturedEffect,e.firstCapturedEffect=e.lastCapturedEffect=null;null!==t;)null!==(e=t.callback)&&(t.callback=null,Bo(e,n)),t=t.nextEffect}function Wo(t,e){return{value:t,source:e,stack:_e(e)}}var Ho=no(null),Vo=no(null),qo=no(0);function Go(t){var e=t.type._context;oo(qo,e._changedBits),oo(Vo,e._currentValue),oo(Ho,t),e._currentValue=t.pendingProps.value,e._changedBits=t.stateNode}function Yo(t){var e=qo.current,n=Vo.current;ro(Ho),ro(Vo),ro(qo),(t=t.type._context)._currentValue=n,t._changedBits=e}var $o={},Qo=no($o),Ko=no($o),Xo=no($o);function Jo(t){return t===$o&&p("174"),t}function Zo(t,e){oo(Xo,e),oo(Ko,t),oo(Qo,$o);var n=e.nodeType;switch(n){case 9:case 11:e=(e=e.documentElement)?e.namespaceURI:Sr(null,"");break;default:e=Sr(e=(n=8===n?e.parentNode:e).namespaceURI||null,n=n.tagName)}ro(Qo),oo(Qo,e)}function ti(t){ro(Qo),ro(Ko),ro(Xo)}function ei(t){Ko.current===t&&(ro(Qo),ro(Ko))}function ni(t,e,n){var r=t.memoizedState;r=null===(e=e(n,r))||void 0===e?r:a({},r,e),t.memoizedState=r,null!==(t=t.updateQueue)&&0===t.expirationTime&&(t.baseState=r)}var ri={isMounted:function(t){return!!(t=t._reactInternalFiber)&&2===an(t)},enqueueSetState:function(t,e,n){t=t._reactInternalFiber;var r=va(),o=Mo(r=da(r,t));o.payload=e,void 0!==n&&null!==n&&(o.callback=n),Lo(t,o,r),ha(t,r)},enqueueReplaceState:function(t,e,n){t=t._reactInternalFiber;var r=va(),o=Mo(r=da(r,t));o.tag=1,o.payload=e,void 0!==n&&null!==n&&(o.callback=n),Lo(t,o,r),ha(t,r)},enqueueForceUpdate:function(t,e){t=t._reactInternalFiber;var n=va(),r=Mo(n=da(n,t));r.tag=2,void 0!==e&&null!==e&&(r.callback=e),Lo(t,r,n),ha(t,n)}};function oi(t,e,n,r,o,i){var a=t.stateNode;return t=t.type,"function"==typeof a.shouldComponentUpdate?a.shouldComponentUpdate(n,o,i):!t.prototype||!t.prototype.isPureReactComponent||(!l(e,n)||!l(r,o))}function ii(t,e,n,r){t=e.state,"function"==typeof e.componentWillReceiveProps&&e.componentWillReceiveProps(n,r),"function"==typeof e.UNSAFE_componentWillReceiveProps&&e.UNSAFE_componentWillReceiveProps(n,r),e.state!==t&&ri.enqueueReplaceState(e,e.state,null)}function ai(t,e){var n=t.type,r=t.stateNode,o=t.pendingProps,i=co(t);r.props=o,r.state=t.memoizedState,r.refs=f,r.context=lo(t,i),null!==(i=t.updateQueue)&&(Uo(t,i,o,r,e),r.state=t.memoizedState),"function"==typeof(i=t.type.getDerivedStateFromProps)&&(ni(t,i,o),r.state=t.memoizedState),"function"==typeof n.getDerivedStateFromProps||"function"==typeof r.getSnapshotBeforeUpdate||"function"!=typeof r.UNSAFE_componentWillMount&&"function"!=typeof r.componentWillMount||(n=r.state,"function"==typeof r.componentWillMount&&r.componentWillMount(),"function"==typeof r.UNSAFE_componentWillMount&&r.UNSAFE_componentWillMount(),n!==r.state&&ri.enqueueReplaceState(r,r.state,null),null!==(i=t.updateQueue)&&(Uo(t,i,o,r,e),r.state=t.memoizedState)),"function"==typeof r.componentDidMount&&(t.effectTag|=4)}var ui=Array.isArray;function ci(t,e,n){if(null!==(t=n.ref)&&"function"!=typeof t&&"object"!=typeof t){if(n._owner){var r=void 0;(n=n._owner)&&(2!==n.tag&&p("110"),r=n.stateNode),r||p("147",t);var o=""+t;return null!==e&&null!==e.ref&&"function"==typeof e.ref&&e.ref._stringRef===o?e.ref:((e=function(t){var e=r.refs===f?r.refs={}:r.refs;null===t?delete e[o]:e[o]=t})._stringRef=o,e)}"string"!=typeof t&&p("148"),n._owner||p("254",t)}return t}function li(t,e){"textarea"!==t.type&&p("31","[object Object]"===Object.prototype.toString.call(e)?"object with keys {"+Object.keys(e).join(", ")+"}":e,"")}function si(t){function e(e,n){if(t){var r=e.lastEffect;null!==r?(r.nextEffect=n,e.lastEffect=n):e.firstEffect=e.lastEffect=n,n.nextEffect=null,n.effectTag=8}}function n(n,r){if(!t)return null;for(;null!==r;)e(n,r),r=r.sibling;return null}function r(t,e){for(t=new Map;null!==e;)null!==e.key?t.set(e.key,e):t.set(e.index,e),e=e.sibling;return t}function o(t,e,n){return(t=bo(t,e,n)).index=0,t.sibling=null,t}function i(e,n,r){return e.index=r,t?null!==(r=e.alternate)?(r=r.index)<n?(e.effectTag=2,n):r:(e.effectTag=2,n):n}function a(e){return t&&null===e.alternate&&(e.effectTag=2),e}function u(t,e,n,r){return null===e||6!==e.tag?((e=xo(n,t.mode,r)).return=t,e):((e=o(e,n,r)).return=t,e)}function c(t,e,n,r){return null!==e&&e.type===n.type?((r=o(e,n.props,r)).ref=ci(t,e,n),r.return=t,r):((r=_o(n,t.mode,r)).ref=ci(t,e,n),r.return=t,r)}function l(t,e,n,r){return null===e||4!==e.tag||e.stateNode.containerInfo!==n.containerInfo||e.stateNode.implementation!==n.implementation?((e=Eo(n,t.mode,r)).return=t,e):((e=o(e,n.children||[],r)).return=t,e)}function s(t,e,n,r,i){return null===e||10!==e.tag?((e=wo(n,t.mode,r,i)).return=t,e):((e=o(e,n,r)).return=t,e)}function f(t,e,n){if("string"==typeof e||"number"==typeof e)return(e=xo(""+e,t.mode,n)).return=t,e;if("object"==typeof e&&null!==e){switch(e.$$typeof){case ue:return(n=_o(e,t.mode,n)).ref=ci(t,null,e),n.return=t,n;case ce:return(e=Eo(e,t.mode,n)).return=t,e}if(ui(e)||ge(e))return(e=wo(e,t.mode,n,null)).return=t,e;li(t,e)}return null}function d(t,e,n,r){var o=null!==e?e.key:null;if("string"==typeof n||"number"==typeof n)return null!==o?null:u(t,e,""+n,r);if("object"==typeof n&&null!==n){switch(n.$$typeof){case ue:return n.key===o?n.type===le?s(t,e,n.props.children,r,o):c(t,e,n,r):null;case ce:return n.key===o?l(t,e,n,r):null}if(ui(n)||ge(n))return null!==o?null:s(t,e,n,r,null);li(t,n)}return null}function h(t,e,n,r,o){if("string"==typeof r||"number"==typeof r)return u(e,t=t.get(n)||null,""+r,o);if("object"==typeof r&&null!==r){switch(r.$$typeof){case ue:return t=t.get(null===r.key?n:r.key)||null,r.type===le?s(e,t,r.props.children,o,r.key):c(e,t,r,o);case ce:return l(e,t=t.get(null===r.key?n:r.key)||null,r,o)}if(ui(r)||ge(r))return s(e,t=t.get(n)||null,r,o,null);li(e,r)}return null}function v(o,a,u,c){for(var l=null,s=null,p=a,v=a=0,y=null;null!==p&&v<u.length;v++){p.index>v?(y=p,p=null):y=p.sibling;var m=d(o,p,u[v],c);if(null===m){null===p&&(p=y);break}t&&p&&null===m.alternate&&e(o,p),a=i(m,a,v),null===s?l=m:s.sibling=m,s=m,p=y}if(v===u.length)return n(o,p),l;if(null===p){for(;v<u.length;v++)(p=f(o,u[v],c))&&(a=i(p,a,v),null===s?l=p:s.sibling=p,s=p);return l}for(p=r(o,p);v<u.length;v++)(y=h(p,o,v,u[v],c))&&(t&&null!==y.alternate&&p.delete(null===y.key?v:y.key),a=i(y,a,v),null===s?l=y:s.sibling=y,s=y);return t&&p.forEach(function(t){return e(o,t)}),l}function y(o,a,u,c){var l=ge(u);"function"!=typeof l&&p("150"),null==(u=l.call(u))&&p("151");for(var s=l=null,v=a,y=a=0,m=null,g=u.next();null!==v&&!g.done;y++,g=u.next()){v.index>y?(m=v,v=null):m=v.sibling;var b=d(o,v,g.value,c);if(null===b){v||(v=m);break}t&&v&&null===b.alternate&&e(o,v),a=i(b,a,y),null===s?l=b:s.sibling=b,s=b,v=m}if(g.done)return n(o,v),l;if(null===v){for(;!g.done;y++,g=u.next())null!==(g=f(o,g.value,c))&&(a=i(g,a,y),null===s?l=g:s.sibling=g,s=g);return l}for(v=r(o,v);!g.done;y++,g=u.next())null!==(g=h(v,o,y,g.value,c))&&(t&&null!==g.alternate&&v.delete(null===g.key?y:g.key),a=i(g,a,y),null===s?l=g:s.sibling=g,s=g);return t&&v.forEach(function(t){return e(o,t)}),l}return function(t,r,i,u){"object"==typeof i&&null!==i&&i.type===le&&null===i.key&&(i=i.props.children);var c="object"==typeof i&&null!==i;if(c)switch(i.$$typeof){case ue:t:{var l=i.key;for(c=r;null!==c;){if(c.key===l){if(10===c.tag?i.type===le:c.type===i.type){n(t,c.sibling),(r=o(c,i.type===le?i.props.children:i.props,u)).ref=ci(t,c,i),r.return=t,t=r;break t}n(t,c);break}e(t,c),c=c.sibling}i.type===le?((r=wo(i.props.children,t.mode,u,i.key)).return=t,t=r):((u=_o(i,t.mode,u)).ref=ci(t,r,i),u.return=t,t=u)}return a(t);case ce:t:{for(c=i.key;null!==r;){if(r.key===c){if(4===r.tag&&r.stateNode.containerInfo===i.containerInfo&&r.stateNode.implementation===i.implementation){n(t,r.sibling),(r=o(r,i.children||[],u)).return=t,t=r;break t}n(t,r);break}e(t,r),r=r.sibling}(r=Eo(i,t.mode,u)).return=t,t=r}return a(t)}if("string"==typeof i||"number"==typeof i)return i=""+i,null!==r&&6===r.tag?(n(t,r.sibling),(r=o(r,i,u)).return=t,t=r):(n(t,r),(r=xo(i,t.mode,u)).return=t,t=r),a(t);if(ui(i))return v(t,r,i,u);if(ge(i))return y(t,r,i,u);if(c&&li(t,i),void 0===i)switch(t.tag){case 2:case 1:p("152",(u=t.type).displayName||u.name||"Component")}return n(t,r)}}var fi=si(!0),pi=si(!1),di=null,hi=null,vi=!1;function yi(t,e){var n=new go(5,null,null,0);n.type="DELETED",n.stateNode=e,n.return=t,n.effectTag=8,null!==t.lastEffect?(t.lastEffect.nextEffect=n,t.lastEffect=n):t.firstEffect=t.lastEffect=n}function mi(t,e){switch(t.tag){case 5:var n=t.type;return null!==(e=1!==e.nodeType||n.toLowerCase()!==e.nodeName.toLowerCase()?null:e)&&(t.stateNode=e,!0);case 6:return null!==(e=""===t.pendingProps||3!==e.nodeType?null:e)&&(t.stateNode=e,!0);default:return!1}}function gi(t){if(vi){var e=hi;if(e){var n=e;if(!mi(t,e)){if(!(e=Jr(n))||!mi(t,e))return t.effectTag|=2,vi=!1,void(di=t);yi(di,n)}di=t,hi=Zr(e)}else t.effectTag|=2,vi=!1,di=t}}function bi(t){for(t=t.return;null!==t&&5!==t.tag&&3!==t.tag;)t=t.return;di=t}function _i(t){if(t!==di)return!1;if(!vi)return bi(t),vi=!0,!1;var e=t.type;if(5!==t.tag||"head"!==e&&"body"!==e&&!$r(e,t.memoizedProps))for(e=hi;e;)yi(t,e),e=Jr(e);return bi(t),hi=di?Jr(t.stateNode):null,!0}function wi(){hi=di=null,vi=!1}function xi(t,e,n){Ei(t,e,n,e.expirationTime)}function Ei(t,e,n,r){e.child=null===t?pi(e,null,n,r):fi(e,t.child,n,r)}function Si(t,e){var n=e.ref;(null===t&&null!==n||null!==t&&t.ref!==n)&&(e.effectTag|=128)}function Ti(t,e,n,r,o){Si(t,e);var i=0!=(64&e.effectTag);if(!n&&!i)return r&&mo(e,!1),ki(t,e);n=e.stateNode,ie.current=e;var a=i?null:n.render();return e.effectTag|=1,i&&(Ei(t,e,null,o),e.child=null),Ei(t,e,a,o),e.memoizedState=n.state,e.memoizedProps=n.props,r&&mo(e,!0),e.child}function Pi(t){var e=t.stateNode;e.pendingContext?ho(0,e.pendingContext,e.pendingContext!==e.context):e.context&&ho(0,e.context,!1),Zo(t,e.containerInfo)}function Oi(t,e,n,r){var o=t.child;for(null!==o&&(o.return=t);null!==o;){switch(o.tag){case 12:var i=0|o.stateNode;if(o.type===e&&0!=(i&n)){for(i=o;null!==i;){var a=i.alternate;if(0===i.expirationTime||i.expirationTime>r)i.expirationTime=r,null!==a&&(0===a.expirationTime||a.expirationTime>r)&&(a.expirationTime=r);else{if(null===a||!(0===a.expirationTime||a.expirationTime>r))break;a.expirationTime=r}i=i.return}i=null}else i=o.child;break;case 13:i=o.type===t.type?null:o.child;break;default:i=o.child}if(null!==i)i.return=o;else for(i=o;null!==i;){if(i===t){i=null;break}if(null!==(o=i.sibling)){o.return=i.return,i=o;break}i=i.return}o=i}}function ki(t,e){if(null!==t&&e.child!==t.child&&p("153"),null!==e.child){var n=bo(t=e.child,t.pendingProps,t.expirationTime);for(e.child=n,n.return=e;null!==t.sibling;)t=t.sibling,(n=n.sibling=bo(t,t.pendingProps,t.expirationTime)).return=e;n.sibling=null}return e.child}function Ci(t,e,n){if(0===e.expirationTime||e.expirationTime>n){switch(e.tag){case 3:Pi(e);break;case 2:yo(e);break;case 4:Zo(e,e.stateNode.containerInfo);break;case 13:Go(e)}return null}switch(e.tag){case 0:null!==t&&p("155");var r=e.type,o=e.pendingProps,i=co(e);return r=r(o,i=lo(e,i)),e.effectTag|=1,"object"==typeof r&&null!==r&&"function"==typeof r.render&&void 0===r.$$typeof?(i=e.type,e.tag=2,e.memoizedState=null!==r.state&&void 0!==r.state?r.state:null,"function"==typeof(i=i.getDerivedStateFromProps)&&ni(e,i,o),o=yo(e),r.updater=ri,e.stateNode=r,r._reactInternalFiber=e,ai(e,n),t=Ti(t,e,!0,o,n)):(e.tag=1,xi(t,e,r),e.memoizedProps=o,t=e.child),t;case 1:return o=e.type,n=e.pendingProps,ao.current||e.memoizedProps!==n?(o=o(n,r=lo(e,r=co(e))),e.effectTag|=1,xi(t,e,o),e.memoizedProps=n,t=e.child):t=ki(t,e),t;case 2:if(o=yo(e),null===t)if(null===e.stateNode){var a=e.pendingProps,u=e.type;r=co(e);var c=2===e.tag&&null!=e.type.contextTypes;a=new u(a,i=c?lo(e,r):f),e.memoizedState=null!==a.state&&void 0!==a.state?a.state:null,a.updater=ri,e.stateNode=a,a._reactInternalFiber=e,c&&((c=e.stateNode).__reactInternalMemoizedUnmaskedChildContext=r,c.__reactInternalMemoizedMaskedChildContext=i),ai(e,n),r=!0}else{u=e.type,r=e.stateNode,c=e.memoizedProps,i=e.pendingProps,r.props=c;var l=r.context;a=lo(e,a=co(e));var s=u.getDerivedStateFromProps;(u="function"==typeof s||"function"==typeof r.getSnapshotBeforeUpdate)||"function"!=typeof r.UNSAFE_componentWillReceiveProps&&"function"!=typeof r.componentWillReceiveProps||(c!==i||l!==a)&&ii(e,r,i,a),No=!1;var d=e.memoizedState;l=r.state=d;var h=e.updateQueue;null!==h&&(Uo(e,h,i,r,n),l=e.memoizedState),c!==i||d!==l||ao.current||No?("function"==typeof s&&(ni(e,s,i),l=e.memoizedState),(c=No||oi(e,c,i,d,l,a))?(u||"function"!=typeof r.UNSAFE_componentWillMount&&"function"!=typeof r.componentWillMount||("function"==typeof r.componentWillMount&&r.componentWillMount(),"function"==typeof r.UNSAFE_componentWillMount&&r.UNSAFE_componentWillMount()),"function"==typeof r.componentDidMount&&(e.effectTag|=4)):("function"==typeof r.componentDidMount&&(e.effectTag|=4),e.memoizedProps=i,e.memoizedState=l),r.props=i,r.state=l,r.context=a,r=c):("function"==typeof r.componentDidMount&&(e.effectTag|=4),r=!1)}else u=e.type,r=e.stateNode,i=e.memoizedProps,c=e.pendingProps,r.props=i,l=r.context,a=lo(e,a=co(e)),(u="function"==typeof(s=u.getDerivedStateFromProps)||"function"==typeof r.getSnapshotBeforeUpdate)||"function"!=typeof r.UNSAFE_componentWillReceiveProps&&"function"!=typeof r.componentWillReceiveProps||(i!==c||l!==a)&&ii(e,r,c,a),No=!1,l=e.memoizedState,d=r.state=l,null!==(h=e.updateQueue)&&(Uo(e,h,c,r,n),d=e.memoizedState),i!==c||l!==d||ao.current||No?("function"==typeof s&&(ni(e,s,c),d=e.memoizedState),(s=No||oi(e,i,c,l,d,a))?(u||"function"!=typeof r.UNSAFE_componentWillUpdate&&"function"!=typeof r.componentWillUpdate||("function"==typeof r.componentWillUpdate&&r.componentWillUpdate(c,d,a),"function"==typeof r.UNSAFE_componentWillUpdate&&r.UNSAFE_componentWillUpdate(c,d,a)),"function"==typeof r.componentDidUpdate&&(e.effectTag|=4),"function"==typeof r.getSnapshotBeforeUpdate&&(e.effectTag|=256)):("function"!=typeof r.componentDidUpdate||i===t.memoizedProps&&l===t.memoizedState||(e.effectTag|=4),"function"!=typeof r.getSnapshotBeforeUpdate||i===t.memoizedProps&&l===t.memoizedState||(e.effectTag|=256),e.memoizedProps=c,e.memoizedState=d),r.props=c,r.state=d,r.context=a,r=s):("function"!=typeof r.componentDidUpdate||i===t.memoizedProps&&l===t.memoizedState||(e.effectTag|=4),"function"!=typeof r.getSnapshotBeforeUpdate||i===t.memoizedProps&&l===t.memoizedState||(e.effectTag|=256),r=!1);return Ti(t,e,r,o,n);case 3:return Pi(e),null!==(o=e.updateQueue)?(r=null!==(r=e.memoizedState)?r.element:null,Uo(e,o,e.pendingProps,null,n),(o=e.memoizedState.element)===r?(wi(),t=ki(t,e)):(r=e.stateNode,(r=(null===t||null===t.child)&&r.hydrate)&&(hi=Zr(e.stateNode.containerInfo),di=e,r=vi=!0),r?(e.effectTag|=2,e.child=pi(e,null,o,n)):(wi(),xi(t,e,o)),t=e.child)):(wi(),t=ki(t,e)),t;case 5:return Jo(Xo.current),(o=Jo(Qo.current))!==(r=Sr(o,e.type))&&(oo(Ko,e),oo(Qo,r)),null===t&&gi(e),o=e.type,c=e.memoizedProps,r=e.pendingProps,i=null!==t?t.memoizedProps:null,ao.current||c!==r||((c=1&e.mode&&!!r.hidden)&&(e.expirationTime=1073741823),c&&1073741823===n)?(c=r.children,$r(o,r)?c=null:i&&$r(o,i)&&(e.effectTag|=16),Si(t,e),1073741823!==n&&1&e.mode&&r.hidden?(e.expirationTime=1073741823,e.memoizedProps=r,t=null):(xi(t,e,c),e.memoizedProps=r,t=e.child)):t=ki(t,e),t;case 6:return null===t&&gi(e),e.memoizedProps=e.pendingProps,null;case 16:return null;case 4:return Zo(e,e.stateNode.containerInfo),o=e.pendingProps,ao.current||e.memoizedProps!==o?(null===t?e.child=fi(e,null,o,n):xi(t,e,o),e.memoizedProps=o,t=e.child):t=ki(t,e),t;case 14:return o=e.type.render,n=e.pendingProps,r=e.ref,ao.current||e.memoizedProps!==n||r!==(null!==t?t.ref:null)?(xi(t,e,o=o(n,r)),e.memoizedProps=n,t=e.child):t=ki(t,e),t;case 10:return n=e.pendingProps,ao.current||e.memoizedProps!==n?(xi(t,e,n),e.memoizedProps=n,t=e.child):t=ki(t,e),t;case 11:return n=e.pendingProps.children,ao.current||null!==n&&e.memoizedProps!==n?(xi(t,e,n),e.memoizedProps=n,t=e.child):t=ki(t,e),t;case 15:return n=e.pendingProps,e.memoizedProps===n?t=ki(t,e):(xi(t,e,n.children),e.memoizedProps=n,t=e.child),t;case 13:return function(t,e,n){var r=e.type._context,o=e.pendingProps,i=e.memoizedProps,a=!0;if(ao.current)a=!1;else if(i===o)return e.stateNode=0,Go(e),ki(t,e);var u=o.value;if(e.memoizedProps=o,null===i)u=1073741823;else if(i.value===o.value){if(i.children===o.children&&a)return e.stateNode=0,Go(e),ki(t,e);u=0}else{var c=i.value;if(c===u&&(0!==c||1/c==1/u)||c!=c&&u!=u){if(i.children===o.children&&a)return e.stateNode=0,Go(e),ki(t,e);u=0}else if(u="function"==typeof r._calculateChangedBits?r._calculateChangedBits(c,u):1073741823,0==(u|=0)){if(i.children===o.children&&a)return e.stateNode=0,Go(e),ki(t,e)}else Oi(e,r,u,n)}return e.stateNode=u,Go(e),xi(t,e,o.children),e.child}(t,e,n);case 12:t:if(r=e.type,i=e.pendingProps,c=e.memoizedProps,o=r._currentValue,a=r._changedBits,ao.current||0!==a||c!==i){if(e.memoizedProps=i,void 0!==(u=i.unstable_observedBits)&&null!==u||(u=1073741823),e.stateNode=u,0!=(a&u))Oi(e,r,a,n);else if(c===i){t=ki(t,e);break t}n=(n=i.children)(o),e.effectTag|=1,xi(t,e,n),t=e.child}else t=ki(t,e);return t;default:p("156")}}function Ni(t){t.effectTag|=4}var Ri=void 0,Ai=void 0,Mi=void 0;function ji(t,e){var n=e.pendingProps;switch(e.tag){case 1:return null;case 2:return fo(e),null;case 3:ti(),po();var r=e.stateNode;return r.pendingContext&&(r.context=r.pendingContext,r.pendingContext=null),null!==t&&null!==t.child||(_i(e),e.effectTag&=-3),Ri(e),null;case 5:ei(e),r=Jo(Xo.current);var o=e.type;if(null!==t&&null!=e.stateNode){var i=t.memoizedProps,a=e.stateNode,u=Jo(Qo.current);a=Br(a,o,i,n,r),Ai(t,e,a,o,i,n,r,u),t.ref!==e.ref&&(e.effectTag|=128)}else{if(!n)return null===e.stateNode&&p("166"),null;if(t=Jo(Qo.current),_i(e))n=e.stateNode,o=e.type,i=e.memoizedProps,n[z]=e,n[W]=i,r=Wr(n,o,i,t,r),e.updateQueue=r,null!==r&&Ni(e);else{(t=Fr(o,n,r,t))[z]=e,t[W]=n;t:for(i=e.child;null!==i;){if(5===i.tag||6===i.tag)t.appendChild(i.stateNode);else if(4!==i.tag&&null!==i.child){i.child.return=i,i=i.child;continue}if(i===e)break;for(;null===i.sibling;){if(null===i.return||i.return===e)break t;i=i.return}i.sibling.return=i.return,i=i.sibling}Ur(t,o,n,r),Yr(o,n)&&Ni(e),e.stateNode=t}null!==e.ref&&(e.effectTag|=128)}return null;case 6:if(t&&null!=e.stateNode)Mi(t,e,t.memoizedProps,n);else{if("string"!=typeof n)return null===e.stateNode&&p("166"),null;r=Jo(Xo.current),Jo(Qo.current),_i(e)?(r=e.stateNode,n=e.memoizedProps,r[z]=e,Hr(r,n)&&Ni(e)):((r=Dr(n,r))[z]=e,e.stateNode=r)}return null;case 14:case 16:case 10:case 11:case 15:return null;case 4:return ti(),Ri(e),null;case 13:return Yo(e),null;case 12:return null;case 0:p("167");default:p("156")}}function Li(t,e){var n=e.source;null===e.stack&&null!==n&&_e(n),null!==n&&be(n),e=e.value,null!==t&&2===t.tag&&be(t);try{e&&e.suppressReactErrorLogging||console.error(e)}catch(t){t&&t.suppressReactErrorLogging||console.error(t)}}function Ii(t){var e=t.ref;if(null!==e)if("function"==typeof e)try{e(null)}catch(e){fa(t,e)}else e.current=null}function Fi(t){switch(Co(t),t.tag){case 2:Ii(t);var e=t.stateNode;if("function"==typeof e.componentWillUnmount)try{e.props=t.memoizedProps,e.state=t.memoizedState,e.componentWillUnmount()}catch(e){fa(t,e)}break;case 5:Ii(t);break;case 4:Bi(t)}}function Di(t){return 5===t.tag||3===t.tag||4===t.tag}function Ui(t){t:{for(var e=t.return;null!==e;){if(Di(e)){var n=e;break t}e=e.return}p("160"),n=void 0}var r=e=void 0;switch(n.tag){case 5:e=n.stateNode,r=!1;break;case 3:case 4:e=n.stateNode.containerInfo,r=!0;break;default:p("161")}16&n.effectTag&&(kr(e,""),n.effectTag&=-17);t:e:for(n=t;;){for(;null===n.sibling;){if(null===n.return||Di(n.return)){n=null;break t}n=n.return}for(n.sibling.return=n.return,n=n.sibling;5!==n.tag&&6!==n.tag;){if(2&n.effectTag)continue e;if(null===n.child||4===n.tag)continue e;n.child.return=n,n=n.child}if(!(2&n.effectTag)){n=n.stateNode;break t}}for(var o=t;;){if(5===o.tag||6===o.tag)if(n)if(r){var i=e,a=o.stateNode,u=n;8===i.nodeType?i.parentNode.insertBefore(a,u):i.insertBefore(a,u)}else e.insertBefore(o.stateNode,n);else r?(i=e,a=o.stateNode,8===i.nodeType?i.parentNode.insertBefore(a,i):i.appendChild(a)):e.appendChild(o.stateNode);else if(4!==o.tag&&null!==o.child){o.child.return=o,o=o.child;continue}if(o===t)break;for(;null===o.sibling;){if(null===o.return||o.return===t)return;o=o.return}o.sibling.return=o.return,o=o.sibling}}function Bi(t){for(var e=t,n=!1,r=void 0,o=void 0;;){if(!n){n=e.return;t:for(;;){switch(null===n&&p("160"),n.tag){case 5:r=n.stateNode,o=!1;break t;case 3:case 4:r=n.stateNode.containerInfo,o=!0;break t}n=n.return}n=!0}if(5===e.tag||6===e.tag){t:for(var i=e,a=i;;)if(Fi(a),null!==a.child&&4!==a.tag)a.child.return=a,a=a.child;else{if(a===i)break;for(;null===a.sibling;){if(null===a.return||a.return===i)break t;a=a.return}a.sibling.return=a.return,a=a.sibling}o?(i=r,a=e.stateNode,8===i.nodeType?i.parentNode.removeChild(a):i.removeChild(a)):r.removeChild(e.stateNode)}else if(4===e.tag?r=e.stateNode.containerInfo:Fi(e),null!==e.child){e.child.return=e,e=e.child;continue}if(e===t)break;for(;null===e.sibling;){if(null===e.return||e.return===t)return;4===(e=e.return).tag&&(n=!1)}e.sibling.return=e.return,e=e.sibling}}function zi(t,e){switch(e.tag){case 2:break;case 5:var n=e.stateNode;if(null!=n){var r=e.memoizedProps;t=null!==t?t.memoizedProps:r;var o=e.type,i=e.updateQueue;e.updateQueue=null,null!==i&&(n[W]=r,zr(n,i,o,t,r))}break;case 6:null===e.stateNode&&p("162"),e.stateNode.nodeValue=e.memoizedProps;break;case 3:case 15:case 16:break;default:p("163")}}function Wi(t,e,n){(n=Mo(n)).tag=3,n.payload={element:null};var r=e.value;return n.callback=function(){$a(r),Li(t,e)},n}function Hi(t,e,n){(n=Mo(n)).tag=3;var r=t.stateNode;return null!==r&&"function"==typeof r.componentDidCatch&&(n.callback=function(){null===aa?aa=new Set([this]):aa.add(this);var n=e.value,r=e.stack;Li(t,e),this.componentDidCatch(n,{componentStack:null!==r?r:""})}),n}function Vi(t,e,n,r,o,i){n.effectTag|=512,n.firstEffect=n.lastEffect=null,r=Wo(r,n),t=e;do{switch(t.tag){case 3:return t.effectTag|=1024,void Io(t,r=Wi(t,r,i),i);case 2:if(e=r,n=t.stateNode,0==(64&t.effectTag)&&null!==n&&"function"==typeof n.componentDidCatch&&(null===aa||!aa.has(n)))return t.effectTag|=1024,void Io(t,r=Hi(t,e,i),i)}t=t.return}while(null!==t)}function qi(t){switch(t.tag){case 2:fo(t);var e=t.effectTag;return 1024&e?(t.effectTag=-1025&e|64,t):null;case 3:return ti(),po(),1024&(e=t.effectTag)?(t.effectTag=-1025&e|64,t):null;case 5:return ei(t),null;case 16:return 1024&(e=t.effectTag)?(t.effectTag=-1025&e|64,t):null;case 4:return ti(),null;case 13:return Yo(t),null;default:return null}}Ri=function(){},Ai=function(t,e,n){(e.updateQueue=n)&&Ni(e)},Mi=function(t,e,n,r){n!==r&&Ni(e)};var Gi=Qr(),Yi=2,$i=Gi,Qi=0,Ki=0,Xi=!1,Ji=null,Zi=null,ta=0,ea=-1,na=!1,ra=null,oa=!1,ia=!1,aa=null;function ua(){if(null!==Ji)for(var t=Ji.return;null!==t;){var e=t;switch(e.tag){case 2:fo(e);break;case 3:ti(),po();break;case 5:ei(e);break;case 4:ti();break;case 13:Yo(e)}t=t.return}Zi=null,ta=0,ea=-1,na=!1,Ji=null,ia=!1}function ca(t){for(;;){var e=t.alternate,n=t.return,r=t.sibling;if(0==(512&t.effectTag)){e=ji(e,t);var o=t;if(1073741823===ta||1073741823!==o.expirationTime){var i=0;switch(o.tag){case 3:case 2:var a=o.updateQueue;null!==a&&(i=a.expirationTime)}for(a=o.child;null!==a;)0!==a.expirationTime&&(0===i||i>a.expirationTime)&&(i=a.expirationTime),a=a.sibling;o.expirationTime=i}if(null!==e)return e;if(null!==n&&0==(512&n.effectTag)&&(null===n.firstEffect&&(n.firstEffect=t.firstEffect),null!==t.lastEffect&&(null!==n.lastEffect&&(n.lastEffect.nextEffect=t.firstEffect),n.lastEffect=t.lastEffect),1<t.effectTag&&(null!==n.lastEffect?n.lastEffect.nextEffect=t:n.firstEffect=t,n.lastEffect=t)),null!==r)return r;if(null===n){ia=!0;break}t=n}else{if(null!==(t=qi(t)))return t.effectTag&=511,t;if(null!==n&&(n.firstEffect=n.lastEffect=null,n.effectTag|=512),null!==r)return r;if(null===n)break;t=n}}return null}function la(t){var e=Ci(t.alternate,t,ta);return null===e&&(e=ca(t)),ie.current=null,e}function sa(t,e,n){Xi&&p("243"),Xi=!0,e===ta&&t===Zi&&null!==Ji||(ua(),ta=e,ea=-1,Ji=bo((Zi=t).current,null,ta),t.pendingCommitExpirationTime=0);var r=!1;for(na=!n||ta<=Yi;;){try{if(n)for(;null!==Ji&&!Ya();)Ji=la(Ji);else for(;null!==Ji;)Ji=la(Ji)}catch(e){if(null===Ji)r=!0,$a(e);else{null===Ji&&p("271");var o=(n=Ji).return;if(null===o){r=!0,$a(e);break}Vi(t,o,n,e,0,ta),Ji=ca(n)}}break}if(Xi=!1,r)return null;if(null===Ji){if(ia)return t.pendingCommitExpirationTime=e,t.current.alternate;na&&p("262"),0<=ea&&setTimeout(function(){var e=t.current.expirationTime;0!==e&&(0===t.remainingExpirationTime||t.remainingExpirationTime<e)&&Da(t,e)},ea),function(t){null===Ea&&p("246"),Ea.remainingExpirationTime=t}(t.current.expirationTime)}return null}function fa(t,e){var n;t:{for(Xi&&!oa&&p("263"),n=t.return;null!==n;){switch(n.tag){case 2:var r=n.stateNode;if("function"==typeof n.type.getDerivedStateFromCatch||"function"==typeof r.componentDidCatch&&(null===aa||!aa.has(r))){Lo(n,t=Hi(n,t=Wo(e,t),1),1),ha(n,1),n=void 0;break t}break;case 3:Lo(n,t=Wi(n,t=Wo(e,t),1),1),ha(n,1),n=void 0;break t}n=n.return}3===t.tag&&(Lo(t,n=Wi(t,n=Wo(e,t),1),1),ha(t,1)),n=void 0}return n}function pa(){var t=2+25*(1+((va()-2+500)/25|0));return t<=Qi&&(t=Qi+1),Qi=t}function da(t,e){return t=0!==Ki?Ki:Xi?oa?1:ta:1&e.mode?Aa?2+10*(1+((t-2+15)/10|0)):2+25*(1+((t-2+500)/25|0)):1,Aa&&(0===Ta||t>Ta)&&(Ta=t),t}function ha(t,e){for(;null!==t;){if((0===t.expirationTime||t.expirationTime>e)&&(t.expirationTime=e),null!==t.alternate&&(0===t.alternate.expirationTime||t.alternate.expirationTime>e)&&(t.alternate.expirationTime=e),null===t.return){if(3!==t.tag)break;var n=t.stateNode;!Xi&&0!==ta&&e<ta&&ua();var r=n.current.expirationTime;Xi&&!oa&&Zi===n||Da(n,r),La>ja&&p("185")}t=t.return}}function va(){return $i=Qr()-Gi,Yi=2+($i/10|0)}function ya(t){var e=Ki;Ki=2+25*(1+((va()-2+500)/25|0));try{return t()}finally{Ki=e}}function ma(t,e,n,r,o){var i=Ki;Ki=1;try{return t(e,n,r,o)}finally{Ki=i}}var ga=null,ba=null,_a=0,wa=-1,xa=!1,Ea=null,Sa=0,Ta=0,Pa=!1,Oa=!1,ka=null,Ca=null,Na=!1,Ra=!1,Aa=!1,Ma=null,ja=1e3,La=0,Ia=1;function Fa(t){if(0!==_a){if(t>_a)return;Xr(wa)}var e=Qr()-Gi;_a=t,wa=Kr(Ba,{timeout:10*(t-2)-e})}function Da(t,e){if(null===t.nextScheduledRoot)t.remainingExpirationTime=e,null===ba?(ga=ba=t,t.nextScheduledRoot=t):(ba=ba.nextScheduledRoot=t).nextScheduledRoot=ga;else{var n=t.remainingExpirationTime;(0===n||e<n)&&(t.remainingExpirationTime=e)}xa||(Na?Ra&&(Ea=t,Sa=1,qa(t,1,!1)):1===e?za():Fa(e))}function Ua(){var t=0,e=null;if(null!==ba)for(var n=ba,r=ga;null!==r;){var o=r.remainingExpirationTime;if(0===o){if((null===n||null===ba)&&p("244"),r===r.nextScheduledRoot){ga=ba=r.nextScheduledRoot=null;break}if(r===ga)ga=o=r.nextScheduledRoot,ba.nextScheduledRoot=o,r.nextScheduledRoot=null;else{if(r===ba){(ba=n).nextScheduledRoot=ga,r.nextScheduledRoot=null;break}n.nextScheduledRoot=r.nextScheduledRoot,r.nextScheduledRoot=null}r=n.nextScheduledRoot}else{if((0===t||o<t)&&(t=o,e=r),r===ba)break;n=r,r=r.nextScheduledRoot}}null!==(n=Ea)&&n===e&&1===t?La++:La=0,Ea=e,Sa=t}function Ba(t){Wa(0,!0,t)}function za(){Wa(1,!1,null)}function Wa(t,e,n){if(Ca=n,Ua(),e)for(;null!==Ea&&0!==Sa&&(0===t||t>=Sa)&&(!Pa||va()>=Sa);)va(),qa(Ea,Sa,!Pa),Ua();else for(;null!==Ea&&0!==Sa&&(0===t||t>=Sa);)qa(Ea,Sa,!1),Ua();null!==Ca&&(_a=0,wa=-1),0!==Sa&&Fa(Sa),Ca=null,Pa=!1,Va()}function Ha(t,e){xa&&p("253"),Ea=t,Sa=e,qa(t,e,!1),za(),Va()}function Va(){if(La=0,null!==Ma){var t=Ma;Ma=null;for(var e=0;e<t.length;e++){var n=t[e];try{n._onComplete()}catch(t){Oa||(Oa=!0,ka=t)}}}if(Oa)throw t=ka,ka=null,Oa=!1,t}function qa(t,e,n){xa&&p("245"),xa=!0,n?null!==(n=t.finishedWork)?Ga(t,n,e):(t.finishedWork=null,null!==(n=sa(t,e,!0))&&(Ya()?t.finishedWork=n:Ga(t,n,e))):null!==(n=t.finishedWork)?Ga(t,n,e):(t.finishedWork=null,null!==(n=sa(t,e,!1))&&Ga(t,n,e)),xa=!1}function Ga(t,e,n){var r=t.firstBatch;if(null!==r&&r._expirationTime<=n&&(null===Ma?Ma=[r]:Ma.push(r),r._defer))return t.finishedWork=e,void(t.remainingExpirationTime=0);if(t.finishedWork=null,oa=Xi=!0,(n=e.stateNode).current===e&&p("177"),0===(r=n.pendingCommitExpirationTime)&&p("261"),n.pendingCommitExpirationTime=0,va(),ie.current=null,1<e.effectTag)if(null!==e.lastEffect){e.lastEffect.nextEffect=e;var o=e.firstEffect}else o=e;else o=e.firstEffect;qr=Cn;var i=c();if(Wn(i)){if("selectionStart"in i)var a={start:i.selectionStart,end:i.selectionEnd};else t:{var u=window.getSelection&&window.getSelection();if(u&&0!==u.rangeCount){a=u.anchorNode;var l=u.anchorOffset,f=u.focusNode;u=u.focusOffset;try{a.nodeType,f.nodeType}catch(t){a=null;break t}var d=0,h=-1,v=-1,y=0,m=0,g=i,b=null;e:for(;;){for(var _;g!==a||0!==l&&3!==g.nodeType||(h=d+l),g!==f||0!==u&&3!==g.nodeType||(v=d+u),3===g.nodeType&&(d+=g.nodeValue.length),null!==(_=g.firstChild);)b=g,g=_;for(;;){if(g===i)break e;if(b===a&&++y===l&&(h=d),b===f&&++m===u&&(v=d),null!==(_=g.nextSibling))break;b=(g=b).parentNode}g=_}a=-1===h||-1===v?null:{start:h,end:v}}else a=null}a=a||{start:0,end:0}}else a=null;for(Gr={focusedElem:i,selectionRange:a},Nn(!1),ra=o;null!==ra;){i=!1,a=void 0;try{for(;null!==ra;){if(256&ra.effectTag){var w=ra.alternate;switch((l=ra).tag){case 2:if(256&l.effectTag&&null!==w){var x=w.memoizedProps,E=w.memoizedState,S=l.stateNode;S.props=l.memoizedProps,S.state=l.memoizedState;var T=S.getSnapshotBeforeUpdate(x,E);S.__reactInternalSnapshotBeforeUpdate=T}break;case 3:case 5:case 6:case 4:break;default:p("163")}}ra=ra.nextEffect}}catch(t){i=!0,a=t}i&&(null===ra&&p("178"),fa(ra,a),null!==ra&&(ra=ra.nextEffect))}for(ra=o;null!==ra;){w=!1,x=void 0;try{for(;null!==ra;){var P=ra.effectTag;if(16&P&&kr(ra.stateNode,""),128&P){var O=ra.alternate;if(null!==O){var k=O.ref;null!==k&&("function"==typeof k?k(null):k.current=null)}}switch(14&P){case 2:Ui(ra),ra.effectTag&=-3;break;case 6:Ui(ra),ra.effectTag&=-3,zi(ra.alternate,ra);break;case 4:zi(ra.alternate,ra);break;case 8:Bi(E=ra),E.return=null,E.child=null,E.alternate&&(E.alternate.child=null,E.alternate.return=null)}ra=ra.nextEffect}}catch(t){w=!0,x=t}w&&(null===ra&&p("178"),fa(ra,x),null!==ra&&(ra=ra.nextEffect))}if(k=Gr,O=c(),P=k.focusedElem,w=k.selectionRange,O!==P&&s(document.documentElement,P)){Wn(P)&&(O=w.start,void 0===(k=w.end)&&(k=O),"selectionStart"in P?(P.selectionStart=O,P.selectionEnd=Math.min(k,P.value.length)):window.getSelection&&(O=window.getSelection(),x=P[ht()].length,k=Math.min(w.start,x),w=void 0===w.end?k:Math.min(w.end,x),!O.extend&&k>w&&(x=w,w=k,k=x),x=zn(P,k),E=zn(P,w),x&&E&&(1!==O.rangeCount||O.anchorNode!==x.node||O.anchorOffset!==x.offset||O.focusNode!==E.node||O.focusOffset!==E.offset)&&((S=document.createRange()).setStart(x.node,x.offset),O.removeAllRanges(),k>w?(O.addRange(S),O.extend(E.node,E.offset)):(S.setEnd(E.node,E.offset),O.addRange(S))))),O=[];for(k=P;k=k.parentNode;)1===k.nodeType&&O.push({element:k,left:k.scrollLeft,top:k.scrollTop});for(P.focus(),P=0;P<O.length;P++)(k=O[P]).element.scrollLeft=k.left,k.element.scrollTop=k.top}for(Gr=null,Nn(qr),qr=null,n.current=e,ra=o;null!==ra;){o=!1,P=void 0;try{for(O=r;null!==ra;){var C=ra.effectTag;if(36&C){var N=ra.alternate;switch(w=O,(k=ra).tag){case 2:var R=k.stateNode;if(4&k.effectTag)if(null===N)R.props=k.memoizedProps,R.state=k.memoizedState,R.componentDidMount();else{var A=N.memoizedProps,M=N.memoizedState;R.props=k.memoizedProps,R.state=k.memoizedState,R.componentDidUpdate(A,M,R.__reactInternalSnapshotBeforeUpdate)}var j=k.updateQueue;null!==j&&(R.props=k.memoizedProps,R.state=k.memoizedState,zo(k,j,R));break;case 3:var L=k.updateQueue;if(null!==L){if(x=null,null!==k.child)switch(k.child.tag){case 5:x=k.child.stateNode;break;case 2:x=k.child.stateNode}zo(k,L,x)}break;case 5:var I=k.stateNode;null===N&&4&k.effectTag&&Yr(k.type,k.memoizedProps)&&I.focus();break;case 6:case 4:case 15:case 16:break;default:p("163")}}if(128&C){k=void 0;var F=ra.ref;if(null!==F){var D=ra.stateNode;switch(ra.tag){case 5:k=D;break;default:k=D}"function"==typeof F?F(k):F.current=k}}var U=ra.nextEffect;ra.nextEffect=null,ra=U}}catch(t){o=!0,P=t}o&&(null===ra&&p("178"),fa(ra,P),null!==ra&&(ra=ra.nextEffect))}Xi=oa=!1,ko(e.stateNode),0===(e=n.current.expirationTime)&&(aa=null),t.remainingExpirationTime=e}function Ya(){return!(null===Ca||Ca.timeRemaining()>Ia)&&(Pa=!0)}function $a(t){null===Ea&&p("246"),Ea.remainingExpirationTime=0,Oa||(Oa=!0,ka=t)}function Qa(t,e){var n=Na;Na=!0;try{return t(e)}finally{(Na=n)||xa||za()}}function Ka(t,e){if(Na&&!Ra){Ra=!0;try{return t(e)}finally{Ra=!1}}return t(e)}function Xa(t,e){xa&&p("187");var n=Na;Na=!0;try{return ma(t,e)}finally{Na=n,za()}}function Ja(t){var e=Na;Na=!0;try{ma(t)}finally{(Na=e)||xa||Wa(1,!1,null)}}function Za(t,e,n,r,o){var i=e.current;if(n){var a;n=n._reactInternalFiber;t:{for(2===an(n)&&2===n.tag||p("170"),a=n;3!==a.tag;){if(so(a)){a=a.stateNode.__reactInternalMemoizedMergedChildContext;break t}(a=a.return)||p("171")}a=a.stateNode.context}n=so(n)?vo(n,a):a}else n=f;return null===e.context?e.context=n:e.pendingContext=n,e=o,(o=Mo(r)).payload={element:t},null!==(e=void 0===e?null:e)&&(o.callback=e),Lo(i,o,r),ha(i,r),r}function tu(t){var e=t._reactInternalFiber;return void 0===e&&("function"==typeof t.render?p("188"):p("268",Object.keys(t))),null===(t=ln(e))?null:t.stateNode}function eu(t,e,n,r){var o=e.current;return Za(t,e,n,o=da(va(),o),r)}function nu(t){if(!(t=t.current).child)return null;switch(t.child.tag){case 5:default:return t.child.stateNode}}function ru(t){var e=t.findFiberByHostInstance;return function(t){if("undefined"==typeof __REACT_DEVTOOLS_GLOBAL_HOOK__)return!1;var e=__REACT_DEVTOOLS_GLOBAL_HOOK__;if(e.isDisabled||!e.supportsFiber)return!0;try{var n=e.inject(t);To=Oo(function(t){return e.onCommitFiberRoot(n,t)}),Po=Oo(function(t){return e.onCommitFiberUnmount(n,t)})}catch(t){}return!0}(a({},t,{findHostInstanceByFiber:function(t){return null===(t=ln(t))?null:t.stateNode},findFiberByHostInstance:function(t){return e?e(t):null}}))}var ou=Qa,iu=function(t,e,n){if(Aa)return t(e,n);Na||xa||0===Ta||(Wa(Ta,!1,null),Ta=0);var r=Aa,o=Na;Na=Aa=!0;try{return t(e,n)}finally{Aa=r,(Na=o)||xa||za()}},au=function(){xa||0===Ta||(Wa(Ta,!1,null),Ta=0)};function uu(t){this._expirationTime=pa(),this._root=t,this._callbacks=this._next=null,this._hasChildren=this._didComplete=!1,this._children=null,this._defer=!0}function cu(){this._callbacks=null,this._didCommit=!1,this._onCommit=this._onCommit.bind(this)}function lu(t,e,n){this._internalRoot=So(t,e,n)}function su(t){return!(!t||1!==t.nodeType&&9!==t.nodeType&&11!==t.nodeType&&(8!==t.nodeType||" react-mount-point-unstable "!==t.nodeValue))}function fu(t,e,n,r,o){su(n)||p("200");var i=n._reactRootContainer;if(i){if("function"==typeof o){var a=o;o=function(){var t=nu(i._internalRoot);a.call(t)}}null!=t?i.legacy_renderSubtreeIntoContainer(t,e,o):i.render(e,o)}else{if(i=n._reactRootContainer=function(t,e){if(e||(e=!(!(e=t?9===t.nodeType?t.documentElement:t.firstChild:null)||1!==e.nodeType||!e.hasAttribute("data-reactroot"))),!e)for(var n;n=t.lastChild;)t.removeChild(n);return new lu(t,!1,e)}(n,r),"function"==typeof o){var u=o;o=function(){var t=nu(i._internalRoot);u.call(t)}}Ka(function(){null!=t?i.legacy_renderSubtreeIntoContainer(t,e,o):i.render(e,o)})}return nu(i._internalRoot)}function pu(t,e){var n=2<arguments.length&&void 0!==arguments[2]?arguments[2]:null;return su(e)||p("200"),function(t,e,n){var r=3<arguments.length&&void 0!==arguments[3]?arguments[3]:null;return{$$typeof:ce,key:null==r?null:""+r,children:t,containerInfo:e,implementation:n}}(t,e,null,n)}Ut.injectFiberControlledHostComponent(Vr),uu.prototype.render=function(t){this._defer||p("250"),this._hasChildren=!0,this._children=t;var e=this._root._internalRoot,n=this._expirationTime,r=new cu;return Za(t,e,null,n,r._onCommit),r},uu.prototype.then=function(t){if(this._didComplete)t();else{var e=this._callbacks;null===e&&(e=this._callbacks=[]),e.push(t)}},uu.prototype.commit=function(){var t=this._root._internalRoot,e=t.firstBatch;if(this._defer&&null!==e||p("251"),this._hasChildren){var n=this._expirationTime;if(e!==this){this._hasChildren&&(n=this._expirationTime=e._expirationTime,this.render(this._children));for(var r=null,o=e;o!==this;)r=o,o=o._next;null===r&&p("251"),r._next=o._next,this._next=e,t.firstBatch=this}this._defer=!1,Ha(t,n),e=this._next,this._next=null,null!==(e=t.firstBatch=e)&&e._hasChildren&&e.render(e._children)}else this._next=null,this._defer=!1},uu.prototype._onComplete=function(){if(!this._didComplete){this._didComplete=!0;var t=this._callbacks;if(null!==t)for(var e=0;e<t.length;e++)(0,t[e])()}},cu.prototype.then=function(t){if(this._didCommit)t();else{var e=this._callbacks;null===e&&(e=this._callbacks=[]),e.push(t)}},cu.prototype._onCommit=function(){if(!this._didCommit){this._didCommit=!0;var t=this._callbacks;if(null!==t)for(var e=0;e<t.length;e++){var n=t[e];"function"!=typeof n&&p("191",n),n()}}},lu.prototype.render=function(t,e){var n=this._internalRoot,r=new cu;return null!==(e=void 0===e?null:e)&&r.then(e),eu(t,n,null,r._onCommit),r},lu.prototype.unmount=function(t){var e=this._internalRoot,n=new cu;return null!==(t=void 0===t?null:t)&&n.then(t),eu(null,e,null,n._onCommit),n},lu.prototype.legacy_renderSubtreeIntoContainer=function(t,e,n){var r=this._internalRoot,o=new cu;return null!==(n=void 0===n?null:n)&&o.then(n),eu(e,r,t,o._onCommit),o},lu.prototype.createBatch=function(){var t=new uu(this),e=t._expirationTime,n=this._internalRoot,r=n.firstBatch;if(null===r)n.firstBatch=t,t._next=null;else{for(n=null;null!==r&&r._expirationTime<=e;)n=r,r=r._next;t._next=r,null!==n&&(n._next=t)}return t},Yt=ou,$t=iu,Qt=au;var du={createPortal:pu,findDOMNode:function(t){return null==t?null:1===t.nodeType?t:tu(t)},hydrate:function(t,e,n){return fu(null,t,e,!0,n)},render:function(t,e,n){return fu(null,t,e,!1,n)},unstable_renderSubtreeIntoContainer:function(t,e,n,r){return(null==t||void 0===t._reactInternalFiber)&&p("38"),fu(t,e,n,!1,r)},unmountComponentAtNode:function(t){return su(t)||p("40"),!!t._reactRootContainer&&(Ka(function(){fu(null,null,t,!1,function(){t._reactRootContainer=null})}),!0)},unstable_createPortal:function(){return pu.apply(void 0,arguments)},unstable_batchedUpdates:Qa,unstable_deferredUpdates:ya,flushSync:Xa,unstable_flushControlled:Ja,__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED:{EventPluginHub:U,EventPluginRegistry:S,EventPropagators:nt,ReactControlledComponent:Gt,ReactDOMComponentTree:G,ReactDOMEventListener:Ln},unstable_createRoot:function(t,e){return new lu(t,!0,null!=e&&!0===e.hydrate)}};ru({findFiberByHostInstance:H,bundleType:0,version:"16.4.0",rendererPackageName:"react-dom"});var hu={default:du},vu=hu&&du||hu;t.exports=vu.default?vu.default:vu},function(t,e,n){"use strict";
/** @license React v16.4.0
 * react.production.min.js
 *
 * Copyright (c) 2013-present, Facebook, Inc.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 */var r=n(107),o=n(74),i=n(106),a=n(73),u="function"==typeof Symbol&&Symbol.for,c=u?Symbol.for("react.element"):60103,l=u?Symbol.for("react.portal"):60106,s=u?Symbol.for("react.fragment"):60107,f=u?Symbol.for("react.strict_mode"):60108,p=u?Symbol.for("react.profiler"):60114,d=u?Symbol.for("react.provider"):60109,h=u?Symbol.for("react.context"):60110,v=u?Symbol.for("react.async_mode"):60111,y=u?Symbol.for("react.forward_ref"):60112;u&&Symbol.for("react.timeout");var m="function"==typeof Symbol&&Symbol.iterator;function g(t){for(var e=arguments.length-1,n="https://reactjs.org/docs/error-decoder.html?invariant="+t,r=0;r<e;r++)n+="&args[]="+encodeURIComponent(arguments[r+1]);o(!1,"Minified React error #"+t+"; visit %s for the full message or use the non-minified dev environment for full errors and additional helpful warnings. ",n)}var b={isMounted:function(){return!1},enqueueForceUpdate:function(){},enqueueReplaceState:function(){},enqueueSetState:function(){}};function _(t,e,n){this.props=t,this.context=e,this.refs=i,this.updater=n||b}function w(){}function x(t,e,n){this.props=t,this.context=e,this.refs=i,this.updater=n||b}_.prototype.isReactComponent={},_.prototype.setState=function(t,e){"object"!=typeof t&&"function"!=typeof t&&null!=t&&g("85"),this.updater.enqueueSetState(this,t,e,"setState")},_.prototype.forceUpdate=function(t){this.updater.enqueueForceUpdate(this,t,"forceUpdate")},w.prototype=_.prototype;var E=x.prototype=new w;E.constructor=x,r(E,_.prototype),E.isPureReactComponent=!0;var S={current:null},T=Object.prototype.hasOwnProperty,P={key:!0,ref:!0,__self:!0,__source:!0};function O(t,e,n){var r=void 0,o={},i=null,a=null;if(null!=e)for(r in void 0!==e.ref&&(a=e.ref),void 0!==e.key&&(i=""+e.key),e)T.call(e,r)&&!P.hasOwnProperty(r)&&(o[r]=e[r]);var u=arguments.length-2;if(1===u)o.children=n;else if(1<u){for(var l=Array(u),s=0;s<u;s++)l[s]=arguments[s+2];o.children=l}if(t&&t.defaultProps)for(r in u=t.defaultProps)void 0===o[r]&&(o[r]=u[r]);return{$$typeof:c,type:t,key:i,ref:a,props:o,_owner:S.current}}function k(t){return"object"==typeof t&&null!==t&&t.$$typeof===c}var C=/\/+/g,N=[];function R(t,e,n,r){if(N.length){var o=N.pop();return o.result=t,o.keyPrefix=e,o.func=n,o.context=r,o.count=0,o}return{result:t,keyPrefix:e,func:n,context:r,count:0}}function A(t){t.result=null,t.keyPrefix=null,t.func=null,t.context=null,t.count=0,10>N.length&&N.push(t)}function M(t,e,n,r){var o=typeof t;"undefined"!==o&&"boolean"!==o||(t=null);var i=!1;if(null===t)i=!0;else switch(o){case"string":case"number":i=!0;break;case"object":switch(t.$$typeof){case c:case l:i=!0}}if(i)return n(r,t,""===e?"."+j(t,0):e),1;if(i=0,e=""===e?".":e+":",Array.isArray(t))for(var a=0;a<t.length;a++){var u=e+j(o=t[a],a);i+=M(o,u,n,r)}else if(null===t||void 0===t?u=null:u="function"==typeof(u=m&&t[m]||t["@@iterator"])?u:null,"function"==typeof u)for(t=u.call(t),a=0;!(o=t.next()).done;)i+=M(o=o.value,u=e+j(o,a++),n,r);else"object"===o&&g("31","[object Object]"===(n=""+t)?"object with keys {"+Object.keys(t).join(", ")+"}":n,"");return i}function j(t,e){return"object"==typeof t&&null!==t&&null!=t.key?function(t){var e={"=":"=0",":":"=2"};return"$"+(""+t).replace(/[=:]/g,function(t){return e[t]})}(t.key):e.toString(36)}function L(t,e){t.func.call(t.context,e,t.count++)}function I(t,e,n){var r=t.result,o=t.keyPrefix;t=t.func.call(t.context,e,t.count++),Array.isArray(t)?F(t,r,n,a.thatReturnsArgument):null!=t&&(k(t)&&(e=o+(!t.key||e&&e.key===t.key?"":(""+t.key).replace(C,"$&/")+"/")+n,t={$$typeof:c,type:t.type,key:e,ref:t.ref,props:t.props,_owner:t._owner}),r.push(t))}function F(t,e,n,r,o){var i="";null!=n&&(i=(""+n).replace(C,"$&/")+"/"),e=R(e,i,r,o),null==t||M(t,"",I,e),A(e)}var D={Children:{map:function(t,e,n){if(null==t)return t;var r=[];return F(t,r,null,e,n),r},forEach:function(t,e,n){if(null==t)return t;e=R(null,null,e,n),null==t||M(t,"",L,e),A(e)},count:function(t){return null==t?0:M(t,"",a.thatReturnsNull,null)},toArray:function(t){var e=[];return F(t,e,null,a.thatReturnsArgument),e},only:function(t){return k(t)||g("143"),t}},createRef:function(){return{current:null}},Component:_,PureComponent:x,createContext:function(t,e){return void 0===e&&(e=null),(t={$$typeof:h,_calculateChangedBits:e,_defaultValue:t,_currentValue:t,_currentValue2:t,_changedBits:0,_changedBits2:0,Provider:null,Consumer:null}).Provider={$$typeof:d,_context:t},t.Consumer=t},forwardRef:function(t){return{$$typeof:y,render:t}},Fragment:s,StrictMode:f,unstable_AsyncMode:v,unstable_Profiler:p,createElement:O,cloneElement:function(t,e,n){(null===t||void 0===t)&&g("267",t);var o=void 0,i=r({},t.props),a=t.key,u=t.ref,l=t._owner;if(null!=e){void 0!==e.ref&&(u=e.ref,l=S.current),void 0!==e.key&&(a=""+e.key);var s=void 0;for(o in t.type&&t.type.defaultProps&&(s=t.type.defaultProps),e)T.call(e,o)&&!P.hasOwnProperty(o)&&(i[o]=void 0===e[o]&&void 0!==s?s[o]:e[o])}if(1===(o=arguments.length-2))i.children=n;else if(1<o){s=Array(o);for(var f=0;f<o;f++)s[f]=arguments[f+2];i.children=s}return{$$typeof:c,type:t.type,key:a,ref:u,props:i,_owner:l}},createFactory:function(t){var e=O.bind(null,t);return e.type=t,e},isValidElement:k,version:"16.4.0",__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED:{ReactCurrentOwner:S,assign:r}},U={default:D},B=U&&D||U;t.exports=B.default?B.default:B},function(t,e,n){"use strict";var r=s(n(10)),o=s(n(105)),i=s(n(176)),a=s(n(145)),u=n(44),c=s(n(144)),l=n(101);function s(t){return t&&t.__esModule?t:{default:t}}var f=(0,l.createStore)(a.default,(0,l.applyMiddleware)(c.default));o.default.render(r.default.createElement(u.Provider,{store:f},r.default.createElement(i.default,null)),document.getElementById("root"))},function(t,e){t.exports=function(t,e){var n=e===Object(e)?function(t){return e[t]}:e;return function(e){return String(e).replace(t,n)}}},function(t,e,n){var r=n(0),o=n(186)(/[\\^$*+?.()|[\]{}]/g,"\\$&");r(r.S,"RegExp",{escape:function(t){return o(t)}})},function(t,e,n){n(187),t.exports=n(23).RegExp.escape},function(t,e,n){(function(e){!function(e){"use strict";var n,r=Object.prototype,o=r.hasOwnProperty,i="function"==typeof Symbol?Symbol:{},a=i.iterator||"@@iterator",u=i.asyncIterator||"@@asyncIterator",c=i.toStringTag||"@@toStringTag",l="object"==typeof t,s=e.regeneratorRuntime;if(s)l&&(t.exports=s);else{(s=e.regeneratorRuntime=l?t.exports:{}).wrap=_;var f="suspendedStart",p="suspendedYield",d="executing",h="completed",v={},y={};y[a]=function(){return this};var m=Object.getPrototypeOf,g=m&&m(m(R([])));g&&g!==r&&o.call(g,a)&&(y=g);var b=S.prototype=x.prototype=Object.create(y);E.prototype=b.constructor=S,S.constructor=E,S[c]=E.displayName="GeneratorFunction",s.isGeneratorFunction=function(t){var e="function"==typeof t&&t.constructor;return!!e&&(e===E||"GeneratorFunction"===(e.displayName||e.name))},s.mark=function(t){return Object.setPrototypeOf?Object.setPrototypeOf(t,S):(t.__proto__=S,c in t||(t[c]="GeneratorFunction")),t.prototype=Object.create(b),t},s.awrap=function(t){return{__await:t}},T(P.prototype),P.prototype[u]=function(){return this},s.AsyncIterator=P,s.async=function(t,e,n,r){var o=new P(_(t,e,n,r));return s.isGeneratorFunction(e)?o:o.next().then(function(t){return t.done?t.value:o.next()})},T(b),b[c]="Generator",b[a]=function(){return this},b.toString=function(){return"[object Generator]"},s.keys=function(t){var e=[];for(var n in t)e.push(n);return e.reverse(),function n(){for(;e.length;){var r=e.pop();if(r in t)return n.value=r,n.done=!1,n}return n.done=!0,n}},s.values=R,N.prototype={constructor:N,reset:function(t){if(this.prev=0,this.next=0,this.sent=this._sent=n,this.done=!1,this.delegate=null,this.method="next",this.arg=n,this.tryEntries.forEach(C),!t)for(var e in this)"t"===e.charAt(0)&&o.call(this,e)&&!isNaN(+e.slice(1))&&(this[e]=n)},stop:function(){this.done=!0;var t=this.tryEntries[0].completion;if("throw"===t.type)throw t.arg;return this.rval},dispatchException:function(t){if(this.done)throw t;var e=this;function r(r,o){return u.type="throw",u.arg=t,e.next=r,o&&(e.method="next",e.arg=n),!!o}for(var i=this.tryEntries.length-1;i>=0;--i){var a=this.tryEntries[i],u=a.completion;if("root"===a.tryLoc)return r("end");if(a.tryLoc<=this.prev){var c=o.call(a,"catchLoc"),l=o.call(a,"finallyLoc");if(c&&l){if(this.prev<a.catchLoc)return r(a.catchLoc,!0);if(this.prev<a.finallyLoc)return r(a.finallyLoc)}else if(c){if(this.prev<a.catchLoc)return r(a.catchLoc,!0)}else{if(!l)throw new Error("try statement without catch or finally");if(this.prev<a.finallyLoc)return r(a.finallyLoc)}}}},abrupt:function(t,e){for(var n=this.tryEntries.length-1;n>=0;--n){var r=this.tryEntries[n];if(r.tryLoc<=this.prev&&o.call(r,"finallyLoc")&&this.prev<r.finallyLoc){var i=r;break}}i&&("break"===t||"continue"===t)&&i.tryLoc<=e&&e<=i.finallyLoc&&(i=null);var a=i?i.completion:{};return a.type=t,a.arg=e,i?(this.method="next",this.next=i.finallyLoc,v):this.complete(a)},complete:function(t,e){if("throw"===t.type)throw t.arg;return"break"===t.type||"continue"===t.type?this.next=t.arg:"return"===t.type?(this.rval=this.arg=t.arg,this.method="return",this.next="end"):"normal"===t.type&&e&&(this.next=e),v},finish:function(t){for(var e=this.tryEntries.length-1;e>=0;--e){var n=this.tryEntries[e];if(n.finallyLoc===t)return this.complete(n.completion,n.afterLoc),C(n),v}},catch:function(t){for(var e=this.tryEntries.length-1;e>=0;--e){var n=this.tryEntries[e];if(n.tryLoc===t){var r=n.completion;if("throw"===r.type){var o=r.arg;C(n)}return o}}throw new Error("illegal catch attempt")},delegateYield:function(t,e,r){return this.delegate={iterator:R(t),resultName:e,nextLoc:r},"next"===this.method&&(this.arg=n),v}}}function _(t,e,n,r){var o=e&&e.prototype instanceof x?e:x,i=Object.create(o.prototype),a=new N(r||[]);return i._invoke=function(t,e,n){var r=f;return function(o,i){if(r===d)throw new Error("Generator is already running");if(r===h){if("throw"===o)throw i;return A()}for(n.method=o,n.arg=i;;){var a=n.delegate;if(a){var u=O(a,n);if(u){if(u===v)continue;return u}}if("next"===n.method)n.sent=n._sent=n.arg;else if("throw"===n.method){if(r===f)throw r=h,n.arg;n.dispatchException(n.arg)}else"return"===n.method&&n.abrupt("return",n.arg);r=d;var c=w(t,e,n);if("normal"===c.type){if(r=n.done?h:p,c.arg===v)continue;return{value:c.arg,done:n.done}}"throw"===c.type&&(r=h,n.method="throw",n.arg=c.arg)}}}(t,n,a),i}function w(t,e,n){try{return{type:"normal",arg:t.call(e,n)}}catch(t){return{type:"throw",arg:t}}}function x(){}function E(){}function S(){}function T(t){["next","throw","return"].forEach(function(e){t[e]=function(t){return this._invoke(e,t)}})}function P(t){function n(e,r,i,a){var u=w(t[e],t,r);if("throw"!==u.type){var c=u.arg,l=c.value;return l&&"object"==typeof l&&o.call(l,"__await")?Promise.resolve(l.__await).then(function(t){n("next",t,i,a)},function(t){n("throw",t,i,a)}):Promise.resolve(l).then(function(t){c.value=t,i(c)},a)}a(u.arg)}var r;"object"==typeof e.process&&e.process.domain&&(n=e.process.domain.bind(n)),this._invoke=function(t,e){function o(){return new Promise(function(r,o){n(t,e,r,o)})}return r=r?r.then(o,o):o()}}function O(t,e){var r=t.iterator[e.method];if(r===n){if(e.delegate=null,"throw"===e.method){if(t.iterator.return&&(e.method="return",e.arg=n,O(t,e),"throw"===e.method))return v;e.method="throw",e.arg=new TypeError("The iterator does not provide a 'throw' method")}return v}var o=w(r,t.iterator,e.arg);if("throw"===o.type)return e.method="throw",e.arg=o.arg,e.delegate=null,v;var i=o.arg;return i?i.done?(e[t.resultName]=i.value,e.next=t.nextLoc,"return"!==e.method&&(e.method="next",e.arg=n),e.delegate=null,v):i:(e.method="throw",e.arg=new TypeError("iterator result is not an object"),e.delegate=null,v)}function k(t){var e={tryLoc:t[0]};1 in t&&(e.catchLoc=t[1]),2 in t&&(e.finallyLoc=t[2],e.afterLoc=t[3]),this.tryEntries.push(e)}function C(t){var e=t.completion||{};e.type="normal",delete e.arg,t.completion=e}function N(t){this.tryEntries=[{tryLoc:"root"}],t.forEach(k,this),this.reset(!0)}function R(t){if(t){var e=t[a];if(e)return e.call(t);if("function"==typeof t.next)return t;if(!isNaN(t.length)){var r=-1,i=function e(){for(;++r<t.length;)if(o.call(t,r))return e.value=t[r],e.done=!1,e;return e.value=n,e.done=!0,e};return i.next=i}}return{next:A}}function A(){return{value:n,done:!0}}}("object"==typeof e?e:"object"==typeof window?window:"object"==typeof self?self:this)}).call(this,n(68))},function(t,e,n){for(var r=n(79),o=n(41),i=n(13),a=n(2),u=n(14),c=n(46),l=n(5),s=l("iterator"),f=l("toStringTag"),p=c.Array,d={CSSRuleList:!0,CSSStyleDeclaration:!1,CSSValueList:!1,ClientRectList:!1,DOMRectList:!1,DOMStringList:!1,DOMTokenList:!0,DataTransferItemList:!1,FileList:!1,HTMLAllCollection:!1,HTMLCollection:!1,HTMLFormElement:!1,HTMLSelectElement:!1,MediaList:!0,MimeTypeArray:!1,NamedNodeMap:!1,NodeList:!0,PaintRequestList:!1,Plugin:!1,PluginArray:!1,SVGLengthList:!1,SVGNumberList:!1,SVGPathSegList:!1,SVGPointList:!1,SVGStringList:!1,SVGTransformList:!1,SourceBufferList:!1,StyleSheetList:!0,TextTrackCueList:!1,TextTrackList:!1,TouchList:!1},h=o(d),v=0;v<h.length;v++){var y,m=h[v],g=d[m],b=a[m],_=b&&b.prototype;if(_&&(_[s]||u(_,s,p),_[f]||u(_,f,m),c[m]=p,g))for(y in r)_[y]||i(_,y,r[y],!0)}},function(t,e,n){var r=n(0),o=n(78);r(r.G+r.B,{setImmediate:o.set,clearImmediate:o.clear})},function(t,e,n){var r=n(2),o=n(0),i=n(58),a=[].slice,u=/MSIE .\./.test(i),c=function(t){return function(e,n){var r=arguments.length>2,o=!!r&&a.call(arguments,2);return t(r?function(){("function"==typeof e?e:Function(e)).apply(this,o)}:e,n)}};o(o.G+o.B+o.F*u,{setTimeout:c(r.setTimeout),setInterval:c(r.setInterval)})},function(t,e,n){"use strict";var r=n(0),o=n(2),i=n(23),a=n(77)(),u=n(5)("observable"),c=n(11),l=n(1),s=n(36),f=n(34),p=n(14),d=n(35),h=d.RETURN,v=function(t){return null==t?void 0:c(t)},y=function(t){var e=t._c;e&&(t._c=void 0,e())},m=function(t){return void 0===t._o},g=function(t){m(t)||(t._o=void 0,y(t))},b=function(t,e){l(t),this._c=void 0,this._o=t,t=new _(this);try{var n=e(t),r=n;null!=n&&("function"==typeof n.unsubscribe?n=function(){r.unsubscribe()}:c(n),this._c=n)}catch(e){return void t.error(e)}m(this)&&y(this)};b.prototype=f({},{unsubscribe:function(){g(this)}});var _=function(t){this._s=t};_.prototype=f({},{next:function(t){var e=this._s;if(!m(e)){var n=e._o;try{var r=v(n.next);if(r)return r.call(n,t)}catch(t){try{g(e)}finally{throw t}}}},error:function(t){var e=this._s;if(m(e))throw t;var n=e._o;e._o=void 0;try{var r=v(n.error);if(!r)throw t;t=r.call(n,t)}catch(t){try{y(e)}finally{throw t}}return y(e),t},complete:function(t){var e=this._s;if(!m(e)){var n=e._o;e._o=void 0;try{var r=v(n.complete);t=r?r.call(n,t):void 0}catch(t){try{y(e)}finally{throw t}}return y(e),t}}});var w=function(t){s(this,w,"Observable","_f")._f=c(t)};f(w.prototype,{subscribe:function(t){return new b(t,this._f)},forEach:function(t){var e=this;return new(i.Promise||o.Promise)(function(n,r){c(t);var o=e.subscribe({next:function(e){try{return t(e)}catch(t){r(t),o.unsubscribe()}},error:r,complete:n})})}}),f(w,{from:function(t){var e="function"==typeof this?this:w,n=v(l(t)[u]);if(n){var r=l(n.call(t));return r.constructor===e?r:new e(function(t){return r.subscribe(t)})}return new e(function(e){var n=!1;return a(function(){if(!n){try{if(d(t,!1,function(t){if(e.next(t),n)return h})===h)return}catch(t){if(n)throw t;return void e.error(t)}e.complete()}}),function(){n=!0}})},of:function(){for(var t=0,e=arguments.length,n=new Array(e);t<e;)n[t]=arguments[t++];return new("function"==typeof this?this:w)(function(t){var e=!1;return a(function(){if(!e){for(var r=0;r<n.length;++r)if(t.next(n[r]),e)return;t.complete()}}),function(){e=!0}})}}),p(w.prototype,u,function(){return this}),r(r.G,{Observable:w}),n(37)("Observable")},function(t,e,n){var r=n(0),o=n(77)(),i=n(2).process,a="process"==n(21)(i);r(r.G,{asap:function(t){var e=a&&i.domain;o(e?e.bind(t):t)}})},function(t,e,n){var r=n(29),o=n(1),i=n(11),a=r.key,u=r.set;r.exp({metadata:function(t,e){return function(n,r){u(t,e,(void 0!==r?o:i)(n),a(r))}}})},function(t,e,n){var r=n(29),o=n(1),i=r.has,a=r.key;r.exp({hasOwnMetadata:function(t,e){return i(t,o(e),arguments.length<3?void 0:a(arguments[2]))}})},function(t,e,n){var r=n(29),o=n(1),i=n(16),a=r.has,u=r.key,c=function(t,e,n){if(a(t,e,n))return!0;var r=i(e);return null!==r&&c(t,r,n)};r.exp({hasMetadata:function(t,e){return c(t,o(e),arguments.length<3?void 0:u(arguments[2]))}})},function(t,e,n){var r=n(29),o=n(1),i=r.keys,a=r.key;r.exp({getOwnMetadataKeys:function(t){return i(o(t),arguments.length<2?void 0:a(arguments[1]))}})},function(t,e,n){var r=n(29),o=n(1),i=r.get,a=r.key;r.exp({getOwnMetadata:function(t,e){return i(t,o(e),arguments.length<3?void 0:a(arguments[2]))}})},function(t,e,n){var r=n(118),o=n(109),i=n(29),a=n(1),u=n(16),c=i.keys,l=i.key,s=function(t,e){var n=c(t,e),i=u(t);if(null===i)return n;var a=s(i,e);return a.length?n.length?o(new r(n.concat(a))):a:n};i.exp({getMetadataKeys:function(t){return s(a(t),arguments.length<2?void 0:l(arguments[1]))}})},function(t,e,n){var r=n(29),o=n(1),i=n(16),a=r.has,u=r.get,c=r.key,l=function(t,e,n){if(a(t,e,n))return u(t,e,n);var r=i(e);return null!==r?l(t,r,n):void 0};r.exp({getMetadata:function(t,e){return l(t,o(e),arguments.length<3?void 0:c(arguments[2]))}})},function(t,e,n){var r=n(29),o=n(1),i=r.key,a=r.map,u=r.store;r.exp({deleteMetadata:function(t,e){var n=arguments.length<3?void 0:i(arguments[2]),r=a(o(e),n,!1);if(void 0===r||!r.delete(t))return!1;if(r.size)return!0;var c=u.get(e);return c.delete(n),!!c.size||u.delete(e)}})},function(t,e,n){var r=n(29),o=n(1),i=r.key,a=r.set;r.exp({defineMetadata:function(t,e,n,r){a(t,e,o(n),i(r))}})},function(t,e,n){"use strict";var r=n(0),o=n(76),i=n(122);r(r.S,"Promise",{try:function(t){var e=o.f(this),n=i(t);return(n.e?e.reject:e.resolve)(n.v),e.promise}})},function(t,e,n){"use strict";var r=n(0),o=n(23),i=n(2),a=n(59),u=n(121);r(r.P+r.R,"Promise",{finally:function(t){var e=a(this,o.Promise||i.Promise),n="function"==typeof t;return this.then(n?function(n){return u(e,t()).then(function(){return n})}:t,n?function(n){return u(e,t()).then(function(){throw n})}:t)}})},function(t,e,n){var r=n(0);r(r.S,"Math",{signbit:function(t){return(t=+t)!=t?t:0==t?1/t==1/0:t>0}})},function(t,e,n){var r=n(0);r(r.S,"Math",{umulh:function(t,e){var n=+t,r=+e,o=65535&n,i=65535&r,a=n>>>16,u=r>>>16,c=(a*i>>>0)+(o*i>>>16);return a*u+(c>>>16)+((o*u>>>0)+(65535&c)>>>16)}})},function(t,e,n){var r=n(0);r(r.S,"Math",{scale:n(108)})},function(t,e,n){var r=n(0),o=Math.PI/180;r(r.S,"Math",{radians:function(t){return t*o}})},function(t,e,n){var r=n(0);r(r.S,"Math",{RAD_PER_DEG:180/Math.PI})},function(t,e,n){var r=n(0);r(r.S,"Math",{imulh:function(t,e){var n=+t,r=+e,o=65535&n,i=65535&r,a=n>>16,u=r>>16,c=(a*i>>>0)+(o*i>>>16);return a*u+(c>>16)+((o*u>>>0)+(65535&c)>>16)}})},function(t,e,n){var r=n(0);r(r.S,"Math",{isubh:function(t,e,n,r){var o=t>>>0,i=n>>>0;return(e>>>0)-(r>>>0)-((~o&i|~(o^i)&o-i>>>0)>>>31)|0}})},function(t,e,n){var r=n(0);r(r.S,"Math",{iaddh:function(t,e,n,r){var o=t>>>0,i=n>>>0;return(e>>>0)+(r>>>0)+((o&i|(o|i)&~(o+i>>>0))>>>31)|0}})},function(t,e,n){var r=n(0),o=n(108),i=n(128);r(r.S,"Math",{fscale:function(t,e,n,r,a){return i(o(t,e,n,r,a))}})},function(t,e,n){var r=n(0),o=180/Math.PI;r(r.S,"Math",{degrees:function(t){return t*o}})},function(t,e,n){var r=n(0);r(r.S,"Math",{DEG_PER_RAD:Math.PI/180})},function(t,e,n){var r=n(0);r(r.S,"Math",{clamp:function(t,e,n){return Math.min(n,Math.max(e,t))}})},function(t,e,n){var r=n(0),o=n(21);r(r.S,"Error",{isError:function(t){return"Error"===o(t)}})},function(t,e,n){var r=n(0);r(r.S,"System",{global:n(2)})},function(t,e,n){var r=n(0);r(r.G,{global:n(2)})},function(t,e,n){n(53)("WeakSet")},function(t,e,n){n(53)("WeakMap")},function(t,e,n){n(53)("Set")},function(t,e,n){n(53)("Map")},function(t,e,n){n(54)("WeakSet")},function(t,e,n){n(54)("WeakMap")},function(t,e,n){n(54)("Set")},function(t,e,n){n(54)("Map")},function(t,e,n){var r=n(0);r(r.P+r.R,"Set",{toJSON:n(110)("Set")})},function(t,e,n){var r=n(0);r(r.P+r.R,"Map",{toJSON:n(110)("Map")})},function(t,e,n){"use strict";var r=n(0),o=n(9),i=n(28),a=n(16),u=n(17).f;n(8)&&r(r.P+n(55),"Object",{__lookupSetter__:function(t){var e,n=o(this),r=i(t,!0);do{if(e=u(n,r))return e.set}while(n=a(n))}})},function(t,e,n){"use strict";var r=n(0),o=n(9),i=n(28),a=n(16),u=n(17).f;n(8)&&r(r.P+n(55),"Object",{__lookupGetter__:function(t){var e,n=o(this),r=i(t,!0);do{if(e=u(n,r))return e.get}while(n=a(n))}})},function(t,e,n){"use strict";var r=n(0),o=n(9),i=n(11),a=n(7);n(8)&&r(r.P+n(55),"Object",{__defineSetter__:function(t,e){a.f(o(this),t,{set:i(e),enumerable:!0,configurable:!0})}})},function(t,e,n){"use strict";var r=n(0),o=n(9),i=n(11),a=n(7);n(8)&&r(r.P+n(55),"Object",{__defineGetter__:function(t,e){a.f(o(this),t,{get:i(e),enumerable:!0,configurable:!0})}})},function(t,e,n){var r=n(0),o=n(111)(!0);r(r.S,"Object",{entries:function(t){return o(t)}})},function(t,e,n){var r=n(0),o=n(111)(!1);r(r.S,"Object",{values:function(t){return o(t)}})},function(t,e,n){var r=n(0),o=n(114),i=n(18),a=n(17),u=n(83);r(r.S,"Object",{getOwnPropertyDescriptors:function(t){for(var e,n,r=i(t),c=a.f,l=o(r),s={},f=0;l.length>f;)void 0!==(n=c(r,e=l[f++]))&&u(s,e,n);return s}})},function(t,e,n){n(99)("observable")},function(t,e,n){n(99)("asyncIterator")},function(t,e,n){"use strict";var r=n(0),o=n(27),i=n(6),a=n(63),u=n(61),c=RegExp.prototype,l=function(t,e){this._r=t,this._s=e};n(87)(l,"RegExp String",function(){var t=this._r.exec(this._s);return{value:t,done:null===t}}),r(r.P,"String",{matchAll:function(t){if(o(this),!a(t))throw TypeError(t+" is not a regexp!");var e=String(this),n="flags"in c?String(t.flags):u.call(t),r=new RegExp(t.source,~n.indexOf("g")?n:"g"+n);return r.lastIndex=i(t.lastIndex),new l(r,e)}})},function(t,e,n){"use strict";n(47)("trimRight",function(t){return function(){return t(this,2)}},"trimEnd")},function(t,e,n){"use strict";n(47)("trimLeft",function(t){return function(){return t(this,1)}},"trimStart")},function(t,e,n){"use strict";var r=n(0),o=n(112),i=n(58);r(r.P+r.F*/Version\/10\.\d+(\.\d+)? Safari\//.test(i),"String",{padEnd:function(t){return o(this,t,arguments.length>1?arguments[1]:void 0,!1)}})},function(t,e,n){"use strict";var r=n(0),o=n(112),i=n(58);r(r.P+r.F*/Version\/10\.\d+(\.\d+)? Safari\//.test(i),"String",{padStart:function(t){return o(this,t,arguments.length>1?arguments[1]:void 0,!0)}})},function(t,e,n){"use strict";var r=n(0),o=n(89)(!0);r(r.P,"String",{at:function(t){return o(this,t)}})},function(t,e,n){"use strict";var r=n(0),o=n(113),i=n(9),a=n(6),u=n(26),c=n(81);r(r.P,"Array",{flatten:function(){var t=arguments[0],e=i(this),n=a(e.length),r=c(e,0);return o(r,e,e,n,0,void 0===t?1:u(t)),r}}),n(31)("flatten")},function(t,e,n){"use strict";var r=n(0),o=n(113),i=n(9),a=n(6),u=n(11),c=n(81);r(r.P,"Array",{flatMap:function(t){var e,n,r=i(this);return u(t),e=a(r.length),n=c(r,0),o(n,r,r,e,0,1,t,arguments[1]),n}}),n(31)("flatMap")},function(t,e,n){"use strict";var r=n(0),o=n(66)(!0);r(r.P,"Array",{includes:function(t){return o(this,t,arguments.length>1?arguments[1]:void 0)}}),n(31)("includes")},function(t,e,n){var r=n(0),o=n(95);o&&r(r.S,"Reflect",{setPrototypeOf:function(t,e){o.check(t,e);try{return o.set(t,e),!0}catch(t){return!1}}})},function(t,e,n){var r=n(7),o=n(17),i=n(16),a=n(19),u=n(0),c=n(43),l=n(1),s=n(4);u(u.S,"Reflect",{set:function t(e,n,u){var f,p,d=arguments.length<4?e:arguments[3],h=o.f(l(e),n);if(!h){if(s(p=i(e)))return t(p,n,u,d);h=c(0)}if(a(h,"value")){if(!1===h.writable||!s(d))return!1;if(f=o.f(d,n)){if(f.get||f.set||!1===f.writable)return!1;f.value=u,r.f(d,n,f)}else r.f(d,n,c(0,u));return!0}return void 0!==h.set&&(h.set.call(d,u),!0)}})},function(t,e,n){var r=n(0),o=n(1),i=Object.preventExtensions;r(r.S,"Reflect",{preventExtensions:function(t){o(t);try{return i&&i(t),!0}catch(t){return!1}}})},function(t,e,n){var r=n(0);r(r.S,"Reflect",{ownKeys:n(114)})},function(t,e,n){var r=n(0),o=n(1),i=Object.isExtensible;r(r.S,"Reflect",{isExtensible:function(t){return o(t),!i||i(t)}})},function(t,e,n){var r=n(0);r(r.S,"Reflect",{has:function(t,e){return e in t}})},function(t,e,n){var r=n(0),o=n(16),i=n(1);r(r.S,"Reflect",{getPrototypeOf:function(t){return o(i(t))}})},function(t,e,n){var r=n(17),o=n(0),i=n(1);o(o.S,"Reflect",{getOwnPropertyDescriptor:function(t,e){return r.f(i(t),e)}})},function(t,e,n){var r=n(17),o=n(16),i=n(19),a=n(0),u=n(4),c=n(1);a(a.S,"Reflect",{get:function t(e,n){var a,l,s=arguments.length<3?e:arguments[2];return c(e)===s?e[n]:(a=r.f(e,n))?i(a,"value")?a.value:void 0!==a.get?a.get.call(s):void 0:u(l=o(e))?t(l,n,s):void 0}})},function(t,e,n){"use strict";var r=n(0),o=n(1),i=function(t){this._t=o(t),this._i=0;var e,n=this._k=[];for(e in t)n.push(e)};n(87)(i,"Object",function(){var t,e=this._k;do{if(this._i>=e.length)return{value:void 0,done:!0}}while(!((t=e[this._i++])in this._t));return{value:t,done:!1}}),r(r.S,"Reflect",{enumerate:function(t){return new i(t)}})},function(t,e,n){var r=n(0),o=n(17).f,i=n(1);r(r.S,"Reflect",{deleteProperty:function(t,e){var n=o(i(t),e);return!(n&&!n.configurable)&&delete t[e]}})},function(t,e,n){var r=n(7),o=n(0),i=n(1),a=n(28);o(o.S+o.F*n(3)(function(){Reflect.defineProperty(r.f({},1,{value:1}),1,{value:2})}),"Reflect",{defineProperty:function(t,e,n){i(t),e=a(e,!0),i(n);try{return r.f(t,e,n),!0}catch(t){return!1}}})},function(t,e,n){var r=n(0),o=n(39),i=n(11),a=n(1),u=n(4),c=n(3),l=n(135),s=(n(2).Reflect||{}).construct,f=c(function(){function t(){}return!(s(function(){},[],t)instanceof t)}),p=!c(function(){s(function(){})});r(r.S+r.F*(f||p),"Reflect",{construct:function(t,e){i(t),a(e);var n=arguments.length<3?t:i(arguments[2]);if(p&&!f)return s(t,e,n);if(t==n){switch(e.length){case 0:return new t;case 1:return new t(e[0]);case 2:return new t(e[0],e[1]);case 3:return new t(e[0],e[1],e[2]);case 4:return new t(e[0],e[1],e[2],e[3])}var r=[null];return r.push.apply(r,e),new(l.apply(t,r))}var c=n.prototype,d=o(u(c)?c:Object.prototype),h=Function.apply.call(t,d,e);return u(h)?h:d}})},function(t,e,n){var r=n(0),o=n(11),i=n(1),a=(n(2).Reflect||{}).apply,u=Function.apply;r(r.S+r.F*!n(3)(function(){a(function(){})}),"Reflect",{apply:function(t,e,n){var r=o(t),c=i(n);return a?a(r,e,c):u.call(r,e,c)}})},function(t,e,n){n(30)("Float64",8,function(t){return function(e,n,r){return t(this,e,n,r)}})},function(t,e,n){n(30)("Float32",4,function(t){return function(e,n,r){return t(this,e,n,r)}})},function(t,e,n){n(30)("Uint32",4,function(t){return function(e,n,r){return t(this,e,n,r)}})},function(t,e,n){n(30)("Int32",4,function(t){return function(e,n,r){return t(this,e,n,r)}})},function(t,e,n){n(30)("Uint16",2,function(t){return function(e,n,r){return t(this,e,n,r)}})},function(t,e,n){n(30)("Int16",2,function(t){return function(e,n,r){return t(this,e,n,r)}})},function(t,e,n){n(30)("Uint8",1,function(t){return function(e,n,r){return t(this,e,n,r)}},!0)},function(t,e,n){n(30)("Uint8",1,function(t){return function(e,n,r){return t(this,e,n,r)}})},function(t,e,n){n(30)("Int8",1,function(t){return function(e,n,r){return t(this,e,n,r)}})},function(t,e,n){var r=n(0);r(r.G+r.W+r.F*!n(56).ABV,{DataView:n(75).DataView})},function(t,e,n){"use strict";var r=n(0),o=n(56),i=n(75),a=n(1),u=n(40),c=n(6),l=n(4),s=n(2).ArrayBuffer,f=n(59),p=i.ArrayBuffer,d=i.DataView,h=o.ABV&&s.isView,v=p.prototype.slice,y=o.VIEW;r(r.G+r.W+r.F*(s!==p),{ArrayBuffer:p}),r(r.S+r.F*!o.CONSTR,"ArrayBuffer",{isView:function(t){return h&&h(t)||l(t)&&y in t}}),r(r.P+r.U+r.F*n(3)(function(){return!new p(2).slice(1,void 0).byteLength}),"ArrayBuffer",{slice:function(t,e){if(void 0!==v&&void 0===e)return v.call(a(this),t);for(var n=a(this).byteLength,r=u(t,n),o=u(void 0===e?n:e,n),i=new(f(this,p))(c(o-r)),l=new d(this),s=new d(i),h=0;r<o;)s.setUint8(h++,l.getUint8(r++));return i}}),n(37)("ArrayBuffer")},function(t,e,n){"use strict";var r=n(116),o=n(45);n(57)("WeakSet",function(t){return function(){return t(this,arguments.length>0?arguments[0]:void 0)}},{add:function(t){return r.def(o(this,"WeakSet"),t,!0)}},r,!1,!0)},function(t,e,n){"use strict";var r,o,i,a,u=n(32),c=n(2),l=n(22),s=n(50),f=n(0),p=n(4),d=n(11),h=n(36),v=n(35),y=n(59),m=n(78).set,g=n(77)(),b=n(76),_=n(122),w=n(58),x=n(121),E=c.TypeError,S=c.process,T=S&&S.versions,P=T&&T.v8||"",O=c.Promise,k="process"==s(S),C=function(){},N=o=b.f,R=!!function(){try{var t=O.resolve(1),e=(t.constructor={})[n(5)("species")]=function(t){t(C,C)};return(k||"function"==typeof PromiseRejectionEvent)&&t.then(C)instanceof e&&0!==P.indexOf("6.6")&&-1===w.indexOf("Chrome/66")}catch(t){}}(),A=function(t){var e;return!(!p(t)||"function"!=typeof(e=t.then))&&e},M=function(t,e){if(!t._n){t._n=!0;var n=t._c;g(function(){for(var r=t._v,o=1==t._s,i=0,a=function(e){var n,i,a,u=o?e.ok:e.fail,c=e.resolve,l=e.reject,s=e.domain;try{u?(o||(2==t._h&&I(t),t._h=1),!0===u?n=r:(s&&s.enter(),n=u(r),s&&(s.exit(),a=!0)),n===e.promise?l(E("Promise-chain cycle")):(i=A(n))?i.call(n,c,l):c(n)):l(r)}catch(t){s&&!a&&s.exit(),l(t)}};n.length>i;)a(n[i++]);t._c=[],t._n=!1,e&&!t._h&&j(t)})}},j=function(t){m.call(c,function(){var e,n,r,o=t._v,i=L(t);if(i&&(e=_(function(){k?S.emit("unhandledRejection",o,t):(n=c.onunhandledrejection)?n({promise:t,reason:o}):(r=c.console)&&r.error&&r.error("Unhandled promise rejection",o)}),t._h=k||L(t)?2:1),t._a=void 0,i&&e.e)throw e.v})},L=function(t){return 1!==t._h&&0===(t._a||t._c).length},I=function(t){m.call(c,function(){var e;k?S.emit("rejectionHandled",t):(e=c.onrejectionhandled)&&e({promise:t,reason:t._v})})},F=function(t){var e=this;e._d||(e._d=!0,(e=e._w||e)._v=t,e._s=2,e._a||(e._a=e._c.slice()),M(e,!0))},D=function(t){var e,n=this;if(!n._d){n._d=!0,n=n._w||n;try{if(n===t)throw E("Promise can't be resolved itself");(e=A(t))?g(function(){var r={_w:n,_d:!1};try{e.call(t,l(D,r,1),l(F,r,1))}catch(t){F.call(r,t)}}):(n._v=t,n._s=1,M(n,!1))}catch(t){F.call({_w:n,_d:!1},t)}}};R||(O=function(t){h(this,O,"Promise","_h"),d(t),r.call(this);try{t(l(D,this,1),l(F,this,1))}catch(t){F.call(this,t)}},(r=function(t){this._c=[],this._a=void 0,this._s=0,this._d=!1,this._v=void 0,this._h=0,this._n=!1}).prototype=n(34)(O.prototype,{then:function(t,e){var n=N(y(this,O));return n.ok="function"!=typeof t||t,n.fail="function"==typeof e&&e,n.domain=k?S.domain:void 0,this._c.push(n),this._a&&this._a.push(n),this._s&&M(this,!1),n.promise},catch:function(t){return this.then(void 0,t)}}),i=function(){var t=new r;this.promise=t,this.resolve=l(D,t,1),this.reject=l(F,t,1)},b.f=N=function(t){return t===O||t===a?new i(t):o(t)}),f(f.G+f.W+f.F*!R,{Promise:O}),n(48)(O,"Promise"),n(37)("Promise"),a=n(23).Promise,f(f.S+f.F*!R,"Promise",{reject:function(t){var e=N(this);return(0,e.reject)(t),e.promise}}),f(f.S+f.F*(u||!R),"Promise",{resolve:function(t){return x(u&&this===a?O:this,t)}}),f(f.S+f.F*!(R&&n(62)(function(t){O.all(t).catch(C)})),"Promise",{all:function(t){var e=this,n=N(e),r=n.resolve,o=n.reject,i=_(function(){var n=[],i=0,a=1;v(t,!1,function(t){var u=i++,c=!1;n.push(void 0),a++,e.resolve(t).then(function(t){c||(c=!0,n[u]=t,--a||r(n))},o)}),--a||r(n)});return i.e&&o(i.v),n.promise},race:function(t){var e=this,n=N(e),r=n.reject,o=_(function(){v(t,!1,function(t){e.resolve(t).then(n.resolve,r)})});return o.e&&r(o.v),n.promise}})},function(t,e,n){n(60)("split",2,function(t,e,r){"use strict";var o=n(63),i=r,a=[].push;if("c"=="abbc".split(/(b)*/)[1]||4!="test".split(/(?:)/,-1).length||2!="ab".split(/(?:ab)*/).length||4!=".".split(/(.?)(.?)/).length||".".split(/()()/).length>1||"".split(/.?/).length){var u=void 0===/()??/.exec("")[1];r=function(t,e){var n=String(this);if(void 0===t&&0===e)return[];if(!o(t))return i.call(n,t,e);var r,c,l,s,f,p=[],d=(t.ignoreCase?"i":"")+(t.multiline?"m":"")+(t.unicode?"u":"")+(t.sticky?"y":""),h=0,v=void 0===e?4294967295:e>>>0,y=new RegExp(t.source,d+"g");for(u||(r=new RegExp("^"+y.source+"$(?!\\s)",d));(c=y.exec(n))&&!((l=c.index+c[0].length)>h&&(p.push(n.slice(h,c.index)),!u&&c.length>1&&c[0].replace(r,function(){for(f=1;f<arguments.length-2;f++)void 0===arguments[f]&&(c[f]=void 0)}),c.length>1&&c.index<n.length&&a.apply(p,c.slice(1)),s=c[0].length,h=l,p.length>=v));)y.lastIndex===c.index&&y.lastIndex++;return h===n.length?!s&&y.test("")||p.push(""):p.push(n.slice(h)),p.length>v?p.slice(0,v):p}}else"0".split(void 0,0).length&&(r=function(t,e){return void 0===t&&0===e?[]:i.call(this,t,e)});return[function(n,o){var i=t(this),a=void 0==n?void 0:n[e];return void 0!==a?a.call(n,i,o):r.call(String(i),n,o)},r]})},function(t,e,n){n(60)("search",1,function(t,e,n){return[function(n){"use strict";var r=t(this),o=void 0==n?void 0:n[e];return void 0!==o?o.call(n,r):new RegExp(n)[e](String(r))},n]})},function(t,e,n){n(60)("replace",2,function(t,e,n){return[function(r,o){"use strict";var i=t(this),a=void 0==r?void 0:r[e];return void 0!==a?a.call(r,i,o):n.call(String(i),r,o)},n]})},function(t,e,n){n(60)("match",1,function(t,e,n){return[function(n){"use strict";var r=t(this),o=void 0==n?void 0:n[e];return void 0!==o?o.call(n,r):new RegExp(n)[e](String(r))},n]})},function(t,e,n){"use strict";n(123);var r=n(1),o=n(61),i=n(8),a=/./.toString,u=function(t){n(13)(RegExp.prototype,"toString",t,!0)};n(3)(function(){return"/a/b"!=a.call({source:"a",flags:"b"})})?u(function(){var t=r(this);return"/".concat(t.source,"/","flags"in t?t.flags:!i&&t instanceof RegExp?o.call(t):void 0)}):"toString"!=a.name&&u(function(){return a.call(this)})},function(t,e,n){var r=n(2),o=n(93),i=n(7).f,a=n(38).f,u=n(63),c=n(61),l=r.RegExp,s=l,f=l.prototype,p=/a/g,d=/a/g,h=new l(p)!==p;if(n(8)&&(!h||n(3)(function(){return d[n(5)("match")]=!1,l(p)!=p||l(d)==d||"/a/i"!=l(p,"i")}))){l=function(t,e){var n=this instanceof l,r=u(t),i=void 0===e;return!n&&r&&t.constructor===l&&i?t:o(h?new s(r&&!i?t.source:t,e):s((r=t instanceof l)?t.source:t,r&&i?c.call(t):e),n?this:f,l)};for(var v=function(t){t in l||i(l,t,{configurable:!0,get:function(){return s[t]},set:function(e){s[t]=e}})},y=a(s),m=0;y.length>m;)v(y[m++]);f.constructor=l,l.prototype=f,n(13)(r,"RegExp",l)}n(37)("RegExp")},function(t,e,n){n(37)("Array")},function(t,e,n){"use strict";var r=n(0),o=n(24)(6),i="findIndex",a=!0;i in[]&&Array(1)[i](function(){a=!1}),r(r.P+r.F*a,"Array",{findIndex:function(t){return o(this,t,arguments.length>1?arguments[1]:void 0)}}),n(31)(i)},function(t,e,n){"use strict";var r=n(0),o=n(24)(5),i=!0;"find"in[]&&Array(1).find(function(){i=!1}),r(r.P+r.F*i,"Array",{find:function(t){return o(this,t,arguments.length>1?arguments[1]:void 0)}}),n(31)("find")},function(t,e,n){var r=n(0);r(r.P,"Array",{fill:n(80)}),n(31)("fill")},function(t,e,n){var r=n(0);r(r.P,"Array",{copyWithin:n(125)}),n(31)("copyWithin")},function(t,e,n){"use strict";var r=n(0),o=n(18),i=n(26),a=n(6),u=[].lastIndexOf,c=!!u&&1/[1].lastIndexOf(1,-0)<0;r(r.P+r.F*(c||!n(20)(u)),"Array",{lastIndexOf:function(t){if(c)return u.apply(this,arguments)||0;var e=o(this),n=a(e.length),r=n-1;for(arguments.length>1&&(r=Math.min(r,i(arguments[1]))),r<0&&(r=n+r);r>=0;r--)if(r in e&&e[r]===t)return r||0;return-1}})},function(t,e,n){"use strict";var r=n(0),o=n(66)(!1),i=[].indexOf,a=!!i&&1/[1].indexOf(1,-0)<0;r(r.P+r.F*(a||!n(20)(i)),"Array",{indexOf:function(t){return a?i.apply(this,arguments)||0:o(this,t,arguments[1])}})},function(t,e,n){"use strict";var r=n(0),o=n(126);r(r.P+r.F*!n(20)([].reduceRight,!0),"Array",{reduceRight:function(t){return o(this,t,arguments.length,arguments[1],!0)}})},function(t,e,n){"use strict";var r=n(0),o=n(126);r(r.P+r.F*!n(20)([].reduce,!0),"Array",{reduce:function(t){return o(this,t,arguments.length,arguments[1],!1)}})},function(t,e,n){"use strict";var r=n(0),o=n(24)(4);r(r.P+r.F*!n(20)([].every,!0),"Array",{every:function(t){return o(this,t,arguments[1])}})},function(t,e,n){"use strict";var r=n(0),o=n(24)(3);r(r.P+r.F*!n(20)([].some,!0),"Array",{some:function(t){return o(this,t,arguments[1])}})},function(t,e,n){"use strict";var r=n(0),o=n(24)(2);r(r.P+r.F*!n(20)([].filter,!0),"Array",{filter:function(t){return o(this,t,arguments[1])}})},function(t,e,n){"use strict";var r=n(0),o=n(24)(1);r(r.P+r.F*!n(20)([].map,!0),"Array",{map:function(t){return o(this,t,arguments[1])}})},function(t,e,n){var r=n(4),o=n(64),i=n(5)("species");t.exports=function(t){var e;return o(t)&&("function"!=typeof(e=t.constructor)||e!==Array&&!o(e.prototype)||(e=void 0),r(e)&&null===(e=e[i])&&(e=void 0)),void 0===e?Array:e}},function(t,e,n){"use strict";var r=n(0),o=n(24)(0),i=n(20)([].forEach,!0);r(r.P+r.F*!i,"Array",{forEach:function(t){return o(this,t,arguments[1])}})},function(t,e,n){"use strict";var r=n(0),o=n(11),i=n(9),a=n(3),u=[].sort,c=[1,2,3];r(r.P+r.F*(a(function(){c.sort(void 0)})||!a(function(){c.sort(null)})||!n(20)(u)),"Array",{sort:function(t){return void 0===t?u.call(i(this)):u.call(i(this),o(t))}})},function(t,e,n){"use strict";var r=n(0),o=n(96),i=n(21),a=n(40),u=n(6),c=[].slice;r(r.P+r.F*n(3)(function(){o&&c.call(o)}),"Array",{slice:function(t,e){var n=u(this.length),r=i(this);if(e=void 0===e?n:e,"Array"==r)return c.call(this,t,e);for(var o=a(t,n),l=a(e,n),s=u(l-o),f=new Array(s),p=0;p<s;p++)f[p]="String"==r?this.charAt(o+p):this[o+p];return f}})},function(t,e,n){"use strict";var r=n(0),o=n(18),i=[].join;r(r.P+r.F*(n(52)!=Object||!n(20)(i)),"Array",{join:function(t){return i.call(o(this),void 0===t?",":t)}})},function(t,e,n){"use strict";var r=n(0),o=n(83);r(r.S+r.F*n(3)(function(){function t(){}return!(Array.of.call(t)instanceof t)}),"Array",{of:function(){for(var t=0,e=arguments.length,n=new("function"==typeof this?this:Array)(e);e>t;)o(n,t,arguments[t++]);return n.length=e,n}})},function(t,e,n){"use strict";var r=n(22),o=n(0),i=n(9),a=n(127),u=n(84),c=n(6),l=n(83),s=n(82);o(o.S+o.F*!n(62)(function(t){Array.from(t)}),"Array",{from:function(t){var e,n,o,f,p=i(t),d="function"==typeof this?this:Array,h=arguments.length,v=h>1?arguments[1]:void 0,y=void 0!==v,m=0,g=s(p);if(y&&(v=r(v,h>2?arguments[2]:void 0,2)),void 0==g||d==Array&&u(g))for(n=new d(e=c(p.length));e>m;m++)l(n,m,y?v(p[m],m):p[m]);else for(f=g.call(p),n=new d;!(o=f.next()).done;m++)l(n,m,y?a(f,v,[o.value,m],!0):o.value);return n.length=m,n}})},function(t,e,n){var r=n(0);r(r.S,"Array",{isArray:n(64)})},function(t,e,n){"use strict";var r=n(1),o=n(28);t.exports=function(t){if("string"!==t&&"number"!==t&&"default"!==t)throw TypeError("Incorrect hint");return o(r(this),"number"!=t)}},function(t,e,n){var r=n(5)("toPrimitive"),o=Date.prototype;r in o||n(14)(o,r,n(303))},function(t,e,n){var r=Date.prototype,o=r.toString,i=r.getTime;new Date(NaN)+""!="Invalid Date"&&n(13)(r,"toString",function(){var t=i.call(this);return t==t?o.call(this):"Invalid Date"})},function(t,e,n){"use strict";var r=n(3),o=Date.prototype.getTime,i=Date.prototype.toISOString,a=function(t){return t>9?t:"0"+t};t.exports=r(function(){return"0385-07-25T07:06:39.999Z"!=i.call(new Date(-5e13-1))})||!r(function(){i.call(new Date(NaN))})?function(){if(!isFinite(o.call(this)))throw RangeError("Invalid time value");var t=this,e=t.getUTCFullYear(),n=t.getUTCMilliseconds(),r=e<0?"-":e>9999?"+":"";return r+("00000"+Math.abs(e)).slice(r?-6:-4)+"-"+a(t.getUTCMonth()+1)+"-"+a(t.getUTCDate())+"T"+a(t.getUTCHours())+":"+a(t.getUTCMinutes())+":"+a(t.getUTCSeconds())+"."+(n>99?n:"0"+a(n))+"Z"}:i},function(t,e,n){var r=n(0),o=n(306);r(r.P+r.F*(Date.prototype.toISOString!==o),"Date",{toISOString:o})},function(t,e,n){"use strict";var r=n(0),o=n(9),i=n(28);r(r.P+r.F*n(3)(function(){return null!==new Date(NaN).toJSON()||1!==Date.prototype.toJSON.call({toISOString:function(){return 1}})}),"Date",{toJSON:function(t){var e=o(this),n=i(e);return"number"!=typeof n||isFinite(n)?e.toISOString():null}})},function(t,e,n){var r=n(0);r(r.S,"Date",{now:function(){return(new Date).getTime()}})},function(t,e,n){"use strict";n(12)("sup",function(t){return function(){return t(this,"sup","","")}})},function(t,e,n){"use strict";n(12)("sub",function(t){return function(){return t(this,"sub","","")}})},function(t,e,n){"use strict";n(12)("strike",function(t){return function(){return t(this,"strike","","")}})},function(t,e,n){"use strict";n(12)("small",function(t){return function(){return t(this,"small","","")}})},function(t,e,n){"use strict";n(12)("link",function(t){return function(e){return t(this,"a","href",e)}})},function(t,e,n){"use strict";n(12)("italics",function(t){return function(){return t(this,"i","","")}})},function(t,e,n){"use strict";n(12)("fontsize",function(t){return function(e){return t(this,"font","size",e)}})},function(t,e,n){"use strict";n(12)("fontcolor",function(t){return function(e){return t(this,"font","color",e)}})},function(t,e,n){"use strict";n(12)("fixed",function(t){return function(){return t(this,"tt","","")}})},function(t,e,n){"use strict";n(12)("bold",function(t){return function(){return t(this,"b","","")}})},function(t,e,n){"use strict";n(12)("blink",function(t){return function(){return t(this,"blink","","")}})},function(t,e,n){"use strict";n(12)("big",function(t){return function(){return t(this,"big","","")}})},function(t,e,n){"use strict";n(12)("anchor",function(t){return function(e){return t(this,"a","name",e)}})},function(t,e,n){"use strict";var r=n(0),o=n(6),i=n(86),a="".startsWith;r(r.P+r.F*n(85)("startsWith"),"String",{startsWith:function(t){var e=i(this,t,"startsWith"),n=o(Math.min(arguments.length>1?arguments[1]:void 0,e.length)),r=String(t);return a?a.call(e,r,n):e.slice(n,n+r.length)===r}})},function(t,e,n){var r=n(0);r(r.P,"String",{repeat:n(92)})},function(t,e,n){"use strict";var r=n(0),o=n(86);r(r.P+r.F*n(85)("includes"),"String",{includes:function(t){return!!~o(this,t,"includes").indexOf(t,arguments.length>1?arguments[1]:void 0)}})},function(t,e,n){"use strict";var r=n(0),o=n(6),i=n(86),a="".endsWith;r(r.P+r.F*n(85)("endsWith"),"String",{endsWith:function(t){var e=i(this,t,"endsWith"),n=arguments.length>1?arguments[1]:void 0,r=o(e.length),u=void 0===n?r:Math.min(o(n),r),c=String(t);return a?a.call(e,c,u):e.slice(u-c.length,u)===c}})},function(t,e,n){"use strict";var r=n(0),o=n(89)(!1);r(r.P,"String",{codePointAt:function(t){return o(this,t)}})},function(t,e,n){"use strict";var r=n(89)(!0);n(88)(String,"String",function(t){this._t=String(t),this._i=0},function(){var t,e=this._t,n=this._i;return n>=e.length?{value:void 0,done:!0}:(t=r(e,n),this._i+=t.length,{value:t,done:!1})})},function(t,e,n){"use strict";n(47)("trim",function(t){return function(){return t(this,3)}})},function(t,e,n){var r=n(0),o=n(18),i=n(6);r(r.S,"String",{raw:function(t){for(var e=o(t.raw),n=i(e.length),r=arguments.length,a=[],u=0;n>u;)a.push(String(e[u++])),u<r&&a.push(String(arguments[u]));return a.join("")}})},function(t,e,n){var r=n(0),o=n(40),i=String.fromCharCode,a=String.fromCodePoint;r(r.S+r.F*(!!a&&1!=a.length),"String",{fromCodePoint:function(t){for(var e,n=[],r=arguments.length,a=0;r>a;){if(e=+arguments[a++],o(e,1114111)!==e)throw RangeError(e+" is not a valid code point");n.push(e<65536?i(e):i(55296+((e-=65536)>>10),e%1024+56320))}return n.join("")}})},function(t,e,n){var r=n(0);r(r.S,"Math",{trunc:function(t){return(t>0?Math.floor:Math.ceil)(t)}})},function(t,e,n){var r=n(0),o=n(90),i=Math.exp;r(r.S,"Math",{tanh:function(t){var e=o(t=+t),n=o(-t);return e==1/0?1:n==1/0?-1:(e-n)/(i(t)+i(-t))}})},function(t,e,n){var r=n(0),o=n(90),i=Math.exp;r(r.S+r.F*n(3)(function(){return-2e-17!=!Math.sinh(-2e-17)}),"Math",{sinh:function(t){return Math.abs(t=+t)<1?(o(t)-o(-t))/2:(i(t-1)-i(-t-1))*(Math.E/2)}})},function(t,e,n){var r=n(0);r(r.S,"Math",{sign:n(91)})},function(t,e,n){var r=n(0);r(r.S,"Math",{log2:function(t){return Math.log(t)/Math.LN2}})},function(t,e,n){var r=n(0);r(r.S,"Math",{log1p:n(129)})},function(t,e,n){var r=n(0);r(r.S,"Math",{log10:function(t){return Math.log(t)*Math.LOG10E}})},function(t,e,n){var r=n(0),o=Math.imul;r(r.S+r.F*n(3)(function(){return-5!=o(4294967295,5)||2!=o.length}),"Math",{imul:function(t,e){var n=+t,r=+e,o=65535&n,i=65535&r;return 0|o*i+((65535&n>>>16)*i+o*(65535&r>>>16)<<16>>>0)}})},function(t,e,n){var r=n(0),o=Math.abs;r(r.S,"Math",{hypot:function(t,e){for(var n,r,i=0,a=0,u=arguments.length,c=0;a<u;)c<(n=o(arguments[a++]))?(i=i*(r=c/n)*r+1,c=n):i+=n>0?(r=n/c)*r:n;return c===1/0?1/0:c*Math.sqrt(i)}})},function(t,e,n){var r=n(0);r(r.S,"Math",{fround:n(128)})},function(t,e,n){var r=n(0),o=n(90);r(r.S+r.F*(o!=Math.expm1),"Math",{expm1:o})},function(t,e,n){var r=n(0),o=Math.exp;r(r.S,"Math",{cosh:function(t){return(o(t=+t)+o(-t))/2}})},function(t,e,n){var r=n(0);r(r.S,"Math",{clz32:function(t){return(t>>>=0)?31-Math.floor(Math.log(t+.5)*Math.LOG2E):32}})},function(t,e,n){var r=n(0),o=n(91);r(r.S,"Math",{cbrt:function(t){return o(t=+t)*Math.pow(Math.abs(t),1/3)}})},function(t,e,n){var r=n(0),o=Math.atanh;r(r.S+r.F*!(o&&1/o(-0)<0),"Math",{atanh:function(t){return 0==(t=+t)?t:Math.log((1+t)/(1-t))/2}})},function(t,e,n){var r=n(0),o=Math.asinh;r(r.S+r.F*!(o&&1/o(0)>0),"Math",{asinh:function t(e){return isFinite(e=+e)&&0!=e?e<0?-t(-e):Math.log(e+Math.sqrt(e*e+1)):e}})},function(t,e,n){var r=n(0),o=n(129),i=Math.sqrt,a=Math.acosh;r(r.S+r.F*!(a&&710==Math.floor(a(Number.MAX_VALUE))&&a(1/0)==1/0),"Math",{acosh:function(t){return(t=+t)<1?NaN:t>94906265.62425156?Math.log(t)+Math.LN2:o(t-1+i(t-1)*i(t+1))}})},function(t,e,n){var r=n(0),o=n(133);r(r.S+r.F*(Number.parseInt!=o),"Number",{parseInt:o})},function(t,e,n){var r=n(0),o=n(132);r(r.S+r.F*(Number.parseFloat!=o),"Number",{parseFloat:o})},function(t,e,n){var r=n(0);r(r.S,"Number",{MIN_SAFE_INTEGER:-9007199254740991})},function(t,e,n){var r=n(0);r(r.S,"Number",{MAX_SAFE_INTEGER:9007199254740991})},function(t,e,n){var r=n(0),o=n(130),i=Math.abs;r(r.S,"Number",{isSafeInteger:function(t){return o(t)&&i(t)<=9007199254740991}})},function(t,e,n){var r=n(0);r(r.S,"Number",{isNaN:function(t){return t!=t}})},function(t,e,n){var r=n(0);r(r.S,"Number",{isInteger:n(130)})},function(t,e,n){var r=n(0),o=n(2).isFinite;r(r.S,"Number",{isFinite:function(t){return"number"==typeof t&&o(t)}})},function(t,e,n){var r=n(0);r(r.S,"Number",{EPSILON:Math.pow(2,-52)})},function(t,e,n){"use strict";var r=n(0),o=n(3),i=n(131),a=1..toPrecision;r(r.P+r.F*(o(function(){return"1"!==a.call(1,void 0)})||!o(function(){a.call({})})),"Number",{toPrecision:function(t){var e=i(this,"Number#toPrecision: incorrect invocation!");return void 0===t?a.call(e):a.call(e,t)}})},function(t,e,n){"use strict";var r=n(0),o=n(26),i=n(131),a=n(92),u=1..toFixed,c=Math.floor,l=[0,0,0,0,0,0],s="Number.toFixed: incorrect invocation!",f=function(t,e){for(var n=-1,r=e;++n<6;)r+=t*l[n],l[n]=r%1e7,r=c(r/1e7)},p=function(t){for(var e=6,n=0;--e>=0;)n+=l[e],l[e]=c(n/t),n=n%t*1e7},d=function(){for(var t=6,e="";--t>=0;)if(""!==e||0===t||0!==l[t]){var n=String(l[t]);e=""===e?n:e+a.call("0",7-n.length)+n}return e},h=function(t,e,n){return 0===e?n:e%2==1?h(t,e-1,n*t):h(t*t,e/2,n)};r(r.P+r.F*(!!u&&("0.000"!==8e-5.toFixed(3)||"1"!==.9.toFixed(0)||"1.25"!==1.255.toFixed(2)||"1000000000000000128"!==(0xde0b6b3a7640080).toFixed(0))||!n(3)(function(){u.call({})})),"Number",{toFixed:function(t){var e,n,r,u,c=i(this,s),l=o(t),v="",y="0";if(l<0||l>20)throw RangeError(s);if(c!=c)return"NaN";if(c<=-1e21||c>=1e21)return String(c);if(c<0&&(v="-",c=-c),c>1e-21)if(n=(e=function(t){for(var e=0,n=t;n>=4096;)e+=12,n/=4096;for(;n>=2;)e+=1,n/=2;return e}(c*h(2,69,1))-69)<0?c*h(2,-e,1):c/h(2,e,1),n*=4503599627370496,(e=52-e)>0){for(f(0,n),r=l;r>=7;)f(1e7,0),r-=7;for(f(h(10,r,1),0),r=e-1;r>=23;)p(1<<23),r-=23;p(1<<r),f(1,1),p(2),y=d()}else f(0,n),f(1<<-e,0),y=d()+a.call("0",l);return y=l>0?v+((u=y.length)<=l?"0."+a.call("0",l-u)+y:y.slice(0,u-l)+"."+y.slice(u-l)):v+y}})},function(t,e,n){"use strict";var r=n(2),o=n(19),i=n(21),a=n(93),u=n(28),c=n(3),l=n(38).f,s=n(17).f,f=n(7).f,p=n(47).trim,d=r.Number,h=d,v=d.prototype,y="Number"==i(n(39)(v)),m="trim"in String.prototype,g=function(t){var e=u(t,!1);if("string"==typeof e&&e.length>2){var n,r,o,i=(e=m?e.trim():p(e,3)).charCodeAt(0);if(43===i||45===i){if(88===(n=e.charCodeAt(2))||120===n)return NaN}else if(48===i){switch(e.charCodeAt(1)){case 66:case 98:r=2,o=49;break;case 79:case 111:r=8,o=55;break;default:return+e}for(var a,c=e.slice(2),l=0,s=c.length;l<s;l++)if((a=c.charCodeAt(l))<48||a>o)return NaN;return parseInt(c,r)}}return+e};if(!d(" 0o1")||!d("0b1")||d("+0x1")){d=function(t){var e=arguments.length<1?0:t,n=this;return n instanceof d&&(y?c(function(){v.valueOf.call(n)}):"Number"!=i(n))?a(new h(g(e)),n,d):g(e)};for(var b,_=n(8)?l(h):"MAX_VALUE,MIN_VALUE,NaN,NEGATIVE_INFINITY,POSITIVE_INFINITY,EPSILON,isFinite,isInteger,isNaN,isSafeInteger,MAX_SAFE_INTEGER,MIN_SAFE_INTEGER,parseFloat,parseInt,isInteger".split(","),w=0;_.length>w;w++)o(h,b=_[w])&&!o(d,b)&&f(d,b,s(h,b));d.prototype=v,v.constructor=d,n(13)(r,"Number",d)}},function(t,e,n){var r=n(0),o=n(132);r(r.G+r.F*(parseFloat!=o),{parseFloat:o})},function(t,e,n){var r=n(0),o=n(133);r(r.G+r.F*(parseInt!=o),{parseInt:o})},function(t,e,n){"use strict";var r=n(4),o=n(16),i=n(5)("hasInstance"),a=Function.prototype;i in a||n(7).f(a,i,{value:function(t){if("function"!=typeof this||!r(t))return!1;if(!r(this.prototype))return t instanceof this;for(;t=o(t);)if(this.prototype===t)return!0;return!1}})},function(t,e,n){var r=n(7).f,o=Function.prototype,i=/^\s*function ([^ (]*)/;"name"in o||n(8)&&r(o,"name",{configurable:!0,get:function(){try{return(""+this).match(i)[1]}catch(t){return""}}})},function(t,e,n){var r=n(0);r(r.P,"Function",{bind:n(135)})},function(t,e,n){"use strict";var r=n(50),o={};o[n(5)("toStringTag")]="z",o+""!="[object z]"&&n(13)(Object.prototype,"toString",function(){return"[object "+r(this)+"]"},!0)},function(t,e,n){var r=n(0);r(r.S,"Object",{setPrototypeOf:n(95).set})},function(t,e){t.exports=Object.is||function(t,e){return t===e?0!==t||1/t==1/e:t!=t&&e!=e}},function(t,e,n){var r=n(0);r(r.S,"Object",{is:n(368)})},function(t,e,n){var r=n(0);r(r.S+r.F,"Object",{assign:n(136)})},function(t,e,n){var r=n(4);n(25)("isExtensible",function(t){return function(e){return!!r(e)&&(!t||t(e))}})},function(t,e,n){var r=n(4);n(25)("isSealed",function(t){return function(e){return!r(e)||!!t&&t(e)}})},function(t,e,n){var r=n(4);n(25)("isFrozen",function(t){return function(e){return!r(e)||!!t&&t(e)}})},function(t,e,n){var r=n(4),o=n(33).onFreeze;n(25)("preventExtensions",function(t){return function(e){return t&&r(e)?t(o(e)):e}})},function(t,e,n){var r=n(4),o=n(33).onFreeze;n(25)("seal",function(t){return function(e){return t&&r(e)?t(o(e)):e}})},function(t,e,n){var r=n(4),o=n(33).onFreeze;n(25)("freeze",function(t){return function(e){return t&&r(e)?t(o(e)):e}})},function(t,e,n){n(25)("getOwnPropertyNames",function(){return n(137).f})},function(t,e,n){var r=n(9),o=n(41);n(25)("keys",function(){return function(t){return o(r(t))}})},function(t,e,n){var r=n(9),o=n(16);n(25)("getPrototypeOf",function(){return function(t){return o(r(t))}})},function(t,e,n){var r=n(18),o=n(17).f;n(25)("getOwnPropertyDescriptor",function(){return function(t,e){return o(r(t),e)}})},function(t,e,n){var r=n(0);r(r.S+r.F*!n(8),"Object",{defineProperties:n(138)})},function(t,e,n){var r=n(0);r(r.S+r.F*!n(8),"Object",{defineProperty:n(7).f})},function(t,e,n){var r=n(0);r(r.S,"Object",{create:n(39)})},function(t,e,n){var r=n(41),o=n(65),i=n(51);t.exports=function(t){var e=r(t),n=o.f;if(n)for(var a,u=n(t),c=i.f,l=0;u.length>l;)c.call(t,a=u[l++])&&e.push(a);return e}},function(t,e,n){"use strict";var r=n(2),o=n(19),i=n(8),a=n(0),u=n(13),c=n(33).KEY,l=n(3),s=n(67),f=n(48),p=n(42),d=n(5),h=n(140),v=n(99),y=n(384),m=n(64),g=n(1),b=n(4),_=n(18),w=n(28),x=n(43),E=n(39),S=n(137),T=n(17),P=n(7),O=n(41),k=T.f,C=P.f,N=S.f,R=r.Symbol,A=r.JSON,M=A&&A.stringify,j=d("_hidden"),L=d("toPrimitive"),I={}.propertyIsEnumerable,F=s("symbol-registry"),D=s("symbols"),U=s("op-symbols"),B=Object.prototype,z="function"==typeof R,W=r.QObject,H=!W||!W.prototype||!W.prototype.findChild,V=i&&l(function(){return 7!=E(C({},"a",{get:function(){return C(this,"a",{value:7}).a}})).a})?function(t,e,n){var r=k(B,e);r&&delete B[e],C(t,e,n),r&&t!==B&&C(B,e,r)}:C,q=function(t){var e=D[t]=E(R.prototype);return e._k=t,e},G=z&&"symbol"==typeof R.iterator?function(t){return"symbol"==typeof t}:function(t){return t instanceof R},Y=function(t,e,n){return t===B&&Y(U,e,n),g(t),e=w(e,!0),g(n),o(D,e)?(n.enumerable?(o(t,j)&&t[j][e]&&(t[j][e]=!1),n=E(n,{enumerable:x(0,!1)})):(o(t,j)||C(t,j,x(1,{})),t[j][e]=!0),V(t,e,n)):C(t,e,n)},$=function(t,e){g(t);for(var n,r=y(e=_(e)),o=0,i=r.length;i>o;)Y(t,n=r[o++],e[n]);return t},Q=function(t){var e=I.call(this,t=w(t,!0));return!(this===B&&o(D,t)&&!o(U,t))&&(!(e||!o(this,t)||!o(D,t)||o(this,j)&&this[j][t])||e)},K=function(t,e){if(t=_(t),e=w(e,!0),t!==B||!o(D,e)||o(U,e)){var n=k(t,e);return!n||!o(D,e)||o(t,j)&&t[j][e]||(n.enumerable=!0),n}},X=function(t){for(var e,n=N(_(t)),r=[],i=0;n.length>i;)o(D,e=n[i++])||e==j||e==c||r.push(e);return r},J=function(t){for(var e,n=t===B,r=N(n?U:_(t)),i=[],a=0;r.length>a;)!o(D,e=r[a++])||n&&!o(B,e)||i.push(D[e]);return i};z||(u((R=function(){if(this instanceof R)throw TypeError("Symbol is not a constructor!");var t=p(arguments.length>0?arguments[0]:void 0),e=function(n){this===B&&e.call(U,n),o(this,j)&&o(this[j],t)&&(this[j][t]=!1),V(this,t,x(1,n))};return i&&H&&V(B,t,{configurable:!0,set:e}),q(t)}).prototype,"toString",function(){return this._k}),T.f=K,P.f=Y,n(38).f=S.f=X,n(51).f=Q,n(65).f=J,i&&!n(32)&&u(B,"propertyIsEnumerable",Q,!0),h.f=function(t){return q(d(t))}),a(a.G+a.W+a.F*!z,{Symbol:R});for(var Z="hasInstance,isConcatSpreadable,iterator,match,replace,search,species,split,toPrimitive,toStringTag,unscopables".split(","),tt=0;Z.length>tt;)d(Z[tt++]);for(var et=O(d.store),nt=0;et.length>nt;)v(et[nt++]);a(a.S+a.F*!z,"Symbol",{for:function(t){return o(F,t+="")?F[t]:F[t]=R(t)},keyFor:function(t){if(!G(t))throw TypeError(t+" is not a symbol!");for(var e in F)if(F[e]===t)return e},useSetter:function(){H=!0},useSimple:function(){H=!1}}),a(a.S+a.F*!z,"Object",{create:function(t,e){return void 0===e?E(t):$(E(t),e)},defineProperty:Y,defineProperties:$,getOwnPropertyDescriptor:K,getOwnPropertyNames:X,getOwnPropertySymbols:J}),A&&a(a.S+a.F*(!z||l(function(){var t=R();return"[null]"!=M([t])||"{}"!=M({a:t})||"{}"!=M(Object(t))})),"JSON",{stringify:function(t){for(var e,n,r=[t],o=1;arguments.length>o;)r.push(arguments[o++]);if(n=e=r[1],(b(e)||void 0!==t)&&!G(t))return m(e)||(e=function(t,e){if("function"==typeof n&&(e=n.call(this,t,e)),!G(e))return e}),r[1]=e,M.apply(A,r)}}),R.prototype[L]||n(14)(R.prototype,L,R.prototype.valueOf),f(R,"Symbol"),f(Math,"Math",!0),f(r.JSON,"JSON",!0)},function(t,e,n){n(385),n(383),n(382),n(381),n(380),n(379),n(378),n(377),n(376),n(375),n(374),n(373),n(372),n(371),n(370),n(369),n(367),n(366),n(365),n(364),n(363),n(362),n(361),n(360),n(359),n(358),n(357),n(356),n(355),n(354),n(353),n(352),n(351),n(350),n(349),n(348),n(347),n(346),n(345),n(344),n(343),n(342),n(341),n(340),n(339),n(338),n(337),n(336),n(335),n(334),n(333),n(332),n(331),n(330),n(329),n(328),n(327),n(326),n(325),n(324),n(323),n(322),n(321),n(320),n(319),n(318),n(317),n(316),n(315),n(314),n(313),n(312),n(311),n(310),n(309),n(308),n(307),n(305),n(304),n(302),n(301),n(300),n(299),n(298),n(297),n(296),n(294),n(293),n(292),n(291),n(290),n(289),n(288),n(287),n(286),n(285),n(284),n(283),n(282),n(79),n(281),n(280),n(123),n(279),n(278),n(277),n(276),n(275),n(120),n(118),n(117),n(274),n(273),n(272),n(271),n(270),n(269),n(268),n(267),n(266),n(265),n(264),n(263),n(262),n(261),n(260),n(259),n(258),n(257),n(256),n(255),n(254),n(253),n(252),n(251),n(250),n(249),n(248),n(247),n(246),n(245),n(244),n(243),n(242),n(241),n(240),n(239),n(238),n(237),n(236),n(235),n(234),n(233),n(232),n(231),n(230),n(229),n(228),n(227),n(226),n(225),n(224),n(223),n(222),n(221),n(220),n(219),n(218),n(217),n(216),n(215),n(214),n(213),n(212),n(211),n(210),n(209),n(208),n(207),n(206),n(205),n(204),n(203),n(202),n(201),n(200),n(199),n(198),n(197),n(196),n(195),n(194),n(193),n(192),n(191),n(190),t.exports=n(23)},function(t,e,n){"use strict";(function(t){if(n(386),n(189),n(188),t._babelPolyfill)throw new Error("only one instance of babel-polyfill is allowed");t._babelPolyfill=!0;var e="defineProperty";function r(t,n,r){t[n]||Object[e](t,n,{writable:!0,configurable:!0,value:r})}r(String.prototype,"padLeft","".padStart),r(String.prototype,"padRight","".padEnd),"pop,reverse,shift,keys,values,entries,indexOf,every,some,forEach,map,filter,find,findIndex,includes,join,slice,concat,push,splice,unshift,sort,lastIndexOf,reduce,reduceRight,copyWithin,fill".split(",").forEach(function(t){[][t]&&r(Array,t,Function.call.bind([][t]))})}).call(this,n(68))},function(t,e,n){n(387),t.exports=n(185)},function(t,e,n){"use strict";(function(t){var n="object"==typeof t&&t&&t.Object===Object&&t;e.a=n}).call(this,n(68))}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vd2VicGFjay9ib290c3RyYXAiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9fZXhwb3J0LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvX2FuLW9iamVjdC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL19nbG9iYWwuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9fZmFpbHMuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9faXMtb2JqZWN0LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvX3drcy5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL190by1sZW5ndGguanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9fb2JqZWN0LWRwLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvX2Rlc2NyaXB0b3JzLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvX3RvLW9iamVjdC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvcmVhY3QvaW5kZXguanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9fYS1mdW5jdGlvbi5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL19zdHJpbmctaHRtbC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL19yZWRlZmluZS5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL19oaWRlLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9wcm9wLXR5cGVzL2luZGV4LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvX29iamVjdC1ncG8uanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9fb2JqZWN0LWdvcGQuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9fdG8taW9iamVjdC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL19oYXMuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9fc3RyaWN0LW1ldGhvZC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL19jb2YuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9fY3R4LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvX2NvcmUuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9fYXJyYXktbWV0aG9kcy5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL19vYmplY3Qtc2FwLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvX3RvLWludGVnZXIuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9fZGVmaW5lZC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL190by1wcmltaXRpdmUuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9fbWV0YWRhdGEuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9fdHlwZWQtYXJyYXkuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9fYWRkLXRvLXVuc2NvcGFibGVzLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvX2xpYnJhcnkuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9fbWV0YS5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL19yZWRlZmluZS1hbGwuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9fZm9yLW9mLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvX2FuLWluc3RhbmNlLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvX3NldC1zcGVjaWVzLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvX29iamVjdC1nb3BuLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvX29iamVjdC1jcmVhdGUuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9fdG8tYWJzb2x1dGUtaW5kZXguanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9fb2JqZWN0LWtleXMuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9fdWlkLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvX3Byb3BlcnR5LWRlc2MuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL3JlYWN0LXJlZHV4L2VzL3V0aWxzL1Byb3BUeXBlcy5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvcmVhY3QtcmVkdXgvZXMvY29tcG9uZW50cy9Qcm92aWRlci5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvcmVhY3QtcmVkdXgvZXMvdXRpbHMvU3Vic2NyaXB0aW9uLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9yZWFjdC1yZWR1eC9lcy9jb21wb25lbnRzL2Nvbm5lY3RBZHZhbmNlZC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvcmVhY3QtcmVkdXgvZXMvdXRpbHMvc2hhbGxvd0VxdWFsLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9sb2Rhc2gtZXMvX3Jvb3QuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2xvZGFzaC1lcy9fU3ltYm9sLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9sb2Rhc2gtZXMvX2dldFJhd1RhZy5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvbG9kYXNoLWVzL19vYmplY3RUb1N0cmluZy5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvbG9kYXNoLWVzL19iYXNlR2V0VGFnLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9sb2Rhc2gtZXMvX2dldFByb3RvdHlwZS5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvbG9kYXNoLWVzL2lzT2JqZWN0TGlrZS5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvbG9kYXNoLWVzL2lzUGxhaW5PYmplY3QuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL3JlYWN0LXJlZHV4L2VzL2Nvbm5lY3Qvd3JhcE1hcFRvUHJvcHMuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL3JlYWN0LXJlZHV4L2VzL2Nvbm5lY3QvbWFwRGlzcGF0Y2hUb1Byb3BzLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9yZWFjdC1yZWR1eC9lcy9jb25uZWN0L21hcFN0YXRlVG9Qcm9wcy5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvcmVhY3QtcmVkdXgvZXMvY29ubmVjdC9tZXJnZVByb3BzLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9yZWFjdC1yZWR1eC9lcy9jb25uZWN0L3NlbGVjdG9yRmFjdG9yeS5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvcmVhY3QtcmVkdXgvZXMvY29ubmVjdC9jb25uZWN0LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvX3ZhbGlkYXRlLWNvbGxlY3Rpb24uanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9faXRlcmF0b3JzLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvX3N0cmluZy10cmltLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvX3NldC10by1zdHJpbmctdGFnLmpzIiwid2VicGFjazovLy8uL3NyYy9icm93c2VyL2FjdGlvbnMvaW5kZXguanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9fY2xhc3NvZi5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL19vYmplY3QtcGllLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvX2lvYmplY3QuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9fc2V0LWNvbGxlY3Rpb24tZnJvbS5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL19zZXQtY29sbGVjdGlvbi1vZi5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL19vYmplY3QtZm9yY2VkLXBhbS5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL190eXBlZC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL19jb2xsZWN0aW9uLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvX3VzZXItYWdlbnQuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9fc3BlY2llcy1jb25zdHJ1Y3Rvci5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL19maXgtcmUtd2tzLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvX2ZsYWdzLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvX2l0ZXItZGV0ZWN0LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvX2lzLXJlZ2V4cC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL19pcy1hcnJheS5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL19vYmplY3QtZ29wcy5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL19hcnJheS1pbmNsdWRlcy5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL19zaGFyZWQuanMiLCJ3ZWJwYWNrOi8vLyh3ZWJwYWNrKS9idWlsZGluL2dsb2JhbC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvaW52YXJpYW50L2Jyb3dzZXIuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL3N0eWxlLWxvYWRlci9saWIvYWRkU3R5bGVzLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jc3MtbG9hZGVyL2xpYi9jc3MtYmFzZS5qcyIsIndlYnBhY2s6Ly8vLi9zcmMvYnJvd3Nlci9jb21wb25lbnRzL0ltYWdlLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9mYmpzL2xpYi9lbXB0eUZ1bmN0aW9uLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9mYmpzL2xpYi9pbnZhcmlhbnQuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9fdHlwZWQtYnVmZmVyLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvX25ldy1wcm9taXNlLWNhcGFiaWxpdHkuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9fbWljcm90YXNrLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvX3Rhc2suanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lczYuYXJyYXkuaXRlcmF0b3IuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9fYXJyYXktZmlsbC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL19hcnJheS1zcGVjaWVzLWNyZWF0ZS5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2NvcmUuZ2V0LWl0ZXJhdG9yLW1ldGhvZC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL19jcmVhdGUtcHJvcGVydHkuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9faXMtYXJyYXktaXRlci5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL19mYWlscy1pcy1yZWdleHAuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9fc3RyaW5nLWNvbnRleHQuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9faXRlci1jcmVhdGUuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9faXRlci1kZWZpbmUuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9fc3RyaW5nLWF0LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvX21hdGgtZXhwbTEuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9fbWF0aC1zaWduLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvX3N0cmluZy1yZXBlYXQuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9faW5oZXJpdC1pZi1yZXF1aXJlZC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL19zdHJpbmctd3MuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9fc2V0LXByb3RvLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvX2h0bWwuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9fZW51bS1idWcta2V5cy5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL19zaGFyZWQta2V5LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvX3drcy1kZWZpbmUuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9fZG9tLWNyZWF0ZS5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvcmVkdXgvZXMvcmVkdXguanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL3N5bWJvbC1vYnNlcnZhYmxlL2VzL2luZGV4LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9yZWFjdC10b29sdGlwL2Rpc3QvY29uc3RhbnQuanMiLCJ3ZWJwYWNrOi8vLy4vc3JjL3V0aWxzL2luZGV4LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9yZWFjdC1kb20vaW5kZXguanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2ZianMvbGliL2VtcHR5T2JqZWN0LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9vYmplY3QtYXNzaWduL2luZGV4LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvX21hdGgtc2NhbGUuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9fYXJyYXktZnJvbS1pdGVyYWJsZS5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL19jb2xsZWN0aW9uLXRvLWpzb24uanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9fb2JqZWN0LXRvLWFycmF5LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvX3N0cmluZy1wYWQuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9fZmxhdHRlbi1pbnRvLWFycmF5LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvX293bi1rZXlzLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvX3RvLWluZGV4LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvX2NvbGxlY3Rpb24td2Vhay5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzNi53ZWFrLW1hcC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzNi5zZXQuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9fY29sbGVjdGlvbi1zdHJvbmcuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lczYubWFwLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvX3Byb21pc2UtcmVzb2x2ZS5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL19wZXJmb3JtLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXM2LnJlZ2V4cC5mbGFncy5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL19pdGVyLXN0ZXAuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9fYXJyYXktY29weS13aXRoaW4uanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9fYXJyYXktcmVkdWNlLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvX2l0ZXItY2FsbC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL19tYXRoLWZyb3VuZC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL19tYXRoLWxvZzFwLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvX2lzLWludGVnZXIuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9fYS1udW1iZXItdmFsdWUuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9fcGFyc2UtZmxvYXQuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9fcGFyc2UtaW50LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvX2ludm9rZS5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL19iaW5kLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvX29iamVjdC1hc3NpZ24uanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9fb2JqZWN0LWdvcG4tZXh0LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvX29iamVjdC1kcHMuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9fb2JqZWN0LWtleXMtaW50ZXJuYWwuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9fd2tzLWV4dC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL19pZTgtZG9tLWRlZmluZS5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvc3ltYm9sLW9ic2VydmFibGUvZXMvcG9ueWZpbGwuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2hvaXN0LW5vbi1yZWFjdC1zdGF0aWNzL2luZGV4LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9yZWR1eC10aHVuay9saWIvaW5kZXguanMiLCJ3ZWJwYWNrOi8vLy4vc3JjL2Jyb3dzZXIvcmVkdWNlcnMvaW5kZXguanMiLCJ3ZWJwYWNrOi8vLy4vc3JjL2Jyb3dzZXIvY29tcG9uZW50cy9jbG9zZS5wbmciLCJ3ZWJwYWNrOi8vLy4vc3JjL2Jyb3dzZXIvY29tcG9uZW50cy9TaG93UHJvcGVydHlDb21wb25lbnQuc2NzcyIsIndlYnBhY2s6Ly8vLi9zcmMvYnJvd3Nlci9jb21wb25lbnRzL1Nob3dQcm9wZXJ0eUNvbXBvbmVudC5zY3NzPzE2MjYiLCJ3ZWJwYWNrOi8vLy4vc3JjL2Jyb3dzZXIvY29tcG9uZW50cy9TaG93UHJvcGVydHlDb21wb25lbnQuanMiLCJ3ZWJwYWNrOi8vLy4vc3JjL2Jyb3dzZXIvY29tcG9uZW50cy9yZWFjdEljb24ucG5nIiwid2VicGFjazovLy8uL3NyYy9icm93c2VyL2NvbXBvbmVudHMvQXBwLnNjc3MiLCJ3ZWJwYWNrOi8vLy4vc3JjL2Jyb3dzZXIvY29tcG9uZW50cy9BcHAuc2Nzcz84ZjY1Iiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9yZWFjdC10b29sdGlwL2Rpc3Qvc3R5bGUuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL3JlYWN0LXRvb2x0aXAvZGlzdC91dGlscy9ub2RlTGlzdFRvQXJyYXkuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL3JlYWN0LXRvb2x0aXAvZGlzdC91dGlscy9hcmlhLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9yZWFjdC10b29sdGlwL2Rpc3QvdXRpbHMvZ2V0VGlwQ29udGVudC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvcmVhY3QtdG9vbHRpcC9kaXN0L3V0aWxzL2dldFBvc2l0aW9uLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9yZWFjdC10b29sdGlwL2Rpc3QvZGVjb3JhdG9ycy90cmFja1JlbW92YWwuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL3JlYWN0LXRvb2x0aXAvZGlzdC9kZWNvcmF0b3JzL2dldEVmZmVjdC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvcmVhY3QtdG9vbHRpcC9kaXN0L2RlY29yYXRvcnMvaXNDYXB0dXJlLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9yZWFjdC10b29sdGlwL2Rpc3QvZGVjb3JhdG9ycy9jdXN0b21FdmVudC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvcmVhY3QtdG9vbHRpcC9kaXN0L2RlY29yYXRvcnMvd2luZG93TGlzdGVuZXIuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL3JlYWN0LXRvb2x0aXAvZGlzdC9kZWNvcmF0b3JzL3N0YXRpY01ldGhvZHMuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NsYXNzbmFtZXMvaW5kZXguanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL3JlYWN0LXRvb2x0aXAvZGlzdC9pbmRleC5qcyIsIndlYnBhY2s6Ly8vLi9zcmMvYnJvd3Nlci9jb21wb25lbnRzL0lucHV0Q29tcG9uZW50LmpzIiwid2VicGFjazovLy8uL3NyYy9icm93c2VyL2NvbXBvbmVudHMvTGlzdEl0ZW0uanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL3N0eWxlLWxvYWRlci9saWIvdXJscy5qcyIsIndlYnBhY2s6Ly8vLi9zcmMvYnJvd3Nlci9jb21wb25lbnRzL0xpc3RDb21wb25lbnQuc2NzcyIsIndlYnBhY2s6Ly8vLi9zcmMvYnJvd3Nlci9jb21wb25lbnRzL0xpc3RDb21wb25lbnQuc2Nzcz8zOTJhIiwid2VicGFjazovLy8uL3NyYy9icm93c2VyL2NvbXBvbmVudHMvbG9hZGluZy5wbmciLCJ3ZWJwYWNrOi8vLy4vc3JjL2Jyb3dzZXIvY29tcG9uZW50cy9MaXN0Q29tcG9uZW50LmpzIiwid2VicGFjazovLy8od2VicGFjaykvYnVpbGRpbi9oYXJtb255LW1vZHVsZS5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvcHJvcC10eXBlcy9saWIvUmVhY3RQcm9wVHlwZXNTZWNyZXQuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL3Byb3AtdHlwZXMvZmFjdG9yeVdpdGhUaHJvd2luZ1NoaW1zLmpzIiwid2VicGFjazovLy8uL3NyYy9icm93c2VyL2NvbXBvbmVudHMvQXBwLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9mYmpzL2xpYi9pc05vZGUuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2ZianMvbGliL2lzVGV4dE5vZGUuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2ZianMvbGliL2NvbnRhaW5zTm9kZS5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvZmJqcy9saWIvc2hhbGxvd0VxdWFsLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9mYmpzL2xpYi9nZXRBY3RpdmVFbGVtZW50LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9mYmpzL2xpYi9FeGVjdXRpb25FbnZpcm9ubWVudC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvcmVhY3QtZG9tL2Nqcy9yZWFjdC1kb20ucHJvZHVjdGlvbi5taW4uanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL3JlYWN0L2Nqcy9yZWFjdC5wcm9kdWN0aW9uLm1pbi5qcyIsIndlYnBhY2s6Ly8vLi9zcmMvYnJvd3Nlci9pbmRleC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL19yZXBsYWNlci5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2NvcmUucmVnZXhwLmVzY2FwZS5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9mbi9yZWdleHAvZXNjYXBlLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9yZWdlbmVyYXRvci1ydW50aW1lL3J1bnRpbWUuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy93ZWIuZG9tLml0ZXJhYmxlLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvd2ViLmltbWVkaWF0ZS5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL3dlYi50aW1lcnMuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lczcub2JzZXJ2YWJsZS5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzNy5hc2FwLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXM3LnJlZmxlY3QubWV0YWRhdGEuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lczcucmVmbGVjdC5oYXMtb3duLW1ldGFkYXRhLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXM3LnJlZmxlY3QuaGFzLW1ldGFkYXRhLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXM3LnJlZmxlY3QuZ2V0LW93bi1tZXRhZGF0YS1rZXlzLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXM3LnJlZmxlY3QuZ2V0LW93bi1tZXRhZGF0YS5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzNy5yZWZsZWN0LmdldC1tZXRhZGF0YS1rZXlzLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXM3LnJlZmxlY3QuZ2V0LW1ldGFkYXRhLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXM3LnJlZmxlY3QuZGVsZXRlLW1ldGFkYXRhLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXM3LnJlZmxlY3QuZGVmaW5lLW1ldGFkYXRhLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXM3LnByb21pc2UudHJ5LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXM3LnByb21pc2UuZmluYWxseS5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzNy5tYXRoLnNpZ25iaXQuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lczcubWF0aC51bXVsaC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzNy5tYXRoLnNjYWxlLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXM3Lm1hdGgucmFkaWFucy5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzNy5tYXRoLnJhZC1wZXItZGVnLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXM3Lm1hdGguaW11bGguanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lczcubWF0aC5pc3ViaC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzNy5tYXRoLmlhZGRoLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXM3Lm1hdGguZnNjYWxlLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXM3Lm1hdGguZGVncmVlcy5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzNy5tYXRoLmRlZy1wZXItcmFkLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXM3Lm1hdGguY2xhbXAuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lczcuZXJyb3IuaXMtZXJyb3IuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lczcuc3lzdGVtLmdsb2JhbC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzNy5nbG9iYWwuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lczcud2Vhay1zZXQuZnJvbS5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzNy53ZWFrLW1hcC5mcm9tLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXM3LnNldC5mcm9tLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXM3Lm1hcC5mcm9tLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXM3LndlYWstc2V0Lm9mLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXM3LndlYWstbWFwLm9mLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXM3LnNldC5vZi5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzNy5tYXAub2YuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lczcuc2V0LnRvLWpzb24uanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lczcubWFwLnRvLWpzb24uanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lczcub2JqZWN0Lmxvb2t1cC1zZXR0ZXIuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lczcub2JqZWN0Lmxvb2t1cC1nZXR0ZXIuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lczcub2JqZWN0LmRlZmluZS1zZXR0ZXIuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lczcub2JqZWN0LmRlZmluZS1nZXR0ZXIuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lczcub2JqZWN0LmVudHJpZXMuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lczcub2JqZWN0LnZhbHVlcy5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzNy5vYmplY3QuZ2V0LW93bi1wcm9wZXJ0eS1kZXNjcmlwdG9ycy5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzNy5zeW1ib2wub2JzZXJ2YWJsZS5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzNy5zeW1ib2wuYXN5bmMtaXRlcmF0b3IuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lczcuc3RyaW5nLm1hdGNoLWFsbC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzNy5zdHJpbmcudHJpbS1yaWdodC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzNy5zdHJpbmcudHJpbS1sZWZ0LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXM3LnN0cmluZy5wYWQtZW5kLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXM3LnN0cmluZy5wYWQtc3RhcnQuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lczcuc3RyaW5nLmF0LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXM3LmFycmF5LmZsYXR0ZW4uanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lczcuYXJyYXkuZmxhdC1tYXAuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lczcuYXJyYXkuaW5jbHVkZXMuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lczYucmVmbGVjdC5zZXQtcHJvdG90eXBlLW9mLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXM2LnJlZmxlY3Quc2V0LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXM2LnJlZmxlY3QucHJldmVudC1leHRlbnNpb25zLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXM2LnJlZmxlY3Qub3duLWtleXMuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lczYucmVmbGVjdC5pcy1leHRlbnNpYmxlLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXM2LnJlZmxlY3QuaGFzLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXM2LnJlZmxlY3QuZ2V0LXByb3RvdHlwZS1vZi5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzNi5yZWZsZWN0LmdldC1vd24tcHJvcGVydHktZGVzY3JpcHRvci5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzNi5yZWZsZWN0LmdldC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzNi5yZWZsZWN0LmVudW1lcmF0ZS5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzNi5yZWZsZWN0LmRlbGV0ZS1wcm9wZXJ0eS5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzNi5yZWZsZWN0LmRlZmluZS1wcm9wZXJ0eS5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzNi5yZWZsZWN0LmNvbnN0cnVjdC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzNi5yZWZsZWN0LmFwcGx5LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXM2LnR5cGVkLmZsb2F0NjQtYXJyYXkuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lczYudHlwZWQuZmxvYXQzMi1hcnJheS5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzNi50eXBlZC51aW50MzItYXJyYXkuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lczYudHlwZWQuaW50MzItYXJyYXkuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lczYudHlwZWQudWludDE2LWFycmF5LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXM2LnR5cGVkLmludDE2LWFycmF5LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXM2LnR5cGVkLnVpbnQ4LWNsYW1wZWQtYXJyYXkuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lczYudHlwZWQudWludDgtYXJyYXkuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lczYudHlwZWQuaW50OC1hcnJheS5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzNi50eXBlZC5kYXRhLXZpZXcuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lczYudHlwZWQuYXJyYXktYnVmZmVyLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXM2LndlYWstc2V0LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXM2LnByb21pc2UuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lczYucmVnZXhwLnNwbGl0LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXM2LnJlZ2V4cC5zZWFyY2guanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lczYucmVnZXhwLnJlcGxhY2UuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lczYucmVnZXhwLm1hdGNoLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXM2LnJlZ2V4cC50by1zdHJpbmcuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lczYucmVnZXhwLmNvbnN0cnVjdG9yLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXM2LmFycmF5LnNwZWNpZXMuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lczYuYXJyYXkuZmluZC1pbmRleC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzNi5hcnJheS5maW5kLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXM2LmFycmF5LmZpbGwuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lczYuYXJyYXkuY29weS13aXRoaW4uanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lczYuYXJyYXkubGFzdC1pbmRleC1vZi5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzNi5hcnJheS5pbmRleC1vZi5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzNi5hcnJheS5yZWR1Y2UtcmlnaHQuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lczYuYXJyYXkucmVkdWNlLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXM2LmFycmF5LmV2ZXJ5LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXM2LmFycmF5LnNvbWUuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lczYuYXJyYXkuZmlsdGVyLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXM2LmFycmF5Lm1hcC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL19hcnJheS1zcGVjaWVzLWNvbnN0cnVjdG9yLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXM2LmFycmF5LmZvci1lYWNoLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXM2LmFycmF5LnNvcnQuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lczYuYXJyYXkuc2xpY2UuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lczYuYXJyYXkuam9pbi5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzNi5hcnJheS5vZi5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzNi5hcnJheS5mcm9tLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXM2LmFycmF5LmlzLWFycmF5LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvX2RhdGUtdG8tcHJpbWl0aXZlLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXM2LmRhdGUudG8tcHJpbWl0aXZlLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXM2LmRhdGUudG8tc3RyaW5nLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvX2RhdGUtdG8taXNvLXN0cmluZy5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzNi5kYXRlLnRvLWlzby1zdHJpbmcuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lczYuZGF0ZS50by1qc29uLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXM2LmRhdGUubm93LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXM2LnN0cmluZy5zdXAuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lczYuc3RyaW5nLnN1Yi5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzNi5zdHJpbmcuc3RyaWtlLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXM2LnN0cmluZy5zbWFsbC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzNi5zdHJpbmcubGluay5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzNi5zdHJpbmcuaXRhbGljcy5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzNi5zdHJpbmcuZm9udHNpemUuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lczYuc3RyaW5nLmZvbnRjb2xvci5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzNi5zdHJpbmcuZml4ZWQuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lczYuc3RyaW5nLmJvbGQuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lczYuc3RyaW5nLmJsaW5rLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXM2LnN0cmluZy5iaWcuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lczYuc3RyaW5nLmFuY2hvci5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzNi5zdHJpbmcuc3RhcnRzLXdpdGguanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lczYuc3RyaW5nLnJlcGVhdC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzNi5zdHJpbmcuaW5jbHVkZXMuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lczYuc3RyaW5nLmVuZHMtd2l0aC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzNi5zdHJpbmcuY29kZS1wb2ludC1hdC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzNi5zdHJpbmcuaXRlcmF0b3IuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lczYuc3RyaW5nLnRyaW0uanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lczYuc3RyaW5nLnJhdy5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzNi5zdHJpbmcuZnJvbS1jb2RlLXBvaW50LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXM2Lm1hdGgudHJ1bmMuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lczYubWF0aC50YW5oLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXM2Lm1hdGguc2luaC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzNi5tYXRoLnNpZ24uanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lczYubWF0aC5sb2cyLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXM2Lm1hdGgubG9nMXAuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lczYubWF0aC5sb2cxMC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzNi5tYXRoLmltdWwuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lczYubWF0aC5oeXBvdC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzNi5tYXRoLmZyb3VuZC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzNi5tYXRoLmV4cG0xLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXM2Lm1hdGguY29zaC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzNi5tYXRoLmNsejMyLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXM2Lm1hdGguY2JydC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzNi5tYXRoLmF0YW5oLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXM2Lm1hdGguYXNpbmguanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lczYubWF0aC5hY29zaC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzNi5udW1iZXIucGFyc2UtaW50LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXM2Lm51bWJlci5wYXJzZS1mbG9hdC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzNi5udW1iZXIubWluLXNhZmUtaW50ZWdlci5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzNi5udW1iZXIubWF4LXNhZmUtaW50ZWdlci5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzNi5udW1iZXIuaXMtc2FmZS1pbnRlZ2VyLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXM2Lm51bWJlci5pcy1uYW4uanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lczYubnVtYmVyLmlzLWludGVnZXIuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lczYubnVtYmVyLmlzLWZpbml0ZS5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzNi5udW1iZXIuZXBzaWxvbi5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzNi5udW1iZXIudG8tcHJlY2lzaW9uLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXM2Lm51bWJlci50by1maXhlZC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzNi5udW1iZXIuY29uc3RydWN0b3IuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lczYucGFyc2UtZmxvYXQuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lczYucGFyc2UtaW50LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXM2LmZ1bmN0aW9uLmhhcy1pbnN0YW5jZS5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzNi5mdW5jdGlvbi5uYW1lLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXM2LmZ1bmN0aW9uLmJpbmQuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lczYub2JqZWN0LnRvLXN0cmluZy5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzNi5vYmplY3Quc2V0LXByb3RvdHlwZS1vZi5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL19zYW1lLXZhbHVlLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXM2Lm9iamVjdC5pcy5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzNi5vYmplY3QuYXNzaWduLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXM2Lm9iamVjdC5pcy1leHRlbnNpYmxlLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXM2Lm9iamVjdC5pcy1zZWFsZWQuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lczYub2JqZWN0LmlzLWZyb3plbi5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzNi5vYmplY3QucHJldmVudC1leHRlbnNpb25zLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXM2Lm9iamVjdC5zZWFsLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXM2Lm9iamVjdC5mcmVlemUuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lczYub2JqZWN0LmdldC1vd24tcHJvcGVydHktbmFtZXMuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lczYub2JqZWN0LmtleXMuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lczYub2JqZWN0LmdldC1wcm90b3R5cGUtb2YuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lczYub2JqZWN0LmdldC1vd24tcHJvcGVydHktZGVzY3JpcHRvci5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzNi5vYmplY3QuZGVmaW5lLXByb3BlcnRpZXMuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lczYub2JqZWN0LmRlZmluZS1wcm9wZXJ0eS5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzNi5vYmplY3QuY3JlYXRlLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvX2VudW0ta2V5cy5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzNi5zeW1ib2wuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvc2hpbS5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvYmFiZWwtcG9seWZpbGwvbGliL2luZGV4LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9sb2Rhc2gtZXMvX2ZyZWVHbG9iYWwuanMiXSwibmFtZXMiOlsiaW5zdGFsbGVkTW9kdWxlcyIsIl9fd2VicGFja19yZXF1aXJlX18iLCJtb2R1bGVJZCIsImV4cG9ydHMiLCJtb2R1bGUiLCJpIiwibCIsIm1vZHVsZXMiLCJjYWxsIiwibSIsImMiLCJkIiwibmFtZSIsImdldHRlciIsIm8iLCJPYmplY3QiLCJkZWZpbmVQcm9wZXJ0eSIsImNvbmZpZ3VyYWJsZSIsImVudW1lcmFibGUiLCJnZXQiLCJyIiwidmFsdWUiLCJuIiwiX19lc01vZHVsZSIsIm9iamVjdCIsInByb3BlcnR5IiwicHJvdG90eXBlIiwiaGFzT3duUHJvcGVydHkiLCJwIiwicyIsImdsb2JhbCIsImNvcmUiLCJoaWRlIiwicmVkZWZpbmUiLCJjdHgiLCIkZXhwb3J0IiwidHlwZSIsInNvdXJjZSIsImtleSIsIm93biIsIm91dCIsImV4cCIsIklTX0ZPUkNFRCIsIkYiLCJJU19HTE9CQUwiLCJHIiwiSVNfU1RBVElDIiwiUyIsIklTX1BST1RPIiwiUCIsIklTX0JJTkQiLCJCIiwidGFyZ2V0IiwiZXhwUHJvdG8iLCJ1bmRlZmluZWQiLCJGdW5jdGlvbiIsIlUiLCJXIiwiUiIsImlzT2JqZWN0IiwiaXQiLCJUeXBlRXJyb3IiLCJ3aW5kb3ciLCJNYXRoIiwic2VsZiIsIl9fZyIsImV4ZWMiLCJlIiwic3RvcmUiLCJ1aWQiLCJTeW1ib2wiLCJVU0VfU1lNQk9MIiwidG9JbnRlZ2VyIiwibWluIiwiYW5PYmplY3QiLCJJRThfRE9NX0RFRklORSIsInRvUHJpbWl0aXZlIiwiZFAiLCJmIiwiTyIsIkF0dHJpYnV0ZXMiLCJhIiwiZGVmaW5lZCIsImZhaWxzIiwicXVvdCIsImNyZWF0ZUhUTUwiLCJzdHJpbmciLCJ0YWciLCJhdHRyaWJ1dGUiLCJTdHJpbmciLCJwMSIsInJlcGxhY2UiLCJOQU1FIiwidGVzdCIsInRvTG93ZXJDYXNlIiwic3BsaXQiLCJsZW5ndGgiLCJoYXMiLCJTUkMiLCIkdG9TdHJpbmciLCJUUEwiLCJpbnNwZWN0U291cmNlIiwidmFsIiwic2FmZSIsImlzRnVuY3Rpb24iLCJqb2luIiwidGhpcyIsImNyZWF0ZURlc2MiLCJ0b09iamVjdCIsIklFX1BST1RPIiwiT2JqZWN0UHJvdG8iLCJnZXRQcm90b3R5cGVPZiIsImNvbnN0cnVjdG9yIiwicElFIiwidG9JT2JqZWN0IiwiZ09QRCIsImdldE93blByb3BlcnR5RGVzY3JpcHRvciIsIklPYmplY3QiLCJtZXRob2QiLCJhcmciLCJ0b1N0cmluZyIsInNsaWNlIiwiYUZ1bmN0aW9uIiwiZm4iLCJ0aGF0IiwiYiIsImFwcGx5IiwiYXJndW1lbnRzIiwidmVyc2lvbiIsIl9fZSIsInRvTGVuZ3RoIiwiYXNjIiwiVFlQRSIsIiRjcmVhdGUiLCJJU19NQVAiLCJJU19GSUxURVIiLCJJU19TT01FIiwiSVNfRVZFUlkiLCJJU19GSU5EX0lOREVYIiwiTk9fSE9MRVMiLCJjcmVhdGUiLCIkdGhpcyIsImNhbGxiYWNrZm4iLCJyZXMiLCJpbmRleCIsInJlc3VsdCIsInB1c2giLCJLRVkiLCJjZWlsIiwiZmxvb3IiLCJpc05hTiIsInZhbHVlT2YiLCJNYXAiLCJzaGFyZWQiLCJnZXRPckNyZWF0ZU1ldGFkYXRhTWFwIiwidGFyZ2V0S2V5IiwidGFyZ2V0TWV0YWRhdGEiLCJzZXQiLCJrZXlNZXRhZGF0YSIsIm1hcCIsIk1ldGFkYXRhS2V5IiwibWV0YWRhdGFNYXAiLCJNZXRhZGF0YVZhbHVlIiwia2V5cyIsImZvckVhY2giLCJfIiwiTElCUkFSWSIsIiR0eXBlZCIsIiRidWZmZXIiLCJhbkluc3RhbmNlIiwicHJvcGVydHlEZXNjIiwicmVkZWZpbmVBbGwiLCJ0b0luZGV4IiwidG9BYnNvbHV0ZUluZGV4IiwiY2xhc3NvZiIsImlzQXJyYXlJdGVyIiwiZ09QTiIsImdldEl0ZXJGbiIsIndrcyIsImNyZWF0ZUFycmF5TWV0aG9kIiwiY3JlYXRlQXJyYXlJbmNsdWRlcyIsInNwZWNpZXNDb25zdHJ1Y3RvciIsIkFycmF5SXRlcmF0b3JzIiwiSXRlcmF0b3JzIiwiJGl0ZXJEZXRlY3QiLCJzZXRTcGVjaWVzIiwiYXJyYXlGaWxsIiwiYXJyYXlDb3B5V2l0aGluIiwiJERQIiwiJEdPUEQiLCJSYW5nZUVycm9yIiwiVWludDhBcnJheSIsIkFycmF5UHJvdG8iLCJBcnJheSIsIiRBcnJheUJ1ZmZlciIsIkFycmF5QnVmZmVyIiwiJERhdGFWaWV3IiwiRGF0YVZpZXciLCJhcnJheUZvckVhY2giLCJhcnJheUZpbHRlciIsImFycmF5U29tZSIsImFycmF5RXZlcnkiLCJhcnJheUZpbmQiLCJhcnJheUZpbmRJbmRleCIsImFycmF5SW5jbHVkZXMiLCJhcnJheUluZGV4T2YiLCJhcnJheVZhbHVlcyIsInZhbHVlcyIsImFycmF5S2V5cyIsImFycmF5RW50cmllcyIsImVudHJpZXMiLCJhcnJheUxhc3RJbmRleE9mIiwibGFzdEluZGV4T2YiLCJhcnJheVJlZHVjZSIsInJlZHVjZSIsImFycmF5UmVkdWNlUmlnaHQiLCJyZWR1Y2VSaWdodCIsImFycmF5Sm9pbiIsImFycmF5U29ydCIsInNvcnQiLCJhcnJheVNsaWNlIiwiYXJyYXlUb1N0cmluZyIsImFycmF5VG9Mb2NhbGVTdHJpbmciLCJ0b0xvY2FsZVN0cmluZyIsIklURVJBVE9SIiwiVEFHIiwiVFlQRURfQ09OU1RSVUNUT1IiLCJERUZfQ09OU1RSVUNUT1IiLCJBTExfQ09OU1RSVUNUT1JTIiwiQ09OU1RSIiwiVFlQRURfQVJSQVkiLCJUWVBFRCIsIlZJRVciLCIkbWFwIiwiYWxsb2NhdGUiLCJMSVRUTEVfRU5ESUFOIiwiVWludDE2QXJyYXkiLCJidWZmZXIiLCJGT1JDRURfU0VUIiwidG9PZmZzZXQiLCJCWVRFUyIsIm9mZnNldCIsInZhbGlkYXRlIiwiQyIsInNwZWNpZXNGcm9tTGlzdCIsImxpc3QiLCJmcm9tTGlzdCIsImFkZEdldHRlciIsImludGVybmFsIiwiX2QiLCIkZnJvbSIsInN0ZXAiLCJpdGVyYXRvciIsImFMZW4iLCJtYXBmbiIsIm1hcHBpbmciLCJpdGVyRm4iLCJuZXh0IiwiZG9uZSIsIiRvZiIsIlRPX0xPQ0FMRV9CVUciLCIkdG9Mb2NhbGVTdHJpbmciLCJwcm90byIsImNvcHlXaXRoaW4iLCJzdGFydCIsImV2ZXJ5IiwiZmlsbCIsImZpbHRlciIsImZpbmQiLCJwcmVkaWNhdGUiLCJmaW5kSW5kZXgiLCJpbmRleE9mIiwic2VhcmNoRWxlbWVudCIsImluY2x1ZGVzIiwic2VwYXJhdG9yIiwicmV2ZXJzZSIsIm1pZGRsZSIsInNvbWUiLCJjb21wYXJlZm4iLCJzdWJhcnJheSIsImJlZ2luIiwiZW5kIiwiJGJlZ2luIiwiYnl0ZU9mZnNldCIsIkJZVEVTX1BFUl9FTEVNRU5UIiwiJHNsaWNlIiwiJHNldCIsImFycmF5TGlrZSIsInNyYyIsImxlbiIsIiRpdGVyYXRvcnMiLCJpc1RBSW5kZXgiLCIkZ2V0RGVzYyIsIiRzZXREZXNjIiwiZGVzYyIsIndyaXRhYmxlIiwiJFR5cGVkQXJyYXlQcm90b3R5cGUkIiwid3JhcHBlciIsIkNMQU1QRUQiLCJHRVRURVIiLCJTRVRURVIiLCJUeXBlZEFycmF5IiwiQmFzZSIsIlRBQyIsIkZPUkNFRCIsIkFCViIsIlR5cGVkQXJyYXlQcm90b3R5cGUiLCJhZGRFbGVtZW50IiwiZGF0YSIsInYiLCJyb3VuZCIsInNldHRlciIsIiRvZmZzZXQiLCIkbGVuZ3RoIiwiYnl0ZUxlbmd0aCIsImtsYXNzIiwiJGxlbiIsIml0ZXIiLCJjb25jYXQiLCIkbmF0aXZlSXRlcmF0b3IiLCJDT1JSRUNUX0lURVJfTkFNRSIsIiRpdGVyYXRvciIsIm9mIiwiZnJvbSIsIlVOU0NPUEFCTEVTIiwiTUVUQSIsInNldERlc2MiLCJpZCIsImlzRXh0ZW5zaWJsZSIsIkZSRUVaRSIsInByZXZlbnRFeHRlbnNpb25zIiwic2V0TWV0YSIsInciLCJtZXRhIiwiTkVFRCIsImZhc3RLZXkiLCJnZXRXZWFrIiwib25GcmVlemUiLCJCUkVBSyIsIlJFVFVSTiIsIml0ZXJhYmxlIiwiQ29uc3RydWN0b3IiLCJmb3JiaWRkZW5GaWVsZCIsIkRFU0NSSVBUT1JTIiwiU1BFQ0lFUyIsIiRrZXlzIiwiaGlkZGVuS2V5cyIsImdldE93blByb3BlcnR5TmFtZXMiLCJkUHMiLCJlbnVtQnVnS2V5cyIsIkVtcHR5IiwiY3JlYXRlRGljdCIsImlmcmFtZURvY3VtZW50IiwiaWZyYW1lIiwic3R5bGUiLCJkaXNwbGF5IiwiYXBwZW5kQ2hpbGQiLCJjb250ZW50V2luZG93IiwiZG9jdW1lbnQiLCJvcGVuIiwid3JpdGUiLCJsdCIsImNsb3NlIiwiUHJvcGVydGllcyIsIm1heCIsInB4IiwicmFuZG9tIiwiYml0bWFwIiwic3Vic2NyaXB0aW9uU2hhcGUiLCJwcm9wX3R5cGVzX2RlZmF1bHQiLCJzaGFwZSIsInRyeVN1YnNjcmliZSIsImZ1bmMiLCJpc1JlcXVpcmVkIiwidHJ5VW5zdWJzY3JpYmUiLCJub3RpZnlOZXN0ZWRTdWJzIiwiaXNTdWJzY3JpYmVkIiwic3RvcmVTaGFwZSIsInN1YnNjcmliZSIsImRpc3BhdGNoIiwiZ2V0U3RhdGUiLCJjcmVhdGVQcm92aWRlciIsIl9Qcm92aWRlciRjaGlsZENvbnRleCIsInN0b3JlS2V5Iiwic3Vic2NyaXB0aW9uS2V5IiwiUHJvdmlkZXIiLCJfQ29tcG9uZW50IiwicHJvcHMiLCJjb250ZXh0IiwiaW5zdGFuY2UiLCJfY2xhc3NDYWxsQ2hlY2siLCJfdGhpcyIsIlJlZmVyZW5jZUVycm9yIiwiX3Bvc3NpYmxlQ29uc3RydWN0b3JSZXR1cm4iLCJzdWJDbGFzcyIsInN1cGVyQ2xhc3MiLCJzZXRQcm90b3R5cGVPZiIsIl9fcHJvdG9fXyIsIl9pbmhlcml0cyIsImdldENoaWxkQ29udGV4dCIsIl9yZWYiLCJyZW5kZXIiLCJyZWFjdCIsIm9ubHkiLCJjaGlsZHJlbiIsInByb3BUeXBlcyIsImVsZW1lbnQiLCJjaGlsZENvbnRleHRUeXBlcyIsImNvbXBvbmVudHNfUHJvdmlkZXIiLCJDTEVBUkVEIiwibnVsbExpc3RlbmVycyIsIm5vdGlmeSIsIlN1YnNjcmlwdGlvbiIsInBhcmVudFN1YiIsIm9uU3RhdGVDaGFuZ2UiLCJTdWJzY3JpcHRpb25fY2xhc3NDYWxsQ2hlY2siLCJ1bnN1YnNjcmliZSIsImxpc3RlbmVycyIsImFkZE5lc3RlZFN1YiIsImxpc3RlbmVyIiwiQm9vbGVhbiIsImN1cnJlbnQiLCJjbGVhciIsInNwbGljZSIsIl9leHRlbmRzIiwiYXNzaWduIiwiaG90UmVsb2FkaW5nVmVyc2lvbiIsImR1bW15U3RhdGUiLCJub29wIiwiY29ubmVjdEFkdmFuY2VkIiwic2VsZWN0b3JGYWN0b3J5IiwiX2NvbnRleHRUeXBlcyIsIl9jaGlsZENvbnRleHRUeXBlcyIsIl9yZWYkZ2V0RGlzcGxheU5hbWUiLCJnZXREaXNwbGF5TmFtZSIsIl9yZWYkbWV0aG9kTmFtZSIsIm1ldGhvZE5hbWUiLCJfcmVmJHJlbmRlckNvdW50UHJvcCIsInJlbmRlckNvdW50UHJvcCIsIl9yZWYkc2hvdWxkSGFuZGxlU3RhdCIsInNob3VsZEhhbmRsZVN0YXRlQ2hhbmdlcyIsIl9yZWYkc3RvcmVLZXkiLCJfcmVmJHdpdGhSZWYiLCJ3aXRoUmVmIiwiY29ubmVjdE9wdGlvbnMiLCJvYmoiLCJfb2JqZWN0V2l0aG91dFByb3BlcnRpZXMiLCJjb250ZXh0VHlwZXMiLCJXcmFwcGVkQ29tcG9uZW50IiwiYnJvd3Nlcl9kZWZhdWx0IiwiSlNPTiIsInN0cmluZ2lmeSIsIndyYXBwZWRDb21wb25lbnROYW1lIiwiZGlzcGxheU5hbWUiLCJzZWxlY3RvckZhY3RvcnlPcHRpb25zIiwiQ29ubmVjdCIsImNvbm5lY3RBZHZhbmNlZF9jbGFzc0NhbGxDaGVjayIsImNvbm5lY3RBZHZhbmNlZF9wb3NzaWJsZUNvbnN0cnVjdG9yUmV0dXJuIiwic3RhdGUiLCJyZW5kZXJDb3VudCIsInByb3BzTW9kZSIsInNldFdyYXBwZWRJbnN0YW5jZSIsImJpbmQiLCJpbml0U2VsZWN0b3IiLCJpbml0U3Vic2NyaXB0aW9uIiwiY29ubmVjdEFkdmFuY2VkX2luaGVyaXRzIiwiX3JlZjIiLCJzdWJzY3JpcHRpb24iLCJjb21wb25lbnREaWRNb3VudCIsInNlbGVjdG9yIiwicnVuIiwic2hvdWxkQ29tcG9uZW50VXBkYXRlIiwiZm9yY2VVcGRhdGUiLCJjb21wb25lbnRXaWxsUmVjZWl2ZVByb3BzIiwibmV4dFByb3BzIiwiY29tcG9uZW50V2lsbFVubW91bnQiLCJnZXRXcmFwcGVkSW5zdGFuY2UiLCJ3cmFwcGVkSW5zdGFuY2UiLCJyZWYiLCJzb3VyY2VTZWxlY3RvciIsImVycm9yIiwibWFrZVNlbGVjdG9yU3RhdGVmdWwiLCJjb21wb25lbnREaWRVcGRhdGUiLCJub3RpZnlOZXN0ZWRTdWJzT25Db21wb25lbnREaWRVcGRhdGUiLCJzZXRTdGF0ZSIsImFkZEV4dHJhUHJvcHMiLCJ3aXRoRXh0cmFzIiwiaG9pc3Rfbm9uX3JlYWN0X3N0YXRpY3NfZGVmYXVsdCIsImhhc093biIsImlzIiwieCIsInkiLCJzaGFsbG93RXF1YWwiLCJvYmpBIiwib2JqQiIsImtleXNBIiwia2V5c0IiLCJmcmVlU2VsZiIsIl9TeW1ib2wiLCJfZnJlZUdsb2JhbCIsIm9iamVjdFByb3RvIiwidG9TdHJpbmdUYWciLCJmdW5jUHJvdG8iLCJpc1BsYWluT2JqZWN0X29iamVjdFByb3RvIiwiZnVuY1RvU3RyaW5nIiwid3JhcE1hcFRvUHJvcHNDb25zdGFudCIsImdldENvbnN0YW50Iiwib3B0aW9ucyIsImNvbnN0YW50IiwiY29uc3RhbnRTZWxlY3RvciIsImRlcGVuZHNPbk93blByb3BzIiwiZ2V0RGVwZW5kc09uT3duUHJvcHMiLCJtYXBUb1Byb3BzIiwid3JhcE1hcFRvUHJvcHNGdW5jIiwicHJveHkiLCJzdGF0ZU9yRGlzcGF0Y2giLCJvd25Qcm9wcyIsImNvbm5lY3RfbWFwRGlzcGF0Y2hUb1Byb3BzIiwibWFwRGlzcGF0Y2hUb1Byb3BzIiwicmVkdXgiLCJjb25uZWN0X21hcFN0YXRlVG9Qcm9wcyIsIm1hcFN0YXRlVG9Qcm9wcyIsIm1lcmdlUHJvcHNfZXh0ZW5kcyIsImRlZmF1bHRNZXJnZVByb3BzIiwic3RhdGVQcm9wcyIsImRpc3BhdGNoUHJvcHMiLCJjb25uZWN0X21lcmdlUHJvcHMiLCJtZXJnZVByb3BzIiwicHVyZSIsImFyZU1lcmdlZFByb3BzRXF1YWwiLCJoYXNSdW5PbmNlIiwibWVyZ2VkUHJvcHMiLCJuZXh0TWVyZ2VkUHJvcHMiLCJ3cmFwTWVyZ2VQcm9wc0Z1bmMiLCJpbXB1cmVGaW5hbFByb3BzU2VsZWN0b3JGYWN0b3J5IiwicHVyZUZpbmFsUHJvcHNTZWxlY3RvckZhY3RvcnkiLCJhcmVTdGF0ZXNFcXVhbCIsImFyZU93blByb3BzRXF1YWwiLCJhcmVTdGF0ZVByb3BzRXF1YWwiLCJoYXNSdW5BdExlYXN0T25jZSIsImhhbmRsZVN1YnNlcXVlbnRDYWxscyIsIm5leHRTdGF0ZSIsIm5leHRPd25Qcm9wcyIsIm5leHRTdGF0ZVByb3BzIiwic3RhdGVQcm9wc0NoYW5nZWQiLCJwcm9wc0NoYW5nZWQiLCJzdGF0ZUNoYW5nZWQiLCJmaW5hbFByb3BzU2VsZWN0b3JGYWN0b3J5IiwiaW5pdE1hcFN0YXRlVG9Qcm9wcyIsImluaXRNYXBEaXNwYXRjaFRvUHJvcHMiLCJpbml0TWVyZ2VQcm9wcyIsInNlbGVjdG9yRmFjdG9yeV9vYmplY3RXaXRob3V0UHJvcGVydGllcyIsImNvbm5lY3RfZXh0ZW5kcyIsIm1hdGNoIiwiZmFjdG9yaWVzIiwiRXJyb3IiLCJzdHJpY3RFcXVhbCIsImNvbm5lY3RfY29ubmVjdCIsIl9yZWYkY29ubmVjdEhPQyIsImNvbm5lY3RIT0MiLCJfcmVmJG1hcFN0YXRlVG9Qcm9wc0YiLCJtYXBTdGF0ZVRvUHJvcHNGYWN0b3JpZXMiLCJfcmVmJG1hcERpc3BhdGNoVG9Qcm8iLCJtYXBEaXNwYXRjaFRvUHJvcHNGYWN0b3JpZXMiLCJfcmVmJG1lcmdlUHJvcHNGYWN0b3IiLCJtZXJnZVByb3BzRmFjdG9yaWVzIiwiX3JlZiRzZWxlY3RvckZhY3RvcnkiLCJfcmVmMiRwdXJlIiwiX3JlZjIkYXJlU3RhdGVzRXF1YWwiLCJfcmVmMiRhcmVPd25Qcm9wc0VxdWEiLCJfcmVmMiRhcmVTdGF0ZVByb3BzRXEiLCJfcmVmMiRhcmVNZXJnZWRQcm9wc0UiLCJleHRyYU9wdGlvbnMiLCJjb25uZWN0X29iamVjdFdpdGhvdXRQcm9wZXJ0aWVzIiwiX3QiLCJzcGFjZXMiLCJzcGFjZSIsImx0cmltIiwiUmVnRXhwIiwicnRyaW0iLCJleHBvcnRlciIsIkFMSUFTIiwiRk9SQ0UiLCJ0cmltIiwiZGVmIiwic3RhdCIsIkxJU1RfUkVRVUVTVCIsIkxJU1RfUkVRVUVTVF9TVUNDRVNTIiwiTElTVF9SRVFVRVNUX0ZBSUxFRCIsIlBST1BFUlRZX0RBVEFfUkVRVUVTVCIsIlBST1BFUlRZX0RBVEFfU1VDQ0VTUyIsIlBST1BFUlRZX0RBVEFfRkFJTEVEIiwiU0hPV19QUk9QRVJUWV9QQU5FTCIsIkhJREVfUFJPUEVSVFlfUEFORUwiLCJyZXF1ZXN0TGlzdCIsInByaWNlIiwicmVnZW5lcmF0b3JSdW50aW1lIiwibWFyayIsIl9jYWxsZWUiLCJ3cmFwIiwiX2NvbnRleHQiLCJwcmV2IiwiZmV0Y2giLCJoZWFkZXJzIiwiQWNjZXB0IiwiQ29udGVudC1UeXBlIiwiY3JlZGVudGlhbHMiLCJib2R5IiwidGhlbiIsImpzb24iLCJjb25zb2xlIiwic3RvcCIsIl94IiwicmVxdWVzdFByb3BlcnR5RGF0YSIsImxvZyIsImNvZiIsIkFSRyIsIlQiLCJ0cnlHZXQiLCJjYWxsZWUiLCJwcm9wZXJ0eUlzRW51bWVyYWJsZSIsImZvck9mIiwiQ09MTEVDVElPTiIsIkEiLCJjYiIsIm1hcEZuIiwibmV4dEl0ZW0iLCJLIiwiX19kZWZpbmVTZXR0ZXJfXyIsIlR5cGVkIiwiVHlwZWRBcnJheUNvbnN0cnVjdG9ycyIsInNldFRvU3RyaW5nVGFnIiwiaW5oZXJpdElmUmVxdWlyZWQiLCJtZXRob2RzIiwiY29tbW9uIiwiSVNfV0VBSyIsIkFEREVSIiwiZml4TWV0aG9kIiwiSEFTTlRfQ0hBSU5JTkciLCJUSFJPV1NfT05fUFJJTUlUSVZFUyIsIkFDQ0VQVF9JVEVSQUJMRVMiLCJCVUdHWV9aRVJPIiwiJGluc3RhbmNlIiwiZ2V0Q29uc3RydWN0b3IiLCJzZXRTdHJvbmciLCJuYXZpZ2F0b3IiLCJ1c2VyQWdlbnQiLCJEIiwiU1lNQk9MIiwiZm5zIiwic3RyZm4iLCJyeGZuIiwiaWdub3JlQ2FzZSIsIm11bHRpbGluZSIsInVuaWNvZGUiLCJzdGlja3kiLCJTQUZFX0NMT1NJTkciLCJyaXRlciIsInNraXBDbG9zaW5nIiwiYXJyIiwiTUFUQ0giLCJpc1JlZ0V4cCIsImlzQXJyYXkiLCJnZXRPd25Qcm9wZXJ0eVN5bWJvbHMiLCJJU19JTkNMVURFUyIsImVsIiwiZnJvbUluZGV4IiwibW9kZSIsImNvcHlyaWdodCIsImciLCJldmFsIiwiY29uZGl0aW9uIiwiZm9ybWF0IiwiYXJncyIsImFyZ0luZGV4IiwiZnJhbWVzVG9Qb3AiLCJtZW1vIiwic3R5bGVzSW5Eb20iLCJpc09sZElFIiwiYWxsIiwiYXRvYiIsImdldEVsZW1lbnQiLCJzdHlsZVRhcmdldCIsInF1ZXJ5U2VsZWN0b3IiLCJIVE1MSUZyYW1lRWxlbWVudCIsImNvbnRlbnREb2N1bWVudCIsImhlYWQiLCJzaW5nbGV0b24iLCJzaW5nbGV0b25Db3VudGVyIiwic3R5bGVzSW5zZXJ0ZWRBdFRvcCIsImZpeFVybHMiLCJhZGRTdHlsZXNUb0RvbSIsInN0eWxlcyIsIml0ZW0iLCJkb21TdHlsZSIsInJlZnMiLCJqIiwicGFydHMiLCJhZGRTdHlsZSIsImxpc3RUb1N0eWxlcyIsIm5ld1N0eWxlcyIsImJhc2UiLCJwYXJ0IiwiY3NzIiwibWVkaWEiLCJzb3VyY2VNYXAiLCJpbnNlcnRTdHlsZUVsZW1lbnQiLCJpbnNlcnRJbnRvIiwibGFzdFN0eWxlRWxlbWVudEluc2VydGVkQXRUb3AiLCJpbnNlcnRBdCIsIm5leHRTaWJsaW5nIiwiaW5zZXJ0QmVmb3JlIiwiZmlyc3RDaGlsZCIsImJlZm9yZSIsInJlbW92ZVN0eWxlRWxlbWVudCIsInBhcmVudE5vZGUiLCJyZW1vdmVDaGlsZCIsImlkeCIsImNyZWF0ZVN0eWxlRWxlbWVudCIsImNyZWF0ZUVsZW1lbnQiLCJhdHRycyIsImFkZEF0dHJzIiwic2V0QXR0cmlidXRlIiwidXBkYXRlIiwicmVtb3ZlIiwidHJhbnNmb3JtIiwic3R5bGVJbmRleCIsImFwcGx5VG9TaW5nbGV0b25UYWciLCJVUkwiLCJjcmVhdGVPYmplY3RVUkwiLCJyZXZva2VPYmplY3RVUkwiLCJCbG9iIiwiYnRvYSIsImxpbmsiLCJyZWwiLCJjcmVhdGVMaW5rRWxlbWVudCIsImF1dG9GaXhVcmxzIiwiY29udmVydFRvQWJzb2x1dGVVcmxzIiwidW5lc2NhcGUiLCJlbmNvZGVVUklDb21wb25lbnQiLCJibG9iIiwib2xkU3JjIiwiaHJlZiIsInN0eWxlU2hlZXQiLCJjc3NUZXh0IiwiY3JlYXRlVGV4dE5vZGUiLCJuZXdPYmoiLCJERUJVRyIsIm5ld0xpc3QiLCJtYXlSZW1vdmUiLCJ0ZXh0U3RvcmUiLCJyZXBsYWNlVGV4dCIsInJlcGxhY2VtZW50IiwiY3NzTm9kZSIsImNoaWxkTm9kZXMiLCJ1c2VTb3VyY2VNYXAiLCJjb250ZW50IiwiY3NzTWFwcGluZyIsInNvdXJjZU1hcHBpbmciLCJzb3VyY2VVUkxzIiwic291cmNlcyIsInNvdXJjZVJvb3QiLCJjc3NXaXRoTWFwcGluZ1RvU3RyaW5nIiwibWVkaWFRdWVyeSIsImFscmVhZHlJbXBvcnRlZE1vZHVsZXMiLCJJbWFnZSIsImlzTG9hZGluZyIsIlJlYWN0IiwiQ29tcG9uZW50IiwiX3RoaXMyIiwiX3Byb3BzIiwiYWx0IiwiX3JlYWN0MiIsImRlZmF1bHQiLCJGcmFnbWVudCIsImxvYWRpbmciLCJ2aXNpYmlsaXR5Iiwid2lkdGgiLCJvbkxvYWQiLCJtYWtlRW1wdHlGdW5jdGlvbiIsImVtcHR5RnVuY3Rpb24iLCJ0aGF0UmV0dXJucyIsInRoYXRSZXR1cm5zRmFsc2UiLCJ0aGF0UmV0dXJuc1RydWUiLCJ0aGF0UmV0dXJuc051bGwiLCJ0aGF0UmV0dXJuc1RoaXMiLCJ0aGF0UmV0dXJuc0FyZ3VtZW50IiwidmFsaWRhdGVGb3JtYXQiLCJQUk9UT1RZUEUiLCJXUk9OR19JTkRFWCIsIkluZmluaXR5IiwiQmFzZUJ1ZmZlciIsImFicyIsInBvdyIsIkxOMiIsIiRCVUZGRVIiLCIkTEVOR1RIIiwiJE9GRlNFVCIsInBhY2tJRUVFNzU0IiwibUxlbiIsIm5CeXRlcyIsImVMZW4iLCJlTWF4IiwiZUJpYXMiLCJydCIsInVucGFja0lFRUU3NTQiLCJuQml0cyIsIk5hTiIsInVucGFja0kzMiIsImJ5dGVzIiwicGFja0k4IiwicGFja0kxNiIsInBhY2tJMzIiLCJwYWNrRjY0IiwicGFja0YzMiIsInZpZXciLCJpc0xpdHRsZUVuZGlhbiIsImludEluZGV4IiwiX2IiLCJwYWNrIiwiY29udmVyc2lvbiIsIkFycmF5QnVmZmVyUHJvdG8iLCIkc2V0SW50OCIsInNldEludDgiLCJnZXRJbnQ4Iiwic2V0VWludDgiLCJidWZmZXJMZW5ndGgiLCJnZXRVaW50OCIsImdldEludDE2IiwiZ2V0VWludDE2IiwiZ2V0SW50MzIiLCJnZXRVaW50MzIiLCJnZXRGbG9hdDMyIiwiZ2V0RmxvYXQ2NCIsInNldEludDE2Iiwic2V0VWludDE2Iiwic2V0SW50MzIiLCJzZXRVaW50MzIiLCJzZXRGbG9hdDMyIiwic2V0RmxvYXQ2NCIsInJlc29sdmUiLCJyZWplY3QiLCJwcm9taXNlIiwiJCRyZXNvbHZlIiwiJCRyZWplY3QiLCJtYWNyb3Rhc2siLCJPYnNlcnZlciIsIk11dGF0aW9uT2JzZXJ2ZXIiLCJXZWJLaXRNdXRhdGlvbk9ic2VydmVyIiwicHJvY2VzcyIsIlByb21pc2UiLCJpc05vZGUiLCJsYXN0IiwiZmx1c2giLCJwYXJlbnQiLCJkb21haW4iLCJleGl0IiwiZW50ZXIiLCJuZXh0VGljayIsInN0YW5kYWxvbmUiLCJ0b2dnbGUiLCJub2RlIiwib2JzZXJ2ZSIsImNoYXJhY3RlckRhdGEiLCJ0YXNrIiwiZGVmZXIiLCJjaGFubmVsIiwicG9ydCIsImludm9rZSIsImh0bWwiLCJjZWwiLCJzZXRUYXNrIiwic2V0SW1tZWRpYXRlIiwiY2xlYXJUYXNrIiwiY2xlYXJJbW1lZGlhdGUiLCJNZXNzYWdlQ2hhbm5lbCIsIkRpc3BhdGNoIiwiY291bnRlciIsInF1ZXVlIiwiZXZlbnQiLCJub3ciLCJwb3J0MiIsInBvcnQxIiwib25tZXNzYWdlIiwicG9zdE1lc3NhZ2UiLCJhZGRFdmVudExpc3RlbmVyIiwiaW1wb3J0U2NyaXB0cyIsInNldFRpbWVvdXQiLCJhZGRUb1Vuc2NvcGFibGVzIiwiaXRlcmF0ZWQiLCJraW5kIiwiX2kiLCJfayIsIkFyZ3VtZW50cyIsImVuZFBvcyIsIm9yaWdpbmFsIiwiZ2V0SXRlcmF0b3JNZXRob2QiLCIkZGVmaW5lUHJvcGVydHkiLCJyZSIsInNlYXJjaFN0cmluZyIsImRlc2NyaXB0b3IiLCJJdGVyYXRvclByb3RvdHlwZSIsIiRpdGVyQ3JlYXRlIiwiQlVHR1kiLCJyZXR1cm5UaGlzIiwiREVGQVVMVCIsIklTX1NFVCIsImdldE1ldGhvZCIsIkRFRl9WQUxVRVMiLCJWQUxVRVNfQlVHIiwiJG5hdGl2ZSIsIiRkZWZhdWx0IiwiJGVudHJpZXMiLCIkYW55TmF0aXZlIiwiVE9fU1RSSU5HIiwicG9zIiwiY2hhckNvZGVBdCIsImNoYXJBdCIsIiRleHBtMSIsImV4cG0xIiwic2lnbiIsImNvdW50Iiwic3RyIiwiY2hlY2siLCJidWdneSIsImRvY3VtZW50RWxlbWVudCIsIndrc0V4dCIsIiRTeW1ib2wiLCJBY3Rpb25UeXBlcyIsIklOSVQiLCJzdWJzdHJpbmciLCJSRVBMQUNFIiwiX3R5cGVvZiIsImlzUGxhaW5PYmplY3QiLCJjcmVhdGVTdG9yZSIsInJlZHVjZXIiLCJwcmVsb2FkZWRTdGF0ZSIsImVuaGFuY2VyIiwiY3VycmVudFJlZHVjZXIiLCJjdXJyZW50U3RhdGUiLCJjdXJyZW50TGlzdGVuZXJzIiwibmV4dExpc3RlbmVycyIsImlzRGlzcGF0Y2hpbmciLCJlbnN1cmVDYW5NdXRhdGVOZXh0TGlzdGVuZXJzIiwiYWN0aW9uIiwicmVwbGFjZVJlZHVjZXIiLCJuZXh0UmVkdWNlciIsInN5bWJvbF9vYnNlcnZhYmxlX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV8wX18iLCJvdXRlclN1YnNjcmliZSIsIm9ic2VydmVyIiwib2JzZXJ2ZVN0YXRlIiwiZ2V0VW5kZWZpbmVkU3RhdGVFcnJvck1lc3NhZ2UiLCJhY3Rpb25UeXBlIiwiY29tYmluZVJlZHVjZXJzIiwicmVkdWNlcnMiLCJyZWR1Y2VyS2V5cyIsImZpbmFsUmVkdWNlcnMiLCJmaW5hbFJlZHVjZXJLZXlzIiwic2hhcGVBc3NlcnRpb25FcnJvciIsImFzc2VydFJlZHVjZXJTaGFwZSIsImhhc0NoYW5nZWQiLCJfa2V5IiwicHJldmlvdXNTdGF0ZUZvcktleSIsIm5leHRTdGF0ZUZvcktleSIsImVycm9yTWVzc2FnZSIsImJpbmRBY3Rpb25DcmVhdG9yIiwiYWN0aW9uQ3JlYXRvciIsImJpbmRBY3Rpb25DcmVhdG9ycyIsImFjdGlvbkNyZWF0b3JzIiwiYm91bmRBY3Rpb25DcmVhdG9ycyIsImNvbXBvc2UiLCJfbGVuIiwiZnVuY3MiLCJhcHBseU1pZGRsZXdhcmUiLCJtaWRkbGV3YXJlcyIsIl9sZW4yIiwiX2tleTIiLCJfZGlzcGF0Y2giLCJtaWRkbGV3YXJlQVBJIiwiY2hhaW4iLCJtaWRkbGV3YXJlIiwicm9vdCIsIl9wb255ZmlsbF9qc19fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfMF9fIiwiX193ZWJwYWNrX2V4cG9ydHNfXyIsIkdMT0JBTCIsIkhJREUiLCJSRUJVSUxEIiwiU0hPVyIsImdldFJhbmRvbUludCIsImludGVydmFscyIsImxhYmVsIiwic2Vjb25kcyIsInRpbWVTaW5jZSIsImRhdGUiLCJEYXRlIiwiaW50ZXJ2YWwiLCJmZXRjaEFzeW5jIiwidXJsIiwic2VudCIsImFicnVwdCIsIl94MiIsIl94MyIsImNoZWNrRENFIiwiX19SRUFDVF9ERVZUT09MU19HTE9CQUxfSE9PS19fIiwiZXJyIiwicHJvcElzRW51bWVyYWJsZSIsInRlc3QxIiwidGVzdDIiLCJmcm9tQ2hhckNvZGUiLCJ0ZXN0MyIsImxldHRlciIsInNob3VsZFVzZU5hdGl2ZSIsInN5bWJvbHMiLCJ0byIsInNjYWxlIiwiaW5Mb3ciLCJpbkhpZ2giLCJvdXRMb3ciLCJvdXRIaWdoIiwiZ2V0S2V5cyIsImlzRW51bSIsImlzRW50cmllcyIsInJlcGVhdCIsIm1heExlbmd0aCIsImZpbGxTdHJpbmciLCJsZWZ0Iiwic3RyaW5nTGVuZ3RoIiwiZmlsbFN0ciIsImludE1heExlbmd0aCIsImZpbGxMZW4iLCJzdHJpbmdGaWxsZXIiLCJJU19DT05DQVRfU1BSRUFEQUJMRSIsImZsYXR0ZW5JbnRvQXJyYXkiLCJzb3VyY2VMZW4iLCJkZXB0aCIsIm1hcHBlciIsInRoaXNBcmciLCJzcHJlYWRhYmxlIiwidGFyZ2V0SW5kZXgiLCJzb3VyY2VJbmRleCIsImdPUFMiLCJSZWZsZWN0Iiwib3duS2V5cyIsImdldFN5bWJvbHMiLCJudW1iZXIiLCIkaGFzIiwidW5jYXVnaHRGcm96ZW5TdG9yZSIsIl9sIiwiVW5jYXVnaHRGcm96ZW5TdG9yZSIsImZpbmRVbmNhdWdodEZyb3plbiIsImVudHJ5IiwiZGVsZXRlIiwidWZzdG9yZSIsIkludGVybmFsTWFwIiwiZWFjaCIsIndlYWsiLCJ0bXAiLCIkV2Vha01hcCIsImZyZWV6ZSIsIl9mIiwic3Ryb25nIiwiYWRkIiwiJGl0ZXJEZWZpbmUiLCJTSVpFIiwiZ2V0RW50cnkiLCJrIiwibmV3UHJvbWlzZUNhcGFiaWxpdHkiLCJwcm9taXNlQ2FwYWJpbGl0eSIsImZsYWdzIiwiaW5jIiwiaXNSaWdodCIsInJldCIsIkVQU0lMT04iLCJFUFNJTE9OMzIiLCJNQVgzMiIsIk1JTjMyIiwiZnJvdW5kIiwiJGFicyIsIiRzaWduIiwibG9nMXAiLCJpc0Zpbml0ZSIsIm1zZyIsIiRwYXJzZUZsb2F0IiwicGFyc2VGbG9hdCIsIiR0cmltIiwiJHBhcnNlSW50IiwicGFyc2VJbnQiLCJ3cyIsImhleCIsInJhZGl4IiwidW4iLCJwYXJ0QXJncyIsImJvdW5kIiwiY29uc3RydWN0IiwiJGFzc2lnbiIsIndpbmRvd05hbWVzIiwiZ2V0V2luZG93TmFtZXMiLCJkZWZpbmVQcm9wZXJ0aWVzIiwibmFtZXMiLCJzeW1ib2xPYnNlcnZhYmxlUG9ueWZpbGwiLCJvYnNlcnZhYmxlIiwiUkVBQ1RfU1RBVElDUyIsImRlZmF1bHRQcm9wcyIsImdldERlZmF1bHRQcm9wcyIsImdldERlcml2ZWRTdGF0ZUZyb21Qcm9wcyIsIm1peGlucyIsIktOT1dOX1NUQVRJQ1MiLCJjYWxsZXIiLCJhcml0eSIsIm9iamVjdFByb3RvdHlwZSIsImhvaXN0Tm9uUmVhY3RTdGF0aWNzIiwidGFyZ2V0Q29tcG9uZW50Iiwic291cmNlQ29tcG9uZW50IiwiYmxhY2tsaXN0IiwiaW5oZXJpdGVkQ29tcG9uZW50IiwiZmFjdG9yeSIsImNyZWF0ZVRodW5rTWlkZGxld2FyZSIsImV4dHJhQXJndW1lbnQiLCJ0aHVuayIsIndpdGhFeHRyYUFyZ3VtZW50IiwiX3JlZHV4IiwiX2luZGV4IiwiaXNSZXRyaWV2aW5nRGF0YSIsImlzUmV0cmlldmluZ1Byb3BlcnR5RGF0YSIsImN1cnJlbnRQcm9wZXJ0eURhdGEiLCJpc1Byb3BlcnR5UGFuZWxPcGVuIiwiaG1yIiwibG9jYWxzIiwiX3JlYWN0UmVkdXgiLCJTaG93UHJvcGVydHlDb21wb25lbnQiLCJwcm9wZXJ0eURhdGEiLCJoaWRlUHJvcGVydHlQYW5lbCIsInRpdGxlIiwiaW1nU3JjIiwib3duZXIiLCJhcmVhIiwib25DbGljayIsIl9JbWFnZTIiLCJjb25uZWN0Iiwibm9kZUxpc3QiLCJwYXJzZUFyaWEiLCJhcmlhT2JqIiwicHJvcCIsInRpcCIsImdldENvbnRlbnQiLCJyZWdleHAiLCJjbGFzc05hbWUiLCJfcmVhY3QiLCJwbGFjZSIsImRlc2lyZWRQbGFjZSIsImVmZmVjdCIsIl9vdXRzaWRlVmVydGljYWwiLCJuZXdQbGFjZSIsIl9nZXREaW1lbnNpb25zIiwiZ2V0RGltZW5zaW9ucyIsInRpcFdpZHRoIiwidGlwSGVpZ2h0IiwiaGVpZ2h0IiwiX2dldERpbWVuc2lvbnMyIiwidGFyZ2V0V2lkdGgiLCJ0YXJnZXRIZWlnaHQiLCJfZ2V0Q3VycmVudE9mZnNldCIsImdldEN1cnJlbnRPZmZzZXQiLCJtb3VzZVgiLCJtb3VzZVkiLCJkZWZhdWx0T2Zmc2V0IiwiZ2V0RGVmYXVsdFBvc2l0aW9uIiwiX2NhbGN1bGF0ZU9mZnNldCIsImNhbGN1bGF0ZU9mZnNldCIsImV4dHJhT2Zmc2V0X1giLCJleHRyYU9mZnNldF9ZIiwid2luZG93V2lkdGgiLCJpbm5lcldpZHRoIiwid2luZG93SGVpZ2h0IiwiaW5uZXJIZWlnaHQiLCJfZ2V0UGFyZW50IiwiZ2V0UGFyZW50IiwicGFyZW50VG9wIiwicGFyZW50TGVmdCIsImdldFRpcE9mZnNldExlZnQiLCJvZmZzZXRfWCIsImdldFRpcE9mZnNldFJpZ2h0IiwiZ2V0VGlwT2Zmc2V0VG9wIiwib2Zmc2V0X1kiLCJ0IiwiZ2V0VGlwT2Zmc2V0Qm90dG9tIiwib3V0c2lkZVZlcnRpY2FsIiwib3V0c2lkZUhvcml6b250YWwiLCJvdXRzaWRlTGVmdFJlc3VsdCIsIm91dHNpZGVSaWdodFJlc3VsdCIsIl9vdXRzaWRlVmVydGljYWwyIiwib3V0c2lkZVJpZ2h0Iiwib3V0c2lkZVRvcFJlc3VsdCIsIl9vdXRzaWRlSG9yaXpvbnRhbCIsIm91dHNpZGVUb3AiLCJvdXRzaWRlQm90dG9tUmVzdWx0IiwiX291dHNpZGVIb3Jpem9udGFsMiIsIm91dHNpZGVCb3R0b20iLCJpc05ld1N0YXRlIiwibmV3U3RhdGUiLCJwb3NpdGlvbiIsInRvcCIsIl9ub2RlJGdldEJvdW5kaW5nQ2xpZSIsImdldEJvdW5kaW5nQ2xpZW50UmVjdCIsImN1cnJlbnRUYXJnZXQiLCJib3VuZGluZ0NsaWVudFJlY3QiLCJ0YXJnZXRUb3AiLCJ0YXJnZXRMZWZ0IiwiX2dldERpbWVuc2lvbnMzIiwiY2xpZW50WCIsImNsaWVudFkiLCJyaWdodCIsImJvdHRvbSIsImRpc1RvTW91c2UiLCJwYXJzZSIsImN1cnJlbnRQYXJlbnQiLCJnZXRDb21wdXRlZFN0eWxlIiwiZ2V0UHJvcGVydHlWYWx1ZSIsInBhcmVudEVsZW1lbnQiLCJiaW5kUmVtb3ZhbFRyYWNrZXIiLCJnZXRNdXRhdGlvbk9ic2VydmVyQ2xhc3MiLCJtdXRhdGlvbnMiLCJtMSIsIm11dGF0aW9uIiwibTIiLCJyZW1vdmVkTm9kZXMiLCJoaWRlVG9vbHRpcCIsImNoaWxkTGlzdCIsInN1YnRyZWUiLCJyZW1vdmFsVHJhY2tlciIsInVuYmluZFJlbW92YWxUcmFja2VyIiwiZGlzY29ubmVjdCIsIk1vek11dGF0aW9uT2JzZXJ2ZXIiLCJnZXRFZmZlY3QiLCJnZXRBdHRyaWJ1dGUiLCJpc0NhcHR1cmUiLCJkYXRhSXNDYXB0dXJlIiwiaXNDdXN0b21FdmVudCIsImVsZSIsImN1c3RvbUJpbmRMaXN0ZW5lciIsIl9zdGF0ZSIsImV2ZW50T2ZmIiwiZGF0YUV2ZW50IiwiZGF0YUV2ZW50T2ZmIiwicmVtb3ZlRXZlbnRMaXN0ZW5lciIsImN1c3RvbUxpc3RlbmVyIiwiY2hlY2tTdGF0dXMiLCJjdXN0b21VbmJpbmRMaXN0ZW5lciIsIl9zdGF0ZTIiLCJzaG93IiwiY3VycmVudEl0ZW0iLCJzdG9wUHJvcGFnYXRpb24iLCJzZXRVbnRhcmdldEl0ZW1zIiwiZ2V0VGFyZ2V0QXJyYXkiLCJzaG93VG9vbHRpcCIsInRhcmdldEFycmF5IiwiYmluZFdpbmRvd0V2ZW50cyIsInJlc2l6ZUhpZGUiLCJfY29uc3RhbnQyIiwiZ2xvYmFsSGlkZSIsImdsb2JhbFJlYnVpbGQiLCJnbG9iYWxTaG93Iiwib25XaW5kb3dSZXNpemUiLCJ1bmJpbmRXaW5kb3dFdmVudHMiLCJtb3VudCIsIl9jb25zdGFudCIsImRpc3BhdGNoR2xvYmFsRXZlbnQiLCJyZWJ1aWxkIiwidW5iaW5kTGlzdGVuZXIiLCJiaW5kTGlzdGVuZXIiLCJkZXRhaWwiLCJoYXNUYXJnZXQiLCJldmVudE5hbWUiLCJvcHRzIiwiQ3VzdG9tRXZlbnQiLCJjcmVhdGVFdmVudCIsImluaXRFdmVudCIsImRpc3BhdGNoRXZlbnQiLCJfX1dFQlBBQ0tfQU1EX0RFRklORV9SRVNVTFRfXyIsImNsYXNzTmFtZXMiLCJjbGFzc2VzIiwiYXJnVHlwZSIsIl9jbGFzcyIsIl9jbGFzczIiLCJfdGVtcCIsIl9jcmVhdGVDbGFzcyIsInByb3RvUHJvcHMiLCJzdGF0aWNQcm9wcyIsIl9pbnRlcm9wUmVxdWlyZURlZmF1bHQiLCJfcHJvcFR5cGVzMiIsIl9yZWFjdERvbTIiLCJfY2xhc3NuYW1lczIiLCJfc3RhdGljTWV0aG9kczIiLCJfd2luZG93TGlzdGVuZXIyIiwiX2N1c3RvbUV2ZW50MiIsIl9pc0NhcHR1cmUyIiwiX2dldEVmZmVjdDIiLCJfdHJhY2tSZW1vdmFsMiIsIl9nZXRQb3NpdGlvbjIiLCJfZ2V0VGlwQ29udGVudDIiLCJfYXJpYSIsIl9ub2RlTGlzdFRvQXJyYXkyIiwiX3N0eWxlMiIsIlJlYWN0VG9vbHRpcCIsIl9SZWFjdCRDb21wb25lbnQiLCJib3JkZXIiLCJleHRyYUNsYXNzIiwiZGVsYXlIaWRlIiwiZGVsYXlTaG93IiwiY3VycmVudEV2ZW50IiwiYXJpYVByb3BzIiwiaXNFbXB0eVRpcCIsImRpc2FibGUiLCJvcmlnaW5Ub29sdGlwIiwiaXNNdWx0aWxpbmUiLCJkZWxheVNob3dMb29wIiwiZGVsYXlIaWRlTG9vcCIsImludGVydmFsVXBkYXRlQ29udGVudCIsIm1ldGhvZEFycmF5IiwiaW5zZWN1cmUiLCJzZXRTdHlsZUhlYWRlciIsIm5ld0FyaWFQcm9wcyIsImNsZWFyVGltZXIiLCJyZW1vdmVTY3JvbGxMaXN0ZW5lciIsImVzY2FwZWQiLCJxdWVyeVNlbGVjdG9yQWxsIiwiX3RoaXMzIiwiX3Byb3BzMiIsImdsb2JhbEV2ZW50T2ZmIiwiaXNDYXB0dXJlTW9kZSIsInVuYmluZEJhc2ljTGlzdGVuZXIiLCJ1cGRhdGVUb29sdGlwIiwiX3RoaXM0IiwiX3Byb3BzMyIsIl9wcm9wczQiLCJwbGFjZWhvbGRlciIsImlzR2xvYmFsQ2FsbCIsIl90aGlzNSIsIl9wcm9wczUiLCJzd2l0Y2hUb1NvbGlkIiwiRm9jdXNFdmVudCIsInNjcm9sbEhpZGUiLCJjbGFzcyIsImFkZFNjcm9sbExpc3RlbmVyIiwic2V0SW50ZXJ2YWwiLCJfZ2V0Q29udGVudCIsInVwZGF0ZVBvc2l0aW9uIiwiX3RoaXM2IiwiYWZ0ZXJTaG93IiwiZ2V0VG9vbHRpcENvbnRlbnQiLCJkZWxheVRpbWUiLCJldmVudFRhcmdldCIsInVwZGF0ZVN0YXRlIiwiaXNJbnZpc2libGUiLCJjbGVhclRpbWVvdXQiLCJfdGhpczciLCJhZnRlckhpZGUiLCJyZXNldFN0YXRlIiwiaXNWaXNpYmxlIiwiX3RoaXM4IiwiX3N0YXRlMyIsImZpbmRET01Ob2RlIiwiZ2V0RWxlbWVudHNCeVRhZ05hbWUiLCJpbm5lckhUTUwiLCJjbGVhckludGVydmFsIiwiX3N0YXRlNCIsInRvb2x0aXBDbGFzcyIsInBsYWNlLXRvcCIsInBsYWNlLWJvdHRvbSIsInBsYWNlLWxlZnQiLCJwbGFjZS1yaWdodCIsInR5cGUtZGFyayIsInR5cGUtc3VjY2VzcyIsInR5cGUtd2FybmluZyIsInR5cGUtZXJyb3IiLCJ0eXBlLWluZm8iLCJ0eXBlLWxpZ2h0IiwiV3JhcHBlciIsInN1cHBvcnRlZFdyYXBwZXJzIiwiZGF0YS1pZCIsImRhbmdlcm91c2x5U2V0SW5uZXJIVE1MIiwiX19odG1sIiwiYW55IiwiYm9vbCIsIndhdGNoV2luZG93IiwiSW5wdXRDb21wb25lbnQiLCJoYW5kbGVDaGFuZ2UiLCJoYW5kbGVTdWJtaXQiLCJwcmV2ZW50RGVmYXVsdCIsIl90aGlzJHN0YXRlIiwicHJpY2VGcm9tIiwicHJpY2VUbyIsIl9yZWFjdFRvb2x0aXAyIiwib25TdWJtaXQiLCJvbkNoYW5nZSIsImRpc2FibGVkIiwiZGF0YS10aXAiLCJfaW5kZXgyIiwiTGlzdEl0ZW0iLCJoYW5kbGVDbGljayIsIl90aGlzJHByb3BzIiwic2hvd1Byb3BlcnR5UGFuZWwiLCJkZXNjcmlwdGlvbiIsImxvY2F0aW9uIiwiYmFzZVVybCIsInByb3RvY29sIiwiaG9zdCIsImN1cnJlbnREaXIiLCJwYXRobmFtZSIsImZ1bGxNYXRjaCIsIm9yaWdVcmwiLCJuZXdVcmwiLCJ1bnF1b3RlZE9yaWdVcmwiLCIkMSIsIkxpc3RDb21wb25lbnQiLCJfTGlzdEl0ZW0yIiwib3JpZ2luYWxNb2R1bGUiLCJ3ZWJwYWNrUG9seWZpbGwiLCJpbnZhcmlhbnQiLCJSZWFjdFByb3BUeXBlc1NlY3JldCIsInNoaW0iLCJwcm9wTmFtZSIsImNvbXBvbmVudE5hbWUiLCJwcm9wRnVsbE5hbWUiLCJzZWNyZXQiLCJnZXRTaGltIiwiUmVhY3RQcm9wVHlwZXMiLCJhcnJheSIsInN5bWJvbCIsImFycmF5T2YiLCJpbnN0YW5jZU9mIiwib2JqZWN0T2YiLCJvbmVPZiIsIm9uZU9mVHlwZSIsImV4YWN0IiwiY2hlY2tQcm9wVHlwZXMiLCJQcm9wVHlwZXMiLCJBcHAiLCJfU2hvd1Byb3BlcnR5Q29tcG9uZW50MiIsInJlYWN0SWNvbiIsIl9JbnB1dENvbXBvbmVudDIiLCJfTGlzdENvbXBvbmVudDIiLCJkZWZhdWx0VmlldyIsIm93bmVyRG9jdW1lbnQiLCJOb2RlIiwibm9kZVR5cGUiLCJub2RlTmFtZSIsImlzVGV4dE5vZGUiLCJjb250YWluc05vZGUiLCJvdXRlck5vZGUiLCJpbm5lck5vZGUiLCJjb250YWlucyIsImNvbXBhcmVEb2N1bWVudFBvc2l0aW9uIiwiZG9jIiwiYWN0aXZlRWxlbWVudCIsImNhblVzZURPTSIsIkV4ZWN1dGlvbkVudmlyb25tZW50IiwiY2FuVXNlV29ya2VycyIsIldvcmtlciIsImNhblVzZUV2ZW50TGlzdGVuZXJzIiwiYXR0YWNoRXZlbnQiLCJjYW5Vc2VWaWV3cG9ydCIsInNjcmVlbiIsImlzSW5Xb3JrZXIiLCJhYSIsImNhIiwiZGEiLCJlYSIsImZhIiwiaGEiLCJfY2F1Z2h0RXJyb3IiLCJfaGFzQ2F1Z2h0RXJyb3IiLCJfcmV0aHJvd0Vycm9yIiwiX2hhc1JldGhyb3dFcnJvciIsImludm9rZUd1YXJkZWRDYWxsYmFjayIsImgiLCJpbnZva2VHdWFyZGVkQ2FsbGJhY2tBbmRDYXRjaEZpcnN0RXJyb3IiLCJoYXNDYXVnaHRFcnJvciIsImNsZWFyQ2F1Z2h0RXJyb3IiLCJyZXRocm93Q2F1Z2h0RXJyb3IiLCJsYSIsIm1hIiwibmEiLCJvYSIsImV4dHJhY3RFdmVudHMiLCJldmVudFR5cGVzIiwicGEiLCJwaGFzZWRSZWdpc3RyYXRpb25OYW1lcyIsInFhIiwicmVnaXN0cmF0aW9uTmFtZSIsInJhIiwic2EiLCJkZXBlbmRlbmNpZXMiLCJ0YSIsInVhIiwidmEiLCJwbHVnaW5zIiwiZXZlbnROYW1lRGlzcGF0Y2hDb25maWdzIiwicmVnaXN0cmF0aW9uTmFtZU1vZHVsZXMiLCJyZWdpc3RyYXRpb25OYW1lRGVwZW5kZW5jaWVzIiwicG9zc2libGVSZWdpc3RyYXRpb25OYW1lcyIsImluamVjdEV2ZW50UGx1Z2luT3JkZXIiLCJpbmplY3RFdmVudFBsdWdpbnNCeU5hbWUiLCJ3YSIsInhhIiwieWEiLCJ6YSIsIkFhIiwiQmEiLCJDYSIsIkRhIiwiX2Rpc3BhdGNoTGlzdGVuZXJzIiwiX2Rpc3BhdGNoSW5zdGFuY2VzIiwiaXNQcm9wYWdhdGlvblN0b3BwZWQiLCJpc1BlcnNpc3RlbnQiLCJyZWxlYXNlIiwiRWEiLCJGYSIsIkdhIiwiSGEiLCJzdGF0ZU5vZGUiLCJJYSIsIkphIiwiS2EiLCJpbmplY3Rpb24iLCJnZXRMaXN0ZW5lciIsInJ1bkV2ZW50c0luQmF0Y2giLCJydW5FeHRyYWN0ZWRFdmVudHNJbkJhdGNoIiwiTGEiLCJNYSIsIk5hIiwiT2EiLCJQYSIsIlFhIiwicHJlY2FjaGVGaWJlck5vZGUiLCJnZXRDbG9zZXN0SW5zdGFuY2VGcm9tTm9kZSIsImdldEluc3RhbmNlRnJvbU5vZGUiLCJnZXROb2RlRnJvbUluc3RhbmNlIiwiZ2V0RmliZXJDdXJyZW50UHJvcHNGcm9tTm9kZSIsInVwZGF0ZUZpYmVyUHJvcHMiLCJyZXR1cm4iLCJSYSIsIlNhIiwiZGlzcGF0Y2hDb25maWciLCJUYSIsIl90YXJnZXRJbnN0IiwiVWEiLCJWYSIsIlhhIiwiWWEiLCJaYSIsImFsdGVybmF0ZSIsIiRhIiwiYWNjdW11bGF0ZVR3b1BoYXNlRGlzcGF0Y2hlcyIsImFjY3VtdWxhdGVUd29QaGFzZURpc3BhdGNoZXNTa2lwVGFyZ2V0IiwiYWNjdW11bGF0ZUVudGVyTGVhdmVEaXNwYXRjaGVzIiwiYWNjdW11bGF0ZURpcmVjdERpc3BhdGNoZXMiLCJhYiIsImJiIiwiYW5pbWF0aW9uZW5kIiwiYW5pbWF0aW9uaXRlcmF0aW9uIiwiYW5pbWF0aW9uc3RhcnQiLCJ0cmFuc2l0aW9uZW5kIiwiZGIiLCJlYiIsImFuaW1hdGlvbiIsInRyYW5zaXRpb24iLCJmYiIsImdiIiwiaGIiLCJpYiIsImpiIiwia2IiLCJsYiIsIl9yb290IiwiX3N0YXJ0VGV4dCIsIl9mYWxsYmFja1RleHQiLCJtYiIsIm5iIiwib2IiLCJwYiIsImV2ZW50UGhhc2UiLCJidWJibGVzIiwiY2FuY2VsYWJsZSIsInRpbWVTdGFtcCIsImRlZmF1bHRQcmV2ZW50ZWQiLCJpc1RydXN0ZWQiLCJIIiwibmF0aXZlRXZlbnQiLCJJbnRlcmZhY2UiLCJpc0RlZmF1bHRQcmV2ZW50ZWQiLCJyZXR1cm5WYWx1ZSIsInJiIiwiZXZlbnRQb29sIiwicG9wIiwic2IiLCJkZXN0cnVjdG9yIiwicWIiLCJnZXRQb29sZWQiLCJjYW5jZWxCdWJibGUiLCJwZXJzaXN0IiwiZXh0ZW5kIiwidGIiLCJ1YiIsInZiIiwid2IiLCJ4YiIsImRvY3VtZW50TW9kZSIsInliIiwiemIiLCJBYiIsIkJiIiwiYmVmb3JlSW5wdXQiLCJidWJibGVkIiwiY2FwdHVyZWQiLCJjb21wb3NpdGlvbkVuZCIsImNvbXBvc2l0aW9uU3RhcnQiLCJjb21wb3NpdGlvblVwZGF0ZSIsIkNiIiwiRGIiLCJrZXlDb2RlIiwiRWIiLCJGYiIsIkliIiwid2hpY2giLCJHYiIsImN0cmxLZXkiLCJhbHRLZXkiLCJtZXRhS2V5IiwiY2hhciIsIkhiIiwiSmIiLCJLYiIsImluamVjdEZpYmVyQ29udHJvbGxlZEhvc3RDb21wb25lbnQiLCJMYiIsIk1iIiwiTmIiLCJyZXN0b3JlQ29udHJvbGxlZFN0YXRlIiwiT2IiLCJQYiIsIlFiIiwiUmIiLCJlbnF1ZXVlU3RhdGVSZXN0b3JlIiwibmVlZHNTdGF0ZVJlc3RvcmUiLCJyZXN0b3JlU3RhdGVJZk5lZWRlZCIsIlNiIiwiVGIiLCJVYiIsIlZiIiwiV2IiLCJYYiIsImNvbG9yIiwiZGF0ZXRpbWUiLCJkYXRldGltZS1sb2NhbCIsImVtYWlsIiwibW9udGgiLCJwYXNzd29yZCIsInJhbmdlIiwic2VhcmNoIiwidGVsIiwidGV4dCIsInRpbWUiLCJ3ZWVrIiwiWWIiLCJaYiIsImNvcnJlc3BvbmRpbmdVc2VFbGVtZW50IiwiJGIiLCJhYyIsImNjIiwiX3ZhbHVlVHJhY2tlciIsImdldFZhbHVlIiwic2V0VmFsdWUiLCJzdG9wVHJhY2tpbmciLCJiYyIsImRjIiwiY2hlY2tlZCIsImVjIiwiX19TRUNSRVRfSU5URVJOQUxTX0RPX05PVF9VU0VfT1JfWU9VX1dJTExfQkVfRklSRUQiLCJSZWFjdEN1cnJlbnRPd25lciIsIkkiLCJmb3IiLCJmYyIsImdjIiwiaGMiLCJpYyIsImpjIiwibWMiLCJuYyIsIm9jIiwicGMiLCJxYyIsInJjIiwic2MiLCJ0YyIsInBlbmRpbmdQcm9wcyIsIiQkdHlwZW9mIiwidmMiLCJfZGVidWdPd25lciIsIl9kZWJ1Z1NvdXJjZSIsImZpbGVOYW1lIiwibGluZU51bWJlciIsIndjIiwieGMiLCJ5YyIsIkoiLCJhY2NlcHRzQm9vbGVhbnMiLCJhdHRyaWJ1dGVOYW1lIiwiYXR0cmlidXRlTmFtZXNwYWNlIiwibXVzdFVzZVByb3BlcnR5IiwicHJvcGVydHlOYW1lIiwiQ2MiLCJEYyIsInRvVXBwZXJDYXNlIiwiRWMiLCJBYyIsIkJjIiwiemMiLCJyZW1vdmVBdHRyaWJ1dGUiLCJzZXRBdHRyaWJ1dGVOUyIsIkZjIiwiZGVmYXVsdENoZWNrZWQiLCJkZWZhdWx0VmFsdWUiLCJfd3JhcHBlclN0YXRlIiwiaW5pdGlhbENoZWNrZWQiLCJHYyIsIkhjIiwiaW5pdGlhbFZhbHVlIiwiY29udHJvbGxlZCIsIkljIiwiSmMiLCJLYyIsIkxjIiwidGFiSW5kZXgiLCJNYyIsImNoYW5nZSIsIk5jIiwiT2MiLCJQYyIsIlFjIiwiUmMiLCJTYyIsIlRjIiwiVWMiLCJkZXRhY2hFdmVudCIsIlZjIiwiV2MiLCJYYyIsIlljIiwiWmMiLCIkYyIsIl9pc0lucHV0RXZlbnRTdXBwb3J0ZWQiLCJhZCIsImJkIiwiQWx0IiwiQ29udHJvbCIsIk1ldGEiLCJTaGlmdCIsImNkIiwiZ2V0TW9kaWZpZXJTdGF0ZSIsImRkIiwiZWQiLCJzY3JlZW5YIiwic2NyZWVuWSIsInBhZ2VYIiwicGFnZVkiLCJzaGlmdEtleSIsImJ1dHRvbiIsImJ1dHRvbnMiLCJyZWxhdGVkVGFyZ2V0IiwiZnJvbUVsZW1lbnQiLCJzcmNFbGVtZW50IiwidG9FbGVtZW50IiwiZmQiLCJwb2ludGVySWQiLCJwcmVzc3VyZSIsInRpbHRYIiwidGlsdFkiLCJwb2ludGVyVHlwZSIsImlzUHJpbWFyeSIsImdkIiwibW91c2VFbnRlciIsIm1vdXNlTGVhdmUiLCJwb2ludGVyRW50ZXIiLCJwb2ludGVyTGVhdmUiLCJoZCIsInBhcmVudFdpbmRvdyIsImVmZmVjdFRhZyIsImpkIiwia2QiLCJjaGlsZCIsInNpYmxpbmciLCJsZCIsIm5kIiwiYW5pbWF0aW9uTmFtZSIsImVsYXBzZWRUaW1lIiwicHNldWRvRWxlbWVudCIsIm9kIiwiY2xpcGJvYXJkRGF0YSIsInBkIiwicWQiLCJjaGFyQ29kZSIsInJkIiwiRXNjIiwiU3BhY2ViYXIiLCJMZWZ0IiwiVXAiLCJSaWdodCIsIkRvd24iLCJEZWwiLCJXaW4iLCJNZW51IiwiQXBwcyIsIlNjcm9sbCIsIk1velByaW50YWJsZUtleSIsInNkIiwiOCIsIjkiLCIxMiIsIjEzIiwiMTYiLCIxNyIsIjE4IiwiMTkiLCIyMCIsIjI3IiwiMzIiLCIzMyIsIjM0IiwiMzUiLCIzNiIsIjM3IiwiMzgiLCIzOSIsIjQwIiwiNDUiLCI0NiIsIjExMiIsIjExMyIsIjExNCIsIjExNSIsIjExNiIsIjExNyIsIjExOCIsIjExOSIsIjEyMCIsIjEyMSIsIjEyMiIsIjEyMyIsIjE0NCIsIjE0NSIsIjIyNCIsInRkIiwibG9jYWxlIiwidWQiLCJkYXRhVHJhbnNmZXIiLCJ2ZCIsInRvdWNoZXMiLCJ0YXJnZXRUb3VjaGVzIiwiY2hhbmdlZFRvdWNoZXMiLCJ3ZCIsInhkIiwiZGVsdGFYIiwid2hlZWxEZWx0YVgiLCJkZWx0YVkiLCJ3aGVlbERlbHRhWSIsIndoZWVsRGVsdGEiLCJkZWx0YVoiLCJkZWx0YU1vZGUiLCJ5ZCIsInpkIiwiQWQiLCJCZCIsImlzSW50ZXJhY3RpdmUiLCJDZCIsImlzSW50ZXJhY3RpdmVUb3BMZXZlbEV2ZW50VHlwZSIsIkRkIiwiRWQiLCJGZCIsInRhcmdldEluc3QiLCJhbmNlc3RvcnMiLCJjb250YWluZXJJbmZvIiwidG9wTGV2ZWxUeXBlIiwiR2QiLCJJZCIsIkwiLCJKZCIsIktkIiwiTGQiLCJNZCIsIl9lbmFibGVkIiwic2V0RW5hYmxlZCIsImlzRW5hYmxlZCIsInRyYXBCdWJibGVkRXZlbnQiLCJ0cmFwQ2FwdHVyZWRFdmVudCIsIk5kIiwiT2QiLCJQZCIsIlFkIiwiUmQiLCJTZCIsInRleHRDb250ZW50IiwiVGQiLCJjb250ZW50RWRpdGFibGUiLCJVZCIsIlZkIiwic2VsZWN0IiwiV2QiLCJYZCIsIllkIiwiWmQiLCIkZCIsInNlbGVjdGlvblN0YXJ0Iiwic2VsZWN0aW9uRW5kIiwiZ2V0U2VsZWN0aW9uIiwiYW5jaG9yTm9kZSIsImFuY2hvck9mZnNldCIsImZvY3VzTm9kZSIsImZvY3VzT2Zmc2V0IiwiYWUiLCJvblNlbGVjdCIsIlNpbXBsZUV2ZW50UGx1Z2luIiwiRW50ZXJMZWF2ZUV2ZW50UGx1Z2luIiwiQ2hhbmdlRXZlbnRQbHVnaW4iLCJTZWxlY3RFdmVudFBsdWdpbiIsIkJlZm9yZUlucHV0RXZlbnRQbHVnaW4iLCJiZSIsInBlcmZvcm1hbmNlIiwiY2UiLCJkZSIsImVlIiwiZmUiLCJnZSIsImhlIiwiaWUiLCJqZSIsImtlIiwibGUiLCJtZSIsIm5lIiwiZGlkVGltZW91dCIsInRpbWVSZW1haW5pbmciLCJvZSIsInBlIiwidGltZW91dFRpbWUiLCJzY2hlZHVsZWRDYWxsYmFjayIsImNhbGxiYWNrSWQiLCJzaGlmdCIsInJlcXVlc3RBbmltYXRpb25GcmFtZSIsInFlIiwidGltZW91dCIsInNlIiwidWUiLCJDaGlsZHJlbiIsInRlIiwidmUiLCJzZWxlY3RlZCIsImRlZmF1bHRTZWxlY3RlZCIsIndlIiwid2FzTXVsdGlwbGUiLCJtdWx0aXBsZSIsInhlIiwieWUiLCJ6ZSIsIkFlIiwiQmUiLCJtYXRobWwiLCJzdmciLCJDZSIsIkRlIiwiRWUiLCJGZSIsIm5hbWVzcGFjZVVSSSIsIk1TQXBwIiwiZXhlY1Vuc2FmZUxvY2FsRnVuY3Rpb24iLCJHZSIsImxhc3RDaGlsZCIsIm5vZGVWYWx1ZSIsIkhlIiwiYW5pbWF0aW9uSXRlcmF0aW9uQ291bnQiLCJib3JkZXJJbWFnZU91dHNldCIsImJvcmRlckltYWdlU2xpY2UiLCJib3JkZXJJbWFnZVdpZHRoIiwiYm94RmxleCIsImJveEZsZXhHcm91cCIsImJveE9yZGluYWxHcm91cCIsImNvbHVtbkNvdW50IiwiY29sdW1ucyIsImZsZXgiLCJmbGV4R3JvdyIsImZsZXhQb3NpdGl2ZSIsImZsZXhTaHJpbmsiLCJmbGV4TmVnYXRpdmUiLCJmbGV4T3JkZXIiLCJncmlkUm93IiwiZ3JpZFJvd0VuZCIsImdyaWRSb3dTcGFuIiwiZ3JpZFJvd1N0YXJ0IiwiZ3JpZENvbHVtbiIsImdyaWRDb2x1bW5FbmQiLCJncmlkQ29sdW1uU3BhbiIsImdyaWRDb2x1bW5TdGFydCIsImZvbnRXZWlnaHQiLCJsaW5lQ2xhbXAiLCJsaW5lSGVpZ2h0Iiwib3BhY2l0eSIsIm9yZGVyIiwib3JwaGFucyIsInRhYlNpemUiLCJ3aWRvd3MiLCJ6SW5kZXgiLCJ6b29tIiwiZmlsbE9wYWNpdHkiLCJmbG9vZE9wYWNpdHkiLCJzdG9wT3BhY2l0eSIsInN0cm9rZURhc2hhcnJheSIsInN0cm9rZURhc2hvZmZzZXQiLCJzdHJva2VNaXRlcmxpbWl0Iiwic3Ryb2tlT3BhY2l0eSIsInN0cm9rZVdpZHRoIiwiSWUiLCJKZSIsInNldFByb3BlcnR5IiwiS2UiLCJtZW51aXRlbSIsImJyIiwiY29sIiwiZW1iZWQiLCJociIsImltZyIsImlucHV0Iiwia2V5Z2VuIiwicGFyYW0iLCJ0cmFjayIsIndiciIsIkxlIiwiTWUiLCJOZSIsIk9lIiwiYmx1ciIsImZvY3VzIiwiUGUiLCJjcmVhdGVFbGVtZW50TlMiLCJRZSIsIlJlIiwib25jbGljayIsIlNlIiwiVGUiLCJVZSIsIlZlIiwiV2UiLCJzZXRJbml0aWFsUHJvcGVydGllcyIsImRpZmZQcm9wZXJ0aWVzIiwidXBkYXRlUHJvcGVydGllcyIsImRpZmZIeWRyYXRlZFByb3BlcnRpZXMiLCJkaWZmSHlkcmF0ZWRUZXh0Iiwid2FybkZvclVubWF0Y2hlZFRleHQiLCJ3YXJuRm9yRGVsZXRlZEh5ZHJhdGFibGVFbGVtZW50Iiwid2FybkZvckRlbGV0ZWRIeWRyYXRhYmxlVGV4dCIsIndhcm5Gb3JJbnNlcnRlZEh5ZHJhdGVkRWxlbWVudCIsIndhcm5Gb3JJbnNlcnRlZEh5ZHJhdGVkVGV4dCIsImZvcm0iLCJYZSIsIlllIiwiWmUiLCJhdXRvRm9jdXMiLCIkZSIsImFmIiwiYmYiLCJjZiIsImRmIiwiZWYiLCJTZXQiLCJmZiIsImdmIiwiaGYiLCJNIiwiTiIsImpmIiwia2YiLCJsZiIsIm1mIiwibmYiLCJfX3JlYWN0SW50ZXJuYWxNZW1vaXplZFVubWFza2VkQ2hpbGRDb250ZXh0IiwiX19yZWFjdEludGVybmFsTWVtb2l6ZWRNYXNrZWRDaGlsZENvbnRleHQiLCJwZiIsInFmIiwicmYiLCJzZiIsIl9fcmVhY3RJbnRlcm5hbE1lbW9pemVkTWVyZ2VkQ2hpbGRDb250ZXh0IiwidGYiLCJ1ZiIsIm1lbW9pemVkU3RhdGUiLCJ1cGRhdGVRdWV1ZSIsIm1lbW9pemVkUHJvcHMiLCJsYXN0RWZmZWN0IiwiZmlyc3RFZmZlY3QiLCJuZXh0RWZmZWN0IiwiZXhwaXJhdGlvblRpbWUiLCJ2ZiIsIndmIiwiaXNSZWFjdENvbXBvbmVudCIsInhmIiwieWYiLCJ6ZiIsInBlbmRpbmdDaGlsZHJlbiIsImltcGxlbWVudGF0aW9uIiwiQWYiLCJlYXJsaWVzdFBlbmRpbmdUaW1lIiwibGF0ZXN0UGVuZGluZ1RpbWUiLCJlYXJsaWVzdFN1c3BlbmRlZFRpbWUiLCJsYXRlc3RTdXNwZW5kZWRUaW1lIiwibGF0ZXN0UGluZ2VkVGltZSIsInBlbmRpbmdDb21taXRFeHBpcmF0aW9uVGltZSIsImZpbmlzaGVkV29yayIsInBlbmRpbmdDb250ZXh0IiwiaHlkcmF0ZSIsInJlbWFpbmluZ0V4cGlyYXRpb25UaW1lIiwiZmlyc3RCYXRjaCIsIm5leHRTY2hlZHVsZWRSb290IiwiQmYiLCJDZiIsIkRmIiwiRmYiLCJHZiIsIkhmIiwiSWYiLCJiYXNlU3RhdGUiLCJmaXJzdFVwZGF0ZSIsImxhc3RVcGRhdGUiLCJmaXJzdENhcHR1cmVkVXBkYXRlIiwibGFzdENhcHR1cmVkVXBkYXRlIiwiZmlyc3RDYXB0dXJlZEVmZmVjdCIsImxhc3RDYXB0dXJlZEVmZmVjdCIsIkpmIiwiS2YiLCJwYXlsb2FkIiwiY2FsbGJhY2siLCJMZiIsIk1mIiwiTmYiLCJPZiIsIlBmIiwiUWYiLCJSZiIsIlNmIiwiVGYiLCJzdGFjayIsIlVmIiwiVmYiLCJXZiIsIlhmIiwiX2NoYW5nZWRCaXRzIiwiX2N1cnJlbnRWYWx1ZSIsIllmIiwiWmYiLCIkZiIsImFnIiwiYmciLCJjZyIsImRnIiwidGFnTmFtZSIsImVnIiwiZmciLCJoZyIsImxnIiwiaXNNb3VudGVkIiwiX3JlYWN0SW50ZXJuYWxGaWJlciIsImVucXVldWVTZXRTdGF0ZSIsImlnIiwiamciLCJrZyIsImVucXVldWVSZXBsYWNlU3RhdGUiLCJlbnF1ZXVlRm9yY2VVcGRhdGUiLCJtZyIsImlzUHVyZVJlYWN0Q29tcG9uZW50IiwibmciLCJVTlNBRkVfY29tcG9uZW50V2lsbFJlY2VpdmVQcm9wcyIsIm9nIiwiZ2V0U25hcHNob3RCZWZvcmVVcGRhdGUiLCJVTlNBRkVfY29tcG9uZW50V2lsbE1vdW50IiwiY29tcG9uZW50V2lsbE1vdW50IiwicGciLCJxZyIsIl9vd25lciIsIl9zdHJpbmdSZWYiLCJyZyIsInNnIiwia2MiLCJIZCIsInUiLCJxIiwiRSIsInRnIiwidWciLCJ2ZyIsIndnIiwieGciLCJ5ZyIsInpnIiwiQWciLCJCZyIsIkNnIiwiRGciLCJRIiwiRWciLCJGZyIsIkdnIiwiSGciLCJJZyIsIktnIiwidXBkYXRlciIsIlVOU0FGRV9jb21wb25lbnRXaWxsVXBkYXRlIiwiY29tcG9uZW50V2lsbFVwZGF0ZSIsImhpZGRlbiIsIl9jYWxjdWxhdGVDaGFuZ2VkQml0cyIsIkpnIiwidW5zdGFibGVfb2JzZXJ2ZWRCaXRzIiwiTGciLCJQZyIsIlFnIiwiUmciLCJTZyIsIlRnIiwic3VwcHJlc3NSZWFjdEVycm9yTG9nZ2luZyIsIlVnIiwiVmciLCJXZyIsIlhnIiwiWWciLCJaZyIsIiRnIiwiYWgiLCJiaCIsImNoIiwiY29tcG9uZW50RGlkQ2F0Y2giLCJkaCIsImNvbXBvbmVudFN0YWNrIiwiZWgiLCJmaCIsImdoIiwiaGgiLCJpaCIsImpoIiwia2giLCJsaCIsIm1oIiwibmgiLCJvaCIsInBoIiwicWgiLCJyaCIsInNoIiwidGgiLCJ1aCIsInZoIiwid2giLCJYIiwieGgiLCJnZXREZXJpdmVkU3RhdGVGcm9tQ2F0Y2giLCJ5aCIsInpoIiwiQWgiLCJCaCIsIkNoIiwiRGgiLCJFaCIsIkZoIiwiViIsIkdoIiwiSGgiLCJZIiwiSWgiLCJKaCIsIktoIiwiTGgiLCJaIiwiTWgiLCJOaCIsIk9oIiwiUGgiLCJRaCIsIlJoIiwiU2giLCJUaCIsIlVoIiwiVmgiLCJXaCIsIl9vbkNvbXBsZXRlIiwiWGgiLCJfZXhwaXJhdGlvblRpbWUiLCJfZGVmZXIiLCJyYW5nZUNvdW50IiwiV2EiLCJmb2N1c2VkRWxlbSIsInNlbGVjdGlvblJhbmdlIiwiamEiLCJoaSIsIl9fcmVhY3RJbnRlcm5hbFNuYXBzaG90QmVmb3JlVXBkYXRlIiwieiIsImNyZWF0ZVJhbmdlIiwic2V0U3RhcnQiLCJyZW1vdmVBbGxSYW5nZXMiLCJhZGRSYW5nZSIsInNldEVuZCIsInNjcm9sbExlZnQiLCJzY3JvbGxUb3AiLCJnZyIsImxjIiwiYmEiLCJyaSIsInNpIiwiTWciLCJOZyIsInRpIiwidWMiLCJPZyIsInVpIiwiWWgiLCJaaCIsIiRoIiwiYWkiLCJiaSIsImNpIiwiZGkiLCJlaSIsImZpIiwiZmluZEZpYmVyQnlIb3N0SW5zdGFuY2UiLCJpc0Rpc2FibGVkIiwic3VwcG9ydHNGaWJlciIsImluamVjdCIsIm9uQ29tbWl0RmliZXJSb290Iiwib25Db21taXRGaWJlclVubW91bnQiLCJFZiIsImZpbmRIb3N0SW5zdGFuY2VCeUZpYmVyIiwiZ2kiLCJqaSIsIl9jYWxsYmFja3MiLCJfbmV4dCIsIl9oYXNDaGlsZHJlbiIsIl9kaWRDb21wbGV0ZSIsIl9jaGlsZHJlbiIsImtpIiwiX2RpZENvbW1pdCIsIl9vbkNvbW1pdCIsImxpIiwiX2ludGVybmFsUm9vdCIsIm1pIiwib2kiLCJfcmVhY3RSb290Q29udGFpbmVyIiwibGVnYWN5X3JlbmRlclN1YnRyZWVJbnRvQ29udGFpbmVyIiwiaGFzQXR0cmlidXRlIiwibmkiLCJwaSIsImlpIiwiY29tbWl0IiwidW5tb3VudCIsImNyZWF0ZUJhdGNoIiwicWkiLCJjcmVhdGVQb3J0YWwiLCJ1bnN0YWJsZV9yZW5kZXJTdWJ0cmVlSW50b0NvbnRhaW5lciIsInVubW91bnRDb21wb25lbnRBdE5vZGUiLCJ1bnN0YWJsZV9jcmVhdGVQb3J0YWwiLCJ1bnN0YWJsZV9iYXRjaGVkVXBkYXRlcyIsInVuc3RhYmxlX2RlZmVycmVkVXBkYXRlcyIsImZsdXNoU3luYyIsInVuc3RhYmxlX2ZsdXNoQ29udHJvbGxlZCIsIkV2ZW50UGx1Z2luSHViIiwiRXZlbnRQbHVnaW5SZWdpc3RyeSIsIkV2ZW50UHJvcGFnYXRvcnMiLCJSZWFjdENvbnRyb2xsZWRDb21wb25lbnQiLCJSZWFjdERPTUNvbXBvbmVudFRyZWUiLCJSZWFjdERPTUV2ZW50TGlzdGVuZXIiLCJ1bnN0YWJsZV9jcmVhdGVSb290IiwiYnVuZGxlVHlwZSIsInJlbmRlcmVyUGFja2FnZU5hbWUiLCJ2aSIsIndpIiwiX19zZWxmIiwiX19zb3VyY2UiLCJrZXlQcmVmaXgiLCI9IiwiOiIsImVzY2FwZSIsInRvQXJyYXkiLCJjcmVhdGVSZWYiLCJQdXJlQ29tcG9uZW50IiwiY3JlYXRlQ29udGV4dCIsIl9kZWZhdWx0VmFsdWUiLCJfY3VycmVudFZhbHVlMiIsIl9jaGFuZ2VkQml0czIiLCJDb25zdW1lciIsImZvcndhcmRSZWYiLCJTdHJpY3RNb2RlIiwidW5zdGFibGVfQXN5bmNNb2RlIiwidW5zdGFibGVfUHJvZmlsZXIiLCJjbG9uZUVsZW1lbnQiLCJjcmVhdGVGYWN0b3J5IiwiaXNWYWxpZEVsZW1lbnQiLCJyb290UmVkdWNlciIsIlJlYWN0RE9NIiwiX0FwcDIiLCJnZXRFbGVtZW50QnlJZCIsInJlZ0V4cCIsInJlcGxhY2VyIiwiJHJlIiwiT3AiLCJpdGVyYXRvclN5bWJvbCIsImFzeW5jSXRlcmF0b3JTeW1ib2wiLCJhc3luY0l0ZXJhdG9yIiwidG9TdHJpbmdUYWdTeW1ib2wiLCJpbk1vZHVsZSIsInJ1bnRpbWUiLCJHZW5TdGF0ZVN1c3BlbmRlZFN0YXJ0IiwiR2VuU3RhdGVTdXNwZW5kZWRZaWVsZCIsIkdlblN0YXRlRXhlY3V0aW5nIiwiR2VuU3RhdGVDb21wbGV0ZWQiLCJDb250aW51ZVNlbnRpbmVsIiwiZ2V0UHJvdG8iLCJOYXRpdmVJdGVyYXRvclByb3RvdHlwZSIsIkdwIiwiR2VuZXJhdG9yRnVuY3Rpb25Qcm90b3R5cGUiLCJHZW5lcmF0b3IiLCJHZW5lcmF0b3JGdW5jdGlvbiIsImlzR2VuZXJhdG9yRnVuY3Rpb24iLCJnZW5GdW4iLCJjdG9yIiwiYXdyYXAiLCJfX2F3YWl0IiwiZGVmaW5lSXRlcmF0b3JNZXRob2RzIiwiQXN5bmNJdGVyYXRvciIsImFzeW5jIiwiaW5uZXJGbiIsIm91dGVyRm4iLCJ0cnlMb2NzTGlzdCIsIkNvbnRleHQiLCJyZXNldCIsInNraXBUZW1wUmVzZXQiLCJfc2VudCIsImRlbGVnYXRlIiwidHJ5RW50cmllcyIsInJlc2V0VHJ5RW50cnkiLCJyb290UmVjb3JkIiwiY29tcGxldGlvbiIsInJ2YWwiLCJkaXNwYXRjaEV4Y2VwdGlvbiIsImV4Y2VwdGlvbiIsImhhbmRsZSIsImxvYyIsImNhdWdodCIsInJlY29yZCIsInRyeUxvYyIsImhhc0NhdGNoIiwiaGFzRmluYWxseSIsImNhdGNoTG9jIiwiZmluYWxseUxvYyIsImZpbmFsbHlFbnRyeSIsImNvbXBsZXRlIiwiYWZ0ZXJMb2MiLCJmaW5pc2giLCJjYXRjaCIsInRocm93biIsImRlbGVnYXRlWWllbGQiLCJyZXN1bHROYW1lIiwibmV4dExvYyIsInByb3RvR2VuZXJhdG9yIiwiZ2VuZXJhdG9yIiwiX2ludm9rZSIsImRvbmVSZXN1bHQiLCJkZWxlZ2F0ZVJlc3VsdCIsIm1heWJlSW52b2tlRGVsZWdhdGUiLCJ0cnlDYXRjaCIsIm1ha2VJbnZva2VNZXRob2QiLCJ1bndyYXBwZWQiLCJwcmV2aW91c1Byb21pc2UiLCJjYWxsSW52b2tlV2l0aE1ldGhvZEFuZEFyZyIsImluZm8iLCJwdXNoVHJ5RW50cnkiLCJsb2NzIiwiaXRlcmF0b3JNZXRob2QiLCJUT19TVFJJTkdfVEFHIiwiQXJyYXlWYWx1ZXMiLCJET01JdGVyYWJsZXMiLCJDU1NSdWxlTGlzdCIsIkNTU1N0eWxlRGVjbGFyYXRpb24iLCJDU1NWYWx1ZUxpc3QiLCJDbGllbnRSZWN0TGlzdCIsIkRPTVJlY3RMaXN0IiwiRE9NU3RyaW5nTGlzdCIsIkRPTVRva2VuTGlzdCIsIkRhdGFUcmFuc2Zlckl0ZW1MaXN0IiwiRmlsZUxpc3QiLCJIVE1MQWxsQ29sbGVjdGlvbiIsIkhUTUxDb2xsZWN0aW9uIiwiSFRNTEZvcm1FbGVtZW50IiwiSFRNTFNlbGVjdEVsZW1lbnQiLCJNZWRpYUxpc3QiLCJNaW1lVHlwZUFycmF5IiwiTmFtZWROb2RlTWFwIiwiTm9kZUxpc3QiLCJQYWludFJlcXVlc3RMaXN0IiwiUGx1Z2luIiwiUGx1Z2luQXJyYXkiLCJTVkdMZW5ndGhMaXN0IiwiU1ZHTnVtYmVyTGlzdCIsIlNWR1BhdGhTZWdMaXN0IiwiU1ZHUG9pbnRMaXN0IiwiU1ZHU3RyaW5nTGlzdCIsIlNWR1RyYW5zZm9ybUxpc3QiLCJTb3VyY2VCdWZmZXJMaXN0IiwiU3R5bGVTaGVldExpc3QiLCJUZXh0VHJhY2tDdWVMaXN0IiwiVGV4dFRyYWNrTGlzdCIsIlRvdWNoTGlzdCIsImNvbGxlY3Rpb25zIiwiZXhwbGljaXQiLCJDb2xsZWN0aW9uIiwiJHRhc2siLCJNU0lFIiwiYm91bmRBcmdzIiwibWljcm90YXNrIiwiT0JTRVJWQUJMRSIsImNsZWFudXBTdWJzY3JpcHRpb24iLCJjbGVhbnVwIiwiX2MiLCJzdWJzY3JpcHRpb25DbG9zZWQiLCJfbyIsImNsb3NlU3Vic2NyaXB0aW9uIiwic3Vic2NyaWJlciIsIlN1YnNjcmlwdGlvbk9ic2VydmVyIiwiX3MiLCIkT2JzZXJ2YWJsZSIsIml0ZW1zIiwiT2JzZXJ2YWJsZSIsImFzYXAiLCIkbWV0YWRhdGEiLCJ0b01ldGFLZXkiLCJvcmRpbmFyeURlZmluZU93bk1ldGFkYXRhIiwibWV0YWRhdGEiLCJtZXRhZGF0YUtleSIsIm1ldGFkYXRhVmFsdWUiLCJvcmRpbmFyeUhhc093bk1ldGFkYXRhIiwiaGFzT3duTWV0YWRhdGEiLCJvcmRpbmFyeUhhc01ldGFkYXRhIiwiaGFzTWV0YWRhdGEiLCJvcmRpbmFyeU93bk1ldGFkYXRhS2V5cyIsImdldE93bk1ldGFkYXRhS2V5cyIsIm9yZGluYXJ5R2V0T3duTWV0YWRhdGEiLCJnZXRPd25NZXRhZGF0YSIsIm9yZGluYXJ5TWV0YWRhdGFLZXlzIiwib0tleXMiLCJwS2V5cyIsImdldE1ldGFkYXRhS2V5cyIsIm9yZGluYXJ5R2V0TWV0YWRhdGEiLCJnZXRNZXRhZGF0YSIsImRlbGV0ZU1ldGFkYXRhIiwic2l6ZSIsImRlZmluZU1ldGFkYXRhIiwicGVyZm9ybSIsInRyeSIsInByb21pc2VSZXNvbHZlIiwiZmluYWxseSIsIm9uRmluYWxseSIsInNpZ25iaXQiLCJ1bXVsaCIsIiR1IiwiJHYiLCJ1MCIsInYwIiwidTEiLCJ2MSIsIkRFR19QRVJfUkFEIiwiUEkiLCJyYWRpYW5zIiwiZGVncmVlcyIsIlJBRF9QRVJfREVHIiwiaW11bGgiLCJpc3ViaCIsIngwIiwieDEiLCJ5MCIsInkxIiwiJHgwIiwiJHkwIiwiaWFkZGgiLCJmc2NhbGUiLCJjbGFtcCIsImxvd2VyIiwidXBwZXIiLCJpc0Vycm9yIiwidG9KU09OIiwiX19sb29rdXBTZXR0ZXJfXyIsIl9fbG9va3VwR2V0dGVyX18iLCJfX2RlZmluZUdldHRlcl9fIiwiJHZhbHVlcyIsImNyZWF0ZVByb3BlcnR5IiwiZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9ycyIsImdldERlc2MiLCJnZXRGbGFncyIsIlJlZ0V4cFByb3RvIiwiJFJlZ0V4cFN0cmluZ0l0ZXJhdG9yIiwiX3IiLCJtYXRjaEFsbCIsInJ4IiwibGFzdEluZGV4IiwiJHBhZCIsInBhZEVuZCIsInBhZFN0YXJ0IiwiJGF0IiwiYXQiLCJhcnJheVNwZWNpZXNDcmVhdGUiLCJmbGF0dGVuIiwiZGVwdGhBcmciLCJmbGF0TWFwIiwiJGluY2x1ZGVzIiwic2V0UHJvdG8iLCJwcm9wZXJ0eUtleSIsImV4aXN0aW5nRGVzY3JpcHRvciIsInJlY2VpdmVyIiwib3duRGVzYyIsIiRwcmV2ZW50RXh0ZW5zaW9ucyIsIiRpc0V4dGVuc2libGUiLCJFbnVtZXJhdGUiLCJlbnVtZXJhdGUiLCJkZWxldGVQcm9wZXJ0eSIsImF0dHJpYnV0ZXMiLCJyQ29uc3RydWN0IiwiTkVXX1RBUkdFVF9CVUciLCJBUkdTX0JVRyIsIlRhcmdldCIsIm5ld1RhcmdldCIsIiRhcmdzIiwickFwcGx5IiwiZkFwcGx5IiwidGhpc0FyZ3VtZW50IiwiYXJndW1lbnRzTGlzdCIsImluaXQiLCIkaXNWaWV3IiwiaXNWaWV3IiwiZmlyc3QiLCJmaW5hbCIsInZpZXdTIiwidmlld1QiLCJJbnRlcm5hbCIsIm5ld0dlbmVyaWNQcm9taXNlQ2FwYWJpbGl0eSIsIk93blByb21pc2VDYXBhYmlsaXR5IiwibmV3UHJvbWlzZUNhcGFiaWxpdHlNb2R1bGUiLCJ2ZXJzaW9ucyIsInY4IiwiJFByb21pc2UiLCJlbXB0eSIsIlVTRV9OQVRJVkUiLCJGYWtlUHJvbWlzZSIsIlByb21pc2VSZWplY3Rpb25FdmVudCIsImlzVGhlbmFibGUiLCJpc1JlamVjdCIsIl9uIiwiX3YiLCJvayIsInJlYWN0aW9uIiwiZXhpdGVkIiwiaGFuZGxlciIsImZhaWwiLCJfaCIsIm9uSGFuZGxlVW5oYW5kbGVkIiwib25VbmhhbmRsZWQiLCJ1bmhhbmRsZWQiLCJpc1VuaGFuZGxlZCIsImVtaXQiLCJvbnVuaGFuZGxlZHJlamVjdGlvbiIsInJlYXNvbiIsIl9hIiwib25yZWplY3Rpb25oYW5kbGVkIiwiJHJlamVjdCIsIl93IiwiJHJlc29sdmUiLCJleGVjdXRvciIsIm9uRnVsZmlsbGVkIiwib25SZWplY3RlZCIsImNhcGFiaWxpdHkiLCJyZW1haW5pbmciLCIkaW5kZXgiLCJhbHJlYWR5Q2FsbGVkIiwicmFjZSIsIlNQTElUIiwiJHNwbGl0IiwiX3NwbGl0IiwiJHB1c2giLCJOUENHIiwibGltaXQiLCJzZXBhcmF0b3IyIiwibGFzdExlbmd0aCIsIm91dHB1dCIsImxhc3RMYXN0SW5kZXgiLCJzcGxpdExpbWl0Iiwic2VwYXJhdG9yQ29weSIsIlNFQVJDSCIsIiRzZWFyY2giLCIkcmVwbGFjZSIsInNlYXJjaFZhbHVlIiwicmVwbGFjZVZhbHVlIiwiJG1hdGNoIiwiJGZsYWdzIiwiZGVmaW5lIiwiJFJlZ0V4cCIsInJlMSIsInJlMiIsIkNPUlJFQ1RfTkVXIiwidGlSRSIsInBpUkUiLCJmaVUiLCIkZmluZCIsImZvcmNlZCIsIk5FR0FUSVZFX1pFUk8iLCIkaW5kZXhPZiIsIiRyZWR1Y2UiLCIkZXZlcnkiLCIkc29tZSIsIiRmaWx0ZXIiLCIkZm9yRWFjaCIsIlNUUklDVCIsIiRzb3J0IiwidXBUbyIsImNsb25lZCIsImhpbnQiLCJUT19QUklNSVRJVkUiLCJEYXRlUHJvdG8iLCJnZXRUaW1lIiwiJHRvSVNPU3RyaW5nIiwidG9JU09TdHJpbmciLCJseiIsIm51bSIsImdldFVUQ0Z1bGxZZWFyIiwiZ2V0VVRDTWlsbGlzZWNvbmRzIiwiZ2V0VVRDTW9udGgiLCJnZXRVVENEYXRlIiwiZ2V0VVRDSG91cnMiLCJnZXRVVENNaW51dGVzIiwiZ2V0VVRDU2Vjb25kcyIsInB2IiwiJHN0YXJ0c1dpdGgiLCJzdGFydHNXaXRoIiwiJGVuZHNXaXRoIiwiZW5kc1dpdGgiLCJlbmRQb3NpdGlvbiIsImNvZGVQb2ludEF0IiwicG9pbnQiLCJyYXciLCJjYWxsU2l0ZSIsInRwbCIsIiRmcm9tQ29kZVBvaW50IiwiZnJvbUNvZGVQb2ludCIsImNvZGUiLCJ0cnVuYyIsInRhbmgiLCJzaW5oIiwibG9nMiIsImxvZzEwIiwiTE9HMTBFIiwiJGltdWwiLCJpbXVsIiwieG4iLCJ5biIsInhsIiwieWwiLCJoeXBvdCIsInZhbHVlMSIsInZhbHVlMiIsImRpdiIsInN1bSIsImxhcmciLCJzcXJ0IiwiY29zaCIsImNsejMyIiwiTE9HMkUiLCJjYnJ0IiwiJGF0YW5oIiwiYXRhbmgiLCIkYXNpbmgiLCJhc2luaCIsIiRhY29zaCIsImFjb3NoIiwiTnVtYmVyIiwiTUFYX1ZBTFVFIiwiTUlOX1NBRkVfSU5URUdFUiIsIk1BWF9TQUZFX0lOVEVHRVIiLCJpc0ludGVnZXIiLCJpc1NhZmVJbnRlZ2VyIiwiX2lzRmluaXRlIiwiJGZhaWxzIiwiYU51bWJlclZhbHVlIiwiJHRvUHJlY2lzaW9uIiwidG9QcmVjaXNpb24iLCJwcmVjaXNpb24iLCIkdG9GaXhlZCIsInRvRml4ZWQiLCJFUlJPUiIsIm11bHRpcGx5IiwiYzIiLCJkaXZpZGUiLCJudW1Ub1N0cmluZyIsImFjYyIsImZyYWN0aW9uRGlnaXRzIiwieDIiLCIkTnVtYmVyIiwiQlJPS0VOX0NPRiIsIlRSSU0iLCJ0b051bWJlciIsImFyZ3VtZW50IiwidGhpcmQiLCJtYXhDb2RlIiwiZGlnaXRzIiwiSEFTX0lOU1RBTkNFIiwiRnVuY3Rpb25Qcm90byIsIkZQcm90byIsIm5hbWVSRSIsIiRpc1NlYWxlZCIsIiRpc0Zyb3plbiIsIiRzZWFsIiwiJGZyZWV6ZSIsIiRnZXRQcm90b3R5cGVPZiIsIiRnZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3IiLCJ3a3NEZWZpbmUiLCJlbnVtS2V5cyIsIl9jcmVhdGUiLCJnT1BORXh0IiwiJEpTT04iLCJfc3RyaW5naWZ5IiwiSElEREVOIiwiU3ltYm9sUmVnaXN0cnkiLCJBbGxTeW1ib2xzIiwiT1BTeW1ib2xzIiwiUU9iamVjdCIsImZpbmRDaGlsZCIsInNldFN5bWJvbERlc2MiLCJwcm90b0Rlc2MiLCJzeW0iLCJpc1N5bWJvbCIsIiRkZWZpbmVQcm9wZXJ0aWVzIiwiJHByb3BlcnR5SXNFbnVtZXJhYmxlIiwiJGdldE93blByb3BlcnR5TmFtZXMiLCIkZ2V0T3duUHJvcGVydHlTeW1ib2xzIiwiSVNfT1AiLCJlczZTeW1ib2xzIiwid2VsbEtub3duU3ltYm9scyIsImtleUZvciIsInVzZVNldHRlciIsInVzZVNpbXBsZSIsIiRyZXBsYWNlciIsIl9iYWJlbFBvbHlmaWxsIiwiREVGSU5FX1BST1BFUlRZIiwiZnJlZUdsb2JhbCJdLCJtYXBwaW5ncyI6ImFBQ0EsSUFBQUEsS0FHQSxTQUFBQyxFQUFBQyxHQUdBLEdBQUFGLEVBQUFFLEdBQ0EsT0FBQUYsRUFBQUUsR0FBQUMsUUFHQSxJQUFBQyxFQUFBSixFQUFBRSxJQUNBRyxFQUFBSCxFQUNBSSxHQUFBLEVBQ0FILFlBVUEsT0FOQUksRUFBQUwsR0FBQU0sS0FBQUosRUFBQUQsUUFBQUMsSUFBQUQsUUFBQUYsR0FHQUcsRUFBQUUsR0FBQSxFQUdBRixFQUFBRCxRQUtBRixFQUFBUSxFQUFBRixFQUdBTixFQUFBUyxFQUFBVixFQUdBQyxFQUFBVSxFQUFBLFNBQUFSLEVBQUFTLEVBQUFDLEdBQ0FaLEVBQUFhLEVBQUFYLEVBQUFTLElBQ0FHLE9BQUFDLGVBQUFiLEVBQUFTLEdBQ0FLLGNBQUEsRUFDQUMsWUFBQSxFQUNB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QUNBQSxFQUFBLEtBQ0FBLEVBQUEsS0FDQUEsRUFBQSxLQUNBQSxFQUFBLEtBQ0FBLEVBQUEsS0FDQUEsRUFBQSxLQUNBQSxFQUFBLEtBQ0FBLEVBQUEsS0FDQUEsRUFBQSxLQUNBQSxFQUFBLEtBQ0FBLEVBQUEsS0FDQUEsRUFBQSxLQUNBQSxFQUFBLEtBQ0FBLEVBQUEsS0FDQUEsRUFBQSxLQUNBQSxFQUFBLEtBQ0FBLEVBQUEsS0FDQUEsRUFBQSxLQUNBQSxFQUFBLEtBQ0FBLEVBQUEsS0FDQUEsRUFBQSxLQUNBQSxFQUFBLEtBQ0FBLEVBQUEsS0FDQUEsRUFBQSxLQUNBQSxFQUFBLEtBQ0FBLEVBQUEsS0FDQUEsRUFBQSxLQUNBQSxFQUFBLEtBQ0FBLEVBQUEsS0FDQUEsRUFBQSxLQUNBQSxFQUFBLEtBQ0FBLEVBQUEsS0FDQUEsRUFBQSxLQUNBQSxFQUFBLEtBQ0FBLEVBQUEsS0FDQUEsRUFBQSxLQUNBQSxFQUFBLEtBQ0FBLEVBQUEsS0FDQUEsRUFBQSxLQUNBQSxFQUFBLEtBQ0FBLEVBQUEsS0FDQUEsRUFBQSxLQUNBQSxFQUFBLEtBQ0FBLEVBQUEsS0FDQUEsRUFBQSxLQUNBQSxFQUFBLEtBQ0FBLEVBQUEsS0FDQUEsRUFBQSxLQUNBQSxFQUFBLEtBQ0FBLEVBQUEsS0FDQUEsRUFBQSxLQUNBQSxFQUFBLEtBQ0FBLEVBQUEsS0FDQUEsRUFBQSxLQUNBQSxFQUFBLEtBQ0FBLEVBQUEsS0FDQUEsRUFBQSxLQUNBQSxFQUFBLEtBQ0FBLEVBQUEsS0FDQUEsRUFBQSxLQUNBQSxFQUFBLEtBQ0FBLEVBQUEsS0FDQUEsRUFBQSxLQUNBQSxFQUFBLEtBQ0FBLEVBQUEsS0FDQUEsRUFBQSxLQUNBQSxFQUFBLEtBQ0FBLEVBQUEsS0FDQUEsRUFBQSxLQUNBQSxFQUFBLEtBQ0FBLEVBQUEsSUFDQUEsRUFBQSxLQUNBQSxFQUFBLEtBQ0FBLEVBQUEsS0FDQUEsRUFBQSxLQUNBQSxFQUFBLEtBQ0FBLEVBQUEsS0FDQUEsRUFBQSxLQUNBQSxFQUFBLEtBQ0FBLEVBQUEsS0FDQUEsRUFBQSxLQUNBQSxFQUFBLEtBQ0FBLEVBQUEsS0FDQUEsRUFBQSxLQUNBQSxFQUFBLEtBQ0FBLEVBQUEsS0FDQUEsRUFBQSxLQUNBQSxFQUFBLEtBQ0FBLEVBQUEsS0FDQUEsRUFBQSxLQUNBQSxFQUFBLEtBQ0FBLEVBQUEsS0FDQUEsRUFBQSxLQUNBQSxFQUFBLEtBQ0FBLEVBQUEsS0FDQUEsRUFBQSxLQUNBQSxFQUFBLEtBQ0FBLEVBQUEsS0FDQUEsRUFBQSxLQUNBQSxFQUFBLEtBQ0FBLEVBQUEsS0FDQUEsRUFBQSxLQUNBQSxFQUFBLEtBQ0FBLEVBQUEsS0FDQUEsRUFBQSxLQUNBQSxFQUFBLEtBQ0FBLEVBQUEsS0FDQUEsRUFBQSxLQUNBQSxFQUFBLEtBQ0FBLEVBQUEsS0FDQUEsRUFBQSxLQUNBQSxFQUFBLEtBQ0FBLEVBQUEsS0FDQUEsRUFBQSxLQUNBQSxFQUFBLEtBQ0FBLEVBQUEsS0FDQUEsRUFBQSxLQUNBQSxFQUFBLEtBQ0FBLEVBQUEsS0FDQUEsRUFBQSxLQUNBQSxFQUFBLEtBQ0FBLEVBQUEsS0FDQUEsRUFBQSxLQUNBQSxFQUFBLEtBQ0FBLEVBQUEsS0FDQUEsRUFBQSxLQUNBQSxFQUFBLEtBQ0FBLEVBQUEsS0FDQUEsRUFBQSxLQUNBQSxFQUFBLEtBQ0FBLEVBQUEsS0FDQUEsRUFBQSxLQUNBQSxFQUFBLEtBQ0FBLEVBQUEsS0FDQUEsRUFBQSxLQUNBQSxFQUFBLEtBQ0FBLEVBQUEsS0FDQUEsRUFBQSxLQUNBQSxFQUFBLEtBQ0FBLEVBQUEsS0FDQUEsRUFBQSxLQUNBQSxFQUFBLEtBQ0FBLEVBQUEsS0FDQUEsRUFBQSxLQUNBQSxFQUFBLEtBQ0FBLEVBQUEsS0FDQUEsRUFBQSxLQUNBQSxFQUFBLEtBQ0FBLEVBQUEsS0FDQUEsRUFBQSxLQUNBQSxFQUFBLEtBQ0FBLEVBQUEsS0FDQUEsRUFBQSxLQUNBQSxFQUFBLEtBQ0FBLEVBQUEsS0FDQUEsRUFBQSxLQUNBQSxFQUFBLEtBQ0FBLEVBQUEsS0FDQUEsRUFBQSxLQUNBQSxFQUFBLEtBQ0FBLEVBQUEsS0FDQUEsRUFBQSxLQUNBQSxFQUFBLEtBQ0FBLEVBQUEsS0FDQUEsRUFBQSxLQUNBQSxFQUFBLEtBQ0FBLEVBQUEsS0FDQUcsRUFBQUQsUUFBQUYsRUFBQSwrQ0M1TEEsR0FOQUEsRUFBQSxLQUVBQSxFQUFBLEtBRUFBLEVBQUEsS0FFQTZCLEVBQUFrd0YsZUFDQSxVQUFBcnZFLE1BQUEsa0RBRUE3Z0IsRUFBQWt3RixnQkFBQSxFQUVBLElBQUFDLEVBQUEsaUJBQ0EsU0FBQW5KLEVBQUEvakYsRUFBQXpDLEVBQUFqQixHQUNBMEQsRUFBQXpDLElBQUF2QixPQUFBa3hGLEdBQUFsdEYsRUFBQXpDLEdBQ0FpUSxVQUFBLEVBQ0F0UixjQUFBLEVBQ0FJLFVBSUF5bkYsRUFBQXJqRixPQUFBL0QsVUFBQSxhQUFBb2hGLFVBQ0FnRyxFQUFBcmpGLE9BQUEvRCxVQUFBLGNBQUFtaEYsUUFFQSxnTUFBQTk4RSxNQUFBLEtBQUFxRSxRQUFBLFNBQUE5SCxNQUNBQSxJQUFBd21GLEVBQUE3OEUsTUFBQTNKLEVBQUFpQixTQUFBL0MsS0FBQXNjLFFBQUF4YSxrR0MxQkEsU0FBQVIsR0FDQSxJQUFBb3dGLEVBQUEsaUJBQUFwd0YsUUFBQWYsaUJBQUFlLEVBRUF5N0IsRUFBQSIsImZpbGUiOiJidW5kbGUuanMiLCJzb3VyY2VzQ29udGVudCI6WyIgXHQvLyBUaGUgbW9kdWxlIGNhY2hlXG4gXHR2YXIgaW5zdGFsbGVkTW9kdWxlcyA9IHt9O1xuXG4gXHQvLyBUaGUgcmVxdWlyZSBmdW5jdGlvblxuIFx0ZnVuY3Rpb24gX193ZWJwYWNrX3JlcXVpcmVfXyhtb2R1bGVJZCkge1xuXG4gXHRcdC8vIENoZWNrIGlmIG1vZHVsZSBpcyBpbiBjYWNoZVxuIFx0XHRpZihpbnN0YWxsZWRNb2R1bGVzW21vZHVsZUlkXSkge1xuIFx0XHRcdHJldHVybiBpbnN0YWxsZWRNb2R1bGVzW21vZHVsZUlkXS5leHBvcnRzO1xuIFx0XHR9XG4gXHRcdC8vIENyZWF0ZSBhIG5ldyBtb2R1bGUgKGFuZCBwdXQgaXQgaW50byB0aGUgY2FjaGUpXG4gXHRcdHZhciBtb2R1bGUgPSBpbnN0YWxsZWRNb2R1bGVzW21vZHVsZUlkXSA9IHtcbiBcdFx0XHRpOiBtb2R1bGVJZCxcbiBcdFx0XHRsOiBmYWxzZSxcbiBcdFx0XHRleHBvcnRzOiB7fVxuIFx0XHR9O1xuXG4gXHRcdC8vIEV4ZWN1dGUgdGhlIG1vZHVsZSBmdW5jdGlvblxuIFx0XHRtb2R1bGVzW21vZHVsZUlkXS5jYWxsKG1vZHVsZS5leHBvcnRzLCBtb2R1bGUsIG1vZHVsZS5leHBvcnRzLCBfX3dlYnBhY2tfcmVxdWlyZV9fKTtcblxuIFx0XHQvLyBGbGFnIHRoZSBtb2R1bGUgYXMgbG9hZGVkXG4gXHRcdG1vZHVsZS5sID0gdHJ1ZTtcblxuIFx0XHQvLyBSZXR1cm4gdGhlIGV4cG9ydHMgb2YgdGhlIG1vZHVsZVxuIFx0XHRyZXR1cm4gbW9kdWxlLmV4cG9ydHM7XG4gXHR9XG5cblxuIFx0Ly8gZXhwb3NlIHRoZSBtb2R1bGVzIG9iamVjdCAoX193ZWJwYWNrX21vZHVsZXNfXylcbiBcdF9fd2VicGFja19yZXF1aXJlX18ubSA9IG1vZHVsZXM7XG5cbiBcdC8vIGV4cG9zZSB0aGUgbW9kdWxlIGNhY2hlXG4gXHRfX3dlYnBhY2tfcmVxdWlyZV9fLmMgPSBpbnN0YWxsZWRNb2R1bGVzO1xuXG4gXHQvLyBkZWZpbmUgZ2V0dGVyIGZ1bmN0aW9uIGZvciBoYXJtb255IGV4cG9ydHNcbiBcdF9fd2VicGFja19yZXF1aXJlX18uZCA9IGZ1bmN0aW9uKGV4cG9ydHMsIG5hbWUsIGdldHRlcikge1xuIFx0XHRpZighX193ZWJwYWNrX3JlcXVpcmVfXy5vKGV4cG9ydHMsIG5hbWUpKSB7XG4gXHRcdFx0T2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIG5hbWUsIHtcbiBcdFx0XHRcdGNvbmZpZ3VyYWJsZTogZmFsc2UsXG4gXHRcdFx0XHRlbnVtZXJhYmxlOiB0cnVlLFxuIFx0XHRcdFx0Z2V0OiBnZXR0ZXJcbiBcdFx0XHR9KTtcbiBcdFx0fVxuIFx0fTtcblxuIFx0Ly8gZGVmaW5lIF9fZXNNb2R1bGUgb24gZXhwb3J0c1xuIFx0X193ZWJwYWNrX3JlcXVpcmVfXy5yID0gZnVuY3Rpb24oZXhwb3J0cykge1xuIFx0XHRPYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgJ19fZXNNb2R1bGUnLCB7IHZhbHVlOiB0cnVlIH0pO1xuIFx0fTtcblxuIFx0Ly8gZ2V0RGVmYXVsdEV4cG9ydCBmdW5jdGlvbiBmb3IgY29tcGF0aWJpbGl0eSB3aXRoIG5vbi1oYXJtb255IG1vZHVsZXNcbiBcdF9fd2VicGFja19yZXF1aXJlX18ubiA9IGZ1bmN0aW9uKG1vZHVsZSkge1xuIFx0XHR2YXIgZ2V0dGVyID0gbW9kdWxlICYmIG1vZHVsZS5fX2VzTW9kdWxlID9cbiBcdFx0XHRmdW5jdGlvbiBnZXREZWZhdWx0KCkgeyByZXR1cm4gbW9kdWxlWydkZWZhdWx0J107IH0gOlxuIFx0XHRcdGZ1bmN0aW9uIGdldE1vZHVsZUV4cG9ydHMoKSB7IHJldHVybiBtb2R1bGU7IH07XG4gXHRcdF9fd2VicGFja19yZXF1aXJlX18uZChnZXR0ZXIsICdhJywgZ2V0dGVyKTtcbiBcdFx0cmV0dXJuIGdldHRlcjtcbiBcdH07XG5cbiBcdC8vIE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbFxuIFx0X193ZWJwYWNrX3JlcXVpcmVfXy5vID0gZnVuY3Rpb24ob2JqZWN0LCBwcm9wZXJ0eSkgeyByZXR1cm4gT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsKG9iamVjdCwgcHJvcGVydHkpOyB9O1xuXG4gXHQvLyBfX3dlYnBhY2tfcHVibGljX3BhdGhfX1xuIFx0X193ZWJwYWNrX3JlcXVpcmVfXy5wID0gXCJcIjtcblxuXG4gXHQvLyBMb2FkIGVudHJ5IG1vZHVsZSBhbmQgcmV0dXJuIGV4cG9ydHNcbiBcdHJldHVybiBfX3dlYnBhY2tfcmVxdWlyZV9fKF9fd2VicGFja19yZXF1aXJlX18ucyA9IDM4OCk7XG4iLCJ2YXIgZ2xvYmFsID0gcmVxdWlyZSgnLi9fZ2xvYmFsJyk7XG52YXIgY29yZSA9IHJlcXVpcmUoJy4vX2NvcmUnKTtcbnZhciBoaWRlID0gcmVxdWlyZSgnLi9faGlkZScpO1xudmFyIHJlZGVmaW5lID0gcmVxdWlyZSgnLi9fcmVkZWZpbmUnKTtcbnZhciBjdHggPSByZXF1aXJlKCcuL19jdHgnKTtcbnZhciBQUk9UT1RZUEUgPSAncHJvdG90eXBlJztcblxudmFyICRleHBvcnQgPSBmdW5jdGlvbiAodHlwZSwgbmFtZSwgc291cmNlKSB7XG4gIHZhciBJU19GT1JDRUQgPSB0eXBlICYgJGV4cG9ydC5GO1xuICB2YXIgSVNfR0xPQkFMID0gdHlwZSAmICRleHBvcnQuRztcbiAgdmFyIElTX1NUQVRJQyA9IHR5cGUgJiAkZXhwb3J0LlM7XG4gIHZhciBJU19QUk9UTyA9IHR5cGUgJiAkZXhwb3J0LlA7XG4gIHZhciBJU19CSU5EID0gdHlwZSAmICRleHBvcnQuQjtcbiAgdmFyIHRhcmdldCA9IElTX0dMT0JBTCA/IGdsb2JhbCA6IElTX1NUQVRJQyA/IGdsb2JhbFtuYW1lXSB8fCAoZ2xvYmFsW25hbWVdID0ge30pIDogKGdsb2JhbFtuYW1lXSB8fCB7fSlbUFJPVE9UWVBFXTtcbiAgdmFyIGV4cG9ydHMgPSBJU19HTE9CQUwgPyBjb3JlIDogY29yZVtuYW1lXSB8fCAoY29yZVtuYW1lXSA9IHt9KTtcbiAgdmFyIGV4cFByb3RvID0gZXhwb3J0c1tQUk9UT1RZUEVdIHx8IChleHBvcnRzW1BST1RPVFlQRV0gPSB7fSk7XG4gIHZhciBrZXksIG93biwgb3V0LCBleHA7XG4gIGlmIChJU19HTE9CQUwpIHNvdXJjZSA9IG5hbWU7XG4gIGZvciAoa2V5IGluIHNvdXJjZSkge1xuICAgIC8vIGNvbnRhaW5zIGluIG5hdGl2ZVxuICAgIG93biA9ICFJU19GT1JDRUQgJiYgdGFyZ2V0ICYmIHRhcmdldFtrZXldICE9PSB1bmRlZmluZWQ7XG4gICAgLy8gZXhwb3J0IG5hdGl2ZSBvciBwYXNzZWRcbiAgICBvdXQgPSAob3duID8gdGFyZ2V0IDogc291cmNlKVtrZXldO1xuICAgIC8vIGJpbmQgdGltZXJzIHRvIGdsb2JhbCBmb3IgY2FsbCBmcm9tIGV4cG9ydCBjb250ZXh0XG4gICAgZXhwID0gSVNfQklORCAmJiBvd24gPyBjdHgob3V0LCBnbG9iYWwpIDogSVNfUFJPVE8gJiYgdHlwZW9mIG91dCA9PSAnZnVuY3Rpb24nID8gY3R4KEZ1bmN0aW9uLmNhbGwsIG91dCkgOiBvdXQ7XG4gICAgLy8gZXh0ZW5kIGdsb2JhbFxuICAgIGlmICh0YXJnZXQpIHJlZGVmaW5lKHRhcmdldCwga2V5LCBvdXQsIHR5cGUgJiAkZXhwb3J0LlUpO1xuICAgIC8vIGV4cG9ydFxuICAgIGlmIChleHBvcnRzW2tleV0gIT0gb3V0KSBoaWRlKGV4cG9ydHMsIGtleSwgZXhwKTtcbiAgICBpZiAoSVNfUFJPVE8gJiYgZXhwUHJvdG9ba2V5XSAhPSBvdXQpIGV4cFByb3RvW2tleV0gPSBvdXQ7XG4gIH1cbn07XG5nbG9iYWwuY29yZSA9IGNvcmU7XG4vLyB0eXBlIGJpdG1hcFxuJGV4cG9ydC5GID0gMTsgICAvLyBmb3JjZWRcbiRleHBvcnQuRyA9IDI7ICAgLy8gZ2xvYmFsXG4kZXhwb3J0LlMgPSA0OyAgIC8vIHN0YXRpY1xuJGV4cG9ydC5QID0gODsgICAvLyBwcm90b1xuJGV4cG9ydC5CID0gMTY7ICAvLyBiaW5kXG4kZXhwb3J0LlcgPSAzMjsgIC8vIHdyYXBcbiRleHBvcnQuVSA9IDY0OyAgLy8gc2FmZVxuJGV4cG9ydC5SID0gMTI4OyAvLyByZWFsIHByb3RvIG1ldGhvZCBmb3IgYGxpYnJhcnlgXG5tb2R1bGUuZXhwb3J0cyA9ICRleHBvcnQ7XG4iLCJ2YXIgaXNPYmplY3QgPSByZXF1aXJlKCcuL19pcy1vYmplY3QnKTtcbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKGl0KSB7XG4gIGlmICghaXNPYmplY3QoaXQpKSB0aHJvdyBUeXBlRXJyb3IoaXQgKyAnIGlzIG5vdCBhbiBvYmplY3QhJyk7XG4gIHJldHVybiBpdDtcbn07XG4iLCIvLyBodHRwczovL2dpdGh1Yi5jb20vemxvaXJvY2svY29yZS1qcy9pc3N1ZXMvODYjaXNzdWVjb21tZW50LTExNTc1OTAyOFxudmFyIGdsb2JhbCA9IG1vZHVsZS5leHBvcnRzID0gdHlwZW9mIHdpbmRvdyAhPSAndW5kZWZpbmVkJyAmJiB3aW5kb3cuTWF0aCA9PSBNYXRoXG4gID8gd2luZG93IDogdHlwZW9mIHNlbGYgIT0gJ3VuZGVmaW5lZCcgJiYgc2VsZi5NYXRoID09IE1hdGggPyBzZWxmXG4gIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBuby1uZXctZnVuY1xuICA6IEZ1bmN0aW9uKCdyZXR1cm4gdGhpcycpKCk7XG5pZiAodHlwZW9mIF9fZyA9PSAnbnVtYmVyJykgX19nID0gZ2xvYmFsOyAvLyBlc2xpbnQtZGlzYWJsZS1saW5lIG5vLXVuZGVmXG4iLCJtb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChleGVjKSB7XG4gIHRyeSB7XG4gICAgcmV0dXJuICEhZXhlYygpO1xuICB9IGNhdGNoIChlKSB7XG4gICAgcmV0dXJuIHRydWU7XG4gIH1cbn07XG4iLCJtb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChpdCkge1xuICByZXR1cm4gdHlwZW9mIGl0ID09PSAnb2JqZWN0JyA/IGl0ICE9PSBudWxsIDogdHlwZW9mIGl0ID09PSAnZnVuY3Rpb24nO1xufTtcbiIsInZhciBzdG9yZSA9IHJlcXVpcmUoJy4vX3NoYXJlZCcpKCd3a3MnKTtcbnZhciB1aWQgPSByZXF1aXJlKCcuL191aWQnKTtcbnZhciBTeW1ib2wgPSByZXF1aXJlKCcuL19nbG9iYWwnKS5TeW1ib2w7XG52YXIgVVNFX1NZTUJPTCA9IHR5cGVvZiBTeW1ib2wgPT0gJ2Z1bmN0aW9uJztcblxudmFyICRleHBvcnRzID0gbW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAobmFtZSkge1xuICByZXR1cm4gc3RvcmVbbmFtZV0gfHwgKHN0b3JlW25hbWVdID1cbiAgICBVU0VfU1lNQk9MICYmIFN5bWJvbFtuYW1lXSB8fCAoVVNFX1NZTUJPTCA/IFN5bWJvbCA6IHVpZCkoJ1N5bWJvbC4nICsgbmFtZSkpO1xufTtcblxuJGV4cG9ydHMuc3RvcmUgPSBzdG9yZTtcbiIsIi8vIDcuMS4xNSBUb0xlbmd0aFxudmFyIHRvSW50ZWdlciA9IHJlcXVpcmUoJy4vX3RvLWludGVnZXInKTtcbnZhciBtaW4gPSBNYXRoLm1pbjtcbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKGl0KSB7XG4gIHJldHVybiBpdCA+IDAgPyBtaW4odG9JbnRlZ2VyKGl0KSwgMHgxZmZmZmZmZmZmZmZmZikgOiAwOyAvLyBwb3coMiwgNTMpIC0gMSA9PSA5MDA3MTk5MjU0NzQwOTkxXG59O1xuIiwidmFyIGFuT2JqZWN0ID0gcmVxdWlyZSgnLi9fYW4tb2JqZWN0Jyk7XG52YXIgSUU4X0RPTV9ERUZJTkUgPSByZXF1aXJlKCcuL19pZTgtZG9tLWRlZmluZScpO1xudmFyIHRvUHJpbWl0aXZlID0gcmVxdWlyZSgnLi9fdG8tcHJpbWl0aXZlJyk7XG52YXIgZFAgPSBPYmplY3QuZGVmaW5lUHJvcGVydHk7XG5cbmV4cG9ydHMuZiA9IHJlcXVpcmUoJy4vX2Rlc2NyaXB0b3JzJykgPyBPYmplY3QuZGVmaW5lUHJvcGVydHkgOiBmdW5jdGlvbiBkZWZpbmVQcm9wZXJ0eShPLCBQLCBBdHRyaWJ1dGVzKSB7XG4gIGFuT2JqZWN0KE8pO1xuICBQID0gdG9QcmltaXRpdmUoUCwgdHJ1ZSk7XG4gIGFuT2JqZWN0KEF0dHJpYnV0ZXMpO1xuICBpZiAoSUU4X0RPTV9ERUZJTkUpIHRyeSB7XG4gICAgcmV0dXJuIGRQKE8sIFAsIEF0dHJpYnV0ZXMpO1xuICB9IGNhdGNoIChlKSB7IC8qIGVtcHR5ICovIH1cbiAgaWYgKCdnZXQnIGluIEF0dHJpYnV0ZXMgfHwgJ3NldCcgaW4gQXR0cmlidXRlcykgdGhyb3cgVHlwZUVycm9yKCdBY2Nlc3NvcnMgbm90IHN1cHBvcnRlZCEnKTtcbiAgaWYgKCd2YWx1ZScgaW4gQXR0cmlidXRlcykgT1tQXSA9IEF0dHJpYnV0ZXMudmFsdWU7XG4gIHJldHVybiBPO1xufTtcbiIsIi8vIFRoYW5rJ3MgSUU4IGZvciBoaXMgZnVubnkgZGVmaW5lUHJvcGVydHlcbm1vZHVsZS5leHBvcnRzID0gIXJlcXVpcmUoJy4vX2ZhaWxzJykoZnVuY3Rpb24gKCkge1xuICByZXR1cm4gT2JqZWN0LmRlZmluZVByb3BlcnR5KHt9LCAnYScsIHsgZ2V0OiBmdW5jdGlvbiAoKSB7IHJldHVybiA3OyB9IH0pLmEgIT0gNztcbn0pO1xuIiwiLy8gNy4xLjEzIFRvT2JqZWN0KGFyZ3VtZW50KVxudmFyIGRlZmluZWQgPSByZXF1aXJlKCcuL19kZWZpbmVkJyk7XG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChpdCkge1xuICByZXR1cm4gT2JqZWN0KGRlZmluZWQoaXQpKTtcbn07XG4iLCIndXNlIHN0cmljdCc7XG5cbmlmIChwcm9jZXNzLmVudi5OT0RFX0VOViA9PT0gJ3Byb2R1Y3Rpb24nKSB7XG4gIG1vZHVsZS5leHBvcnRzID0gcmVxdWlyZSgnLi9janMvcmVhY3QucHJvZHVjdGlvbi5taW4uanMnKTtcbn0gZWxzZSB7XG4gIG1vZHVsZS5leHBvcnRzID0gcmVxdWlyZSgnLi9janMvcmVhY3QuZGV2ZWxvcG1lbnQuanMnKTtcbn1cbiIsIm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKGl0KSB7XG4gIGlmICh0eXBlb2YgaXQgIT0gJ2Z1bmN0aW9uJykgdGhyb3cgVHlwZUVycm9yKGl0ICsgJyBpcyBub3QgYSBmdW5jdGlvbiEnKTtcbiAgcmV0dXJuIGl0O1xufTtcbiIsInZhciAkZXhwb3J0ID0gcmVxdWlyZSgnLi9fZXhwb3J0Jyk7XG52YXIgZmFpbHMgPSByZXF1aXJlKCcuL19mYWlscycpO1xudmFyIGRlZmluZWQgPSByZXF1aXJlKCcuL19kZWZpbmVkJyk7XG52YXIgcXVvdCA9IC9cIi9nO1xuLy8gQi4yLjMuMi4xIENyZWF0ZUhUTUwoc3RyaW5nLCB0YWcsIGF0dHJpYnV0ZSwgdmFsdWUpXG52YXIgY3JlYXRlSFRNTCA9IGZ1bmN0aW9uIChzdHJpbmcsIHRhZywgYXR0cmlidXRlLCB2YWx1ZSkge1xuICB2YXIgUyA9IFN0cmluZyhkZWZpbmVkKHN0cmluZykpO1xuICB2YXIgcDEgPSAnPCcgKyB0YWc7XG4gIGlmIChhdHRyaWJ1dGUgIT09ICcnKSBwMSArPSAnICcgKyBhdHRyaWJ1dGUgKyAnPVwiJyArIFN0cmluZyh2YWx1ZSkucmVwbGFjZShxdW90LCAnJnF1b3Q7JykgKyAnXCInO1xuICByZXR1cm4gcDEgKyAnPicgKyBTICsgJzwvJyArIHRhZyArICc+Jztcbn07XG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChOQU1FLCBleGVjKSB7XG4gIHZhciBPID0ge307XG4gIE9bTkFNRV0gPSBleGVjKGNyZWF0ZUhUTUwpO1xuICAkZXhwb3J0KCRleHBvcnQuUCArICRleHBvcnQuRiAqIGZhaWxzKGZ1bmN0aW9uICgpIHtcbiAgICB2YXIgdGVzdCA9ICcnW05BTUVdKCdcIicpO1xuICAgIHJldHVybiB0ZXN0ICE9PSB0ZXN0LnRvTG93ZXJDYXNlKCkgfHwgdGVzdC5zcGxpdCgnXCInKS5sZW5ndGggPiAzO1xuICB9KSwgJ1N0cmluZycsIE8pO1xufTtcbiIsInZhciBnbG9iYWwgPSByZXF1aXJlKCcuL19nbG9iYWwnKTtcbnZhciBoaWRlID0gcmVxdWlyZSgnLi9faGlkZScpO1xudmFyIGhhcyA9IHJlcXVpcmUoJy4vX2hhcycpO1xudmFyIFNSQyA9IHJlcXVpcmUoJy4vX3VpZCcpKCdzcmMnKTtcbnZhciBUT19TVFJJTkcgPSAndG9TdHJpbmcnO1xudmFyICR0b1N0cmluZyA9IEZ1bmN0aW9uW1RPX1NUUklOR107XG52YXIgVFBMID0gKCcnICsgJHRvU3RyaW5nKS5zcGxpdChUT19TVFJJTkcpO1xuXG5yZXF1aXJlKCcuL19jb3JlJykuaW5zcGVjdFNvdXJjZSA9IGZ1bmN0aW9uIChpdCkge1xuICByZXR1cm4gJHRvU3RyaW5nLmNhbGwoaXQpO1xufTtcblxuKG1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKE8sIGtleSwgdmFsLCBzYWZlKSB7XG4gIHZhciBpc0Z1bmN0aW9uID0gdHlwZW9mIHZhbCA9PSAnZnVuY3Rpb24nO1xuICBpZiAoaXNGdW5jdGlvbikgaGFzKHZhbCwgJ25hbWUnKSB8fCBoaWRlKHZhbCwgJ25hbWUnLCBrZXkpO1xuICBpZiAoT1trZXldID09PSB2YWwpIHJldHVybjtcbiAgaWYgKGlzRnVuY3Rpb24pIGhhcyh2YWwsIFNSQykgfHwgaGlkZSh2YWwsIFNSQywgT1trZXldID8gJycgKyBPW2tleV0gOiBUUEwuam9pbihTdHJpbmcoa2V5KSkpO1xuICBpZiAoTyA9PT0gZ2xvYmFsKSB7XG4gICAgT1trZXldID0gdmFsO1xuICB9IGVsc2UgaWYgKCFzYWZlKSB7XG4gICAgZGVsZXRlIE9ba2V5XTtcbiAgICBoaWRlKE8sIGtleSwgdmFsKTtcbiAgfSBlbHNlIGlmIChPW2tleV0pIHtcbiAgICBPW2tleV0gPSB2YWw7XG4gIH0gZWxzZSB7XG4gICAgaGlkZShPLCBrZXksIHZhbCk7XG4gIH1cbi8vIGFkZCBmYWtlIEZ1bmN0aW9uI3RvU3RyaW5nIGZvciBjb3JyZWN0IHdvcmsgd3JhcHBlZCBtZXRob2RzIC8gY29uc3RydWN0b3JzIHdpdGggbWV0aG9kcyBsaWtlIExvRGFzaCBpc05hdGl2ZVxufSkoRnVuY3Rpb24ucHJvdG90eXBlLCBUT19TVFJJTkcsIGZ1bmN0aW9uIHRvU3RyaW5nKCkge1xuICByZXR1cm4gdHlwZW9mIHRoaXMgPT0gJ2Z1bmN0aW9uJyAmJiB0aGlzW1NSQ10gfHwgJHRvU3RyaW5nLmNhbGwodGhpcyk7XG59KTtcbiIsInZhciBkUCA9IHJlcXVpcmUoJy4vX29iamVjdC1kcCcpO1xudmFyIGNyZWF0ZURlc2MgPSByZXF1aXJlKCcuL19wcm9wZXJ0eS1kZXNjJyk7XG5tb2R1bGUuZXhwb3J0cyA9IHJlcXVpcmUoJy4vX2Rlc2NyaXB0b3JzJykgPyBmdW5jdGlvbiAob2JqZWN0LCBrZXksIHZhbHVlKSB7XG4gIHJldHVybiBkUC5mKG9iamVjdCwga2V5LCBjcmVhdGVEZXNjKDEsIHZhbHVlKSk7XG59IDogZnVuY3Rpb24gKG9iamVjdCwga2V5LCB2YWx1ZSkge1xuICBvYmplY3Rba2V5XSA9IHZhbHVlO1xuICByZXR1cm4gb2JqZWN0O1xufTtcbiIsIi8qKlxuICogQ29weXJpZ2h0IChjKSAyMDEzLXByZXNlbnQsIEZhY2Vib29rLCBJbmMuXG4gKlxuICogVGhpcyBzb3VyY2UgY29kZSBpcyBsaWNlbnNlZCB1bmRlciB0aGUgTUlUIGxpY2Vuc2UgZm91bmQgaW4gdGhlXG4gKiBMSUNFTlNFIGZpbGUgaW4gdGhlIHJvb3QgZGlyZWN0b3J5IG9mIHRoaXMgc291cmNlIHRyZWUuXG4gKi9cblxuaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicpIHtcbiAgdmFyIFJFQUNUX0VMRU1FTlRfVFlQRSA9ICh0eXBlb2YgU3ltYm9sID09PSAnZnVuY3Rpb24nICYmXG4gICAgU3ltYm9sLmZvciAmJlxuICAgIFN5bWJvbC5mb3IoJ3JlYWN0LmVsZW1lbnQnKSkgfHxcbiAgICAweGVhYzc7XG5cbiAgdmFyIGlzVmFsaWRFbGVtZW50ID0gZnVuY3Rpb24ob2JqZWN0KSB7XG4gICAgcmV0dXJuIHR5cGVvZiBvYmplY3QgPT09ICdvYmplY3QnICYmXG4gICAgICBvYmplY3QgIT09IG51bGwgJiZcbiAgICAgIG9iamVjdC4kJHR5cGVvZiA9PT0gUkVBQ1RfRUxFTUVOVF9UWVBFO1xuICB9O1xuXG4gIC8vIEJ5IGV4cGxpY2l0bHkgdXNpbmcgYHByb3AtdHlwZXNgIHlvdSBhcmUgb3B0aW5nIGludG8gbmV3IGRldmVsb3BtZW50IGJlaGF2aW9yLlxuICAvLyBodHRwOi8vZmIubWUvcHJvcC10eXBlcy1pbi1wcm9kXG4gIHZhciB0aHJvd09uRGlyZWN0QWNjZXNzID0gdHJ1ZTtcbiAgbW9kdWxlLmV4cG9ydHMgPSByZXF1aXJlKCcuL2ZhY3RvcnlXaXRoVHlwZUNoZWNrZXJzJykoaXNWYWxpZEVsZW1lbnQsIHRocm93T25EaXJlY3RBY2Nlc3MpO1xufSBlbHNlIHtcbiAgLy8gQnkgZXhwbGljaXRseSB1c2luZyBgcHJvcC10eXBlc2AgeW91IGFyZSBvcHRpbmcgaW50byBuZXcgcHJvZHVjdGlvbiBiZWhhdmlvci5cbiAgLy8gaHR0cDovL2ZiLm1lL3Byb3AtdHlwZXMtaW4tcHJvZFxuICBtb2R1bGUuZXhwb3J0cyA9IHJlcXVpcmUoJy4vZmFjdG9yeVdpdGhUaHJvd2luZ1NoaW1zJykoKTtcbn1cbiIsIi8vIDE5LjEuMi45IC8gMTUuMi4zLjIgT2JqZWN0LmdldFByb3RvdHlwZU9mKE8pXG52YXIgaGFzID0gcmVxdWlyZSgnLi9faGFzJyk7XG52YXIgdG9PYmplY3QgPSByZXF1aXJlKCcuL190by1vYmplY3QnKTtcbnZhciBJRV9QUk9UTyA9IHJlcXVpcmUoJy4vX3NoYXJlZC1rZXknKSgnSUVfUFJPVE8nKTtcbnZhciBPYmplY3RQcm90byA9IE9iamVjdC5wcm90b3R5cGU7XG5cbm1vZHVsZS5leHBvcnRzID0gT2JqZWN0LmdldFByb3RvdHlwZU9mIHx8IGZ1bmN0aW9uIChPKSB7XG4gIE8gPSB0b09iamVjdChPKTtcbiAgaWYgKGhhcyhPLCBJRV9QUk9UTykpIHJldHVybiBPW0lFX1BST1RPXTtcbiAgaWYgKHR5cGVvZiBPLmNvbnN0cnVjdG9yID09ICdmdW5jdGlvbicgJiYgTyBpbnN0YW5jZW9mIE8uY29uc3RydWN0b3IpIHtcbiAgICByZXR1cm4gTy5jb25zdHJ1Y3Rvci5wcm90b3R5cGU7XG4gIH0gcmV0dXJuIE8gaW5zdGFuY2VvZiBPYmplY3QgPyBPYmplY3RQcm90byA6IG51bGw7XG59O1xuIiwidmFyIHBJRSA9IHJlcXVpcmUoJy4vX29iamVjdC1waWUnKTtcbnZhciBjcmVhdGVEZXNjID0gcmVxdWlyZSgnLi9fcHJvcGVydHktZGVzYycpO1xudmFyIHRvSU9iamVjdCA9IHJlcXVpcmUoJy4vX3RvLWlvYmplY3QnKTtcbnZhciB0b1ByaW1pdGl2ZSA9IHJlcXVpcmUoJy4vX3RvLXByaW1pdGl2ZScpO1xudmFyIGhhcyA9IHJlcXVpcmUoJy4vX2hhcycpO1xudmFyIElFOF9ET01fREVGSU5FID0gcmVxdWlyZSgnLi9faWU4LWRvbS1kZWZpbmUnKTtcbnZhciBnT1BEID0gT2JqZWN0LmdldE93blByb3BlcnR5RGVzY3JpcHRvcjtcblxuZXhwb3J0cy5mID0gcmVxdWlyZSgnLi9fZGVzY3JpcHRvcnMnKSA/IGdPUEQgOiBmdW5jdGlvbiBnZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3IoTywgUCkge1xuICBPID0gdG9JT2JqZWN0KE8pO1xuICBQID0gdG9QcmltaXRpdmUoUCwgdHJ1ZSk7XG4gIGlmIChJRThfRE9NX0RFRklORSkgdHJ5IHtcbiAgICByZXR1cm4gZ09QRChPLCBQKTtcbiAgfSBjYXRjaCAoZSkgeyAvKiBlbXB0eSAqLyB9XG4gIGlmIChoYXMoTywgUCkpIHJldHVybiBjcmVhdGVEZXNjKCFwSUUuZi5jYWxsKE8sIFApLCBPW1BdKTtcbn07XG4iLCIvLyB0byBpbmRleGVkIG9iamVjdCwgdG9PYmplY3Qgd2l0aCBmYWxsYmFjayBmb3Igbm9uLWFycmF5LWxpa2UgRVMzIHN0cmluZ3NcbnZhciBJT2JqZWN0ID0gcmVxdWlyZSgnLi9faW9iamVjdCcpO1xudmFyIGRlZmluZWQgPSByZXF1aXJlKCcuL19kZWZpbmVkJyk7XG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChpdCkge1xuICByZXR1cm4gSU9iamVjdChkZWZpbmVkKGl0KSk7XG59O1xuIiwidmFyIGhhc093blByb3BlcnR5ID0ge30uaGFzT3duUHJvcGVydHk7XG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChpdCwga2V5KSB7XG4gIHJldHVybiBoYXNPd25Qcm9wZXJ0eS5jYWxsKGl0LCBrZXkpO1xufTtcbiIsIid1c2Ugc3RyaWN0JztcbnZhciBmYWlscyA9IHJlcXVpcmUoJy4vX2ZhaWxzJyk7XG5cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKG1ldGhvZCwgYXJnKSB7XG4gIHJldHVybiAhIW1ldGhvZCAmJiBmYWlscyhmdW5jdGlvbiAoKSB7XG4gICAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIG5vLXVzZWxlc3MtY2FsbFxuICAgIGFyZyA/IG1ldGhvZC5jYWxsKG51bGwsIGZ1bmN0aW9uICgpIHsgLyogZW1wdHkgKi8gfSwgMSkgOiBtZXRob2QuY2FsbChudWxsKTtcbiAgfSk7XG59O1xuIiwidmFyIHRvU3RyaW5nID0ge30udG9TdHJpbmc7XG5cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKGl0KSB7XG4gIHJldHVybiB0b1N0cmluZy5jYWxsKGl0KS5zbGljZSg4LCAtMSk7XG59O1xuIiwiLy8gb3B0aW9uYWwgLyBzaW1wbGUgY29udGV4dCBiaW5kaW5nXG52YXIgYUZ1bmN0aW9uID0gcmVxdWlyZSgnLi9fYS1mdW5jdGlvbicpO1xubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAoZm4sIHRoYXQsIGxlbmd0aCkge1xuICBhRnVuY3Rpb24oZm4pO1xuICBpZiAodGhhdCA9PT0gdW5kZWZpbmVkKSByZXR1cm4gZm47XG4gIHN3aXRjaCAobGVuZ3RoKSB7XG4gICAgY2FzZSAxOiByZXR1cm4gZnVuY3Rpb24gKGEpIHtcbiAgICAgIHJldHVybiBmbi5jYWxsKHRoYXQsIGEpO1xuICAgIH07XG4gICAgY2FzZSAyOiByZXR1cm4gZnVuY3Rpb24gKGEsIGIpIHtcbiAgICAgIHJldHVybiBmbi5jYWxsKHRoYXQsIGEsIGIpO1xuICAgIH07XG4gICAgY2FzZSAzOiByZXR1cm4gZnVuY3Rpb24gKGEsIGIsIGMpIHtcbiAgICAgIHJldHVybiBmbi5jYWxsKHRoYXQsIGEsIGIsIGMpO1xuICAgIH07XG4gIH1cbiAgcmV0dXJuIGZ1bmN0aW9uICgvKiAuLi5hcmdzICovKSB7XG4gICAgcmV0dXJuIGZuLmFwcGx5KHRoYXQsIGFyZ3VtZW50cyk7XG4gIH07XG59O1xuIiwidmFyIGNvcmUgPSBtb2R1bGUuZXhwb3J0cyA9IHsgdmVyc2lvbjogJzIuNS42JyB9O1xuaWYgKHR5cGVvZiBfX2UgPT0gJ251bWJlcicpIF9fZSA9IGNvcmU7IC8vIGVzbGludC1kaXNhYmxlLWxpbmUgbm8tdW5kZWZcbiIsIi8vIDAgLT4gQXJyYXkjZm9yRWFjaFxuLy8gMSAtPiBBcnJheSNtYXBcbi8vIDIgLT4gQXJyYXkjZmlsdGVyXG4vLyAzIC0+IEFycmF5I3NvbWVcbi8vIDQgLT4gQXJyYXkjZXZlcnlcbi8vIDUgLT4gQXJyYXkjZmluZFxuLy8gNiAtPiBBcnJheSNmaW5kSW5kZXhcbnZhciBjdHggPSByZXF1aXJlKCcuL19jdHgnKTtcbnZhciBJT2JqZWN0ID0gcmVxdWlyZSgnLi9faW9iamVjdCcpO1xudmFyIHRvT2JqZWN0ID0gcmVxdWlyZSgnLi9fdG8tb2JqZWN0Jyk7XG52YXIgdG9MZW5ndGggPSByZXF1aXJlKCcuL190by1sZW5ndGgnKTtcbnZhciBhc2MgPSByZXF1aXJlKCcuL19hcnJheS1zcGVjaWVzLWNyZWF0ZScpO1xubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAoVFlQRSwgJGNyZWF0ZSkge1xuICB2YXIgSVNfTUFQID0gVFlQRSA9PSAxO1xuICB2YXIgSVNfRklMVEVSID0gVFlQRSA9PSAyO1xuICB2YXIgSVNfU09NRSA9IFRZUEUgPT0gMztcbiAgdmFyIElTX0VWRVJZID0gVFlQRSA9PSA0O1xuICB2YXIgSVNfRklORF9JTkRFWCA9IFRZUEUgPT0gNjtcbiAgdmFyIE5PX0hPTEVTID0gVFlQRSA9PSA1IHx8IElTX0ZJTkRfSU5ERVg7XG4gIHZhciBjcmVhdGUgPSAkY3JlYXRlIHx8IGFzYztcbiAgcmV0dXJuIGZ1bmN0aW9uICgkdGhpcywgY2FsbGJhY2tmbiwgdGhhdCkge1xuICAgIHZhciBPID0gdG9PYmplY3QoJHRoaXMpO1xuICAgIHZhciBzZWxmID0gSU9iamVjdChPKTtcbiAgICB2YXIgZiA9IGN0eChjYWxsYmFja2ZuLCB0aGF0LCAzKTtcbiAgICB2YXIgbGVuZ3RoID0gdG9MZW5ndGgoc2VsZi5sZW5ndGgpO1xuICAgIHZhciBpbmRleCA9IDA7XG4gICAgdmFyIHJlc3VsdCA9IElTX01BUCA/IGNyZWF0ZSgkdGhpcywgbGVuZ3RoKSA6IElTX0ZJTFRFUiA/IGNyZWF0ZSgkdGhpcywgMCkgOiB1bmRlZmluZWQ7XG4gICAgdmFyIHZhbCwgcmVzO1xuICAgIGZvciAoO2xlbmd0aCA+IGluZGV4OyBpbmRleCsrKSBpZiAoTk9fSE9MRVMgfHwgaW5kZXggaW4gc2VsZikge1xuICAgICAgdmFsID0gc2VsZltpbmRleF07XG4gICAgICByZXMgPSBmKHZhbCwgaW5kZXgsIE8pO1xuICAgICAgaWYgKFRZUEUpIHtcbiAgICAgICAgaWYgKElTX01BUCkgcmVzdWx0W2luZGV4XSA9IHJlczsgICAvLyBtYXBcbiAgICAgICAgZWxzZSBpZiAocmVzKSBzd2l0Y2ggKFRZUEUpIHtcbiAgICAgICAgICBjYXNlIDM6IHJldHVybiB0cnVlOyAgICAgICAgICAgICAvLyBzb21lXG4gICAgICAgICAgY2FzZSA1OiByZXR1cm4gdmFsOyAgICAgICAgICAgICAgLy8gZmluZFxuICAgICAgICAgIGNhc2UgNjogcmV0dXJuIGluZGV4OyAgICAgICAgICAgIC8vIGZpbmRJbmRleFxuICAgICAgICAgIGNhc2UgMjogcmVzdWx0LnB1c2godmFsKTsgICAgICAgIC8vIGZpbHRlclxuICAgICAgICB9IGVsc2UgaWYgKElTX0VWRVJZKSByZXR1cm4gZmFsc2U7IC8vIGV2ZXJ5XG4gICAgICB9XG4gICAgfVxuICAgIHJldHVybiBJU19GSU5EX0lOREVYID8gLTEgOiBJU19TT01FIHx8IElTX0VWRVJZID8gSVNfRVZFUlkgOiByZXN1bHQ7XG4gIH07XG59O1xuIiwiLy8gbW9zdCBPYmplY3QgbWV0aG9kcyBieSBFUzYgc2hvdWxkIGFjY2VwdCBwcmltaXRpdmVzXG52YXIgJGV4cG9ydCA9IHJlcXVpcmUoJy4vX2V4cG9ydCcpO1xudmFyIGNvcmUgPSByZXF1aXJlKCcuL19jb3JlJyk7XG52YXIgZmFpbHMgPSByZXF1aXJlKCcuL19mYWlscycpO1xubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAoS0VZLCBleGVjKSB7XG4gIHZhciBmbiA9IChjb3JlLk9iamVjdCB8fCB7fSlbS0VZXSB8fCBPYmplY3RbS0VZXTtcbiAgdmFyIGV4cCA9IHt9O1xuICBleHBbS0VZXSA9IGV4ZWMoZm4pO1xuICAkZXhwb3J0KCRleHBvcnQuUyArICRleHBvcnQuRiAqIGZhaWxzKGZ1bmN0aW9uICgpIHsgZm4oMSk7IH0pLCAnT2JqZWN0JywgZXhwKTtcbn07XG4iLCIvLyA3LjEuNCBUb0ludGVnZXJcbnZhciBjZWlsID0gTWF0aC5jZWlsO1xudmFyIGZsb29yID0gTWF0aC5mbG9vcjtcbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKGl0KSB7XG4gIHJldHVybiBpc05hTihpdCA9ICtpdCkgPyAwIDogKGl0ID4gMCA/IGZsb29yIDogY2VpbCkoaXQpO1xufTtcbiIsIi8vIDcuMi4xIFJlcXVpcmVPYmplY3RDb2VyY2libGUoYXJndW1lbnQpXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChpdCkge1xuICBpZiAoaXQgPT0gdW5kZWZpbmVkKSB0aHJvdyBUeXBlRXJyb3IoXCJDYW4ndCBjYWxsIG1ldGhvZCBvbiAgXCIgKyBpdCk7XG4gIHJldHVybiBpdDtcbn07XG4iLCIvLyA3LjEuMSBUb1ByaW1pdGl2ZShpbnB1dCBbLCBQcmVmZXJyZWRUeXBlXSlcbnZhciBpc09iamVjdCA9IHJlcXVpcmUoJy4vX2lzLW9iamVjdCcpO1xuLy8gaW5zdGVhZCBvZiB0aGUgRVM2IHNwZWMgdmVyc2lvbiwgd2UgZGlkbid0IGltcGxlbWVudCBAQHRvUHJpbWl0aXZlIGNhc2Vcbi8vIGFuZCB0aGUgc2Vjb25kIGFyZ3VtZW50IC0gZmxhZyAtIHByZWZlcnJlZCB0eXBlIGlzIGEgc3RyaW5nXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChpdCwgUykge1xuICBpZiAoIWlzT2JqZWN0KGl0KSkgcmV0dXJuIGl0O1xuICB2YXIgZm4sIHZhbDtcbiAgaWYgKFMgJiYgdHlwZW9mIChmbiA9IGl0LnRvU3RyaW5nKSA9PSAnZnVuY3Rpb24nICYmICFpc09iamVjdCh2YWwgPSBmbi5jYWxsKGl0KSkpIHJldHVybiB2YWw7XG4gIGlmICh0eXBlb2YgKGZuID0gaXQudmFsdWVPZikgPT0gJ2Z1bmN0aW9uJyAmJiAhaXNPYmplY3QodmFsID0gZm4uY2FsbChpdCkpKSByZXR1cm4gdmFsO1xuICBpZiAoIVMgJiYgdHlwZW9mIChmbiA9IGl0LnRvU3RyaW5nKSA9PSAnZnVuY3Rpb24nICYmICFpc09iamVjdCh2YWwgPSBmbi5jYWxsKGl0KSkpIHJldHVybiB2YWw7XG4gIHRocm93IFR5cGVFcnJvcihcIkNhbid0IGNvbnZlcnQgb2JqZWN0IHRvIHByaW1pdGl2ZSB2YWx1ZVwiKTtcbn07XG4iLCJ2YXIgTWFwID0gcmVxdWlyZSgnLi9lczYubWFwJyk7XG52YXIgJGV4cG9ydCA9IHJlcXVpcmUoJy4vX2V4cG9ydCcpO1xudmFyIHNoYXJlZCA9IHJlcXVpcmUoJy4vX3NoYXJlZCcpKCdtZXRhZGF0YScpO1xudmFyIHN0b3JlID0gc2hhcmVkLnN0b3JlIHx8IChzaGFyZWQuc3RvcmUgPSBuZXcgKHJlcXVpcmUoJy4vZXM2LndlYWstbWFwJykpKCkpO1xuXG52YXIgZ2V0T3JDcmVhdGVNZXRhZGF0YU1hcCA9IGZ1bmN0aW9uICh0YXJnZXQsIHRhcmdldEtleSwgY3JlYXRlKSB7XG4gIHZhciB0YXJnZXRNZXRhZGF0YSA9IHN0b3JlLmdldCh0YXJnZXQpO1xuICBpZiAoIXRhcmdldE1ldGFkYXRhKSB7XG4gICAgaWYgKCFjcmVhdGUpIHJldHVybiB1bmRlZmluZWQ7XG4gICAgc3RvcmUuc2V0KHRhcmdldCwgdGFyZ2V0TWV0YWRhdGEgPSBuZXcgTWFwKCkpO1xuICB9XG4gIHZhciBrZXlNZXRhZGF0YSA9IHRhcmdldE1ldGFkYXRhLmdldCh0YXJnZXRLZXkpO1xuICBpZiAoIWtleU1ldGFkYXRhKSB7XG4gICAgaWYgKCFjcmVhdGUpIHJldHVybiB1bmRlZmluZWQ7XG4gICAgdGFyZ2V0TWV0YWRhdGEuc2V0KHRhcmdldEtleSwga2V5TWV0YWRhdGEgPSBuZXcgTWFwKCkpO1xuICB9IHJldHVybiBrZXlNZXRhZGF0YTtcbn07XG52YXIgb3JkaW5hcnlIYXNPd25NZXRhZGF0YSA9IGZ1bmN0aW9uIChNZXRhZGF0YUtleSwgTywgUCkge1xuICB2YXIgbWV0YWRhdGFNYXAgPSBnZXRPckNyZWF0ZU1ldGFkYXRhTWFwKE8sIFAsIGZhbHNlKTtcbiAgcmV0dXJuIG1ldGFkYXRhTWFwID09PSB1bmRlZmluZWQgPyBmYWxzZSA6IG1ldGFkYXRhTWFwLmhhcyhNZXRhZGF0YUtleSk7XG59O1xudmFyIG9yZGluYXJ5R2V0T3duTWV0YWRhdGEgPSBmdW5jdGlvbiAoTWV0YWRhdGFLZXksIE8sIFApIHtcbiAgdmFyIG1ldGFkYXRhTWFwID0gZ2V0T3JDcmVhdGVNZXRhZGF0YU1hcChPLCBQLCBmYWxzZSk7XG4gIHJldHVybiBtZXRhZGF0YU1hcCA9PT0gdW5kZWZpbmVkID8gdW5kZWZpbmVkIDogbWV0YWRhdGFNYXAuZ2V0KE1ldGFkYXRhS2V5KTtcbn07XG52YXIgb3JkaW5hcnlEZWZpbmVPd25NZXRhZGF0YSA9IGZ1bmN0aW9uIChNZXRhZGF0YUtleSwgTWV0YWRhdGFWYWx1ZSwgTywgUCkge1xuICBnZXRPckNyZWF0ZU1ldGFkYXRhTWFwKE8sIFAsIHRydWUpLnNldChNZXRhZGF0YUtleSwgTWV0YWRhdGFWYWx1ZSk7XG59O1xudmFyIG9yZGluYXJ5T3duTWV0YWRhdGFLZXlzID0gZnVuY3Rpb24gKHRhcmdldCwgdGFyZ2V0S2V5KSB7XG4gIHZhciBtZXRhZGF0YU1hcCA9IGdldE9yQ3JlYXRlTWV0YWRhdGFNYXAodGFyZ2V0LCB0YXJnZXRLZXksIGZhbHNlKTtcbiAgdmFyIGtleXMgPSBbXTtcbiAgaWYgKG1ldGFkYXRhTWFwKSBtZXRhZGF0YU1hcC5mb3JFYWNoKGZ1bmN0aW9uIChfLCBrZXkpIHsga2V5cy5wdXNoKGtleSk7IH0pO1xuICByZXR1cm4ga2V5cztcbn07XG52YXIgdG9NZXRhS2V5ID0gZnVuY3Rpb24gKGl0KSB7XG4gIHJldHVybiBpdCA9PT0gdW5kZWZpbmVkIHx8IHR5cGVvZiBpdCA9PSAnc3ltYm9sJyA/IGl0IDogU3RyaW5nKGl0KTtcbn07XG52YXIgZXhwID0gZnVuY3Rpb24gKE8pIHtcbiAgJGV4cG9ydCgkZXhwb3J0LlMsICdSZWZsZWN0JywgTyk7XG59O1xuXG5tb2R1bGUuZXhwb3J0cyA9IHtcbiAgc3RvcmU6IHN0b3JlLFxuICBtYXA6IGdldE9yQ3JlYXRlTWV0YWRhdGFNYXAsXG4gIGhhczogb3JkaW5hcnlIYXNPd25NZXRhZGF0YSxcbiAgZ2V0OiBvcmRpbmFyeUdldE93bk1ldGFkYXRhLFxuICBzZXQ6IG9yZGluYXJ5RGVmaW5lT3duTWV0YWRhdGEsXG4gIGtleXM6IG9yZGluYXJ5T3duTWV0YWRhdGFLZXlzLFxuICBrZXk6IHRvTWV0YUtleSxcbiAgZXhwOiBleHBcbn07XG4iLCIndXNlIHN0cmljdCc7XG5pZiAocmVxdWlyZSgnLi9fZGVzY3JpcHRvcnMnKSkge1xuICB2YXIgTElCUkFSWSA9IHJlcXVpcmUoJy4vX2xpYnJhcnknKTtcbiAgdmFyIGdsb2JhbCA9IHJlcXVpcmUoJy4vX2dsb2JhbCcpO1xuICB2YXIgZmFpbHMgPSByZXF1aXJlKCcuL19mYWlscycpO1xuICB2YXIgJGV4cG9ydCA9IHJlcXVpcmUoJy4vX2V4cG9ydCcpO1xuICB2YXIgJHR5cGVkID0gcmVxdWlyZSgnLi9fdHlwZWQnKTtcbiAgdmFyICRidWZmZXIgPSByZXF1aXJlKCcuL190eXBlZC1idWZmZXInKTtcbiAgdmFyIGN0eCA9IHJlcXVpcmUoJy4vX2N0eCcpO1xuICB2YXIgYW5JbnN0YW5jZSA9IHJlcXVpcmUoJy4vX2FuLWluc3RhbmNlJyk7XG4gIHZhciBwcm9wZXJ0eURlc2MgPSByZXF1aXJlKCcuL19wcm9wZXJ0eS1kZXNjJyk7XG4gIHZhciBoaWRlID0gcmVxdWlyZSgnLi9faGlkZScpO1xuICB2YXIgcmVkZWZpbmVBbGwgPSByZXF1aXJlKCcuL19yZWRlZmluZS1hbGwnKTtcbiAgdmFyIHRvSW50ZWdlciA9IHJlcXVpcmUoJy4vX3RvLWludGVnZXInKTtcbiAgdmFyIHRvTGVuZ3RoID0gcmVxdWlyZSgnLi9fdG8tbGVuZ3RoJyk7XG4gIHZhciB0b0luZGV4ID0gcmVxdWlyZSgnLi9fdG8taW5kZXgnKTtcbiAgdmFyIHRvQWJzb2x1dGVJbmRleCA9IHJlcXVpcmUoJy4vX3RvLWFic29sdXRlLWluZGV4Jyk7XG4gIHZhciB0b1ByaW1pdGl2ZSA9IHJlcXVpcmUoJy4vX3RvLXByaW1pdGl2ZScpO1xuICB2YXIgaGFzID0gcmVxdWlyZSgnLi9faGFzJyk7XG4gIHZhciBjbGFzc29mID0gcmVxdWlyZSgnLi9fY2xhc3NvZicpO1xuICB2YXIgaXNPYmplY3QgPSByZXF1aXJlKCcuL19pcy1vYmplY3QnKTtcbiAgdmFyIHRvT2JqZWN0ID0gcmVxdWlyZSgnLi9fdG8tb2JqZWN0Jyk7XG4gIHZhciBpc0FycmF5SXRlciA9IHJlcXVpcmUoJy4vX2lzLWFycmF5LWl0ZXInKTtcbiAgdmFyIGNyZWF0ZSA9IHJlcXVpcmUoJy4vX29iamVjdC1jcmVhdGUnKTtcbiAgdmFyIGdldFByb3RvdHlwZU9mID0gcmVxdWlyZSgnLi9fb2JqZWN0LWdwbycpO1xuICB2YXIgZ09QTiA9IHJlcXVpcmUoJy4vX29iamVjdC1nb3BuJykuZjtcbiAgdmFyIGdldEl0ZXJGbiA9IHJlcXVpcmUoJy4vY29yZS5nZXQtaXRlcmF0b3ItbWV0aG9kJyk7XG4gIHZhciB1aWQgPSByZXF1aXJlKCcuL191aWQnKTtcbiAgdmFyIHdrcyA9IHJlcXVpcmUoJy4vX3drcycpO1xuICB2YXIgY3JlYXRlQXJyYXlNZXRob2QgPSByZXF1aXJlKCcuL19hcnJheS1tZXRob2RzJyk7XG4gIHZhciBjcmVhdGVBcnJheUluY2x1ZGVzID0gcmVxdWlyZSgnLi9fYXJyYXktaW5jbHVkZXMnKTtcbiAgdmFyIHNwZWNpZXNDb25zdHJ1Y3RvciA9IHJlcXVpcmUoJy4vX3NwZWNpZXMtY29uc3RydWN0b3InKTtcbiAgdmFyIEFycmF5SXRlcmF0b3JzID0gcmVxdWlyZSgnLi9lczYuYXJyYXkuaXRlcmF0b3InKTtcbiAgdmFyIEl0ZXJhdG9ycyA9IHJlcXVpcmUoJy4vX2l0ZXJhdG9ycycpO1xuICB2YXIgJGl0ZXJEZXRlY3QgPSByZXF1aXJlKCcuL19pdGVyLWRldGVjdCcpO1xuICB2YXIgc2V0U3BlY2llcyA9IHJlcXVpcmUoJy4vX3NldC1zcGVjaWVzJyk7XG4gIHZhciBhcnJheUZpbGwgPSByZXF1aXJlKCcuL19hcnJheS1maWxsJyk7XG4gIHZhciBhcnJheUNvcHlXaXRoaW4gPSByZXF1aXJlKCcuL19hcnJheS1jb3B5LXdpdGhpbicpO1xuICB2YXIgJERQID0gcmVxdWlyZSgnLi9fb2JqZWN0LWRwJyk7XG4gIHZhciAkR09QRCA9IHJlcXVpcmUoJy4vX29iamVjdC1nb3BkJyk7XG4gIHZhciBkUCA9ICREUC5mO1xuICB2YXIgZ09QRCA9ICRHT1BELmY7XG4gIHZhciBSYW5nZUVycm9yID0gZ2xvYmFsLlJhbmdlRXJyb3I7XG4gIHZhciBUeXBlRXJyb3IgPSBnbG9iYWwuVHlwZUVycm9yO1xuICB2YXIgVWludDhBcnJheSA9IGdsb2JhbC5VaW50OEFycmF5O1xuICB2YXIgQVJSQVlfQlVGRkVSID0gJ0FycmF5QnVmZmVyJztcbiAgdmFyIFNIQVJFRF9CVUZGRVIgPSAnU2hhcmVkJyArIEFSUkFZX0JVRkZFUjtcbiAgdmFyIEJZVEVTX1BFUl9FTEVNRU5UID0gJ0JZVEVTX1BFUl9FTEVNRU5UJztcbiAgdmFyIFBST1RPVFlQRSA9ICdwcm90b3R5cGUnO1xuICB2YXIgQXJyYXlQcm90byA9IEFycmF5W1BST1RPVFlQRV07XG4gIHZhciAkQXJyYXlCdWZmZXIgPSAkYnVmZmVyLkFycmF5QnVmZmVyO1xuICB2YXIgJERhdGFWaWV3ID0gJGJ1ZmZlci5EYXRhVmlldztcbiAgdmFyIGFycmF5Rm9yRWFjaCA9IGNyZWF0ZUFycmF5TWV0aG9kKDApO1xuICB2YXIgYXJyYXlGaWx0ZXIgPSBjcmVhdGVBcnJheU1ldGhvZCgyKTtcbiAgdmFyIGFycmF5U29tZSA9IGNyZWF0ZUFycmF5TWV0aG9kKDMpO1xuICB2YXIgYXJyYXlFdmVyeSA9IGNyZWF0ZUFycmF5TWV0aG9kKDQpO1xuICB2YXIgYXJyYXlGaW5kID0gY3JlYXRlQXJyYXlNZXRob2QoNSk7XG4gIHZhciBhcnJheUZpbmRJbmRleCA9IGNyZWF0ZUFycmF5TWV0aG9kKDYpO1xuICB2YXIgYXJyYXlJbmNsdWRlcyA9IGNyZWF0ZUFycmF5SW5jbHVkZXModHJ1ZSk7XG4gIHZhciBhcnJheUluZGV4T2YgPSBjcmVhdGVBcnJheUluY2x1ZGVzKGZhbHNlKTtcbiAgdmFyIGFycmF5VmFsdWVzID0gQXJyYXlJdGVyYXRvcnMudmFsdWVzO1xuICB2YXIgYXJyYXlLZXlzID0gQXJyYXlJdGVyYXRvcnMua2V5cztcbiAgdmFyIGFycmF5RW50cmllcyA9IEFycmF5SXRlcmF0b3JzLmVudHJpZXM7XG4gIHZhciBhcnJheUxhc3RJbmRleE9mID0gQXJyYXlQcm90by5sYXN0SW5kZXhPZjtcbiAgdmFyIGFycmF5UmVkdWNlID0gQXJyYXlQcm90by5yZWR1Y2U7XG4gIHZhciBhcnJheVJlZHVjZVJpZ2h0ID0gQXJyYXlQcm90by5yZWR1Y2VSaWdodDtcbiAgdmFyIGFycmF5Sm9pbiA9IEFycmF5UHJvdG8uam9pbjtcbiAgdmFyIGFycmF5U29ydCA9IEFycmF5UHJvdG8uc29ydDtcbiAgdmFyIGFycmF5U2xpY2UgPSBBcnJheVByb3RvLnNsaWNlO1xuICB2YXIgYXJyYXlUb1N0cmluZyA9IEFycmF5UHJvdG8udG9TdHJpbmc7XG4gIHZhciBhcnJheVRvTG9jYWxlU3RyaW5nID0gQXJyYXlQcm90by50b0xvY2FsZVN0cmluZztcbiAgdmFyIElURVJBVE9SID0gd2tzKCdpdGVyYXRvcicpO1xuICB2YXIgVEFHID0gd2tzKCd0b1N0cmluZ1RhZycpO1xuICB2YXIgVFlQRURfQ09OU1RSVUNUT1IgPSB1aWQoJ3R5cGVkX2NvbnN0cnVjdG9yJyk7XG4gIHZhciBERUZfQ09OU1RSVUNUT1IgPSB1aWQoJ2RlZl9jb25zdHJ1Y3RvcicpO1xuICB2YXIgQUxMX0NPTlNUUlVDVE9SUyA9ICR0eXBlZC5DT05TVFI7XG4gIHZhciBUWVBFRF9BUlJBWSA9ICR0eXBlZC5UWVBFRDtcbiAgdmFyIFZJRVcgPSAkdHlwZWQuVklFVztcbiAgdmFyIFdST05HX0xFTkdUSCA9ICdXcm9uZyBsZW5ndGghJztcblxuICB2YXIgJG1hcCA9IGNyZWF0ZUFycmF5TWV0aG9kKDEsIGZ1bmN0aW9uIChPLCBsZW5ndGgpIHtcbiAgICByZXR1cm4gYWxsb2NhdGUoc3BlY2llc0NvbnN0cnVjdG9yKE8sIE9bREVGX0NPTlNUUlVDVE9SXSksIGxlbmd0aCk7XG4gIH0pO1xuXG4gIHZhciBMSVRUTEVfRU5ESUFOID0gZmFpbHMoZnVuY3Rpb24gKCkge1xuICAgIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBuby11bmRlZlxuICAgIHJldHVybiBuZXcgVWludDhBcnJheShuZXcgVWludDE2QXJyYXkoWzFdKS5idWZmZXIpWzBdID09PSAxO1xuICB9KTtcblxuICB2YXIgRk9SQ0VEX1NFVCA9ICEhVWludDhBcnJheSAmJiAhIVVpbnQ4QXJyYXlbUFJPVE9UWVBFXS5zZXQgJiYgZmFpbHMoZnVuY3Rpb24gKCkge1xuICAgIG5ldyBVaW50OEFycmF5KDEpLnNldCh7fSk7XG4gIH0pO1xuXG4gIHZhciB0b09mZnNldCA9IGZ1bmN0aW9uIChpdCwgQllURVMpIHtcbiAgICB2YXIgb2Zmc2V0ID0gdG9JbnRlZ2VyKGl0KTtcbiAgICBpZiAob2Zmc2V0IDwgMCB8fCBvZmZzZXQgJSBCWVRFUykgdGhyb3cgUmFuZ2VFcnJvcignV3Jvbmcgb2Zmc2V0IScpO1xuICAgIHJldHVybiBvZmZzZXQ7XG4gIH07XG5cbiAgdmFyIHZhbGlkYXRlID0gZnVuY3Rpb24gKGl0KSB7XG4gICAgaWYgKGlzT2JqZWN0KGl0KSAmJiBUWVBFRF9BUlJBWSBpbiBpdCkgcmV0dXJuIGl0O1xuICAgIHRocm93IFR5cGVFcnJvcihpdCArICcgaXMgbm90IGEgdHlwZWQgYXJyYXkhJyk7XG4gIH07XG5cbiAgdmFyIGFsbG9jYXRlID0gZnVuY3Rpb24gKEMsIGxlbmd0aCkge1xuICAgIGlmICghKGlzT2JqZWN0KEMpICYmIFRZUEVEX0NPTlNUUlVDVE9SIGluIEMpKSB7XG4gICAgICB0aHJvdyBUeXBlRXJyb3IoJ0l0IGlzIG5vdCBhIHR5cGVkIGFycmF5IGNvbnN0cnVjdG9yIScpO1xuICAgIH0gcmV0dXJuIG5ldyBDKGxlbmd0aCk7XG4gIH07XG5cbiAgdmFyIHNwZWNpZXNGcm9tTGlzdCA9IGZ1bmN0aW9uIChPLCBsaXN0KSB7XG4gICAgcmV0dXJuIGZyb21MaXN0KHNwZWNpZXNDb25zdHJ1Y3RvcihPLCBPW0RFRl9DT05TVFJVQ1RPUl0pLCBsaXN0KTtcbiAgfTtcblxuICB2YXIgZnJvbUxpc3QgPSBmdW5jdGlvbiAoQywgbGlzdCkge1xuICAgIHZhciBpbmRleCA9IDA7XG4gICAgdmFyIGxlbmd0aCA9IGxpc3QubGVuZ3RoO1xuICAgIHZhciByZXN1bHQgPSBhbGxvY2F0ZShDLCBsZW5ndGgpO1xuICAgIHdoaWxlIChsZW5ndGggPiBpbmRleCkgcmVzdWx0W2luZGV4XSA9IGxpc3RbaW5kZXgrK107XG4gICAgcmV0dXJuIHJlc3VsdDtcbiAgfTtcblxuICB2YXIgYWRkR2V0dGVyID0gZnVuY3Rpb24gKGl0LCBrZXksIGludGVybmFsKSB7XG4gICAgZFAoaXQsIGtleSwgeyBnZXQ6IGZ1bmN0aW9uICgpIHsgcmV0dXJuIHRoaXMuX2RbaW50ZXJuYWxdOyB9IH0pO1xuICB9O1xuXG4gIHZhciAkZnJvbSA9IGZ1bmN0aW9uIGZyb20oc291cmNlIC8qICwgbWFwZm4sIHRoaXNBcmcgKi8pIHtcbiAgICB2YXIgTyA9IHRvT2JqZWN0KHNvdXJjZSk7XG4gICAgdmFyIGFMZW4gPSBhcmd1bWVudHMubGVuZ3RoO1xuICAgIHZhciBtYXBmbiA9IGFMZW4gPiAxID8gYXJndW1lbnRzWzFdIDogdW5kZWZpbmVkO1xuICAgIHZhciBtYXBwaW5nID0gbWFwZm4gIT09IHVuZGVmaW5lZDtcbiAgICB2YXIgaXRlckZuID0gZ2V0SXRlckZuKE8pO1xuICAgIHZhciBpLCBsZW5ndGgsIHZhbHVlcywgcmVzdWx0LCBzdGVwLCBpdGVyYXRvcjtcbiAgICBpZiAoaXRlckZuICE9IHVuZGVmaW5lZCAmJiAhaXNBcnJheUl0ZXIoaXRlckZuKSkge1xuICAgICAgZm9yIChpdGVyYXRvciA9IGl0ZXJGbi5jYWxsKE8pLCB2YWx1ZXMgPSBbXSwgaSA9IDA7ICEoc3RlcCA9IGl0ZXJhdG9yLm5leHQoKSkuZG9uZTsgaSsrKSB7XG4gICAgICAgIHZhbHVlcy5wdXNoKHN0ZXAudmFsdWUpO1xuICAgICAgfSBPID0gdmFsdWVzO1xuICAgIH1cbiAgICBpZiAobWFwcGluZyAmJiBhTGVuID4gMikgbWFwZm4gPSBjdHgobWFwZm4sIGFyZ3VtZW50c1syXSwgMik7XG4gICAgZm9yIChpID0gMCwgbGVuZ3RoID0gdG9MZW5ndGgoTy5sZW5ndGgpLCByZXN1bHQgPSBhbGxvY2F0ZSh0aGlzLCBsZW5ndGgpOyBsZW5ndGggPiBpOyBpKyspIHtcbiAgICAgIHJlc3VsdFtpXSA9IG1hcHBpbmcgPyBtYXBmbihPW2ldLCBpKSA6IE9baV07XG4gICAgfVxuICAgIHJldHVybiByZXN1bHQ7XG4gIH07XG5cbiAgdmFyICRvZiA9IGZ1bmN0aW9uIG9mKC8qIC4uLml0ZW1zICovKSB7XG4gICAgdmFyIGluZGV4ID0gMDtcbiAgICB2YXIgbGVuZ3RoID0gYXJndW1lbnRzLmxlbmd0aDtcbiAgICB2YXIgcmVzdWx0ID0gYWxsb2NhdGUodGhpcywgbGVuZ3RoKTtcbiAgICB3aGlsZSAobGVuZ3RoID4gaW5kZXgpIHJlc3VsdFtpbmRleF0gPSBhcmd1bWVudHNbaW5kZXgrK107XG4gICAgcmV0dXJuIHJlc3VsdDtcbiAgfTtcblxuICAvLyBpT1MgU2FmYXJpIDYueCBmYWlscyBoZXJlXG4gIHZhciBUT19MT0NBTEVfQlVHID0gISFVaW50OEFycmF5ICYmIGZhaWxzKGZ1bmN0aW9uICgpIHsgYXJyYXlUb0xvY2FsZVN0cmluZy5jYWxsKG5ldyBVaW50OEFycmF5KDEpKTsgfSk7XG5cbiAgdmFyICR0b0xvY2FsZVN0cmluZyA9IGZ1bmN0aW9uIHRvTG9jYWxlU3RyaW5nKCkge1xuICAgIHJldHVybiBhcnJheVRvTG9jYWxlU3RyaW5nLmFwcGx5KFRPX0xPQ0FMRV9CVUcgPyBhcnJheVNsaWNlLmNhbGwodmFsaWRhdGUodGhpcykpIDogdmFsaWRhdGUodGhpcyksIGFyZ3VtZW50cyk7XG4gIH07XG5cbiAgdmFyIHByb3RvID0ge1xuICAgIGNvcHlXaXRoaW46IGZ1bmN0aW9uIGNvcHlXaXRoaW4odGFyZ2V0LCBzdGFydCAvKiAsIGVuZCAqLykge1xuICAgICAgcmV0dXJuIGFycmF5Q29weVdpdGhpbi5jYWxsKHZhbGlkYXRlKHRoaXMpLCB0YXJnZXQsIHN0YXJ0LCBhcmd1bWVudHMubGVuZ3RoID4gMiA/IGFyZ3VtZW50c1syXSA6IHVuZGVmaW5lZCk7XG4gICAgfSxcbiAgICBldmVyeTogZnVuY3Rpb24gZXZlcnkoY2FsbGJhY2tmbiAvKiAsIHRoaXNBcmcgKi8pIHtcbiAgICAgIHJldHVybiBhcnJheUV2ZXJ5KHZhbGlkYXRlKHRoaXMpLCBjYWxsYmFja2ZuLCBhcmd1bWVudHMubGVuZ3RoID4gMSA/IGFyZ3VtZW50c1sxXSA6IHVuZGVmaW5lZCk7XG4gICAgfSxcbiAgICBmaWxsOiBmdW5jdGlvbiBmaWxsKHZhbHVlIC8qICwgc3RhcnQsIGVuZCAqLykgeyAvLyBlc2xpbnQtZGlzYWJsZS1saW5lIG5vLXVudXNlZC12YXJzXG4gICAgICByZXR1cm4gYXJyYXlGaWxsLmFwcGx5KHZhbGlkYXRlKHRoaXMpLCBhcmd1bWVudHMpO1xuICAgIH0sXG4gICAgZmlsdGVyOiBmdW5jdGlvbiBmaWx0ZXIoY2FsbGJhY2tmbiAvKiAsIHRoaXNBcmcgKi8pIHtcbiAgICAgIHJldHVybiBzcGVjaWVzRnJvbUxpc3QodGhpcywgYXJyYXlGaWx0ZXIodmFsaWRhdGUodGhpcyksIGNhbGxiYWNrZm4sXG4gICAgICAgIGFyZ3VtZW50cy5sZW5ndGggPiAxID8gYXJndW1lbnRzWzFdIDogdW5kZWZpbmVkKSk7XG4gICAgfSxcbiAgICBmaW5kOiBmdW5jdGlvbiBmaW5kKHByZWRpY2F0ZSAvKiAsIHRoaXNBcmcgKi8pIHtcbiAgICAgIHJldHVybiBhcnJheUZpbmQodmFsaWRhdGUodGhpcyksIHByZWRpY2F0ZSwgYXJndW1lbnRzLmxlbmd0aCA+IDEgPyBhcmd1bWVudHNbMV0gOiB1bmRlZmluZWQpO1xuICAgIH0sXG4gICAgZmluZEluZGV4OiBmdW5jdGlvbiBmaW5kSW5kZXgocHJlZGljYXRlIC8qICwgdGhpc0FyZyAqLykge1xuICAgICAgcmV0dXJuIGFycmF5RmluZEluZGV4KHZhbGlkYXRlKHRoaXMpLCBwcmVkaWNhdGUsIGFyZ3VtZW50cy5sZW5ndGggPiAxID8gYXJndW1lbnRzWzFdIDogdW5kZWZpbmVkKTtcbiAgICB9LFxuICAgIGZvckVhY2g6IGZ1bmN0aW9uIGZvckVhY2goY2FsbGJhY2tmbiAvKiAsIHRoaXNBcmcgKi8pIHtcbiAgICAgIGFycmF5Rm9yRWFjaCh2YWxpZGF0ZSh0aGlzKSwgY2FsbGJhY2tmbiwgYXJndW1lbnRzLmxlbmd0aCA+IDEgPyBhcmd1bWVudHNbMV0gOiB1bmRlZmluZWQpO1xuICAgIH0sXG4gICAgaW5kZXhPZjogZnVuY3Rpb24gaW5kZXhPZihzZWFyY2hFbGVtZW50IC8qICwgZnJvbUluZGV4ICovKSB7XG4gICAgICByZXR1cm4gYXJyYXlJbmRleE9mKHZhbGlkYXRlKHRoaXMpLCBzZWFyY2hFbGVtZW50LCBhcmd1bWVudHMubGVuZ3RoID4gMSA/IGFyZ3VtZW50c1sxXSA6IHVuZGVmaW5lZCk7XG4gICAgfSxcbiAgICBpbmNsdWRlczogZnVuY3Rpb24gaW5jbHVkZXMoc2VhcmNoRWxlbWVudCAvKiAsIGZyb21JbmRleCAqLykge1xuICAgICAgcmV0dXJuIGFycmF5SW5jbHVkZXModmFsaWRhdGUodGhpcyksIHNlYXJjaEVsZW1lbnQsIGFyZ3VtZW50cy5sZW5ndGggPiAxID8gYXJndW1lbnRzWzFdIDogdW5kZWZpbmVkKTtcbiAgICB9LFxuICAgIGpvaW46IGZ1bmN0aW9uIGpvaW4oc2VwYXJhdG9yKSB7IC8vIGVzbGludC1kaXNhYmxlLWxpbmUgbm8tdW51c2VkLXZhcnNcbiAgICAgIHJldHVybiBhcnJheUpvaW4uYXBwbHkodmFsaWRhdGUodGhpcyksIGFyZ3VtZW50cyk7XG4gICAgfSxcbiAgICBsYXN0SW5kZXhPZjogZnVuY3Rpb24gbGFzdEluZGV4T2Yoc2VhcmNoRWxlbWVudCAvKiAsIGZyb21JbmRleCAqLykgeyAvLyBlc2xpbnQtZGlzYWJsZS1saW5lIG5vLXVudXNlZC12YXJzXG4gICAgICByZXR1cm4gYXJyYXlMYXN0SW5kZXhPZi5hcHBseSh2YWxpZGF0ZSh0aGlzKSwgYXJndW1lbnRzKTtcbiAgICB9LFxuICAgIG1hcDogZnVuY3Rpb24gbWFwKG1hcGZuIC8qICwgdGhpc0FyZyAqLykge1xuICAgICAgcmV0dXJuICRtYXAodmFsaWRhdGUodGhpcyksIG1hcGZuLCBhcmd1bWVudHMubGVuZ3RoID4gMSA/IGFyZ3VtZW50c1sxXSA6IHVuZGVmaW5lZCk7XG4gICAgfSxcbiAgICByZWR1Y2U6IGZ1bmN0aW9uIHJlZHVjZShjYWxsYmFja2ZuIC8qICwgaW5pdGlhbFZhbHVlICovKSB7IC8vIGVzbGludC1kaXNhYmxlLWxpbmUgbm8tdW51c2VkLXZhcnNcbiAgICAgIHJldHVybiBhcnJheVJlZHVjZS5hcHBseSh2YWxpZGF0ZSh0aGlzKSwgYXJndW1lbnRzKTtcbiAgICB9LFxuICAgIHJlZHVjZVJpZ2h0OiBmdW5jdGlvbiByZWR1Y2VSaWdodChjYWxsYmFja2ZuIC8qICwgaW5pdGlhbFZhbHVlICovKSB7IC8vIGVzbGludC1kaXNhYmxlLWxpbmUgbm8tdW51c2VkLXZhcnNcbiAgICAgIHJldHVybiBhcnJheVJlZHVjZVJpZ2h0LmFwcGx5KHZhbGlkYXRlKHRoaXMpLCBhcmd1bWVudHMpO1xuICAgIH0sXG4gICAgcmV2ZXJzZTogZnVuY3Rpb24gcmV2ZXJzZSgpIHtcbiAgICAgIHZhciB0aGF0ID0gdGhpcztcbiAgICAgIHZhciBsZW5ndGggPSB2YWxpZGF0ZSh0aGF0KS5sZW5ndGg7XG4gICAgICB2YXIgbWlkZGxlID0gTWF0aC5mbG9vcihsZW5ndGggLyAyKTtcbiAgICAgIHZhciBpbmRleCA9IDA7XG4gICAgICB2YXIgdmFsdWU7XG4gICAgICB3aGlsZSAoaW5kZXggPCBtaWRkbGUpIHtcbiAgICAgICAgdmFsdWUgPSB0aGF0W2luZGV4XTtcbiAgICAgICAgdGhhdFtpbmRleCsrXSA9IHRoYXRbLS1sZW5ndGhdO1xuICAgICAgICB0aGF0W2xlbmd0aF0gPSB2YWx1ZTtcbiAgICAgIH0gcmV0dXJuIHRoYXQ7XG4gICAgfSxcbiAgICBzb21lOiBmdW5jdGlvbiBzb21lKGNhbGxiYWNrZm4gLyogLCB0aGlzQXJnICovKSB7XG4gICAgICByZXR1cm4gYXJyYXlTb21lKHZhbGlkYXRlKHRoaXMpLCBjYWxsYmFja2ZuLCBhcmd1bWVudHMubGVuZ3RoID4gMSA/IGFyZ3VtZW50c1sxXSA6IHVuZGVmaW5lZCk7XG4gICAgfSxcbiAgICBzb3J0OiBmdW5jdGlvbiBzb3J0KGNvbXBhcmVmbikge1xuICAgICAgcmV0dXJuIGFycmF5U29ydC5jYWxsKHZhbGlkYXRlKHRoaXMpLCBjb21wYXJlZm4pO1xuICAgIH0sXG4gICAgc3ViYXJyYXk6IGZ1bmN0aW9uIHN1YmFycmF5KGJlZ2luLCBlbmQpIHtcbiAgICAgIHZhciBPID0gdmFsaWRhdGUodGhpcyk7XG4gICAgICB2YXIgbGVuZ3RoID0gTy5sZW5ndGg7XG4gICAgICB2YXIgJGJlZ2luID0gdG9BYnNvbHV0ZUluZGV4KGJlZ2luLCBsZW5ndGgpO1xuICAgICAgcmV0dXJuIG5ldyAoc3BlY2llc0NvbnN0cnVjdG9yKE8sIE9bREVGX0NPTlNUUlVDVE9SXSkpKFxuICAgICAgICBPLmJ1ZmZlcixcbiAgICAgICAgTy5ieXRlT2Zmc2V0ICsgJGJlZ2luICogTy5CWVRFU19QRVJfRUxFTUVOVCxcbiAgICAgICAgdG9MZW5ndGgoKGVuZCA9PT0gdW5kZWZpbmVkID8gbGVuZ3RoIDogdG9BYnNvbHV0ZUluZGV4KGVuZCwgbGVuZ3RoKSkgLSAkYmVnaW4pXG4gICAgICApO1xuICAgIH1cbiAgfTtcblxuICB2YXIgJHNsaWNlID0gZnVuY3Rpb24gc2xpY2Uoc3RhcnQsIGVuZCkge1xuICAgIHJldHVybiBzcGVjaWVzRnJvbUxpc3QodGhpcywgYXJyYXlTbGljZS5jYWxsKHZhbGlkYXRlKHRoaXMpLCBzdGFydCwgZW5kKSk7XG4gIH07XG5cbiAgdmFyICRzZXQgPSBmdW5jdGlvbiBzZXQoYXJyYXlMaWtlIC8qICwgb2Zmc2V0ICovKSB7XG4gICAgdmFsaWRhdGUodGhpcyk7XG4gICAgdmFyIG9mZnNldCA9IHRvT2Zmc2V0KGFyZ3VtZW50c1sxXSwgMSk7XG4gICAgdmFyIGxlbmd0aCA9IHRoaXMubGVuZ3RoO1xuICAgIHZhciBzcmMgPSB0b09iamVjdChhcnJheUxpa2UpO1xuICAgIHZhciBsZW4gPSB0b0xlbmd0aChzcmMubGVuZ3RoKTtcbiAgICB2YXIgaW5kZXggPSAwO1xuICAgIGlmIChsZW4gKyBvZmZzZXQgPiBsZW5ndGgpIHRocm93IFJhbmdlRXJyb3IoV1JPTkdfTEVOR1RIKTtcbiAgICB3aGlsZSAoaW5kZXggPCBsZW4pIHRoaXNbb2Zmc2V0ICsgaW5kZXhdID0gc3JjW2luZGV4KytdO1xuICB9O1xuXG4gIHZhciAkaXRlcmF0b3JzID0ge1xuICAgIGVudHJpZXM6IGZ1bmN0aW9uIGVudHJpZXMoKSB7XG4gICAgICByZXR1cm4gYXJyYXlFbnRyaWVzLmNhbGwodmFsaWRhdGUodGhpcykpO1xuICAgIH0sXG4gICAga2V5czogZnVuY3Rpb24ga2V5cygpIHtcbiAgICAgIHJldHVybiBhcnJheUtleXMuY2FsbCh2YWxpZGF0ZSh0aGlzKSk7XG4gICAgfSxcbiAgICB2YWx1ZXM6IGZ1bmN0aW9uIHZhbHVlcygpIHtcbiAgICAgIHJldHVybiBhcnJheVZhbHVlcy5jYWxsKHZhbGlkYXRlKHRoaXMpKTtcbiAgICB9XG4gIH07XG5cbiAgdmFyIGlzVEFJbmRleCA9IGZ1bmN0aW9uICh0YXJnZXQsIGtleSkge1xuICAgIHJldHVybiBpc09iamVjdCh0YXJnZXQpXG4gICAgICAmJiB0YXJnZXRbVFlQRURfQVJSQVldXG4gICAgICAmJiB0eXBlb2Yga2V5ICE9ICdzeW1ib2wnXG4gICAgICAmJiBrZXkgaW4gdGFyZ2V0XG4gICAgICAmJiBTdHJpbmcoK2tleSkgPT0gU3RyaW5nKGtleSk7XG4gIH07XG4gIHZhciAkZ2V0RGVzYyA9IGZ1bmN0aW9uIGdldE93blByb3BlcnR5RGVzY3JpcHRvcih0YXJnZXQsIGtleSkge1xuICAgIHJldHVybiBpc1RBSW5kZXgodGFyZ2V0LCBrZXkgPSB0b1ByaW1pdGl2ZShrZXksIHRydWUpKVxuICAgICAgPyBwcm9wZXJ0eURlc2MoMiwgdGFyZ2V0W2tleV0pXG4gICAgICA6IGdPUEQodGFyZ2V0LCBrZXkpO1xuICB9O1xuICB2YXIgJHNldERlc2MgPSBmdW5jdGlvbiBkZWZpbmVQcm9wZXJ0eSh0YXJnZXQsIGtleSwgZGVzYykge1xuICAgIGlmIChpc1RBSW5kZXgodGFyZ2V0LCBrZXkgPSB0b1ByaW1pdGl2ZShrZXksIHRydWUpKVxuICAgICAgJiYgaXNPYmplY3QoZGVzYylcbiAgICAgICYmIGhhcyhkZXNjLCAndmFsdWUnKVxuICAgICAgJiYgIWhhcyhkZXNjLCAnZ2V0JylcbiAgICAgICYmICFoYXMoZGVzYywgJ3NldCcpXG4gICAgICAvLyBUT0RPOiBhZGQgdmFsaWRhdGlvbiBkZXNjcmlwdG9yIHcvbyBjYWxsaW5nIGFjY2Vzc29yc1xuICAgICAgJiYgIWRlc2MuY29uZmlndXJhYmxlXG4gICAgICAmJiAoIWhhcyhkZXNjLCAnd3JpdGFibGUnKSB8fCBkZXNjLndyaXRhYmxlKVxuICAgICAgJiYgKCFoYXMoZGVzYywgJ2VudW1lcmFibGUnKSB8fCBkZXNjLmVudW1lcmFibGUpXG4gICAgKSB7XG4gICAgICB0YXJnZXRba2V5XSA9IGRlc2MudmFsdWU7XG4gICAgICByZXR1cm4gdGFyZ2V0O1xuICAgIH0gcmV0dXJuIGRQKHRhcmdldCwga2V5LCBkZXNjKTtcbiAgfTtcblxuICBpZiAoIUFMTF9DT05TVFJVQ1RPUlMpIHtcbiAgICAkR09QRC5mID0gJGdldERlc2M7XG4gICAgJERQLmYgPSAkc2V0RGVzYztcbiAgfVxuXG4gICRleHBvcnQoJGV4cG9ydC5TICsgJGV4cG9ydC5GICogIUFMTF9DT05TVFJVQ1RPUlMsICdPYmplY3QnLCB7XG4gICAgZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yOiAkZ2V0RGVzYyxcbiAgICBkZWZpbmVQcm9wZXJ0eTogJHNldERlc2NcbiAgfSk7XG5cbiAgaWYgKGZhaWxzKGZ1bmN0aW9uICgpIHsgYXJyYXlUb1N0cmluZy5jYWxsKHt9KTsgfSkpIHtcbiAgICBhcnJheVRvU3RyaW5nID0gYXJyYXlUb0xvY2FsZVN0cmluZyA9IGZ1bmN0aW9uIHRvU3RyaW5nKCkge1xuICAgICAgcmV0dXJuIGFycmF5Sm9pbi5jYWxsKHRoaXMpO1xuICAgIH07XG4gIH1cblxuICB2YXIgJFR5cGVkQXJyYXlQcm90b3R5cGUkID0gcmVkZWZpbmVBbGwoe30sIHByb3RvKTtcbiAgcmVkZWZpbmVBbGwoJFR5cGVkQXJyYXlQcm90b3R5cGUkLCAkaXRlcmF0b3JzKTtcbiAgaGlkZSgkVHlwZWRBcnJheVByb3RvdHlwZSQsIElURVJBVE9SLCAkaXRlcmF0b3JzLnZhbHVlcyk7XG4gIHJlZGVmaW5lQWxsKCRUeXBlZEFycmF5UHJvdG90eXBlJCwge1xuICAgIHNsaWNlOiAkc2xpY2UsXG4gICAgc2V0OiAkc2V0LFxuICAgIGNvbnN0cnVjdG9yOiBmdW5jdGlvbiAoKSB7IC8qIG5vb3AgKi8gfSxcbiAgICB0b1N0cmluZzogYXJyYXlUb1N0cmluZyxcbiAgICB0b0xvY2FsZVN0cmluZzogJHRvTG9jYWxlU3RyaW5nXG4gIH0pO1xuICBhZGRHZXR0ZXIoJFR5cGVkQXJyYXlQcm90b3R5cGUkLCAnYnVmZmVyJywgJ2InKTtcbiAgYWRkR2V0dGVyKCRUeXBlZEFycmF5UHJvdG90eXBlJCwgJ2J5dGVPZmZzZXQnLCAnbycpO1xuICBhZGRHZXR0ZXIoJFR5cGVkQXJyYXlQcm90b3R5cGUkLCAnYnl0ZUxlbmd0aCcsICdsJyk7XG4gIGFkZEdldHRlcigkVHlwZWRBcnJheVByb3RvdHlwZSQsICdsZW5ndGgnLCAnZScpO1xuICBkUCgkVHlwZWRBcnJheVByb3RvdHlwZSQsIFRBRywge1xuICAgIGdldDogZnVuY3Rpb24gKCkgeyByZXR1cm4gdGhpc1tUWVBFRF9BUlJBWV07IH1cbiAgfSk7XG5cbiAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIG1heC1zdGF0ZW1lbnRzXG4gIG1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKEtFWSwgQllURVMsIHdyYXBwZXIsIENMQU1QRUQpIHtcbiAgICBDTEFNUEVEID0gISFDTEFNUEVEO1xuICAgIHZhciBOQU1FID0gS0VZICsgKENMQU1QRUQgPyAnQ2xhbXBlZCcgOiAnJykgKyAnQXJyYXknO1xuICAgIHZhciBHRVRURVIgPSAnZ2V0JyArIEtFWTtcbiAgICB2YXIgU0VUVEVSID0gJ3NldCcgKyBLRVk7XG4gICAgdmFyIFR5cGVkQXJyYXkgPSBnbG9iYWxbTkFNRV07XG4gICAgdmFyIEJhc2UgPSBUeXBlZEFycmF5IHx8IHt9O1xuICAgIHZhciBUQUMgPSBUeXBlZEFycmF5ICYmIGdldFByb3RvdHlwZU9mKFR5cGVkQXJyYXkpO1xuICAgIHZhciBGT1JDRUQgPSAhVHlwZWRBcnJheSB8fCAhJHR5cGVkLkFCVjtcbiAgICB2YXIgTyA9IHt9O1xuICAgIHZhciBUeXBlZEFycmF5UHJvdG90eXBlID0gVHlwZWRBcnJheSAmJiBUeXBlZEFycmF5W1BST1RPVFlQRV07XG4gICAgdmFyIGdldHRlciA9IGZ1bmN0aW9uICh0aGF0LCBpbmRleCkge1xuICAgICAgdmFyIGRhdGEgPSB0aGF0Ll9kO1xuICAgICAgcmV0dXJuIGRhdGEudltHRVRURVJdKGluZGV4ICogQllURVMgKyBkYXRhLm8sIExJVFRMRV9FTkRJQU4pO1xuICAgIH07XG4gICAgdmFyIHNldHRlciA9IGZ1bmN0aW9uICh0aGF0LCBpbmRleCwgdmFsdWUpIHtcbiAgICAgIHZhciBkYXRhID0gdGhhdC5fZDtcbiAgICAgIGlmIChDTEFNUEVEKSB2YWx1ZSA9ICh2YWx1ZSA9IE1hdGgucm91bmQodmFsdWUpKSA8IDAgPyAwIDogdmFsdWUgPiAweGZmID8gMHhmZiA6IHZhbHVlICYgMHhmZjtcbiAgICAgIGRhdGEudltTRVRURVJdKGluZGV4ICogQllURVMgKyBkYXRhLm8sIHZhbHVlLCBMSVRUTEVfRU5ESUFOKTtcbiAgICB9O1xuICAgIHZhciBhZGRFbGVtZW50ID0gZnVuY3Rpb24gKHRoYXQsIGluZGV4KSB7XG4gICAgICBkUCh0aGF0LCBpbmRleCwge1xuICAgICAgICBnZXQ6IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICByZXR1cm4gZ2V0dGVyKHRoaXMsIGluZGV4KTtcbiAgICAgICAgfSxcbiAgICAgICAgc2V0OiBmdW5jdGlvbiAodmFsdWUpIHtcbiAgICAgICAgICByZXR1cm4gc2V0dGVyKHRoaXMsIGluZGV4LCB2YWx1ZSk7XG4gICAgICAgIH0sXG4gICAgICAgIGVudW1lcmFibGU6IHRydWVcbiAgICAgIH0pO1xuICAgIH07XG4gICAgaWYgKEZPUkNFRCkge1xuICAgICAgVHlwZWRBcnJheSA9IHdyYXBwZXIoZnVuY3Rpb24gKHRoYXQsIGRhdGEsICRvZmZzZXQsICRsZW5ndGgpIHtcbiAgICAgICAgYW5JbnN0YW5jZSh0aGF0LCBUeXBlZEFycmF5LCBOQU1FLCAnX2QnKTtcbiAgICAgICAgdmFyIGluZGV4ID0gMDtcbiAgICAgICAgdmFyIG9mZnNldCA9IDA7XG4gICAgICAgIHZhciBidWZmZXIsIGJ5dGVMZW5ndGgsIGxlbmd0aCwga2xhc3M7XG4gICAgICAgIGlmICghaXNPYmplY3QoZGF0YSkpIHtcbiAgICAgICAgICBsZW5ndGggPSB0b0luZGV4KGRhdGEpO1xuICAgICAgICAgIGJ5dGVMZW5ndGggPSBsZW5ndGggKiBCWVRFUztcbiAgICAgICAgICBidWZmZXIgPSBuZXcgJEFycmF5QnVmZmVyKGJ5dGVMZW5ndGgpO1xuICAgICAgICB9IGVsc2UgaWYgKGRhdGEgaW5zdGFuY2VvZiAkQXJyYXlCdWZmZXIgfHwgKGtsYXNzID0gY2xhc3NvZihkYXRhKSkgPT0gQVJSQVlfQlVGRkVSIHx8IGtsYXNzID09IFNIQVJFRF9CVUZGRVIpIHtcbiAgICAgICAgICBidWZmZXIgPSBkYXRhO1xuICAgICAgICAgIG9mZnNldCA9IHRvT2Zmc2V0KCRvZmZzZXQsIEJZVEVTKTtcbiAgICAgICAgICB2YXIgJGxlbiA9IGRhdGEuYnl0ZUxlbmd0aDtcbiAgICAgICAgICBpZiAoJGxlbmd0aCA9PT0gdW5kZWZpbmVkKSB7XG4gICAgICAgICAgICBpZiAoJGxlbiAlIEJZVEVTKSB0aHJvdyBSYW5nZUVycm9yKFdST05HX0xFTkdUSCk7XG4gICAgICAgICAgICBieXRlTGVuZ3RoID0gJGxlbiAtIG9mZnNldDtcbiAgICAgICAgICAgIGlmIChieXRlTGVuZ3RoIDwgMCkgdGhyb3cgUmFuZ2VFcnJvcihXUk9OR19MRU5HVEgpO1xuICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICBieXRlTGVuZ3RoID0gdG9MZW5ndGgoJGxlbmd0aCkgKiBCWVRFUztcbiAgICAgICAgICAgIGlmIChieXRlTGVuZ3RoICsgb2Zmc2V0ID4gJGxlbikgdGhyb3cgUmFuZ2VFcnJvcihXUk9OR19MRU5HVEgpO1xuICAgICAgICAgIH1cbiAgICAgICAgICBsZW5ndGggPSBieXRlTGVuZ3RoIC8gQllURVM7XG4gICAgICAgIH0gZWxzZSBpZiAoVFlQRURfQVJSQVkgaW4gZGF0YSkge1xuICAgICAgICAgIHJldHVybiBmcm9tTGlzdChUeXBlZEFycmF5LCBkYXRhKTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICByZXR1cm4gJGZyb20uY2FsbChUeXBlZEFycmF5LCBkYXRhKTtcbiAgICAgICAgfVxuICAgICAgICBoaWRlKHRoYXQsICdfZCcsIHtcbiAgICAgICAgICBiOiBidWZmZXIsXG4gICAgICAgICAgbzogb2Zmc2V0LFxuICAgICAgICAgIGw6IGJ5dGVMZW5ndGgsXG4gICAgICAgICAgZTogbGVuZ3RoLFxuICAgICAgICAgIHY6IG5ldyAkRGF0YVZpZXcoYnVmZmVyKVxuICAgICAgICB9KTtcbiAgICAgICAgd2hpbGUgKGluZGV4IDwgbGVuZ3RoKSBhZGRFbGVtZW50KHRoYXQsIGluZGV4KyspO1xuICAgICAgfSk7XG4gICAgICBUeXBlZEFycmF5UHJvdG90eXBlID0gVHlwZWRBcnJheVtQUk9UT1RZUEVdID0gY3JlYXRlKCRUeXBlZEFycmF5UHJvdG90eXBlJCk7XG4gICAgICBoaWRlKFR5cGVkQXJyYXlQcm90b3R5cGUsICdjb25zdHJ1Y3RvcicsIFR5cGVkQXJyYXkpO1xuICAgIH0gZWxzZSBpZiAoIWZhaWxzKGZ1bmN0aW9uICgpIHtcbiAgICAgIFR5cGVkQXJyYXkoMSk7XG4gICAgfSkgfHwgIWZhaWxzKGZ1bmN0aW9uICgpIHtcbiAgICAgIG5ldyBUeXBlZEFycmF5KC0xKTsgLy8gZXNsaW50LWRpc2FibGUtbGluZSBuby1uZXdcbiAgICB9KSB8fCAhJGl0ZXJEZXRlY3QoZnVuY3Rpb24gKGl0ZXIpIHtcbiAgICAgIG5ldyBUeXBlZEFycmF5KCk7IC8vIGVzbGludC1kaXNhYmxlLWxpbmUgbm8tbmV3XG4gICAgICBuZXcgVHlwZWRBcnJheShudWxsKTsgLy8gZXNsaW50LWRpc2FibGUtbGluZSBuby1uZXdcbiAgICAgIG5ldyBUeXBlZEFycmF5KDEuNSk7IC8vIGVzbGludC1kaXNhYmxlLWxpbmUgbm8tbmV3XG4gICAgICBuZXcgVHlwZWRBcnJheShpdGVyKTsgLy8gZXNsaW50LWRpc2FibGUtbGluZSBuby1uZXdcbiAgICB9LCB0cnVlKSkge1xuICAgICAgVHlwZWRBcnJheSA9IHdyYXBwZXIoZnVuY3Rpb24gKHRoYXQsIGRhdGEsICRvZmZzZXQsICRsZW5ndGgpIHtcbiAgICAgICAgYW5JbnN0YW5jZSh0aGF0LCBUeXBlZEFycmF5LCBOQU1FKTtcbiAgICAgICAgdmFyIGtsYXNzO1xuICAgICAgICAvLyBgd3NgIG1vZHVsZSBidWcsIHRlbXBvcmFyaWx5IHJlbW92ZSB2YWxpZGF0aW9uIGxlbmd0aCBmb3IgVWludDhBcnJheVxuICAgICAgICAvLyBodHRwczovL2dpdGh1Yi5jb20vd2Vic29ja2V0cy93cy9wdWxsLzY0NVxuICAgICAgICBpZiAoIWlzT2JqZWN0KGRhdGEpKSByZXR1cm4gbmV3IEJhc2UodG9JbmRleChkYXRhKSk7XG4gICAgICAgIGlmIChkYXRhIGluc3RhbmNlb2YgJEFycmF5QnVmZmVyIHx8IChrbGFzcyA9IGNsYXNzb2YoZGF0YSkpID09IEFSUkFZX0JVRkZFUiB8fCBrbGFzcyA9PSBTSEFSRURfQlVGRkVSKSB7XG4gICAgICAgICAgcmV0dXJuICRsZW5ndGggIT09IHVuZGVmaW5lZFxuICAgICAgICAgICAgPyBuZXcgQmFzZShkYXRhLCB0b09mZnNldCgkb2Zmc2V0LCBCWVRFUyksICRsZW5ndGgpXG4gICAgICAgICAgICA6ICRvZmZzZXQgIT09IHVuZGVmaW5lZFxuICAgICAgICAgICAgICA/IG5ldyBCYXNlKGRhdGEsIHRvT2Zmc2V0KCRvZmZzZXQsIEJZVEVTKSlcbiAgICAgICAgICAgICAgOiBuZXcgQmFzZShkYXRhKTtcbiAgICAgICAgfVxuICAgICAgICBpZiAoVFlQRURfQVJSQVkgaW4gZGF0YSkgcmV0dXJuIGZyb21MaXN0KFR5cGVkQXJyYXksIGRhdGEpO1xuICAgICAgICByZXR1cm4gJGZyb20uY2FsbChUeXBlZEFycmF5LCBkYXRhKTtcbiAgICAgIH0pO1xuICAgICAgYXJyYXlGb3JFYWNoKFRBQyAhPT0gRnVuY3Rpb24ucHJvdG90eXBlID8gZ09QTihCYXNlKS5jb25jYXQoZ09QTihUQUMpKSA6IGdPUE4oQmFzZSksIGZ1bmN0aW9uIChrZXkpIHtcbiAgICAgICAgaWYgKCEoa2V5IGluIFR5cGVkQXJyYXkpKSBoaWRlKFR5cGVkQXJyYXksIGtleSwgQmFzZVtrZXldKTtcbiAgICAgIH0pO1xuICAgICAgVHlwZWRBcnJheVtQUk9UT1RZUEVdID0gVHlwZWRBcnJheVByb3RvdHlwZTtcbiAgICAgIGlmICghTElCUkFSWSkgVHlwZWRBcnJheVByb3RvdHlwZS5jb25zdHJ1Y3RvciA9IFR5cGVkQXJyYXk7XG4gICAgfVxuICAgIHZhciAkbmF0aXZlSXRlcmF0b3IgPSBUeXBlZEFycmF5UHJvdG90eXBlW0lURVJBVE9SXTtcbiAgICB2YXIgQ09SUkVDVF9JVEVSX05BTUUgPSAhISRuYXRpdmVJdGVyYXRvclxuICAgICAgJiYgKCRuYXRpdmVJdGVyYXRvci5uYW1lID09ICd2YWx1ZXMnIHx8ICRuYXRpdmVJdGVyYXRvci5uYW1lID09IHVuZGVmaW5lZCk7XG4gICAgdmFyICRpdGVyYXRvciA9ICRpdGVyYXRvcnMudmFsdWVzO1xuICAgIGhpZGUoVHlwZWRBcnJheSwgVFlQRURfQ09OU1RSVUNUT1IsIHRydWUpO1xuICAgIGhpZGUoVHlwZWRBcnJheVByb3RvdHlwZSwgVFlQRURfQVJSQVksIE5BTUUpO1xuICAgIGhpZGUoVHlwZWRBcnJheVByb3RvdHlwZSwgVklFVywgdHJ1ZSk7XG4gICAgaGlkZShUeXBlZEFycmF5UHJvdG90eXBlLCBERUZfQ09OU1RSVUNUT1IsIFR5cGVkQXJyYXkpO1xuXG4gICAgaWYgKENMQU1QRUQgPyBuZXcgVHlwZWRBcnJheSgxKVtUQUddICE9IE5BTUUgOiAhKFRBRyBpbiBUeXBlZEFycmF5UHJvdG90eXBlKSkge1xuICAgICAgZFAoVHlwZWRBcnJheVByb3RvdHlwZSwgVEFHLCB7XG4gICAgICAgIGdldDogZnVuY3Rpb24gKCkgeyByZXR1cm4gTkFNRTsgfVxuICAgICAgfSk7XG4gICAgfVxuXG4gICAgT1tOQU1FXSA9IFR5cGVkQXJyYXk7XG5cbiAgICAkZXhwb3J0KCRleHBvcnQuRyArICRleHBvcnQuVyArICRleHBvcnQuRiAqIChUeXBlZEFycmF5ICE9IEJhc2UpLCBPKTtcblxuICAgICRleHBvcnQoJGV4cG9ydC5TLCBOQU1FLCB7XG4gICAgICBCWVRFU19QRVJfRUxFTUVOVDogQllURVNcbiAgICB9KTtcblxuICAgICRleHBvcnQoJGV4cG9ydC5TICsgJGV4cG9ydC5GICogZmFpbHMoZnVuY3Rpb24gKCkgeyBCYXNlLm9mLmNhbGwoVHlwZWRBcnJheSwgMSk7IH0pLCBOQU1FLCB7XG4gICAgICBmcm9tOiAkZnJvbSxcbiAgICAgIG9mOiAkb2ZcbiAgICB9KTtcblxuICAgIGlmICghKEJZVEVTX1BFUl9FTEVNRU5UIGluIFR5cGVkQXJyYXlQcm90b3R5cGUpKSBoaWRlKFR5cGVkQXJyYXlQcm90b3R5cGUsIEJZVEVTX1BFUl9FTEVNRU5ULCBCWVRFUyk7XG5cbiAgICAkZXhwb3J0KCRleHBvcnQuUCwgTkFNRSwgcHJvdG8pO1xuXG4gICAgc2V0U3BlY2llcyhOQU1FKTtcblxuICAgICRleHBvcnQoJGV4cG9ydC5QICsgJGV4cG9ydC5GICogRk9SQ0VEX1NFVCwgTkFNRSwgeyBzZXQ6ICRzZXQgfSk7XG5cbiAgICAkZXhwb3J0KCRleHBvcnQuUCArICRleHBvcnQuRiAqICFDT1JSRUNUX0lURVJfTkFNRSwgTkFNRSwgJGl0ZXJhdG9ycyk7XG5cbiAgICBpZiAoIUxJQlJBUlkgJiYgVHlwZWRBcnJheVByb3RvdHlwZS50b1N0cmluZyAhPSBhcnJheVRvU3RyaW5nKSBUeXBlZEFycmF5UHJvdG90eXBlLnRvU3RyaW5nID0gYXJyYXlUb1N0cmluZztcblxuICAgICRleHBvcnQoJGV4cG9ydC5QICsgJGV4cG9ydC5GICogZmFpbHMoZnVuY3Rpb24gKCkge1xuICAgICAgbmV3IFR5cGVkQXJyYXkoMSkuc2xpY2UoKTtcbiAgICB9KSwgTkFNRSwgeyBzbGljZTogJHNsaWNlIH0pO1xuXG4gICAgJGV4cG9ydCgkZXhwb3J0LlAgKyAkZXhwb3J0LkYgKiAoZmFpbHMoZnVuY3Rpb24gKCkge1xuICAgICAgcmV0dXJuIFsxLCAyXS50b0xvY2FsZVN0cmluZygpICE9IG5ldyBUeXBlZEFycmF5KFsxLCAyXSkudG9Mb2NhbGVTdHJpbmcoKTtcbiAgICB9KSB8fCAhZmFpbHMoZnVuY3Rpb24gKCkge1xuICAgICAgVHlwZWRBcnJheVByb3RvdHlwZS50b0xvY2FsZVN0cmluZy5jYWxsKFsxLCAyXSk7XG4gICAgfSkpLCBOQU1FLCB7IHRvTG9jYWxlU3RyaW5nOiAkdG9Mb2NhbGVTdHJpbmcgfSk7XG5cbiAgICBJdGVyYXRvcnNbTkFNRV0gPSBDT1JSRUNUX0lURVJfTkFNRSA/ICRuYXRpdmVJdGVyYXRvciA6ICRpdGVyYXRvcjtcbiAgICBpZiAoIUxJQlJBUlkgJiYgIUNPUlJFQ1RfSVRFUl9OQU1FKSBoaWRlKFR5cGVkQXJyYXlQcm90b3R5cGUsIElURVJBVE9SLCAkaXRlcmF0b3IpO1xuICB9O1xufSBlbHNlIG1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKCkgeyAvKiBlbXB0eSAqLyB9O1xuIiwiLy8gMjIuMS4zLjMxIEFycmF5LnByb3RvdHlwZVtAQHVuc2NvcGFibGVzXVxudmFyIFVOU0NPUEFCTEVTID0gcmVxdWlyZSgnLi9fd2tzJykoJ3Vuc2NvcGFibGVzJyk7XG52YXIgQXJyYXlQcm90byA9IEFycmF5LnByb3RvdHlwZTtcbmlmIChBcnJheVByb3RvW1VOU0NPUEFCTEVTXSA9PSB1bmRlZmluZWQpIHJlcXVpcmUoJy4vX2hpZGUnKShBcnJheVByb3RvLCBVTlNDT1BBQkxFUywge30pO1xubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAoa2V5KSB7XG4gIEFycmF5UHJvdG9bVU5TQ09QQUJMRVNdW2tleV0gPSB0cnVlO1xufTtcbiIsIm1vZHVsZS5leHBvcnRzID0gZmFsc2U7XG4iLCJ2YXIgTUVUQSA9IHJlcXVpcmUoJy4vX3VpZCcpKCdtZXRhJyk7XG52YXIgaXNPYmplY3QgPSByZXF1aXJlKCcuL19pcy1vYmplY3QnKTtcbnZhciBoYXMgPSByZXF1aXJlKCcuL19oYXMnKTtcbnZhciBzZXREZXNjID0gcmVxdWlyZSgnLi9fb2JqZWN0LWRwJykuZjtcbnZhciBpZCA9IDA7XG52YXIgaXNFeHRlbnNpYmxlID0gT2JqZWN0LmlzRXh0ZW5zaWJsZSB8fCBmdW5jdGlvbiAoKSB7XG4gIHJldHVybiB0cnVlO1xufTtcbnZhciBGUkVFWkUgPSAhcmVxdWlyZSgnLi9fZmFpbHMnKShmdW5jdGlvbiAoKSB7XG4gIHJldHVybiBpc0V4dGVuc2libGUoT2JqZWN0LnByZXZlbnRFeHRlbnNpb25zKHt9KSk7XG59KTtcbnZhciBzZXRNZXRhID0gZnVuY3Rpb24gKGl0KSB7XG4gIHNldERlc2MoaXQsIE1FVEEsIHsgdmFsdWU6IHtcbiAgICBpOiAnTycgKyArK2lkLCAvLyBvYmplY3QgSURcbiAgICB3OiB7fSAgICAgICAgICAvLyB3ZWFrIGNvbGxlY3Rpb25zIElEc1xuICB9IH0pO1xufTtcbnZhciBmYXN0S2V5ID0gZnVuY3Rpb24gKGl0LCBjcmVhdGUpIHtcbiAgLy8gcmV0dXJuIHByaW1pdGl2ZSB3aXRoIHByZWZpeFxuICBpZiAoIWlzT2JqZWN0KGl0KSkgcmV0dXJuIHR5cGVvZiBpdCA9PSAnc3ltYm9sJyA/IGl0IDogKHR5cGVvZiBpdCA9PSAnc3RyaW5nJyA/ICdTJyA6ICdQJykgKyBpdDtcbiAgaWYgKCFoYXMoaXQsIE1FVEEpKSB7XG4gICAgLy8gY2FuJ3Qgc2V0IG1ldGFkYXRhIHRvIHVuY2F1Z2h0IGZyb3plbiBvYmplY3RcbiAgICBpZiAoIWlzRXh0ZW5zaWJsZShpdCkpIHJldHVybiAnRic7XG4gICAgLy8gbm90IG5lY2Vzc2FyeSB0byBhZGQgbWV0YWRhdGFcbiAgICBpZiAoIWNyZWF0ZSkgcmV0dXJuICdFJztcbiAgICAvLyBhZGQgbWlzc2luZyBtZXRhZGF0YVxuICAgIHNldE1ldGEoaXQpO1xuICAvLyByZXR1cm4gb2JqZWN0IElEXG4gIH0gcmV0dXJuIGl0W01FVEFdLmk7XG59O1xudmFyIGdldFdlYWsgPSBmdW5jdGlvbiAoaXQsIGNyZWF0ZSkge1xuICBpZiAoIWhhcyhpdCwgTUVUQSkpIHtcbiAgICAvLyBjYW4ndCBzZXQgbWV0YWRhdGEgdG8gdW5jYXVnaHQgZnJvemVuIG9iamVjdFxuICAgIGlmICghaXNFeHRlbnNpYmxlKGl0KSkgcmV0dXJuIHRydWU7XG4gICAgLy8gbm90IG5lY2Vzc2FyeSB0byBhZGQgbWV0YWRhdGFcbiAgICBpZiAoIWNyZWF0ZSkgcmV0dXJuIGZhbHNlO1xuICAgIC8vIGFkZCBtaXNzaW5nIG1ldGFkYXRhXG4gICAgc2V0TWV0YShpdCk7XG4gIC8vIHJldHVybiBoYXNoIHdlYWsgY29sbGVjdGlvbnMgSURzXG4gIH0gcmV0dXJuIGl0W01FVEFdLnc7XG59O1xuLy8gYWRkIG1ldGFkYXRhIG9uIGZyZWV6ZS1mYW1pbHkgbWV0aG9kcyBjYWxsaW5nXG52YXIgb25GcmVlemUgPSBmdW5jdGlvbiAoaXQpIHtcbiAgaWYgKEZSRUVaRSAmJiBtZXRhLk5FRUQgJiYgaXNFeHRlbnNpYmxlKGl0KSAmJiAhaGFzKGl0LCBNRVRBKSkgc2V0TWV0YShpdCk7XG4gIHJldHVybiBpdDtcbn07XG52YXIgbWV0YSA9IG1vZHVsZS5leHBvcnRzID0ge1xuICBLRVk6IE1FVEEsXG4gIE5FRUQ6IGZhbHNlLFxuICBmYXN0S2V5OiBmYXN0S2V5LFxuICBnZXRXZWFrOiBnZXRXZWFrLFxuICBvbkZyZWV6ZTogb25GcmVlemVcbn07XG4iLCJ2YXIgcmVkZWZpbmUgPSByZXF1aXJlKCcuL19yZWRlZmluZScpO1xubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAodGFyZ2V0LCBzcmMsIHNhZmUpIHtcbiAgZm9yICh2YXIga2V5IGluIHNyYykgcmVkZWZpbmUodGFyZ2V0LCBrZXksIHNyY1trZXldLCBzYWZlKTtcbiAgcmV0dXJuIHRhcmdldDtcbn07XG4iLCJ2YXIgY3R4ID0gcmVxdWlyZSgnLi9fY3R4Jyk7XG52YXIgY2FsbCA9IHJlcXVpcmUoJy4vX2l0ZXItY2FsbCcpO1xudmFyIGlzQXJyYXlJdGVyID0gcmVxdWlyZSgnLi9faXMtYXJyYXktaXRlcicpO1xudmFyIGFuT2JqZWN0ID0gcmVxdWlyZSgnLi9fYW4tb2JqZWN0Jyk7XG52YXIgdG9MZW5ndGggPSByZXF1aXJlKCcuL190by1sZW5ndGgnKTtcbnZhciBnZXRJdGVyRm4gPSByZXF1aXJlKCcuL2NvcmUuZ2V0LWl0ZXJhdG9yLW1ldGhvZCcpO1xudmFyIEJSRUFLID0ge307XG52YXIgUkVUVVJOID0ge307XG52YXIgZXhwb3J0cyA9IG1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKGl0ZXJhYmxlLCBlbnRyaWVzLCBmbiwgdGhhdCwgSVRFUkFUT1IpIHtcbiAgdmFyIGl0ZXJGbiA9IElURVJBVE9SID8gZnVuY3Rpb24gKCkgeyByZXR1cm4gaXRlcmFibGU7IH0gOiBnZXRJdGVyRm4oaXRlcmFibGUpO1xuICB2YXIgZiA9IGN0eChmbiwgdGhhdCwgZW50cmllcyA/IDIgOiAxKTtcbiAgdmFyIGluZGV4ID0gMDtcbiAgdmFyIGxlbmd0aCwgc3RlcCwgaXRlcmF0b3IsIHJlc3VsdDtcbiAgaWYgKHR5cGVvZiBpdGVyRm4gIT0gJ2Z1bmN0aW9uJykgdGhyb3cgVHlwZUVycm9yKGl0ZXJhYmxlICsgJyBpcyBub3QgaXRlcmFibGUhJyk7XG4gIC8vIGZhc3QgY2FzZSBmb3IgYXJyYXlzIHdpdGggZGVmYXVsdCBpdGVyYXRvclxuICBpZiAoaXNBcnJheUl0ZXIoaXRlckZuKSkgZm9yIChsZW5ndGggPSB0b0xlbmd0aChpdGVyYWJsZS5sZW5ndGgpOyBsZW5ndGggPiBpbmRleDsgaW5kZXgrKykge1xuICAgIHJlc3VsdCA9IGVudHJpZXMgPyBmKGFuT2JqZWN0KHN0ZXAgPSBpdGVyYWJsZVtpbmRleF0pWzBdLCBzdGVwWzFdKSA6IGYoaXRlcmFibGVbaW5kZXhdKTtcbiAgICBpZiAocmVzdWx0ID09PSBCUkVBSyB8fCByZXN1bHQgPT09IFJFVFVSTikgcmV0dXJuIHJlc3VsdDtcbiAgfSBlbHNlIGZvciAoaXRlcmF0b3IgPSBpdGVyRm4uY2FsbChpdGVyYWJsZSk7ICEoc3RlcCA9IGl0ZXJhdG9yLm5leHQoKSkuZG9uZTspIHtcbiAgICByZXN1bHQgPSBjYWxsKGl0ZXJhdG9yLCBmLCBzdGVwLnZhbHVlLCBlbnRyaWVzKTtcbiAgICBpZiAocmVzdWx0ID09PSBCUkVBSyB8fCByZXN1bHQgPT09IFJFVFVSTikgcmV0dXJuIHJlc3VsdDtcbiAgfVxufTtcbmV4cG9ydHMuQlJFQUsgPSBCUkVBSztcbmV4cG9ydHMuUkVUVVJOID0gUkVUVVJOO1xuIiwibW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAoaXQsIENvbnN0cnVjdG9yLCBuYW1lLCBmb3JiaWRkZW5GaWVsZCkge1xuICBpZiAoIShpdCBpbnN0YW5jZW9mIENvbnN0cnVjdG9yKSB8fCAoZm9yYmlkZGVuRmllbGQgIT09IHVuZGVmaW5lZCAmJiBmb3JiaWRkZW5GaWVsZCBpbiBpdCkpIHtcbiAgICB0aHJvdyBUeXBlRXJyb3IobmFtZSArICc6IGluY29ycmVjdCBpbnZvY2F0aW9uIScpO1xuICB9IHJldHVybiBpdDtcbn07XG4iLCIndXNlIHN0cmljdCc7XG52YXIgZ2xvYmFsID0gcmVxdWlyZSgnLi9fZ2xvYmFsJyk7XG52YXIgZFAgPSByZXF1aXJlKCcuL19vYmplY3QtZHAnKTtcbnZhciBERVNDUklQVE9SUyA9IHJlcXVpcmUoJy4vX2Rlc2NyaXB0b3JzJyk7XG52YXIgU1BFQ0lFUyA9IHJlcXVpcmUoJy4vX3drcycpKCdzcGVjaWVzJyk7XG5cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKEtFWSkge1xuICB2YXIgQyA9IGdsb2JhbFtLRVldO1xuICBpZiAoREVTQ1JJUFRPUlMgJiYgQyAmJiAhQ1tTUEVDSUVTXSkgZFAuZihDLCBTUEVDSUVTLCB7XG4gICAgY29uZmlndXJhYmxlOiB0cnVlLFxuICAgIGdldDogZnVuY3Rpb24gKCkgeyByZXR1cm4gdGhpczsgfVxuICB9KTtcbn07XG4iLCIvLyAxOS4xLjIuNyAvIDE1LjIuMy40IE9iamVjdC5nZXRPd25Qcm9wZXJ0eU5hbWVzKE8pXG52YXIgJGtleXMgPSByZXF1aXJlKCcuL19vYmplY3Qta2V5cy1pbnRlcm5hbCcpO1xudmFyIGhpZGRlbktleXMgPSByZXF1aXJlKCcuL19lbnVtLWJ1Zy1rZXlzJykuY29uY2F0KCdsZW5ndGgnLCAncHJvdG90eXBlJyk7XG5cbmV4cG9ydHMuZiA9IE9iamVjdC5nZXRPd25Qcm9wZXJ0eU5hbWVzIHx8IGZ1bmN0aW9uIGdldE93blByb3BlcnR5TmFtZXMoTykge1xuICByZXR1cm4gJGtleXMoTywgaGlkZGVuS2V5cyk7XG59O1xuIiwiLy8gMTkuMS4yLjIgLyAxNS4yLjMuNSBPYmplY3QuY3JlYXRlKE8gWywgUHJvcGVydGllc10pXG52YXIgYW5PYmplY3QgPSByZXF1aXJlKCcuL19hbi1vYmplY3QnKTtcbnZhciBkUHMgPSByZXF1aXJlKCcuL19vYmplY3QtZHBzJyk7XG52YXIgZW51bUJ1Z0tleXMgPSByZXF1aXJlKCcuL19lbnVtLWJ1Zy1rZXlzJyk7XG52YXIgSUVfUFJPVE8gPSByZXF1aXJlKCcuL19zaGFyZWQta2V5JykoJ0lFX1BST1RPJyk7XG52YXIgRW1wdHkgPSBmdW5jdGlvbiAoKSB7IC8qIGVtcHR5ICovIH07XG52YXIgUFJPVE9UWVBFID0gJ3Byb3RvdHlwZSc7XG5cbi8vIENyZWF0ZSBvYmplY3Qgd2l0aCBmYWtlIGBudWxsYCBwcm90b3R5cGU6IHVzZSBpZnJhbWUgT2JqZWN0IHdpdGggY2xlYXJlZCBwcm90b3R5cGVcbnZhciBjcmVhdGVEaWN0ID0gZnVuY3Rpb24gKCkge1xuICAvLyBUaHJhc2gsIHdhc3RlIGFuZCBzb2RvbXk6IElFIEdDIGJ1Z1xuICB2YXIgaWZyYW1lID0gcmVxdWlyZSgnLi9fZG9tLWNyZWF0ZScpKCdpZnJhbWUnKTtcbiAgdmFyIGkgPSBlbnVtQnVnS2V5cy5sZW5ndGg7XG4gIHZhciBsdCA9ICc8JztcbiAgdmFyIGd0ID0gJz4nO1xuICB2YXIgaWZyYW1lRG9jdW1lbnQ7XG4gIGlmcmFtZS5zdHlsZS5kaXNwbGF5ID0gJ25vbmUnO1xuICByZXF1aXJlKCcuL19odG1sJykuYXBwZW5kQ2hpbGQoaWZyYW1lKTtcbiAgaWZyYW1lLnNyYyA9ICdqYXZhc2NyaXB0Oic7IC8vIGVzbGludC1kaXNhYmxlLWxpbmUgbm8tc2NyaXB0LXVybFxuICAvLyBjcmVhdGVEaWN0ID0gaWZyYW1lLmNvbnRlbnRXaW5kb3cuT2JqZWN0O1xuICAvLyBodG1sLnJlbW92ZUNoaWxkKGlmcmFtZSk7XG4gIGlmcmFtZURvY3VtZW50ID0gaWZyYW1lLmNvbnRlbnRXaW5kb3cuZG9jdW1lbnQ7XG4gIGlmcmFtZURvY3VtZW50Lm9wZW4oKTtcbiAgaWZyYW1lRG9jdW1lbnQud3JpdGUobHQgKyAnc2NyaXB0JyArIGd0ICsgJ2RvY3VtZW50LkY9T2JqZWN0JyArIGx0ICsgJy9zY3JpcHQnICsgZ3QpO1xuICBpZnJhbWVEb2N1bWVudC5jbG9zZSgpO1xuICBjcmVhdGVEaWN0ID0gaWZyYW1lRG9jdW1lbnQuRjtcbiAgd2hpbGUgKGktLSkgZGVsZXRlIGNyZWF0ZURpY3RbUFJPVE9UWVBFXVtlbnVtQnVnS2V5c1tpXV07XG4gIHJldHVybiBjcmVhdGVEaWN0KCk7XG59O1xuXG5tb2R1bGUuZXhwb3J0cyA9IE9iamVjdC5jcmVhdGUgfHwgZnVuY3Rpb24gY3JlYXRlKE8sIFByb3BlcnRpZXMpIHtcbiAgdmFyIHJlc3VsdDtcbiAgaWYgKE8gIT09IG51bGwpIHtcbiAgICBFbXB0eVtQUk9UT1RZUEVdID0gYW5PYmplY3QoTyk7XG4gICAgcmVzdWx0ID0gbmV3IEVtcHR5KCk7XG4gICAgRW1wdHlbUFJPVE9UWVBFXSA9IG51bGw7XG4gICAgLy8gYWRkIFwiX19wcm90b19fXCIgZm9yIE9iamVjdC5nZXRQcm90b3R5cGVPZiBwb2x5ZmlsbFxuICAgIHJlc3VsdFtJRV9QUk9UT10gPSBPO1xuICB9IGVsc2UgcmVzdWx0ID0gY3JlYXRlRGljdCgpO1xuICByZXR1cm4gUHJvcGVydGllcyA9PT0gdW5kZWZpbmVkID8gcmVzdWx0IDogZFBzKHJlc3VsdCwgUHJvcGVydGllcyk7XG59O1xuIiwidmFyIHRvSW50ZWdlciA9IHJlcXVpcmUoJy4vX3RvLWludGVnZXInKTtcbnZhciBtYXggPSBNYXRoLm1heDtcbnZhciBtaW4gPSBNYXRoLm1pbjtcbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKGluZGV4LCBsZW5ndGgpIHtcbiAgaW5kZXggPSB0b0ludGVnZXIoaW5kZXgpO1xuICByZXR1cm4gaW5kZXggPCAwID8gbWF4KGluZGV4ICsgbGVuZ3RoLCAwKSA6IG1pbihpbmRleCwgbGVuZ3RoKTtcbn07XG4iLCIvLyAxOS4xLjIuMTQgLyAxNS4yLjMuMTQgT2JqZWN0LmtleXMoTylcbnZhciAka2V5cyA9IHJlcXVpcmUoJy4vX29iamVjdC1rZXlzLWludGVybmFsJyk7XG52YXIgZW51bUJ1Z0tleXMgPSByZXF1aXJlKCcuL19lbnVtLWJ1Zy1rZXlzJyk7XG5cbm1vZHVsZS5leHBvcnRzID0gT2JqZWN0LmtleXMgfHwgZnVuY3Rpb24ga2V5cyhPKSB7XG4gIHJldHVybiAka2V5cyhPLCBlbnVtQnVnS2V5cyk7XG59O1xuIiwidmFyIGlkID0gMDtcbnZhciBweCA9IE1hdGgucmFuZG9tKCk7XG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChrZXkpIHtcbiAgcmV0dXJuICdTeW1ib2woJy5jb25jYXQoa2V5ID09PSB1bmRlZmluZWQgPyAnJyA6IGtleSwgJylfJywgKCsraWQgKyBweCkudG9TdHJpbmcoMzYpKTtcbn07XG4iLCJtb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChiaXRtYXAsIHZhbHVlKSB7XG4gIHJldHVybiB7XG4gICAgZW51bWVyYWJsZTogIShiaXRtYXAgJiAxKSxcbiAgICBjb25maWd1cmFibGU6ICEoYml0bWFwICYgMiksXG4gICAgd3JpdGFibGU6ICEoYml0bWFwICYgNCksXG4gICAgdmFsdWU6IHZhbHVlXG4gIH07XG59O1xuIiwiaW1wb3J0IFByb3BUeXBlcyBmcm9tICdwcm9wLXR5cGVzJztcblxuZXhwb3J0IHZhciBzdWJzY3JpcHRpb25TaGFwZSA9IFByb3BUeXBlcy5zaGFwZSh7XG4gIHRyeVN1YnNjcmliZTogUHJvcFR5cGVzLmZ1bmMuaXNSZXF1aXJlZCxcbiAgdHJ5VW5zdWJzY3JpYmU6IFByb3BUeXBlcy5mdW5jLmlzUmVxdWlyZWQsXG4gIG5vdGlmeU5lc3RlZFN1YnM6IFByb3BUeXBlcy5mdW5jLmlzUmVxdWlyZWQsXG4gIGlzU3Vic2NyaWJlZDogUHJvcFR5cGVzLmZ1bmMuaXNSZXF1aXJlZFxufSk7XG5cbmV4cG9ydCB2YXIgc3RvcmVTaGFwZSA9IFByb3BUeXBlcy5zaGFwZSh7XG4gIHN1YnNjcmliZTogUHJvcFR5cGVzLmZ1bmMuaXNSZXF1aXJlZCxcbiAgZGlzcGF0Y2g6IFByb3BUeXBlcy5mdW5jLmlzUmVxdWlyZWQsXG4gIGdldFN0YXRlOiBQcm9wVHlwZXMuZnVuYy5pc1JlcXVpcmVkXG59KTsiLCJmdW5jdGlvbiBfY2xhc3NDYWxsQ2hlY2soaW5zdGFuY2UsIENvbnN0cnVjdG9yKSB7IGlmICghKGluc3RhbmNlIGluc3RhbmNlb2YgQ29uc3RydWN0b3IpKSB7IHRocm93IG5ldyBUeXBlRXJyb3IoXCJDYW5ub3QgY2FsbCBhIGNsYXNzIGFzIGEgZnVuY3Rpb25cIik7IH0gfVxuXG5mdW5jdGlvbiBfcG9zc2libGVDb25zdHJ1Y3RvclJldHVybihzZWxmLCBjYWxsKSB7IGlmICghc2VsZikgeyB0aHJvdyBuZXcgUmVmZXJlbmNlRXJyb3IoXCJ0aGlzIGhhc24ndCBiZWVuIGluaXRpYWxpc2VkIC0gc3VwZXIoKSBoYXNuJ3QgYmVlbiBjYWxsZWRcIik7IH0gcmV0dXJuIGNhbGwgJiYgKHR5cGVvZiBjYWxsID09PSBcIm9iamVjdFwiIHx8IHR5cGVvZiBjYWxsID09PSBcImZ1bmN0aW9uXCIpID8gY2FsbCA6IHNlbGY7IH1cblxuZnVuY3Rpb24gX2luaGVyaXRzKHN1YkNsYXNzLCBzdXBlckNsYXNzKSB7IGlmICh0eXBlb2Ygc3VwZXJDbGFzcyAhPT0gXCJmdW5jdGlvblwiICYmIHN1cGVyQ2xhc3MgIT09IG51bGwpIHsgdGhyb3cgbmV3IFR5cGVFcnJvcihcIlN1cGVyIGV4cHJlc3Npb24gbXVzdCBlaXRoZXIgYmUgbnVsbCBvciBhIGZ1bmN0aW9uLCBub3QgXCIgKyB0eXBlb2Ygc3VwZXJDbGFzcyk7IH0gc3ViQ2xhc3MucHJvdG90eXBlID0gT2JqZWN0LmNyZWF0ZShzdXBlckNsYXNzICYmIHN1cGVyQ2xhc3MucHJvdG90eXBlLCB7IGNvbnN0cnVjdG9yOiB7IHZhbHVlOiBzdWJDbGFzcywgZW51bWVyYWJsZTogZmFsc2UsIHdyaXRhYmxlOiB0cnVlLCBjb25maWd1cmFibGU6IHRydWUgfSB9KTsgaWYgKHN1cGVyQ2xhc3MpIE9iamVjdC5zZXRQcm90b3R5cGVPZiA/IE9iamVjdC5zZXRQcm90b3R5cGVPZihzdWJDbGFzcywgc3VwZXJDbGFzcykgOiBzdWJDbGFzcy5fX3Byb3RvX18gPSBzdXBlckNsYXNzOyB9XG5cbmltcG9ydCB7IENvbXBvbmVudCwgQ2hpbGRyZW4gfSBmcm9tICdyZWFjdCc7XG5pbXBvcnQgUHJvcFR5cGVzIGZyb20gJ3Byb3AtdHlwZXMnO1xuaW1wb3J0IHsgc3RvcmVTaGFwZSwgc3Vic2NyaXB0aW9uU2hhcGUgfSBmcm9tICcuLi91dGlscy9Qcm9wVHlwZXMnO1xuaW1wb3J0IHdhcm5pbmcgZnJvbSAnLi4vdXRpbHMvd2FybmluZyc7XG5cbnZhciBkaWRXYXJuQWJvdXRSZWNlaXZpbmdTdG9yZSA9IGZhbHNlO1xuZnVuY3Rpb24gd2FybkFib3V0UmVjZWl2aW5nU3RvcmUoKSB7XG4gIGlmIChkaWRXYXJuQWJvdXRSZWNlaXZpbmdTdG9yZSkge1xuICAgIHJldHVybjtcbiAgfVxuICBkaWRXYXJuQWJvdXRSZWNlaXZpbmdTdG9yZSA9IHRydWU7XG5cbiAgd2FybmluZygnPFByb3ZpZGVyPiBkb2VzIG5vdCBzdXBwb3J0IGNoYW5naW5nIGBzdG9yZWAgb24gdGhlIGZseS4gJyArICdJdCBpcyBtb3N0IGxpa2VseSB0aGF0IHlvdSBzZWUgdGhpcyBlcnJvciBiZWNhdXNlIHlvdSB1cGRhdGVkIHRvICcgKyAnUmVkdXggMi54IGFuZCBSZWFjdCBSZWR1eCAyLnggd2hpY2ggbm8gbG9uZ2VyIGhvdCByZWxvYWQgcmVkdWNlcnMgJyArICdhdXRvbWF0aWNhbGx5LiBTZWUgaHR0cHM6Ly9naXRodWIuY29tL3JlYWN0anMvcmVhY3QtcmVkdXgvcmVsZWFzZXMvJyArICd0YWcvdjIuMC4wIGZvciB0aGUgbWlncmF0aW9uIGluc3RydWN0aW9ucy4nKTtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIGNyZWF0ZVByb3ZpZGVyKCkge1xuICB2YXIgX1Byb3ZpZGVyJGNoaWxkQ29udGV4O1xuXG4gIHZhciBzdG9yZUtleSA9IGFyZ3VtZW50cy5sZW5ndGggPiAwICYmIGFyZ3VtZW50c1swXSAhPT0gdW5kZWZpbmVkID8gYXJndW1lbnRzWzBdIDogJ3N0b3JlJztcbiAgdmFyIHN1YktleSA9IGFyZ3VtZW50c1sxXTtcblxuICB2YXIgc3Vic2NyaXB0aW9uS2V5ID0gc3ViS2V5IHx8IHN0b3JlS2V5ICsgJ1N1YnNjcmlwdGlvbic7XG5cbiAgdmFyIFByb3ZpZGVyID0gZnVuY3Rpb24gKF9Db21wb25lbnQpIHtcbiAgICBfaW5oZXJpdHMoUHJvdmlkZXIsIF9Db21wb25lbnQpO1xuXG4gICAgUHJvdmlkZXIucHJvdG90eXBlLmdldENoaWxkQ29udGV4dCA9IGZ1bmN0aW9uIGdldENoaWxkQ29udGV4dCgpIHtcbiAgICAgIHZhciBfcmVmO1xuXG4gICAgICByZXR1cm4gX3JlZiA9IHt9LCBfcmVmW3N0b3JlS2V5XSA9IHRoaXNbc3RvcmVLZXldLCBfcmVmW3N1YnNjcmlwdGlvbktleV0gPSBudWxsLCBfcmVmO1xuICAgIH07XG5cbiAgICBmdW5jdGlvbiBQcm92aWRlcihwcm9wcywgY29udGV4dCkge1xuICAgICAgX2NsYXNzQ2FsbENoZWNrKHRoaXMsIFByb3ZpZGVyKTtcblxuICAgICAgdmFyIF90aGlzID0gX3Bvc3NpYmxlQ29uc3RydWN0b3JSZXR1cm4odGhpcywgX0NvbXBvbmVudC5jYWxsKHRoaXMsIHByb3BzLCBjb250ZXh0KSk7XG5cbiAgICAgIF90aGlzW3N0b3JlS2V5XSA9IHByb3BzLnN0b3JlO1xuICAgICAgcmV0dXJuIF90aGlzO1xuICAgIH1cblxuICAgIFByb3ZpZGVyLnByb3RvdHlwZS5yZW5kZXIgPSBmdW5jdGlvbiByZW5kZXIoKSB7XG4gICAgICByZXR1cm4gQ2hpbGRyZW4ub25seSh0aGlzLnByb3BzLmNoaWxkcmVuKTtcbiAgICB9O1xuXG4gICAgcmV0dXJuIFByb3ZpZGVyO1xuICB9KENvbXBvbmVudCk7XG5cbiAgaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicpIHtcbiAgICBQcm92aWRlci5wcm90b3R5cGUuY29tcG9uZW50V2lsbFJlY2VpdmVQcm9wcyA9IGZ1bmN0aW9uIChuZXh0UHJvcHMpIHtcbiAgICAgIGlmICh0aGlzW3N0b3JlS2V5XSAhPT0gbmV4dFByb3BzLnN0b3JlKSB7XG4gICAgICAgIHdhcm5BYm91dFJlY2VpdmluZ1N0b3JlKCk7XG4gICAgICB9XG4gICAgfTtcbiAgfVxuXG4gIFByb3ZpZGVyLnByb3BUeXBlcyA9IHtcbiAgICBzdG9yZTogc3RvcmVTaGFwZS5pc1JlcXVpcmVkLFxuICAgIGNoaWxkcmVuOiBQcm9wVHlwZXMuZWxlbWVudC5pc1JlcXVpcmVkXG4gIH07XG4gIFByb3ZpZGVyLmNoaWxkQ29udGV4dFR5cGVzID0gKF9Qcm92aWRlciRjaGlsZENvbnRleCA9IHt9LCBfUHJvdmlkZXIkY2hpbGRDb250ZXhbc3RvcmVLZXldID0gc3RvcmVTaGFwZS5pc1JlcXVpcmVkLCBfUHJvdmlkZXIkY2hpbGRDb250ZXhbc3Vic2NyaXB0aW9uS2V5XSA9IHN1YnNjcmlwdGlvblNoYXBlLCBfUHJvdmlkZXIkY2hpbGRDb250ZXgpO1xuXG4gIHJldHVybiBQcm92aWRlcjtcbn1cblxuZXhwb3J0IGRlZmF1bHQgY3JlYXRlUHJvdmlkZXIoKTsiLCJmdW5jdGlvbiBfY2xhc3NDYWxsQ2hlY2soaW5zdGFuY2UsIENvbnN0cnVjdG9yKSB7IGlmICghKGluc3RhbmNlIGluc3RhbmNlb2YgQ29uc3RydWN0b3IpKSB7IHRocm93IG5ldyBUeXBlRXJyb3IoXCJDYW5ub3QgY2FsbCBhIGNsYXNzIGFzIGEgZnVuY3Rpb25cIik7IH0gfVxuXG4vLyBlbmNhcHN1bGF0ZXMgdGhlIHN1YnNjcmlwdGlvbiBsb2dpYyBmb3IgY29ubmVjdGluZyBhIGNvbXBvbmVudCB0byB0aGUgcmVkdXggc3RvcmUsIGFzXG4vLyB3ZWxsIGFzIG5lc3Rpbmcgc3Vic2NyaXB0aW9ucyBvZiBkZXNjZW5kYW50IGNvbXBvbmVudHMsIHNvIHRoYXQgd2UgY2FuIGVuc3VyZSB0aGVcbi8vIGFuY2VzdG9yIGNvbXBvbmVudHMgcmUtcmVuZGVyIGJlZm9yZSBkZXNjZW5kYW50c1xuXG52YXIgQ0xFQVJFRCA9IG51bGw7XG52YXIgbnVsbExpc3RlbmVycyA9IHtcbiAgbm90aWZ5OiBmdW5jdGlvbiBub3RpZnkoKSB7fVxufTtcblxuZnVuY3Rpb24gY3JlYXRlTGlzdGVuZXJDb2xsZWN0aW9uKCkge1xuICAvLyB0aGUgY3VycmVudC9uZXh0IHBhdHRlcm4gaXMgY29waWVkIGZyb20gcmVkdXgncyBjcmVhdGVTdG9yZSBjb2RlLlxuICAvLyBUT0RPOiByZWZhY3RvcitleHBvc2UgdGhhdCBjb2RlIHRvIGJlIHJldXNhYmxlIGhlcmU/XG4gIHZhciBjdXJyZW50ID0gW107XG4gIHZhciBuZXh0ID0gW107XG5cbiAgcmV0dXJuIHtcbiAgICBjbGVhcjogZnVuY3Rpb24gY2xlYXIoKSB7XG4gICAgICBuZXh0ID0gQ0xFQVJFRDtcbiAgICAgIGN1cnJlbnQgPSBDTEVBUkVEO1xuICAgIH0sXG4gICAgbm90aWZ5OiBmdW5jdGlvbiBub3RpZnkoKSB7XG4gICAgICB2YXIgbGlzdGVuZXJzID0gY3VycmVudCA9IG5leHQ7XG4gICAgICBmb3IgKHZhciBpID0gMDsgaSA8IGxpc3RlbmVycy5sZW5ndGg7IGkrKykge1xuICAgICAgICBsaXN0ZW5lcnNbaV0oKTtcbiAgICAgIH1cbiAgICB9LFxuICAgIGdldDogZnVuY3Rpb24gZ2V0KCkge1xuICAgICAgcmV0dXJuIG5leHQ7XG4gICAgfSxcbiAgICBzdWJzY3JpYmU6IGZ1bmN0aW9uIHN1YnNjcmliZShsaXN0ZW5lcikge1xuICAgICAgdmFyIGlzU3Vic2NyaWJlZCA9IHRydWU7XG4gICAgICBpZiAobmV4dCA9PT0gY3VycmVudCkgbmV4dCA9IGN1cnJlbnQuc2xpY2UoKTtcbiAgICAgIG5leHQucHVzaChsaXN0ZW5lcik7XG5cbiAgICAgIHJldHVybiBmdW5jdGlvbiB1bnN1YnNjcmliZSgpIHtcbiAgICAgICAgaWYgKCFpc1N1YnNjcmliZWQgfHwgY3VycmVudCA9PT0gQ0xFQVJFRCkgcmV0dXJuO1xuICAgICAgICBpc1N1YnNjcmliZWQgPSBmYWxzZTtcblxuICAgICAgICBpZiAobmV4dCA9PT0gY3VycmVudCkgbmV4dCA9IGN1cnJlbnQuc2xpY2UoKTtcbiAgICAgICAgbmV4dC5zcGxpY2UobmV4dC5pbmRleE9mKGxpc3RlbmVyKSwgMSk7XG4gICAgICB9O1xuICAgIH1cbiAgfTtcbn1cblxudmFyIFN1YnNjcmlwdGlvbiA9IGZ1bmN0aW9uICgpIHtcbiAgZnVuY3Rpb24gU3Vic2NyaXB0aW9uKHN0b3JlLCBwYXJlbnRTdWIsIG9uU3RhdGVDaGFuZ2UpIHtcbiAgICBfY2xhc3NDYWxsQ2hlY2sodGhpcywgU3Vic2NyaXB0aW9uKTtcblxuICAgIHRoaXMuc3RvcmUgPSBzdG9yZTtcbiAgICB0aGlzLnBhcmVudFN1YiA9IHBhcmVudFN1YjtcbiAgICB0aGlzLm9uU3RhdGVDaGFuZ2UgPSBvblN0YXRlQ2hhbmdlO1xuICAgIHRoaXMudW5zdWJzY3JpYmUgPSBudWxsO1xuICAgIHRoaXMubGlzdGVuZXJzID0gbnVsbExpc3RlbmVycztcbiAgfVxuXG4gIFN1YnNjcmlwdGlvbi5wcm90b3R5cGUuYWRkTmVzdGVkU3ViID0gZnVuY3Rpb24gYWRkTmVzdGVkU3ViKGxpc3RlbmVyKSB7XG4gICAgdGhpcy50cnlTdWJzY3JpYmUoKTtcbiAgICByZXR1cm4gdGhpcy5saXN0ZW5lcnMuc3Vic2NyaWJlKGxpc3RlbmVyKTtcbiAgfTtcblxuICBTdWJzY3JpcHRpb24ucHJvdG90eXBlLm5vdGlmeU5lc3RlZFN1YnMgPSBmdW5jdGlvbiBub3RpZnlOZXN0ZWRTdWJzKCkge1xuICAgIHRoaXMubGlzdGVuZXJzLm5vdGlmeSgpO1xuICB9O1xuXG4gIFN1YnNjcmlwdGlvbi5wcm90b3R5cGUuaXNTdWJzY3JpYmVkID0gZnVuY3Rpb24gaXNTdWJzY3JpYmVkKCkge1xuICAgIHJldHVybiBCb29sZWFuKHRoaXMudW5zdWJzY3JpYmUpO1xuICB9O1xuXG4gIFN1YnNjcmlwdGlvbi5wcm90b3R5cGUudHJ5U3Vic2NyaWJlID0gZnVuY3Rpb24gdHJ5U3Vic2NyaWJlKCkge1xuICAgIGlmICghdGhpcy51bnN1YnNjcmliZSkge1xuICAgICAgdGhpcy51bnN1YnNjcmliZSA9IHRoaXMucGFyZW50U3ViID8gdGhpcy5wYXJlbnRTdWIuYWRkTmVzdGVkU3ViKHRoaXMub25TdGF0ZUNoYW5nZSkgOiB0aGlzLnN0b3JlLnN1YnNjcmliZSh0aGlzLm9uU3RhdGVDaGFuZ2UpO1xuXG4gICAgICB0aGlzLmxpc3RlbmVycyA9IGNyZWF0ZUxpc3RlbmVyQ29sbGVjdGlvbigpO1xuICAgIH1cbiAgfTtcblxuICBTdWJzY3JpcHRpb24ucHJvdG90eXBlLnRyeVVuc3Vic2NyaWJlID0gZnVuY3Rpb24gdHJ5VW5zdWJzY3JpYmUoKSB7XG4gICAgaWYgKHRoaXMudW5zdWJzY3JpYmUpIHtcbiAgICAgIHRoaXMudW5zdWJzY3JpYmUoKTtcbiAgICAgIHRoaXMudW5zdWJzY3JpYmUgPSBudWxsO1xuICAgICAgdGhpcy5saXN0ZW5lcnMuY2xlYXIoKTtcbiAgICAgIHRoaXMubGlzdGVuZXJzID0gbnVsbExpc3RlbmVycztcbiAgICB9XG4gIH07XG5cbiAgcmV0dXJuIFN1YnNjcmlwdGlvbjtcbn0oKTtcblxuZXhwb3J0IHsgU3Vic2NyaXB0aW9uIGFzIGRlZmF1bHQgfTsiLCJ2YXIgX2V4dGVuZHMgPSBPYmplY3QuYXNzaWduIHx8IGZ1bmN0aW9uICh0YXJnZXQpIHsgZm9yICh2YXIgaSA9IDE7IGkgPCBhcmd1bWVudHMubGVuZ3RoOyBpKyspIHsgdmFyIHNvdXJjZSA9IGFyZ3VtZW50c1tpXTsgZm9yICh2YXIga2V5IGluIHNvdXJjZSkgeyBpZiAoT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsKHNvdXJjZSwga2V5KSkgeyB0YXJnZXRba2V5XSA9IHNvdXJjZVtrZXldOyB9IH0gfSByZXR1cm4gdGFyZ2V0OyB9O1xuXG5mdW5jdGlvbiBfY2xhc3NDYWxsQ2hlY2soaW5zdGFuY2UsIENvbnN0cnVjdG9yKSB7IGlmICghKGluc3RhbmNlIGluc3RhbmNlb2YgQ29uc3RydWN0b3IpKSB7IHRocm93IG5ldyBUeXBlRXJyb3IoXCJDYW5ub3QgY2FsbCBhIGNsYXNzIGFzIGEgZnVuY3Rpb25cIik7IH0gfVxuXG5mdW5jdGlvbiBfcG9zc2libGVDb25zdHJ1Y3RvclJldHVybihzZWxmLCBjYWxsKSB7IGlmICghc2VsZikgeyB0aHJvdyBuZXcgUmVmZXJlbmNlRXJyb3IoXCJ0aGlzIGhhc24ndCBiZWVuIGluaXRpYWxpc2VkIC0gc3VwZXIoKSBoYXNuJ3QgYmVlbiBjYWxsZWRcIik7IH0gcmV0dXJuIGNhbGwgJiYgKHR5cGVvZiBjYWxsID09PSBcIm9iamVjdFwiIHx8IHR5cGVvZiBjYWxsID09PSBcImZ1bmN0aW9uXCIpID8gY2FsbCA6IHNlbGY7IH1cblxuZnVuY3Rpb24gX2luaGVyaXRzKHN1YkNsYXNzLCBzdXBlckNsYXNzKSB7IGlmICh0eXBlb2Ygc3VwZXJDbGFzcyAhPT0gXCJmdW5jdGlvblwiICYmIHN1cGVyQ2xhc3MgIT09IG51bGwpIHsgdGhyb3cgbmV3IFR5cGVFcnJvcihcIlN1cGVyIGV4cHJlc3Npb24gbXVzdCBlaXRoZXIgYmUgbnVsbCBvciBhIGZ1bmN0aW9uLCBub3QgXCIgKyB0eXBlb2Ygc3VwZXJDbGFzcyk7IH0gc3ViQ2xhc3MucHJvdG90eXBlID0gT2JqZWN0LmNyZWF0ZShzdXBlckNsYXNzICYmIHN1cGVyQ2xhc3MucHJvdG90eXBlLCB7IGNvbnN0cnVjdG9yOiB7IHZhbHVlOiBzdWJDbGFzcywgZW51bWVyYWJsZTogZmFsc2UsIHdyaXRhYmxlOiB0cnVlLCBjb25maWd1cmFibGU6IHRydWUgfSB9KTsgaWYgKHN1cGVyQ2xhc3MpIE9iamVjdC5zZXRQcm90b3R5cGVPZiA/IE9iamVjdC5zZXRQcm90b3R5cGVPZihzdWJDbGFzcywgc3VwZXJDbGFzcykgOiBzdWJDbGFzcy5fX3Byb3RvX18gPSBzdXBlckNsYXNzOyB9XG5cbmZ1bmN0aW9uIF9vYmplY3RXaXRob3V0UHJvcGVydGllcyhvYmosIGtleXMpIHsgdmFyIHRhcmdldCA9IHt9OyBmb3IgKHZhciBpIGluIG9iaikgeyBpZiAoa2V5cy5pbmRleE9mKGkpID49IDApIGNvbnRpbnVlOyBpZiAoIU9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbChvYmosIGkpKSBjb250aW51ZTsgdGFyZ2V0W2ldID0gb2JqW2ldOyB9IHJldHVybiB0YXJnZXQ7IH1cblxuaW1wb3J0IGhvaXN0U3RhdGljcyBmcm9tICdob2lzdC1ub24tcmVhY3Qtc3RhdGljcyc7XG5pbXBvcnQgaW52YXJpYW50IGZyb20gJ2ludmFyaWFudCc7XG5pbXBvcnQgeyBDb21wb25lbnQsIGNyZWF0ZUVsZW1lbnQgfSBmcm9tICdyZWFjdCc7XG5cbmltcG9ydCBTdWJzY3JpcHRpb24gZnJvbSAnLi4vdXRpbHMvU3Vic2NyaXB0aW9uJztcbmltcG9ydCB7IHN0b3JlU2hhcGUsIHN1YnNjcmlwdGlvblNoYXBlIH0gZnJvbSAnLi4vdXRpbHMvUHJvcFR5cGVzJztcblxudmFyIGhvdFJlbG9hZGluZ1ZlcnNpb24gPSAwO1xudmFyIGR1bW15U3RhdGUgPSB7fTtcbmZ1bmN0aW9uIG5vb3AoKSB7fVxuZnVuY3Rpb24gbWFrZVNlbGVjdG9yU3RhdGVmdWwoc291cmNlU2VsZWN0b3IsIHN0b3JlKSB7XG4gIC8vIHdyYXAgdGhlIHNlbGVjdG9yIGluIGFuIG9iamVjdCB0aGF0IHRyYWNrcyBpdHMgcmVzdWx0cyBiZXR3ZWVuIHJ1bnMuXG4gIHZhciBzZWxlY3RvciA9IHtcbiAgICBydW46IGZ1bmN0aW9uIHJ1bkNvbXBvbmVudFNlbGVjdG9yKHByb3BzKSB7XG4gICAgICB0cnkge1xuICAgICAgICB2YXIgbmV4dFByb3BzID0gc291cmNlU2VsZWN0b3Ioc3RvcmUuZ2V0U3RhdGUoKSwgcHJvcHMpO1xuICAgICAgICBpZiAobmV4dFByb3BzICE9PSBzZWxlY3Rvci5wcm9wcyB8fCBzZWxlY3Rvci5lcnJvcikge1xuICAgICAgICAgIHNlbGVjdG9yLnNob3VsZENvbXBvbmVudFVwZGF0ZSA9IHRydWU7XG4gICAgICAgICAgc2VsZWN0b3IucHJvcHMgPSBuZXh0UHJvcHM7XG4gICAgICAgICAgc2VsZWN0b3IuZXJyb3IgPSBudWxsO1xuICAgICAgICB9XG4gICAgICB9IGNhdGNoIChlcnJvcikge1xuICAgICAgICBzZWxlY3Rvci5zaG91bGRDb21wb25lbnRVcGRhdGUgPSB0cnVlO1xuICAgICAgICBzZWxlY3Rvci5lcnJvciA9IGVycm9yO1xuICAgICAgfVxuICAgIH1cbiAgfTtcblxuICByZXR1cm4gc2VsZWN0b3I7XG59XG5cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIGNvbm5lY3RBZHZhbmNlZChcbi8qXG4gIHNlbGVjdG9yRmFjdG9yeSBpcyBhIGZ1bmMgdGhhdCBpcyByZXNwb25zaWJsZSBmb3IgcmV0dXJuaW5nIHRoZSBzZWxlY3RvciBmdW5jdGlvbiB1c2VkIHRvXG4gIGNvbXB1dGUgbmV3IHByb3BzIGZyb20gc3RhdGUsIHByb3BzLCBhbmQgZGlzcGF0Y2guIEZvciBleGFtcGxlOlxuICAgICBleHBvcnQgZGVmYXVsdCBjb25uZWN0QWR2YW5jZWQoKGRpc3BhdGNoLCBvcHRpb25zKSA9PiAoc3RhdGUsIHByb3BzKSA9PiAoe1xuICAgICAgdGhpbmc6IHN0YXRlLnRoaW5nc1twcm9wcy50aGluZ0lkXSxcbiAgICAgIHNhdmVUaGluZzogZmllbGRzID0+IGRpc3BhdGNoKGFjdGlvbkNyZWF0b3JzLnNhdmVUaGluZyhwcm9wcy50aGluZ0lkLCBmaWVsZHMpKSxcbiAgICB9KSkoWW91ckNvbXBvbmVudClcbiAgIEFjY2VzcyB0byBkaXNwYXRjaCBpcyBwcm92aWRlZCB0byB0aGUgZmFjdG9yeSBzbyBzZWxlY3RvckZhY3RvcmllcyBjYW4gYmluZCBhY3Rpb25DcmVhdG9yc1xuICBvdXRzaWRlIG9mIHRoZWlyIHNlbGVjdG9yIGFzIGFuIG9wdGltaXphdGlvbi4gT3B0aW9ucyBwYXNzZWQgdG8gY29ubmVjdEFkdmFuY2VkIGFyZSBwYXNzZWQgdG9cbiAgdGhlIHNlbGVjdG9yRmFjdG9yeSwgYWxvbmcgd2l0aCBkaXNwbGF5TmFtZSBhbmQgV3JhcHBlZENvbXBvbmVudCwgYXMgdGhlIHNlY29uZCBhcmd1bWVudC5cbiAgIE5vdGUgdGhhdCBzZWxlY3RvckZhY3RvcnkgaXMgcmVzcG9uc2libGUgZm9yIGFsbCBjYWNoaW5nL21lbW9pemF0aW9uIG9mIGluYm91bmQgYW5kIG91dGJvdW5kXG4gIHByb3BzLiBEbyBub3QgdXNlIGNvbm5lY3RBZHZhbmNlZCBkaXJlY3RseSB3aXRob3V0IG1lbW9pemluZyByZXN1bHRzIGJldHdlZW4gY2FsbHMgdG8geW91clxuICBzZWxlY3Rvciwgb3RoZXJ3aXNlIHRoZSBDb25uZWN0IGNvbXBvbmVudCB3aWxsIHJlLXJlbmRlciBvbiBldmVyeSBzdGF0ZSBvciBwcm9wcyBjaGFuZ2UuXG4qL1xuc2VsZWN0b3JGYWN0b3J5KSB7XG4gIHZhciBfY29udGV4dFR5cGVzLCBfY2hpbGRDb250ZXh0VHlwZXM7XG5cbiAgdmFyIF9yZWYgPSBhcmd1bWVudHMubGVuZ3RoID4gMSAmJiBhcmd1bWVudHNbMV0gIT09IHVuZGVmaW5lZCA/IGFyZ3VtZW50c1sxXSA6IHt9LFxuICAgICAgX3JlZiRnZXREaXNwbGF5TmFtZSA9IF9yZWYuZ2V0RGlzcGxheU5hbWUsXG4gICAgICBnZXREaXNwbGF5TmFtZSA9IF9yZWYkZ2V0RGlzcGxheU5hbWUgPT09IHVuZGVmaW5lZCA/IGZ1bmN0aW9uIChuYW1lKSB7XG4gICAgcmV0dXJuICdDb25uZWN0QWR2YW5jZWQoJyArIG5hbWUgKyAnKSc7XG4gIH0gOiBfcmVmJGdldERpc3BsYXlOYW1lLFxuICAgICAgX3JlZiRtZXRob2ROYW1lID0gX3JlZi5tZXRob2ROYW1lLFxuICAgICAgbWV0aG9kTmFtZSA9IF9yZWYkbWV0aG9kTmFtZSA9PT0gdW5kZWZpbmVkID8gJ2Nvbm5lY3RBZHZhbmNlZCcgOiBfcmVmJG1ldGhvZE5hbWUsXG4gICAgICBfcmVmJHJlbmRlckNvdW50UHJvcCA9IF9yZWYucmVuZGVyQ291bnRQcm9wLFxuICAgICAgcmVuZGVyQ291bnRQcm9wID0gX3JlZiRyZW5kZXJDb3VudFByb3AgPT09IHVuZGVmaW5lZCA/IHVuZGVmaW5lZCA6IF9yZWYkcmVuZGVyQ291bnRQcm9wLFxuICAgICAgX3JlZiRzaG91bGRIYW5kbGVTdGF0ID0gX3JlZi5zaG91bGRIYW5kbGVTdGF0ZUNoYW5nZXMsXG4gICAgICBzaG91bGRIYW5kbGVTdGF0ZUNoYW5nZXMgPSBfcmVmJHNob3VsZEhhbmRsZVN0YXQgPT09IHVuZGVmaW5lZCA/IHRydWUgOiBfcmVmJHNob3VsZEhhbmRsZVN0YXQsXG4gICAgICBfcmVmJHN0b3JlS2V5ID0gX3JlZi5zdG9yZUtleSxcbiAgICAgIHN0b3JlS2V5ID0gX3JlZiRzdG9yZUtleSA9PT0gdW5kZWZpbmVkID8gJ3N0b3JlJyA6IF9yZWYkc3RvcmVLZXksXG4gICAgICBfcmVmJHdpdGhSZWYgPSBfcmVmLndpdGhSZWYsXG4gICAgICB3aXRoUmVmID0gX3JlZiR3aXRoUmVmID09PSB1bmRlZmluZWQgPyBmYWxzZSA6IF9yZWYkd2l0aFJlZixcbiAgICAgIGNvbm5lY3RPcHRpb25zID0gX29iamVjdFdpdGhvdXRQcm9wZXJ0aWVzKF9yZWYsIFsnZ2V0RGlzcGxheU5hbWUnLCAnbWV0aG9kTmFtZScsICdyZW5kZXJDb3VudFByb3AnLCAnc2hvdWxkSGFuZGxlU3RhdGVDaGFuZ2VzJywgJ3N0b3JlS2V5JywgJ3dpdGhSZWYnXSk7XG5cbiAgdmFyIHN1YnNjcmlwdGlvbktleSA9IHN0b3JlS2V5ICsgJ1N1YnNjcmlwdGlvbic7XG4gIHZhciB2ZXJzaW9uID0gaG90UmVsb2FkaW5nVmVyc2lvbisrO1xuXG4gIHZhciBjb250ZXh0VHlwZXMgPSAoX2NvbnRleHRUeXBlcyA9IHt9LCBfY29udGV4dFR5cGVzW3N0b3JlS2V5XSA9IHN0b3JlU2hhcGUsIF9jb250ZXh0VHlwZXNbc3Vic2NyaXB0aW9uS2V5XSA9IHN1YnNjcmlwdGlvblNoYXBlLCBfY29udGV4dFR5cGVzKTtcbiAgdmFyIGNoaWxkQ29udGV4dFR5cGVzID0gKF9jaGlsZENvbnRleHRUeXBlcyA9IHt9LCBfY2hpbGRDb250ZXh0VHlwZXNbc3Vic2NyaXB0aW9uS2V5XSA9IHN1YnNjcmlwdGlvblNoYXBlLCBfY2hpbGRDb250ZXh0VHlwZXMpO1xuXG4gIHJldHVybiBmdW5jdGlvbiB3cmFwV2l0aENvbm5lY3QoV3JhcHBlZENvbXBvbmVudCkge1xuICAgIGludmFyaWFudCh0eXBlb2YgV3JhcHBlZENvbXBvbmVudCA9PSAnZnVuY3Rpb24nLCAnWW91IG11c3QgcGFzcyBhIGNvbXBvbmVudCB0byB0aGUgZnVuY3Rpb24gcmV0dXJuZWQgYnkgJyArIChtZXRob2ROYW1lICsgJy4gSW5zdGVhZCByZWNlaXZlZCAnICsgSlNPTi5zdHJpbmdpZnkoV3JhcHBlZENvbXBvbmVudCkpKTtcblxuICAgIHZhciB3cmFwcGVkQ29tcG9uZW50TmFtZSA9IFdyYXBwZWRDb21wb25lbnQuZGlzcGxheU5hbWUgfHwgV3JhcHBlZENvbXBvbmVudC5uYW1lIHx8ICdDb21wb25lbnQnO1xuXG4gICAgdmFyIGRpc3BsYXlOYW1lID0gZ2V0RGlzcGxheU5hbWUod3JhcHBlZENvbXBvbmVudE5hbWUpO1xuXG4gICAgdmFyIHNlbGVjdG9yRmFjdG9yeU9wdGlvbnMgPSBfZXh0ZW5kcyh7fSwgY29ubmVjdE9wdGlvbnMsIHtcbiAgICAgIGdldERpc3BsYXlOYW1lOiBnZXREaXNwbGF5TmFtZSxcbiAgICAgIG1ldGhvZE5hbWU6IG1ldGhvZE5hbWUsXG4gICAgICByZW5kZXJDb3VudFByb3A6IHJlbmRlckNvdW50UHJvcCxcbiAgICAgIHNob3VsZEhhbmRsZVN0YXRlQ2hhbmdlczogc2hvdWxkSGFuZGxlU3RhdGVDaGFuZ2VzLFxuICAgICAgc3RvcmVLZXk6IHN0b3JlS2V5LFxuICAgICAgd2l0aFJlZjogd2l0aFJlZixcbiAgICAgIGRpc3BsYXlOYW1lOiBkaXNwbGF5TmFtZSxcbiAgICAgIHdyYXBwZWRDb21wb25lbnROYW1lOiB3cmFwcGVkQ29tcG9uZW50TmFtZSxcbiAgICAgIFdyYXBwZWRDb21wb25lbnQ6IFdyYXBwZWRDb21wb25lbnRcbiAgICB9KTtcblxuICAgIHZhciBDb25uZWN0ID0gZnVuY3Rpb24gKF9Db21wb25lbnQpIHtcbiAgICAgIF9pbmhlcml0cyhDb25uZWN0LCBfQ29tcG9uZW50KTtcblxuICAgICAgZnVuY3Rpb24gQ29ubmVjdChwcm9wcywgY29udGV4dCkge1xuICAgICAgICBfY2xhc3NDYWxsQ2hlY2sodGhpcywgQ29ubmVjdCk7XG5cbiAgICAgICAgdmFyIF90aGlzID0gX3Bvc3NpYmxlQ29uc3RydWN0b3JSZXR1cm4odGhpcywgX0NvbXBvbmVudC5jYWxsKHRoaXMsIHByb3BzLCBjb250ZXh0KSk7XG5cbiAgICAgICAgX3RoaXMudmVyc2lvbiA9IHZlcnNpb247XG4gICAgICAgIF90aGlzLnN0YXRlID0ge307XG4gICAgICAgIF90aGlzLnJlbmRlckNvdW50ID0gMDtcbiAgICAgICAgX3RoaXMuc3RvcmUgPSBwcm9wc1tzdG9yZUtleV0gfHwgY29udGV4dFtzdG9yZUtleV07XG4gICAgICAgIF90aGlzLnByb3BzTW9kZSA9IEJvb2xlYW4ocHJvcHNbc3RvcmVLZXldKTtcbiAgICAgICAgX3RoaXMuc2V0V3JhcHBlZEluc3RhbmNlID0gX3RoaXMuc2V0V3JhcHBlZEluc3RhbmNlLmJpbmQoX3RoaXMpO1xuXG4gICAgICAgIGludmFyaWFudChfdGhpcy5zdG9yZSwgJ0NvdWxkIG5vdCBmaW5kIFwiJyArIHN0b3JlS2V5ICsgJ1wiIGluIGVpdGhlciB0aGUgY29udGV4dCBvciBwcm9wcyBvZiAnICsgKCdcIicgKyBkaXNwbGF5TmFtZSArICdcIi4gRWl0aGVyIHdyYXAgdGhlIHJvb3QgY29tcG9uZW50IGluIGEgPFByb3ZpZGVyPiwgJykgKyAoJ29yIGV4cGxpY2l0bHkgcGFzcyBcIicgKyBzdG9yZUtleSArICdcIiBhcyBhIHByb3AgdG8gXCInICsgZGlzcGxheU5hbWUgKyAnXCIuJykpO1xuXG4gICAgICAgIF90aGlzLmluaXRTZWxlY3RvcigpO1xuICAgICAgICBfdGhpcy5pbml0U3Vic2NyaXB0aW9uKCk7XG4gICAgICAgIHJldHVybiBfdGhpcztcbiAgICAgIH1cblxuICAgICAgQ29ubmVjdC5wcm90b3R5cGUuZ2V0Q2hpbGRDb250ZXh0ID0gZnVuY3Rpb24gZ2V0Q2hpbGRDb250ZXh0KCkge1xuICAgICAgICB2YXIgX3JlZjI7XG5cbiAgICAgICAgLy8gSWYgdGhpcyBjb21wb25lbnQgcmVjZWl2ZWQgc3RvcmUgZnJvbSBwcm9wcywgaXRzIHN1YnNjcmlwdGlvbiBzaG91bGQgYmUgdHJhbnNwYXJlbnRcbiAgICAgICAgLy8gdG8gYW55IGRlc2NlbmRhbnRzIHJlY2VpdmluZyBzdG9yZStzdWJzY3JpcHRpb24gZnJvbSBjb250ZXh0OyBpdCBwYXNzZXMgYWxvbmdcbiAgICAgICAgLy8gc3Vic2NyaXB0aW9uIHBhc3NlZCB0byBpdC4gT3RoZXJ3aXNlLCBpdCBzaGFkb3dzIHRoZSBwYXJlbnQgc3Vic2NyaXB0aW9uLCB3aGljaCBhbGxvd3NcbiAgICAgICAgLy8gQ29ubmVjdCB0byBjb250cm9sIG9yZGVyaW5nIG9mIG5vdGlmaWNhdGlvbnMgdG8gZmxvdyB0b3AtZG93bi5cbiAgICAgICAgdmFyIHN1YnNjcmlwdGlvbiA9IHRoaXMucHJvcHNNb2RlID8gbnVsbCA6IHRoaXMuc3Vic2NyaXB0aW9uO1xuICAgICAgICByZXR1cm4gX3JlZjIgPSB7fSwgX3JlZjJbc3Vic2NyaXB0aW9uS2V5XSA9IHN1YnNjcmlwdGlvbiB8fCB0aGlzLmNvbnRleHRbc3Vic2NyaXB0aW9uS2V5XSwgX3JlZjI7XG4gICAgICB9O1xuXG4gICAgICBDb25uZWN0LnByb3RvdHlwZS5jb21wb25lbnREaWRNb3VudCA9IGZ1bmN0aW9uIGNvbXBvbmVudERpZE1vdW50KCkge1xuICAgICAgICBpZiAoIXNob3VsZEhhbmRsZVN0YXRlQ2hhbmdlcykgcmV0dXJuO1xuXG4gICAgICAgIC8vIGNvbXBvbmVudFdpbGxNb3VudCBmaXJlcyBkdXJpbmcgc2VydmVyIHNpZGUgcmVuZGVyaW5nLCBidXQgY29tcG9uZW50RGlkTW91bnQgYW5kXG4gICAgICAgIC8vIGNvbXBvbmVudFdpbGxVbm1vdW50IGRvIG5vdC4gQmVjYXVzZSBvZiB0aGlzLCB0cnlTdWJzY3JpYmUgaGFwcGVucyBkdXJpbmcgLi4uZGlkTW91bnQuXG4gICAgICAgIC8vIE90aGVyd2lzZSwgdW5zdWJzY3JpcHRpb24gd291bGQgbmV2ZXIgdGFrZSBwbGFjZSBkdXJpbmcgU1NSLCBjYXVzaW5nIGEgbWVtb3J5IGxlYWsuXG4gICAgICAgIC8vIFRvIGhhbmRsZSB0aGUgY2FzZSB3aGVyZSBhIGNoaWxkIGNvbXBvbmVudCBtYXkgaGF2ZSB0cmlnZ2VyZWQgYSBzdGF0ZSBjaGFuZ2UgYnlcbiAgICAgICAgLy8gZGlzcGF0Y2hpbmcgYW4gYWN0aW9uIGluIGl0cyBjb21wb25lbnRXaWxsTW91bnQsIHdlIGhhdmUgdG8gcmUtcnVuIHRoZSBzZWxlY3QgYW5kIG1heWJlXG4gICAgICAgIC8vIHJlLXJlbmRlci5cbiAgICAgICAgdGhpcy5zdWJzY3JpcHRpb24udHJ5U3Vic2NyaWJlKCk7XG4gICAgICAgIHRoaXMuc2VsZWN0b3IucnVuKHRoaXMucHJvcHMpO1xuICAgICAgICBpZiAodGhpcy5zZWxlY3Rvci5zaG91bGRDb21wb25lbnRVcGRhdGUpIHRoaXMuZm9yY2VVcGRhdGUoKTtcbiAgICAgIH07XG5cbiAgICAgIENvbm5lY3QucHJvdG90eXBlLmNvbXBvbmVudFdpbGxSZWNlaXZlUHJvcHMgPSBmdW5jdGlvbiBjb21wb25lbnRXaWxsUmVjZWl2ZVByb3BzKG5leHRQcm9wcykge1xuICAgICAgICB0aGlzLnNlbGVjdG9yLnJ1bihuZXh0UHJvcHMpO1xuICAgICAgfTtcblxuICAgICAgQ29ubmVjdC5wcm90b3R5cGUuc2hvdWxkQ29tcG9uZW50VXBkYXRlID0gZnVuY3Rpb24gc2hvdWxkQ29tcG9uZW50VXBkYXRlKCkge1xuICAgICAgICByZXR1cm4gdGhpcy5zZWxlY3Rvci5zaG91bGRDb21wb25lbnRVcGRhdGU7XG4gICAgICB9O1xuXG4gICAgICBDb25uZWN0LnByb3RvdHlwZS5jb21wb25lbnRXaWxsVW5tb3VudCA9IGZ1bmN0aW9uIGNvbXBvbmVudFdpbGxVbm1vdW50KCkge1xuICAgICAgICBpZiAodGhpcy5zdWJzY3JpcHRpb24pIHRoaXMuc3Vic2NyaXB0aW9uLnRyeVVuc3Vic2NyaWJlKCk7XG4gICAgICAgIHRoaXMuc3Vic2NyaXB0aW9uID0gbnVsbDtcbiAgICAgICAgdGhpcy5ub3RpZnlOZXN0ZWRTdWJzID0gbm9vcDtcbiAgICAgICAgdGhpcy5zdG9yZSA9IG51bGw7XG4gICAgICAgIHRoaXMuc2VsZWN0b3IucnVuID0gbm9vcDtcbiAgICAgICAgdGhpcy5zZWxlY3Rvci5zaG91bGRDb21wb25lbnRVcGRhdGUgPSBmYWxzZTtcbiAgICAgIH07XG5cbiAgICAgIENvbm5lY3QucHJvdG90eXBlLmdldFdyYXBwZWRJbnN0YW5jZSA9IGZ1bmN0aW9uIGdldFdyYXBwZWRJbnN0YW5jZSgpIHtcbiAgICAgICAgaW52YXJpYW50KHdpdGhSZWYsICdUbyBhY2Nlc3MgdGhlIHdyYXBwZWQgaW5zdGFuY2UsIHlvdSBuZWVkIHRvIHNwZWNpZnkgJyArICgneyB3aXRoUmVmOiB0cnVlIH0gaW4gdGhlIG9wdGlvbnMgYXJndW1lbnQgb2YgdGhlICcgKyBtZXRob2ROYW1lICsgJygpIGNhbGwuJykpO1xuICAgICAgICByZXR1cm4gdGhpcy53cmFwcGVkSW5zdGFuY2U7XG4gICAgICB9O1xuXG4gICAgICBDb25uZWN0LnByb3RvdHlwZS5zZXRXcmFwcGVkSW5zdGFuY2UgPSBmdW5jdGlvbiBzZXRXcmFwcGVkSW5zdGFuY2UocmVmKSB7XG4gICAgICAgIHRoaXMud3JhcHBlZEluc3RhbmNlID0gcmVmO1xuICAgICAgfTtcblxuICAgICAgQ29ubmVjdC5wcm90b3R5cGUuaW5pdFNlbGVjdG9yID0gZnVuY3Rpb24gaW5pdFNlbGVjdG9yKCkge1xuICAgICAgICB2YXIgc291cmNlU2VsZWN0b3IgPSBzZWxlY3RvckZhY3RvcnkodGhpcy5zdG9yZS5kaXNwYXRjaCwgc2VsZWN0b3JGYWN0b3J5T3B0aW9ucyk7XG4gICAgICAgIHRoaXMuc2VsZWN0b3IgPSBtYWtlU2VsZWN0b3JTdGF0ZWZ1bChzb3VyY2VTZWxlY3RvciwgdGhpcy5zdG9yZSk7XG4gICAgICAgIHRoaXMuc2VsZWN0b3IucnVuKHRoaXMucHJvcHMpO1xuICAgICAgfTtcblxuICAgICAgQ29ubmVjdC5wcm90b3R5cGUuaW5pdFN1YnNjcmlwdGlvbiA9IGZ1bmN0aW9uIGluaXRTdWJzY3JpcHRpb24oKSB7XG4gICAgICAgIGlmICghc2hvdWxkSGFuZGxlU3RhdGVDaGFuZ2VzKSByZXR1cm47XG5cbiAgICAgICAgLy8gcGFyZW50U3ViJ3Mgc291cmNlIHNob3VsZCBtYXRjaCB3aGVyZSBzdG9yZSBjYW1lIGZyb206IHByb3BzIHZzLiBjb250ZXh0LiBBIGNvbXBvbmVudFxuICAgICAgICAvLyBjb25uZWN0ZWQgdG8gdGhlIHN0b3JlIHZpYSBwcm9wcyBzaG91bGRuJ3QgdXNlIHN1YnNjcmlwdGlvbiBmcm9tIGNvbnRleHQsIG9yIHZpY2UgdmVyc2EuXG4gICAgICAgIHZhciBwYXJlbnRTdWIgPSAodGhpcy5wcm9wc01vZGUgPyB0aGlzLnByb3BzIDogdGhpcy5jb250ZXh0KVtzdWJzY3JpcHRpb25LZXldO1xuICAgICAgICB0aGlzLnN1YnNjcmlwdGlvbiA9IG5ldyBTdWJzY3JpcHRpb24odGhpcy5zdG9yZSwgcGFyZW50U3ViLCB0aGlzLm9uU3RhdGVDaGFuZ2UuYmluZCh0aGlzKSk7XG5cbiAgICAgICAgLy8gYG5vdGlmeU5lc3RlZFN1YnNgIGlzIGR1cGxpY2F0ZWQgdG8gaGFuZGxlIHRoZSBjYXNlIHdoZXJlIHRoZSBjb21wb25lbnQgaXMgIHVubW91bnRlZCBpblxuICAgICAgICAvLyB0aGUgbWlkZGxlIG9mIHRoZSBub3RpZmljYXRpb24gbG9vcCwgd2hlcmUgYHRoaXMuc3Vic2NyaXB0aW9uYCB3aWxsIHRoZW4gYmUgbnVsbC4gQW5cbiAgICAgICAgLy8gZXh0cmEgbnVsbCBjaGVjayBldmVyeSBjaGFuZ2UgY2FuIGJlIGF2b2lkZWQgYnkgY29weWluZyB0aGUgbWV0aG9kIG9udG8gYHRoaXNgIGFuZCB0aGVuXG4gICAgICAgIC8vIHJlcGxhY2luZyBpdCB3aXRoIGEgbm8tb3Agb24gdW5tb3VudC4gVGhpcyBjYW4gcHJvYmFibHkgYmUgYXZvaWRlZCBpZiBTdWJzY3JpcHRpb24nc1xuICAgICAgICAvLyBsaXN0ZW5lcnMgbG9naWMgaXMgY2hhbmdlZCB0byBub3QgY2FsbCBsaXN0ZW5lcnMgdGhhdCBoYXZlIGJlZW4gdW5zdWJzY3JpYmVkIGluIHRoZVxuICAgICAgICAvLyBtaWRkbGUgb2YgdGhlIG5vdGlmaWNhdGlvbiBsb29wLlxuICAgICAgICB0aGlzLm5vdGlmeU5lc3RlZFN1YnMgPSB0aGlzLnN1YnNjcmlwdGlvbi5ub3RpZnlOZXN0ZWRTdWJzLmJpbmQodGhpcy5zdWJzY3JpcHRpb24pO1xuICAgICAgfTtcblxuICAgICAgQ29ubmVjdC5wcm90b3R5cGUub25TdGF0ZUNoYW5nZSA9IGZ1bmN0aW9uIG9uU3RhdGVDaGFuZ2UoKSB7XG4gICAgICAgIHRoaXMuc2VsZWN0b3IucnVuKHRoaXMucHJvcHMpO1xuXG4gICAgICAgIGlmICghdGhpcy5zZWxlY3Rvci5zaG91bGRDb21wb25lbnRVcGRhdGUpIHtcbiAgICAgICAgICB0aGlzLm5vdGlmeU5lc3RlZFN1YnMoKTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICB0aGlzLmNvbXBvbmVudERpZFVwZGF0ZSA9IHRoaXMubm90aWZ5TmVzdGVkU3Vic09uQ29tcG9uZW50RGlkVXBkYXRlO1xuICAgICAgICAgIHRoaXMuc2V0U3RhdGUoZHVtbXlTdGF0ZSk7XG4gICAgICAgIH1cbiAgICAgIH07XG5cbiAgICAgIENvbm5lY3QucHJvdG90eXBlLm5vdGlmeU5lc3RlZFN1YnNPbkNvbXBvbmVudERpZFVwZGF0ZSA9IGZ1bmN0aW9uIG5vdGlmeU5lc3RlZFN1YnNPbkNvbXBvbmVudERpZFVwZGF0ZSgpIHtcbiAgICAgICAgLy8gYGNvbXBvbmVudERpZFVwZGF0ZWAgaXMgY29uZGl0aW9uYWxseSBpbXBsZW1lbnRlZCB3aGVuIGBvblN0YXRlQ2hhbmdlYCBkZXRlcm1pbmVzIGl0XG4gICAgICAgIC8vIG5lZWRzIHRvIG5vdGlmeSBuZXN0ZWQgc3Vicy4gT25jZSBjYWxsZWQsIGl0IHVuaW1wbGVtZW50cyBpdHNlbGYgdW50aWwgZnVydGhlciBzdGF0ZVxuICAgICAgICAvLyBjaGFuZ2VzIG9jY3VyLiBEb2luZyBpdCB0aGlzIHdheSB2cyBoYXZpbmcgYSBwZXJtYW5lbnQgYGNvbXBvbmVudERpZFVwZGF0ZWAgdGhhdCBkb2VzXG4gICAgICAgIC8vIGEgYm9vbGVhbiBjaGVjayBldmVyeSB0aW1lIGF2b2lkcyBhbiBleHRyYSBtZXRob2QgY2FsbCBtb3N0IG9mIHRoZSB0aW1lLCByZXN1bHRpbmdcbiAgICAgICAgLy8gaW4gc29tZSBwZXJmIGJvb3N0LlxuICAgICAgICB0aGlzLmNvbXBvbmVudERpZFVwZGF0ZSA9IHVuZGVmaW5lZDtcbiAgICAgICAgdGhpcy5ub3RpZnlOZXN0ZWRTdWJzKCk7XG4gICAgICB9O1xuXG4gICAgICBDb25uZWN0LnByb3RvdHlwZS5pc1N1YnNjcmliZWQgPSBmdW5jdGlvbiBpc1N1YnNjcmliZWQoKSB7XG4gICAgICAgIHJldHVybiBCb29sZWFuKHRoaXMuc3Vic2NyaXB0aW9uKSAmJiB0aGlzLnN1YnNjcmlwdGlvbi5pc1N1YnNjcmliZWQoKTtcbiAgICAgIH07XG5cbiAgICAgIENvbm5lY3QucHJvdG90eXBlLmFkZEV4dHJhUHJvcHMgPSBmdW5jdGlvbiBhZGRFeHRyYVByb3BzKHByb3BzKSB7XG4gICAgICAgIGlmICghd2l0aFJlZiAmJiAhcmVuZGVyQ291bnRQcm9wICYmICEodGhpcy5wcm9wc01vZGUgJiYgdGhpcy5zdWJzY3JpcHRpb24pKSByZXR1cm4gcHJvcHM7XG4gICAgICAgIC8vIG1ha2UgYSBzaGFsbG93IGNvcHkgc28gdGhhdCBmaWVsZHMgYWRkZWQgZG9uJ3QgbGVhayB0byB0aGUgb3JpZ2luYWwgc2VsZWN0b3IuXG4gICAgICAgIC8vIHRoaXMgaXMgZXNwZWNpYWxseSBpbXBvcnRhbnQgZm9yICdyZWYnIHNpbmNlIHRoYXQncyBhIHJlZmVyZW5jZSBiYWNrIHRvIHRoZSBjb21wb25lbnRcbiAgICAgICAgLy8gaW5zdGFuY2UuIGEgc2luZ2xldG9uIG1lbW9pemVkIHNlbGVjdG9yIHdvdWxkIHRoZW4gYmUgaG9sZGluZyBhIHJlZmVyZW5jZSB0byB0aGVcbiAgICAgICAgLy8gaW5zdGFuY2UsIHByZXZlbnRpbmcgdGhlIGluc3RhbmNlIGZyb20gYmVpbmcgZ2FyYmFnZSBjb2xsZWN0ZWQsIGFuZCB0aGF0IHdvdWxkIGJlIGJhZFxuICAgICAgICB2YXIgd2l0aEV4dHJhcyA9IF9leHRlbmRzKHt9LCBwcm9wcyk7XG4gICAgICAgIGlmICh3aXRoUmVmKSB3aXRoRXh0cmFzLnJlZiA9IHRoaXMuc2V0V3JhcHBlZEluc3RhbmNlO1xuICAgICAgICBpZiAocmVuZGVyQ291bnRQcm9wKSB3aXRoRXh0cmFzW3JlbmRlckNvdW50UHJvcF0gPSB0aGlzLnJlbmRlckNvdW50Kys7XG4gICAgICAgIGlmICh0aGlzLnByb3BzTW9kZSAmJiB0aGlzLnN1YnNjcmlwdGlvbikgd2l0aEV4dHJhc1tzdWJzY3JpcHRpb25LZXldID0gdGhpcy5zdWJzY3JpcHRpb247XG4gICAgICAgIHJldHVybiB3aXRoRXh0cmFzO1xuICAgICAgfTtcblxuICAgICAgQ29ubmVjdC5wcm90b3R5cGUucmVuZGVyID0gZnVuY3Rpb24gcmVuZGVyKCkge1xuICAgICAgICB2YXIgc2VsZWN0b3IgPSB0aGlzLnNlbGVjdG9yO1xuICAgICAgICBzZWxlY3Rvci5zaG91bGRDb21wb25lbnRVcGRhdGUgPSBmYWxzZTtcblxuICAgICAgICBpZiAoc2VsZWN0b3IuZXJyb3IpIHtcbiAgICAgICAgICB0aHJvdyBzZWxlY3Rvci5lcnJvcjtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICByZXR1cm4gY3JlYXRlRWxlbWVudChXcmFwcGVkQ29tcG9uZW50LCB0aGlzLmFkZEV4dHJhUHJvcHMoc2VsZWN0b3IucHJvcHMpKTtcbiAgICAgICAgfVxuICAgICAgfTtcblxuICAgICAgcmV0dXJuIENvbm5lY3Q7XG4gICAgfShDb21wb25lbnQpO1xuXG4gICAgQ29ubmVjdC5XcmFwcGVkQ29tcG9uZW50ID0gV3JhcHBlZENvbXBvbmVudDtcbiAgICBDb25uZWN0LmRpc3BsYXlOYW1lID0gZGlzcGxheU5hbWU7XG4gICAgQ29ubmVjdC5jaGlsZENvbnRleHRUeXBlcyA9IGNoaWxkQ29udGV4dFR5cGVzO1xuICAgIENvbm5lY3QuY29udGV4dFR5cGVzID0gY29udGV4dFR5cGVzO1xuICAgIENvbm5lY3QucHJvcFR5cGVzID0gY29udGV4dFR5cGVzO1xuXG4gICAgaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicpIHtcbiAgICAgIENvbm5lY3QucHJvdG90eXBlLmNvbXBvbmVudFdpbGxVcGRhdGUgPSBmdW5jdGlvbiBjb21wb25lbnRXaWxsVXBkYXRlKCkge1xuICAgICAgICB2YXIgX3RoaXMyID0gdGhpcztcblxuICAgICAgICAvLyBXZSBhcmUgaG90IHJlbG9hZGluZyFcbiAgICAgICAgaWYgKHRoaXMudmVyc2lvbiAhPT0gdmVyc2lvbikge1xuICAgICAgICAgIHRoaXMudmVyc2lvbiA9IHZlcnNpb247XG4gICAgICAgICAgdGhpcy5pbml0U2VsZWN0b3IoKTtcblxuICAgICAgICAgIC8vIElmIGFueSBjb25uZWN0ZWQgZGVzY2VuZGFudHMgZG9uJ3QgaG90IHJlbG9hZCAoYW5kIHJlc3Vic2NyaWJlIGluIHRoZSBwcm9jZXNzKSwgdGhlaXJcbiAgICAgICAgICAvLyBsaXN0ZW5lcnMgd2lsbCBiZSBsb3N0IHdoZW4gd2UgdW5zdWJzY3JpYmUuIFVuZm9ydHVuYXRlbHksIGJ5IGNvcHlpbmcgb3ZlciBhbGxcbiAgICAgICAgICAvLyBsaXN0ZW5lcnMsIHRoaXMgZG9lcyBtZWFuIHRoYXQgdGhlIG9sZCB2ZXJzaW9ucyBvZiBjb25uZWN0ZWQgZGVzY2VuZGFudHMgd2lsbCBzdGlsbCBiZVxuICAgICAgICAgIC8vIG5vdGlmaWVkIG9mIHN0YXRlIGNoYW5nZXM7IGhvd2V2ZXIsIHRoZWlyIG9uU3RhdGVDaGFuZ2UgZnVuY3Rpb24gaXMgYSBuby1vcCBzbyB0aGlzXG4gICAgICAgICAgLy8gaXNuJ3QgYSBodWdlIGRlYWwuXG4gICAgICAgICAgdmFyIG9sZExpc3RlbmVycyA9IFtdO1xuXG4gICAgICAgICAgaWYgKHRoaXMuc3Vic2NyaXB0aW9uKSB7XG4gICAgICAgICAgICBvbGRMaXN0ZW5lcnMgPSB0aGlzLnN1YnNjcmlwdGlvbi5saXN0ZW5lcnMuZ2V0KCk7XG4gICAgICAgICAgICB0aGlzLnN1YnNjcmlwdGlvbi50cnlVbnN1YnNjcmliZSgpO1xuICAgICAgICAgIH1cbiAgICAgICAgICB0aGlzLmluaXRTdWJzY3JpcHRpb24oKTtcbiAgICAgICAgICBpZiAoc2hvdWxkSGFuZGxlU3RhdGVDaGFuZ2VzKSB7XG4gICAgICAgICAgICB0aGlzLnN1YnNjcmlwdGlvbi50cnlTdWJzY3JpYmUoKTtcbiAgICAgICAgICAgIG9sZExpc3RlbmVycy5mb3JFYWNoKGZ1bmN0aW9uIChsaXN0ZW5lcikge1xuICAgICAgICAgICAgICByZXR1cm4gX3RoaXMyLnN1YnNjcmlwdGlvbi5saXN0ZW5lcnMuc3Vic2NyaWJlKGxpc3RlbmVyKTtcbiAgICAgICAgICAgIH0pO1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgfTtcbiAgICB9XG5cbiAgICByZXR1cm4gaG9pc3RTdGF0aWNzKENvbm5lY3QsIFdyYXBwZWRDb21wb25lbnQpO1xuICB9O1xufSIsInZhciBoYXNPd24gPSBPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5O1xuXG5mdW5jdGlvbiBpcyh4LCB5KSB7XG4gIGlmICh4ID09PSB5KSB7XG4gICAgcmV0dXJuIHggIT09IDAgfHwgeSAhPT0gMCB8fCAxIC8geCA9PT0gMSAvIHk7XG4gIH0gZWxzZSB7XG4gICAgcmV0dXJuIHggIT09IHggJiYgeSAhPT0geTtcbiAgfVxufVxuXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbiBzaGFsbG93RXF1YWwob2JqQSwgb2JqQikge1xuICBpZiAoaXMob2JqQSwgb2JqQikpIHJldHVybiB0cnVlO1xuXG4gIGlmICh0eXBlb2Ygb2JqQSAhPT0gJ29iamVjdCcgfHwgb2JqQSA9PT0gbnVsbCB8fCB0eXBlb2Ygb2JqQiAhPT0gJ29iamVjdCcgfHwgb2JqQiA9PT0gbnVsbCkge1xuICAgIHJldHVybiBmYWxzZTtcbiAgfVxuXG4gIHZhciBrZXlzQSA9IE9iamVjdC5rZXlzKG9iakEpO1xuICB2YXIga2V5c0IgPSBPYmplY3Qua2V5cyhvYmpCKTtcblxuICBpZiAoa2V5c0EubGVuZ3RoICE9PSBrZXlzQi5sZW5ndGgpIHJldHVybiBmYWxzZTtcblxuICBmb3IgKHZhciBpID0gMDsgaSA8IGtleXNBLmxlbmd0aDsgaSsrKSB7XG4gICAgaWYgKCFoYXNPd24uY2FsbChvYmpCLCBrZXlzQVtpXSkgfHwgIWlzKG9iakFba2V5c0FbaV1dLCBvYmpCW2tleXNBW2ldXSkpIHtcbiAgICAgIHJldHVybiBmYWxzZTtcbiAgICB9XG4gIH1cblxuICByZXR1cm4gdHJ1ZTtcbn0iLCJpbXBvcnQgZnJlZUdsb2JhbCBmcm9tICcuL19mcmVlR2xvYmFsLmpzJztcblxuLyoqIERldGVjdCBmcmVlIHZhcmlhYmxlIGBzZWxmYC4gKi9cbnZhciBmcmVlU2VsZiA9IHR5cGVvZiBzZWxmID09ICdvYmplY3QnICYmIHNlbGYgJiYgc2VsZi5PYmplY3QgPT09IE9iamVjdCAmJiBzZWxmO1xuXG4vKiogVXNlZCBhcyBhIHJlZmVyZW5jZSB0byB0aGUgZ2xvYmFsIG9iamVjdC4gKi9cbnZhciByb290ID0gZnJlZUdsb2JhbCB8fCBmcmVlU2VsZiB8fCBGdW5jdGlvbigncmV0dXJuIHRoaXMnKSgpO1xuXG5leHBvcnQgZGVmYXVsdCByb290O1xuIiwiaW1wb3J0IHJvb3QgZnJvbSAnLi9fcm9vdC5qcyc7XG5cbi8qKiBCdWlsdC1pbiB2YWx1ZSByZWZlcmVuY2VzLiAqL1xudmFyIFN5bWJvbCA9IHJvb3QuU3ltYm9sO1xuXG5leHBvcnQgZGVmYXVsdCBTeW1ib2w7XG4iLCJpbXBvcnQgU3ltYm9sIGZyb20gJy4vX1N5bWJvbC5qcyc7XG5cbi8qKiBVc2VkIGZvciBidWlsdC1pbiBtZXRob2QgcmVmZXJlbmNlcy4gKi9cbnZhciBvYmplY3RQcm90byA9IE9iamVjdC5wcm90b3R5cGU7XG5cbi8qKiBVc2VkIHRvIGNoZWNrIG9iamVjdHMgZm9yIG93biBwcm9wZXJ0aWVzLiAqL1xudmFyIGhhc093blByb3BlcnR5ID0gb2JqZWN0UHJvdG8uaGFzT3duUHJvcGVydHk7XG5cbi8qKlxuICogVXNlZCB0byByZXNvbHZlIHRoZVxuICogW2B0b1N0cmluZ1RhZ2BdKGh0dHA6Ly9lY21hLWludGVybmF0aW9uYWwub3JnL2VjbWEtMjYyLzcuMC8jc2VjLW9iamVjdC5wcm90b3R5cGUudG9zdHJpbmcpXG4gKiBvZiB2YWx1ZXMuXG4gKi9cbnZhciBuYXRpdmVPYmplY3RUb1N0cmluZyA9IG9iamVjdFByb3RvLnRvU3RyaW5nO1xuXG4vKiogQnVpbHQtaW4gdmFsdWUgcmVmZXJlbmNlcy4gKi9cbnZhciBzeW1Ub1N0cmluZ1RhZyA9IFN5bWJvbCA/IFN5bWJvbC50b1N0cmluZ1RhZyA6IHVuZGVmaW5lZDtcblxuLyoqXG4gKiBBIHNwZWNpYWxpemVkIHZlcnNpb24gb2YgYGJhc2VHZXRUYWdgIHdoaWNoIGlnbm9yZXMgYFN5bWJvbC50b1N0cmluZ1RhZ2AgdmFsdWVzLlxuICpcbiAqIEBwcml2YXRlXG4gKiBAcGFyYW0geyp9IHZhbHVlIFRoZSB2YWx1ZSB0byBxdWVyeS5cbiAqIEByZXR1cm5zIHtzdHJpbmd9IFJldHVybnMgdGhlIHJhdyBgdG9TdHJpbmdUYWdgLlxuICovXG5mdW5jdGlvbiBnZXRSYXdUYWcodmFsdWUpIHtcbiAgdmFyIGlzT3duID0gaGFzT3duUHJvcGVydHkuY2FsbCh2YWx1ZSwgc3ltVG9TdHJpbmdUYWcpLFxuICAgICAgdGFnID0gdmFsdWVbc3ltVG9TdHJpbmdUYWddO1xuXG4gIHRyeSB7XG4gICAgdmFsdWVbc3ltVG9TdHJpbmdUYWddID0gdW5kZWZpbmVkO1xuICAgIHZhciB1bm1hc2tlZCA9IHRydWU7XG4gIH0gY2F0Y2ggKGUpIHt9XG5cbiAgdmFyIHJlc3VsdCA9IG5hdGl2ZU9iamVjdFRvU3RyaW5nLmNhbGwodmFsdWUpO1xuICBpZiAodW5tYXNrZWQpIHtcbiAgICBpZiAoaXNPd24pIHtcbiAgICAgIHZhbHVlW3N5bVRvU3RyaW5nVGFnXSA9IHRhZztcbiAgICB9IGVsc2Uge1xuICAgICAgZGVsZXRlIHZhbHVlW3N5bVRvU3RyaW5nVGFnXTtcbiAgICB9XG4gIH1cbiAgcmV0dXJuIHJlc3VsdDtcbn1cblxuZXhwb3J0IGRlZmF1bHQgZ2V0UmF3VGFnO1xuIiwiLyoqIFVzZWQgZm9yIGJ1aWx0LWluIG1ldGhvZCByZWZlcmVuY2VzLiAqL1xudmFyIG9iamVjdFByb3RvID0gT2JqZWN0LnByb3RvdHlwZTtcblxuLyoqXG4gKiBVc2VkIHRvIHJlc29sdmUgdGhlXG4gKiBbYHRvU3RyaW5nVGFnYF0oaHR0cDovL2VjbWEtaW50ZXJuYXRpb25hbC5vcmcvZWNtYS0yNjIvNy4wLyNzZWMtb2JqZWN0LnByb3RvdHlwZS50b3N0cmluZylcbiAqIG9mIHZhbHVlcy5cbiAqL1xudmFyIG5hdGl2ZU9iamVjdFRvU3RyaW5nID0gb2JqZWN0UHJvdG8udG9TdHJpbmc7XG5cbi8qKlxuICogQ29udmVydHMgYHZhbHVlYCB0byBhIHN0cmluZyB1c2luZyBgT2JqZWN0LnByb3RvdHlwZS50b1N0cmluZ2AuXG4gKlxuICogQHByaXZhdGVcbiAqIEBwYXJhbSB7Kn0gdmFsdWUgVGhlIHZhbHVlIHRvIGNvbnZlcnQuXG4gKiBAcmV0dXJucyB7c3RyaW5nfSBSZXR1cm5zIHRoZSBjb252ZXJ0ZWQgc3RyaW5nLlxuICovXG5mdW5jdGlvbiBvYmplY3RUb1N0cmluZyh2YWx1ZSkge1xuICByZXR1cm4gbmF0aXZlT2JqZWN0VG9TdHJpbmcuY2FsbCh2YWx1ZSk7XG59XG5cbmV4cG9ydCBkZWZhdWx0IG9iamVjdFRvU3RyaW5nO1xuIiwiaW1wb3J0IFN5bWJvbCBmcm9tICcuL19TeW1ib2wuanMnO1xuaW1wb3J0IGdldFJhd1RhZyBmcm9tICcuL19nZXRSYXdUYWcuanMnO1xuaW1wb3J0IG9iamVjdFRvU3RyaW5nIGZyb20gJy4vX29iamVjdFRvU3RyaW5nLmpzJztcblxuLyoqIGBPYmplY3QjdG9TdHJpbmdgIHJlc3VsdCByZWZlcmVuY2VzLiAqL1xudmFyIG51bGxUYWcgPSAnW29iamVjdCBOdWxsXScsXG4gICAgdW5kZWZpbmVkVGFnID0gJ1tvYmplY3QgVW5kZWZpbmVkXSc7XG5cbi8qKiBCdWlsdC1pbiB2YWx1ZSByZWZlcmVuY2VzLiAqL1xudmFyIHN5bVRvU3RyaW5nVGFnID0gU3ltYm9sID8gU3ltYm9sLnRvU3RyaW5nVGFnIDogdW5kZWZpbmVkO1xuXG4vKipcbiAqIFRoZSBiYXNlIGltcGxlbWVudGF0aW9uIG9mIGBnZXRUYWdgIHdpdGhvdXQgZmFsbGJhY2tzIGZvciBidWdneSBlbnZpcm9ubWVudHMuXG4gKlxuICogQHByaXZhdGVcbiAqIEBwYXJhbSB7Kn0gdmFsdWUgVGhlIHZhbHVlIHRvIHF1ZXJ5LlxuICogQHJldHVybnMge3N0cmluZ30gUmV0dXJucyB0aGUgYHRvU3RyaW5nVGFnYC5cbiAqL1xuZnVuY3Rpb24gYmFzZUdldFRhZyh2YWx1ZSkge1xuICBpZiAodmFsdWUgPT0gbnVsbCkge1xuICAgIHJldHVybiB2YWx1ZSA9PT0gdW5kZWZpbmVkID8gdW5kZWZpbmVkVGFnIDogbnVsbFRhZztcbiAgfVxuICByZXR1cm4gKHN5bVRvU3RyaW5nVGFnICYmIHN5bVRvU3RyaW5nVGFnIGluIE9iamVjdCh2YWx1ZSkpXG4gICAgPyBnZXRSYXdUYWcodmFsdWUpXG4gICAgOiBvYmplY3RUb1N0cmluZyh2YWx1ZSk7XG59XG5cbmV4cG9ydCBkZWZhdWx0IGJhc2VHZXRUYWc7XG4iLCJpbXBvcnQgb3ZlckFyZyBmcm9tICcuL19vdmVyQXJnLmpzJztcblxuLyoqIEJ1aWx0LWluIHZhbHVlIHJlZmVyZW5jZXMuICovXG52YXIgZ2V0UHJvdG90eXBlID0gb3ZlckFyZyhPYmplY3QuZ2V0UHJvdG90eXBlT2YsIE9iamVjdCk7XG5cbmV4cG9ydCBkZWZhdWx0IGdldFByb3RvdHlwZTtcbiIsIi8qKlxuICogQ2hlY2tzIGlmIGB2YWx1ZWAgaXMgb2JqZWN0LWxpa2UuIEEgdmFsdWUgaXMgb2JqZWN0LWxpa2UgaWYgaXQncyBub3QgYG51bGxgXG4gKiBhbmQgaGFzIGEgYHR5cGVvZmAgcmVzdWx0IG9mIFwib2JqZWN0XCIuXG4gKlxuICogQHN0YXRpY1xuICogQG1lbWJlck9mIF9cbiAqIEBzaW5jZSA0LjAuMFxuICogQGNhdGVnb3J5IExhbmdcbiAqIEBwYXJhbSB7Kn0gdmFsdWUgVGhlIHZhbHVlIHRvIGNoZWNrLlxuICogQHJldHVybnMge2Jvb2xlYW59IFJldHVybnMgYHRydWVgIGlmIGB2YWx1ZWAgaXMgb2JqZWN0LWxpa2UsIGVsc2UgYGZhbHNlYC5cbiAqIEBleGFtcGxlXG4gKlxuICogXy5pc09iamVjdExpa2Uoe30pO1xuICogLy8gPT4gdHJ1ZVxuICpcbiAqIF8uaXNPYmplY3RMaWtlKFsxLCAyLCAzXSk7XG4gKiAvLyA9PiB0cnVlXG4gKlxuICogXy5pc09iamVjdExpa2UoXy5ub29wKTtcbiAqIC8vID0+IGZhbHNlXG4gKlxuICogXy5pc09iamVjdExpa2UobnVsbCk7XG4gKiAvLyA9PiBmYWxzZVxuICovXG5mdW5jdGlvbiBpc09iamVjdExpa2UodmFsdWUpIHtcbiAgcmV0dXJuIHZhbHVlICE9IG51bGwgJiYgdHlwZW9mIHZhbHVlID09ICdvYmplY3QnO1xufVxuXG5leHBvcnQgZGVmYXVsdCBpc09iamVjdExpa2U7XG4iLCJpbXBvcnQgYmFzZUdldFRhZyBmcm9tICcuL19iYXNlR2V0VGFnLmpzJztcbmltcG9ydCBnZXRQcm90b3R5cGUgZnJvbSAnLi9fZ2V0UHJvdG90eXBlLmpzJztcbmltcG9ydCBpc09iamVjdExpa2UgZnJvbSAnLi9pc09iamVjdExpa2UuanMnO1xuXG4vKiogYE9iamVjdCN0b1N0cmluZ2AgcmVzdWx0IHJlZmVyZW5jZXMuICovXG52YXIgb2JqZWN0VGFnID0gJ1tvYmplY3QgT2JqZWN0XSc7XG5cbi8qKiBVc2VkIGZvciBidWlsdC1pbiBtZXRob2QgcmVmZXJlbmNlcy4gKi9cbnZhciBmdW5jUHJvdG8gPSBGdW5jdGlvbi5wcm90b3R5cGUsXG4gICAgb2JqZWN0UHJvdG8gPSBPYmplY3QucHJvdG90eXBlO1xuXG4vKiogVXNlZCB0byByZXNvbHZlIHRoZSBkZWNvbXBpbGVkIHNvdXJjZSBvZiBmdW5jdGlvbnMuICovXG52YXIgZnVuY1RvU3RyaW5nID0gZnVuY1Byb3RvLnRvU3RyaW5nO1xuXG4vKiogVXNlZCB0byBjaGVjayBvYmplY3RzIGZvciBvd24gcHJvcGVydGllcy4gKi9cbnZhciBoYXNPd25Qcm9wZXJ0eSA9IG9iamVjdFByb3RvLmhhc093blByb3BlcnR5O1xuXG4vKiogVXNlZCB0byBpbmZlciB0aGUgYE9iamVjdGAgY29uc3RydWN0b3IuICovXG52YXIgb2JqZWN0Q3RvclN0cmluZyA9IGZ1bmNUb1N0cmluZy5jYWxsKE9iamVjdCk7XG5cbi8qKlxuICogQ2hlY2tzIGlmIGB2YWx1ZWAgaXMgYSBwbGFpbiBvYmplY3QsIHRoYXQgaXMsIGFuIG9iamVjdCBjcmVhdGVkIGJ5IHRoZVxuICogYE9iamVjdGAgY29uc3RydWN0b3Igb3Igb25lIHdpdGggYSBgW1tQcm90b3R5cGVdXWAgb2YgYG51bGxgLlxuICpcbiAqIEBzdGF0aWNcbiAqIEBtZW1iZXJPZiBfXG4gKiBAc2luY2UgMC44LjBcbiAqIEBjYXRlZ29yeSBMYW5nXG4gKiBAcGFyYW0geyp9IHZhbHVlIFRoZSB2YWx1ZSB0byBjaGVjay5cbiAqIEByZXR1cm5zIHtib29sZWFufSBSZXR1cm5zIGB0cnVlYCBpZiBgdmFsdWVgIGlzIGEgcGxhaW4gb2JqZWN0LCBlbHNlIGBmYWxzZWAuXG4gKiBAZXhhbXBsZVxuICpcbiAqIGZ1bmN0aW9uIEZvbygpIHtcbiAqICAgdGhpcy5hID0gMTtcbiAqIH1cbiAqXG4gKiBfLmlzUGxhaW5PYmplY3QobmV3IEZvbyk7XG4gKiAvLyA9PiBmYWxzZVxuICpcbiAqIF8uaXNQbGFpbk9iamVjdChbMSwgMiwgM10pO1xuICogLy8gPT4gZmFsc2VcbiAqXG4gKiBfLmlzUGxhaW5PYmplY3QoeyAneCc6IDAsICd5JzogMCB9KTtcbiAqIC8vID0+IHRydWVcbiAqXG4gKiBfLmlzUGxhaW5PYmplY3QoT2JqZWN0LmNyZWF0ZShudWxsKSk7XG4gKiAvLyA9PiB0cnVlXG4gKi9cbmZ1bmN0aW9uIGlzUGxhaW5PYmplY3QodmFsdWUpIHtcbiAgaWYgKCFpc09iamVjdExpa2UodmFsdWUpIHx8IGJhc2VHZXRUYWcodmFsdWUpICE9IG9iamVjdFRhZykge1xuICAgIHJldHVybiBmYWxzZTtcbiAgfVxuICB2YXIgcHJvdG8gPSBnZXRQcm90b3R5cGUodmFsdWUpO1xuICBpZiAocHJvdG8gPT09IG51bGwpIHtcbiAgICByZXR1cm4gdHJ1ZTtcbiAgfVxuICB2YXIgQ3RvciA9IGhhc093blByb3BlcnR5LmNhbGwocHJvdG8sICdjb25zdHJ1Y3RvcicpICYmIHByb3RvLmNvbnN0cnVjdG9yO1xuICByZXR1cm4gdHlwZW9mIEN0b3IgPT0gJ2Z1bmN0aW9uJyAmJiBDdG9yIGluc3RhbmNlb2YgQ3RvciAmJlxuICAgIGZ1bmNUb1N0cmluZy5jYWxsKEN0b3IpID09IG9iamVjdEN0b3JTdHJpbmc7XG59XG5cbmV4cG9ydCBkZWZhdWx0IGlzUGxhaW5PYmplY3Q7XG4iLCJpbXBvcnQgdmVyaWZ5UGxhaW5PYmplY3QgZnJvbSAnLi4vdXRpbHMvdmVyaWZ5UGxhaW5PYmplY3QnO1xuXG5leHBvcnQgZnVuY3Rpb24gd3JhcE1hcFRvUHJvcHNDb25zdGFudChnZXRDb25zdGFudCkge1xuICByZXR1cm4gZnVuY3Rpb24gaW5pdENvbnN0YW50U2VsZWN0b3IoZGlzcGF0Y2gsIG9wdGlvbnMpIHtcbiAgICB2YXIgY29uc3RhbnQgPSBnZXRDb25zdGFudChkaXNwYXRjaCwgb3B0aW9ucyk7XG5cbiAgICBmdW5jdGlvbiBjb25zdGFudFNlbGVjdG9yKCkge1xuICAgICAgcmV0dXJuIGNvbnN0YW50O1xuICAgIH1cbiAgICBjb25zdGFudFNlbGVjdG9yLmRlcGVuZHNPbk93blByb3BzID0gZmFsc2U7XG4gICAgcmV0dXJuIGNvbnN0YW50U2VsZWN0b3I7XG4gIH07XG59XG5cbi8vIGRlcGVuZHNPbk93blByb3BzIGlzIHVzZWQgYnkgY3JlYXRlTWFwVG9Qcm9wc1Byb3h5IHRvIGRldGVybWluZSB3aGV0aGVyIHRvIHBhc3MgcHJvcHMgYXMgYXJnc1xuLy8gdG8gdGhlIG1hcFRvUHJvcHMgZnVuY3Rpb24gYmVpbmcgd3JhcHBlZC4gSXQgaXMgYWxzbyB1c2VkIGJ5IG1ha2VQdXJlUHJvcHNTZWxlY3RvciB0byBkZXRlcm1pbmVcbi8vIHdoZXRoZXIgbWFwVG9Qcm9wcyBuZWVkcyB0byBiZSBpbnZva2VkIHdoZW4gcHJvcHMgaGF2ZSBjaGFuZ2VkLlxuLy8gXG4vLyBBIGxlbmd0aCBvZiBvbmUgc2lnbmFscyB0aGF0IG1hcFRvUHJvcHMgZG9lcyBub3QgZGVwZW5kIG9uIHByb3BzIGZyb20gdGhlIHBhcmVudCBjb21wb25lbnQuXG4vLyBBIGxlbmd0aCBvZiB6ZXJvIGlzIGFzc3VtZWQgdG8gbWVhbiBtYXBUb1Byb3BzIGlzIGdldHRpbmcgYXJncyB2aWEgYXJndW1lbnRzIG9yIC4uLmFyZ3MgYW5kXG4vLyB0aGVyZWZvcmUgbm90IHJlcG9ydGluZyBpdHMgbGVuZ3RoIGFjY3VyYXRlbHkuLlxuZXhwb3J0IGZ1bmN0aW9uIGdldERlcGVuZHNPbk93blByb3BzKG1hcFRvUHJvcHMpIHtcbiAgcmV0dXJuIG1hcFRvUHJvcHMuZGVwZW5kc09uT3duUHJvcHMgIT09IG51bGwgJiYgbWFwVG9Qcm9wcy5kZXBlbmRzT25Pd25Qcm9wcyAhPT0gdW5kZWZpbmVkID8gQm9vbGVhbihtYXBUb1Byb3BzLmRlcGVuZHNPbk93blByb3BzKSA6IG1hcFRvUHJvcHMubGVuZ3RoICE9PSAxO1xufVxuXG4vLyBVc2VkIGJ5IHdoZW5NYXBTdGF0ZVRvUHJvcHNJc0Z1bmN0aW9uIGFuZCB3aGVuTWFwRGlzcGF0Y2hUb1Byb3BzSXNGdW5jdGlvbixcbi8vIHRoaXMgZnVuY3Rpb24gd3JhcHMgbWFwVG9Qcm9wcyBpbiBhIHByb3h5IGZ1bmN0aW9uIHdoaWNoIGRvZXMgc2V2ZXJhbCB0aGluZ3M6XG4vLyBcbi8vICAqIERldGVjdHMgd2hldGhlciB0aGUgbWFwVG9Qcm9wcyBmdW5jdGlvbiBiZWluZyBjYWxsZWQgZGVwZW5kcyBvbiBwcm9wcywgd2hpY2hcbi8vICAgIGlzIHVzZWQgYnkgc2VsZWN0b3JGYWN0b3J5IHRvIGRlY2lkZSBpZiBpdCBzaG91bGQgcmVpbnZva2Ugb24gcHJvcHMgY2hhbmdlcy5cbi8vICAgIFxuLy8gICogT24gZmlyc3QgY2FsbCwgaGFuZGxlcyBtYXBUb1Byb3BzIGlmIHJldHVybnMgYW5vdGhlciBmdW5jdGlvbiwgYW5kIHRyZWF0cyB0aGF0XG4vLyAgICBuZXcgZnVuY3Rpb24gYXMgdGhlIHRydWUgbWFwVG9Qcm9wcyBmb3Igc3Vic2VxdWVudCBjYWxscy5cbi8vICAgIFxuLy8gICogT24gZmlyc3QgY2FsbCwgdmVyaWZpZXMgdGhlIGZpcnN0IHJlc3VsdCBpcyBhIHBsYWluIG9iamVjdCwgaW4gb3JkZXIgdG8gd2FyblxuLy8gICAgdGhlIGRldmVsb3BlciB0aGF0IHRoZWlyIG1hcFRvUHJvcHMgZnVuY3Rpb24gaXMgbm90IHJldHVybmluZyBhIHZhbGlkIHJlc3VsdC5cbi8vICAgIFxuZXhwb3J0IGZ1bmN0aW9uIHdyYXBNYXBUb1Byb3BzRnVuYyhtYXBUb1Byb3BzLCBtZXRob2ROYW1lKSB7XG4gIHJldHVybiBmdW5jdGlvbiBpbml0UHJveHlTZWxlY3RvcihkaXNwYXRjaCwgX3JlZikge1xuICAgIHZhciBkaXNwbGF5TmFtZSA9IF9yZWYuZGlzcGxheU5hbWU7XG5cbiAgICB2YXIgcHJveHkgPSBmdW5jdGlvbiBtYXBUb1Byb3BzUHJveHkoc3RhdGVPckRpc3BhdGNoLCBvd25Qcm9wcykge1xuICAgICAgcmV0dXJuIHByb3h5LmRlcGVuZHNPbk93blByb3BzID8gcHJveHkubWFwVG9Qcm9wcyhzdGF0ZU9yRGlzcGF0Y2gsIG93blByb3BzKSA6IHByb3h5Lm1hcFRvUHJvcHMoc3RhdGVPckRpc3BhdGNoKTtcbiAgICB9O1xuXG4gICAgLy8gYWxsb3cgZGV0ZWN0RmFjdG9yeUFuZFZlcmlmeSB0byBnZXQgb3duUHJvcHNcbiAgICBwcm94eS5kZXBlbmRzT25Pd25Qcm9wcyA9IHRydWU7XG5cbiAgICBwcm94eS5tYXBUb1Byb3BzID0gZnVuY3Rpb24gZGV0ZWN0RmFjdG9yeUFuZFZlcmlmeShzdGF0ZU9yRGlzcGF0Y2gsIG93blByb3BzKSB7XG4gICAgICBwcm94eS5tYXBUb1Byb3BzID0gbWFwVG9Qcm9wcztcbiAgICAgIHByb3h5LmRlcGVuZHNPbk93blByb3BzID0gZ2V0RGVwZW5kc09uT3duUHJvcHMobWFwVG9Qcm9wcyk7XG4gICAgICB2YXIgcHJvcHMgPSBwcm94eShzdGF0ZU9yRGlzcGF0Y2gsIG93blByb3BzKTtcblxuICAgICAgaWYgKHR5cGVvZiBwcm9wcyA9PT0gJ2Z1bmN0aW9uJykge1xuICAgICAgICBwcm94eS5tYXBUb1Byb3BzID0gcHJvcHM7XG4gICAgICAgIHByb3h5LmRlcGVuZHNPbk93blByb3BzID0gZ2V0RGVwZW5kc09uT3duUHJvcHMocHJvcHMpO1xuICAgICAgICBwcm9wcyA9IHByb3h5KHN0YXRlT3JEaXNwYXRjaCwgb3duUHJvcHMpO1xuICAgICAgfVxuXG4gICAgICBpZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJykgdmVyaWZ5UGxhaW5PYmplY3QocHJvcHMsIGRpc3BsYXlOYW1lLCBtZXRob2ROYW1lKTtcblxuICAgICAgcmV0dXJuIHByb3BzO1xuICAgIH07XG5cbiAgICByZXR1cm4gcHJveHk7XG4gIH07XG59IiwiaW1wb3J0IHsgYmluZEFjdGlvbkNyZWF0b3JzIH0gZnJvbSAncmVkdXgnO1xuaW1wb3J0IHsgd3JhcE1hcFRvUHJvcHNDb25zdGFudCwgd3JhcE1hcFRvUHJvcHNGdW5jIH0gZnJvbSAnLi93cmFwTWFwVG9Qcm9wcyc7XG5cbmV4cG9ydCBmdW5jdGlvbiB3aGVuTWFwRGlzcGF0Y2hUb1Byb3BzSXNGdW5jdGlvbihtYXBEaXNwYXRjaFRvUHJvcHMpIHtcbiAgcmV0dXJuIHR5cGVvZiBtYXBEaXNwYXRjaFRvUHJvcHMgPT09ICdmdW5jdGlvbicgPyB3cmFwTWFwVG9Qcm9wc0Z1bmMobWFwRGlzcGF0Y2hUb1Byb3BzLCAnbWFwRGlzcGF0Y2hUb1Byb3BzJykgOiB1bmRlZmluZWQ7XG59XG5cbmV4cG9ydCBmdW5jdGlvbiB3aGVuTWFwRGlzcGF0Y2hUb1Byb3BzSXNNaXNzaW5nKG1hcERpc3BhdGNoVG9Qcm9wcykge1xuICByZXR1cm4gIW1hcERpc3BhdGNoVG9Qcm9wcyA/IHdyYXBNYXBUb1Byb3BzQ29uc3RhbnQoZnVuY3Rpb24gKGRpc3BhdGNoKSB7XG4gICAgcmV0dXJuIHsgZGlzcGF0Y2g6IGRpc3BhdGNoIH07XG4gIH0pIDogdW5kZWZpbmVkO1xufVxuXG5leHBvcnQgZnVuY3Rpb24gd2hlbk1hcERpc3BhdGNoVG9Qcm9wc0lzT2JqZWN0KG1hcERpc3BhdGNoVG9Qcm9wcykge1xuICByZXR1cm4gbWFwRGlzcGF0Y2hUb1Byb3BzICYmIHR5cGVvZiBtYXBEaXNwYXRjaFRvUHJvcHMgPT09ICdvYmplY3QnID8gd3JhcE1hcFRvUHJvcHNDb25zdGFudChmdW5jdGlvbiAoZGlzcGF0Y2gpIHtcbiAgICByZXR1cm4gYmluZEFjdGlvbkNyZWF0b3JzKG1hcERpc3BhdGNoVG9Qcm9wcywgZGlzcGF0Y2gpO1xuICB9KSA6IHVuZGVmaW5lZDtcbn1cblxuZXhwb3J0IGRlZmF1bHQgW3doZW5NYXBEaXNwYXRjaFRvUHJvcHNJc0Z1bmN0aW9uLCB3aGVuTWFwRGlzcGF0Y2hUb1Byb3BzSXNNaXNzaW5nLCB3aGVuTWFwRGlzcGF0Y2hUb1Byb3BzSXNPYmplY3RdOyIsImltcG9ydCB7IHdyYXBNYXBUb1Byb3BzQ29uc3RhbnQsIHdyYXBNYXBUb1Byb3BzRnVuYyB9IGZyb20gJy4vd3JhcE1hcFRvUHJvcHMnO1xuXG5leHBvcnQgZnVuY3Rpb24gd2hlbk1hcFN0YXRlVG9Qcm9wc0lzRnVuY3Rpb24obWFwU3RhdGVUb1Byb3BzKSB7XG4gIHJldHVybiB0eXBlb2YgbWFwU3RhdGVUb1Byb3BzID09PSAnZnVuY3Rpb24nID8gd3JhcE1hcFRvUHJvcHNGdW5jKG1hcFN0YXRlVG9Qcm9wcywgJ21hcFN0YXRlVG9Qcm9wcycpIDogdW5kZWZpbmVkO1xufVxuXG5leHBvcnQgZnVuY3Rpb24gd2hlbk1hcFN0YXRlVG9Qcm9wc0lzTWlzc2luZyhtYXBTdGF0ZVRvUHJvcHMpIHtcbiAgcmV0dXJuICFtYXBTdGF0ZVRvUHJvcHMgPyB3cmFwTWFwVG9Qcm9wc0NvbnN0YW50KGZ1bmN0aW9uICgpIHtcbiAgICByZXR1cm4ge307XG4gIH0pIDogdW5kZWZpbmVkO1xufVxuXG5leHBvcnQgZGVmYXVsdCBbd2hlbk1hcFN0YXRlVG9Qcm9wc0lzRnVuY3Rpb24sIHdoZW5NYXBTdGF0ZVRvUHJvcHNJc01pc3NpbmddOyIsInZhciBfZXh0ZW5kcyA9IE9iamVjdC5hc3NpZ24gfHwgZnVuY3Rpb24gKHRhcmdldCkgeyBmb3IgKHZhciBpID0gMTsgaSA8IGFyZ3VtZW50cy5sZW5ndGg7IGkrKykgeyB2YXIgc291cmNlID0gYXJndW1lbnRzW2ldOyBmb3IgKHZhciBrZXkgaW4gc291cmNlKSB7IGlmIChPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGwoc291cmNlLCBrZXkpKSB7IHRhcmdldFtrZXldID0gc291cmNlW2tleV07IH0gfSB9IHJldHVybiB0YXJnZXQ7IH07XG5cbmltcG9ydCB2ZXJpZnlQbGFpbk9iamVjdCBmcm9tICcuLi91dGlscy92ZXJpZnlQbGFpbk9iamVjdCc7XG5cbmV4cG9ydCBmdW5jdGlvbiBkZWZhdWx0TWVyZ2VQcm9wcyhzdGF0ZVByb3BzLCBkaXNwYXRjaFByb3BzLCBvd25Qcm9wcykge1xuICByZXR1cm4gX2V4dGVuZHMoe30sIG93blByb3BzLCBzdGF0ZVByb3BzLCBkaXNwYXRjaFByb3BzKTtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIHdyYXBNZXJnZVByb3BzRnVuYyhtZXJnZVByb3BzKSB7XG4gIHJldHVybiBmdW5jdGlvbiBpbml0TWVyZ2VQcm9wc1Byb3h5KGRpc3BhdGNoLCBfcmVmKSB7XG4gICAgdmFyIGRpc3BsYXlOYW1lID0gX3JlZi5kaXNwbGF5TmFtZSxcbiAgICAgICAgcHVyZSA9IF9yZWYucHVyZSxcbiAgICAgICAgYXJlTWVyZ2VkUHJvcHNFcXVhbCA9IF9yZWYuYXJlTWVyZ2VkUHJvcHNFcXVhbDtcblxuICAgIHZhciBoYXNSdW5PbmNlID0gZmFsc2U7XG4gICAgdmFyIG1lcmdlZFByb3BzID0gdm9pZCAwO1xuXG4gICAgcmV0dXJuIGZ1bmN0aW9uIG1lcmdlUHJvcHNQcm94eShzdGF0ZVByb3BzLCBkaXNwYXRjaFByb3BzLCBvd25Qcm9wcykge1xuICAgICAgdmFyIG5leHRNZXJnZWRQcm9wcyA9IG1lcmdlUHJvcHMoc3RhdGVQcm9wcywgZGlzcGF0Y2hQcm9wcywgb3duUHJvcHMpO1xuXG4gICAgICBpZiAoaGFzUnVuT25jZSkge1xuICAgICAgICBpZiAoIXB1cmUgfHwgIWFyZU1lcmdlZFByb3BzRXF1YWwobmV4dE1lcmdlZFByb3BzLCBtZXJnZWRQcm9wcykpIG1lcmdlZFByb3BzID0gbmV4dE1lcmdlZFByb3BzO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgaGFzUnVuT25jZSA9IHRydWU7XG4gICAgICAgIG1lcmdlZFByb3BzID0gbmV4dE1lcmdlZFByb3BzO1xuXG4gICAgICAgIGlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nKSB2ZXJpZnlQbGFpbk9iamVjdChtZXJnZWRQcm9wcywgZGlzcGxheU5hbWUsICdtZXJnZVByb3BzJyk7XG4gICAgICB9XG5cbiAgICAgIHJldHVybiBtZXJnZWRQcm9wcztcbiAgICB9O1xuICB9O1xufVxuXG5leHBvcnQgZnVuY3Rpb24gd2hlbk1lcmdlUHJvcHNJc0Z1bmN0aW9uKG1lcmdlUHJvcHMpIHtcbiAgcmV0dXJuIHR5cGVvZiBtZXJnZVByb3BzID09PSAnZnVuY3Rpb24nID8gd3JhcE1lcmdlUHJvcHNGdW5jKG1lcmdlUHJvcHMpIDogdW5kZWZpbmVkO1xufVxuXG5leHBvcnQgZnVuY3Rpb24gd2hlbk1lcmdlUHJvcHNJc09taXR0ZWQobWVyZ2VQcm9wcykge1xuICByZXR1cm4gIW1lcmdlUHJvcHMgPyBmdW5jdGlvbiAoKSB7XG4gICAgcmV0dXJuIGRlZmF1bHRNZXJnZVByb3BzO1xuICB9IDogdW5kZWZpbmVkO1xufVxuXG5leHBvcnQgZGVmYXVsdCBbd2hlbk1lcmdlUHJvcHNJc0Z1bmN0aW9uLCB3aGVuTWVyZ2VQcm9wc0lzT21pdHRlZF07IiwiZnVuY3Rpb24gX29iamVjdFdpdGhvdXRQcm9wZXJ0aWVzKG9iaiwga2V5cykgeyB2YXIgdGFyZ2V0ID0ge307IGZvciAodmFyIGkgaW4gb2JqKSB7IGlmIChrZXlzLmluZGV4T2YoaSkgPj0gMCkgY29udGludWU7IGlmICghT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsKG9iaiwgaSkpIGNvbnRpbnVlOyB0YXJnZXRbaV0gPSBvYmpbaV07IH0gcmV0dXJuIHRhcmdldDsgfVxuXG5pbXBvcnQgdmVyaWZ5U3Vic2VsZWN0b3JzIGZyb20gJy4vdmVyaWZ5U3Vic2VsZWN0b3JzJztcblxuZXhwb3J0IGZ1bmN0aW9uIGltcHVyZUZpbmFsUHJvcHNTZWxlY3RvckZhY3RvcnkobWFwU3RhdGVUb1Byb3BzLCBtYXBEaXNwYXRjaFRvUHJvcHMsIG1lcmdlUHJvcHMsIGRpc3BhdGNoKSB7XG4gIHJldHVybiBmdW5jdGlvbiBpbXB1cmVGaW5hbFByb3BzU2VsZWN0b3Ioc3RhdGUsIG93blByb3BzKSB7XG4gICAgcmV0dXJuIG1lcmdlUHJvcHMobWFwU3RhdGVUb1Byb3BzKHN0YXRlLCBvd25Qcm9wcyksIG1hcERpc3BhdGNoVG9Qcm9wcyhkaXNwYXRjaCwgb3duUHJvcHMpLCBvd25Qcm9wcyk7XG4gIH07XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBwdXJlRmluYWxQcm9wc1NlbGVjdG9yRmFjdG9yeShtYXBTdGF0ZVRvUHJvcHMsIG1hcERpc3BhdGNoVG9Qcm9wcywgbWVyZ2VQcm9wcywgZGlzcGF0Y2gsIF9yZWYpIHtcbiAgdmFyIGFyZVN0YXRlc0VxdWFsID0gX3JlZi5hcmVTdGF0ZXNFcXVhbCxcbiAgICAgIGFyZU93blByb3BzRXF1YWwgPSBfcmVmLmFyZU93blByb3BzRXF1YWwsXG4gICAgICBhcmVTdGF0ZVByb3BzRXF1YWwgPSBfcmVmLmFyZVN0YXRlUHJvcHNFcXVhbDtcblxuICB2YXIgaGFzUnVuQXRMZWFzdE9uY2UgPSBmYWxzZTtcbiAgdmFyIHN0YXRlID0gdm9pZCAwO1xuICB2YXIgb3duUHJvcHMgPSB2b2lkIDA7XG4gIHZhciBzdGF0ZVByb3BzID0gdm9pZCAwO1xuICB2YXIgZGlzcGF0Y2hQcm9wcyA9IHZvaWQgMDtcbiAgdmFyIG1lcmdlZFByb3BzID0gdm9pZCAwO1xuXG4gIGZ1bmN0aW9uIGhhbmRsZUZpcnN0Q2FsbChmaXJzdFN0YXRlLCBmaXJzdE93blByb3BzKSB7XG4gICAgc3RhdGUgPSBmaXJzdFN0YXRlO1xuICAgIG93blByb3BzID0gZmlyc3RPd25Qcm9wcztcbiAgICBzdGF0ZVByb3BzID0gbWFwU3RhdGVUb1Byb3BzKHN0YXRlLCBvd25Qcm9wcyk7XG4gICAgZGlzcGF0Y2hQcm9wcyA9IG1hcERpc3BhdGNoVG9Qcm9wcyhkaXNwYXRjaCwgb3duUHJvcHMpO1xuICAgIG1lcmdlZFByb3BzID0gbWVyZ2VQcm9wcyhzdGF0ZVByb3BzLCBkaXNwYXRjaFByb3BzLCBvd25Qcm9wcyk7XG4gICAgaGFzUnVuQXRMZWFzdE9uY2UgPSB0cnVlO1xuICAgIHJldHVybiBtZXJnZWRQcm9wcztcbiAgfVxuXG4gIGZ1bmN0aW9uIGhhbmRsZU5ld1Byb3BzQW5kTmV3U3RhdGUoKSB7XG4gICAgc3RhdGVQcm9wcyA9IG1hcFN0YXRlVG9Qcm9wcyhzdGF0ZSwgb3duUHJvcHMpO1xuXG4gICAgaWYgKG1hcERpc3BhdGNoVG9Qcm9wcy5kZXBlbmRzT25Pd25Qcm9wcykgZGlzcGF0Y2hQcm9wcyA9IG1hcERpc3BhdGNoVG9Qcm9wcyhkaXNwYXRjaCwgb3duUHJvcHMpO1xuXG4gICAgbWVyZ2VkUHJvcHMgPSBtZXJnZVByb3BzKHN0YXRlUHJvcHMsIGRpc3BhdGNoUHJvcHMsIG93blByb3BzKTtcbiAgICByZXR1cm4gbWVyZ2VkUHJvcHM7XG4gIH1cblxuICBmdW5jdGlvbiBoYW5kbGVOZXdQcm9wcygpIHtcbiAgICBpZiAobWFwU3RhdGVUb1Byb3BzLmRlcGVuZHNPbk93blByb3BzKSBzdGF0ZVByb3BzID0gbWFwU3RhdGVUb1Byb3BzKHN0YXRlLCBvd25Qcm9wcyk7XG5cbiAgICBpZiAobWFwRGlzcGF0Y2hUb1Byb3BzLmRlcGVuZHNPbk93blByb3BzKSBkaXNwYXRjaFByb3BzID0gbWFwRGlzcGF0Y2hUb1Byb3BzKGRpc3BhdGNoLCBvd25Qcm9wcyk7XG5cbiAgICBtZXJnZWRQcm9wcyA9IG1lcmdlUHJvcHMoc3RhdGVQcm9wcywgZGlzcGF0Y2hQcm9wcywgb3duUHJvcHMpO1xuICAgIHJldHVybiBtZXJnZWRQcm9wcztcbiAgfVxuXG4gIGZ1bmN0aW9uIGhhbmRsZU5ld1N0YXRlKCkge1xuICAgIHZhciBuZXh0U3RhdGVQcm9wcyA9IG1hcFN0YXRlVG9Qcm9wcyhzdGF0ZSwgb3duUHJvcHMpO1xuICAgIHZhciBzdGF0ZVByb3BzQ2hhbmdlZCA9ICFhcmVTdGF0ZVByb3BzRXF1YWwobmV4dFN0YXRlUHJvcHMsIHN0YXRlUHJvcHMpO1xuICAgIHN0YXRlUHJvcHMgPSBuZXh0U3RhdGVQcm9wcztcblxuICAgIGlmIChzdGF0ZVByb3BzQ2hhbmdlZCkgbWVyZ2VkUHJvcHMgPSBtZXJnZVByb3BzKHN0YXRlUHJvcHMsIGRpc3BhdGNoUHJvcHMsIG93blByb3BzKTtcblxuICAgIHJldHVybiBtZXJnZWRQcm9wcztcbiAgfVxuXG4gIGZ1bmN0aW9uIGhhbmRsZVN1YnNlcXVlbnRDYWxscyhuZXh0U3RhdGUsIG5leHRPd25Qcm9wcykge1xuICAgIHZhciBwcm9wc0NoYW5nZWQgPSAhYXJlT3duUHJvcHNFcXVhbChuZXh0T3duUHJvcHMsIG93blByb3BzKTtcbiAgICB2YXIgc3RhdGVDaGFuZ2VkID0gIWFyZVN0YXRlc0VxdWFsKG5leHRTdGF0ZSwgc3RhdGUpO1xuICAgIHN0YXRlID0gbmV4dFN0YXRlO1xuICAgIG93blByb3BzID0gbmV4dE93blByb3BzO1xuXG4gICAgaWYgKHByb3BzQ2hhbmdlZCAmJiBzdGF0ZUNoYW5nZWQpIHJldHVybiBoYW5kbGVOZXdQcm9wc0FuZE5ld1N0YXRlKCk7XG4gICAgaWYgKHByb3BzQ2hhbmdlZCkgcmV0dXJuIGhhbmRsZU5ld1Byb3BzKCk7XG4gICAgaWYgKHN0YXRlQ2hhbmdlZCkgcmV0dXJuIGhhbmRsZU5ld1N0YXRlKCk7XG4gICAgcmV0dXJuIG1lcmdlZFByb3BzO1xuICB9XG5cbiAgcmV0dXJuIGZ1bmN0aW9uIHB1cmVGaW5hbFByb3BzU2VsZWN0b3IobmV4dFN0YXRlLCBuZXh0T3duUHJvcHMpIHtcbiAgICByZXR1cm4gaGFzUnVuQXRMZWFzdE9uY2UgPyBoYW5kbGVTdWJzZXF1ZW50Q2FsbHMobmV4dFN0YXRlLCBuZXh0T3duUHJvcHMpIDogaGFuZGxlRmlyc3RDYWxsKG5leHRTdGF0ZSwgbmV4dE93blByb3BzKTtcbiAgfTtcbn1cblxuLy8gVE9ETzogQWRkIG1vcmUgY29tbWVudHNcblxuLy8gSWYgcHVyZSBpcyB0cnVlLCB0aGUgc2VsZWN0b3IgcmV0dXJuZWQgYnkgc2VsZWN0b3JGYWN0b3J5IHdpbGwgbWVtb2l6ZSBpdHMgcmVzdWx0cyxcbi8vIGFsbG93aW5nIGNvbm5lY3RBZHZhbmNlZCdzIHNob3VsZENvbXBvbmVudFVwZGF0ZSB0byByZXR1cm4gZmFsc2UgaWYgZmluYWxcbi8vIHByb3BzIGhhdmUgbm90IGNoYW5nZWQuIElmIGZhbHNlLCB0aGUgc2VsZWN0b3Igd2lsbCBhbHdheXMgcmV0dXJuIGEgbmV3XG4vLyBvYmplY3QgYW5kIHNob3VsZENvbXBvbmVudFVwZGF0ZSB3aWxsIGFsd2F5cyByZXR1cm4gdHJ1ZS5cblxuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gZmluYWxQcm9wc1NlbGVjdG9yRmFjdG9yeShkaXNwYXRjaCwgX3JlZjIpIHtcbiAgdmFyIGluaXRNYXBTdGF0ZVRvUHJvcHMgPSBfcmVmMi5pbml0TWFwU3RhdGVUb1Byb3BzLFxuICAgICAgaW5pdE1hcERpc3BhdGNoVG9Qcm9wcyA9IF9yZWYyLmluaXRNYXBEaXNwYXRjaFRvUHJvcHMsXG4gICAgICBpbml0TWVyZ2VQcm9wcyA9IF9yZWYyLmluaXRNZXJnZVByb3BzLFxuICAgICAgb3B0aW9ucyA9IF9vYmplY3RXaXRob3V0UHJvcGVydGllcyhfcmVmMiwgWydpbml0TWFwU3RhdGVUb1Byb3BzJywgJ2luaXRNYXBEaXNwYXRjaFRvUHJvcHMnLCAnaW5pdE1lcmdlUHJvcHMnXSk7XG5cbiAgdmFyIG1hcFN0YXRlVG9Qcm9wcyA9IGluaXRNYXBTdGF0ZVRvUHJvcHMoZGlzcGF0Y2gsIG9wdGlvbnMpO1xuICB2YXIgbWFwRGlzcGF0Y2hUb1Byb3BzID0gaW5pdE1hcERpc3BhdGNoVG9Qcm9wcyhkaXNwYXRjaCwgb3B0aW9ucyk7XG4gIHZhciBtZXJnZVByb3BzID0gaW5pdE1lcmdlUHJvcHMoZGlzcGF0Y2gsIG9wdGlvbnMpO1xuXG4gIGlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nKSB7XG4gICAgdmVyaWZ5U3Vic2VsZWN0b3JzKG1hcFN0YXRlVG9Qcm9wcywgbWFwRGlzcGF0Y2hUb1Byb3BzLCBtZXJnZVByb3BzLCBvcHRpb25zLmRpc3BsYXlOYW1lKTtcbiAgfVxuXG4gIHZhciBzZWxlY3RvckZhY3RvcnkgPSBvcHRpb25zLnB1cmUgPyBwdXJlRmluYWxQcm9wc1NlbGVjdG9yRmFjdG9yeSA6IGltcHVyZUZpbmFsUHJvcHNTZWxlY3RvckZhY3Rvcnk7XG5cbiAgcmV0dXJuIHNlbGVjdG9yRmFjdG9yeShtYXBTdGF0ZVRvUHJvcHMsIG1hcERpc3BhdGNoVG9Qcm9wcywgbWVyZ2VQcm9wcywgZGlzcGF0Y2gsIG9wdGlvbnMpO1xufSIsInZhciBfZXh0ZW5kcyA9IE9iamVjdC5hc3NpZ24gfHwgZnVuY3Rpb24gKHRhcmdldCkgeyBmb3IgKHZhciBpID0gMTsgaSA8IGFyZ3VtZW50cy5sZW5ndGg7IGkrKykgeyB2YXIgc291cmNlID0gYXJndW1lbnRzW2ldOyBmb3IgKHZhciBrZXkgaW4gc291cmNlKSB7IGlmIChPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGwoc291cmNlLCBrZXkpKSB7IHRhcmdldFtrZXldID0gc291cmNlW2tleV07IH0gfSB9IHJldHVybiB0YXJnZXQ7IH07XG5cbmZ1bmN0aW9uIF9vYmplY3RXaXRob3V0UHJvcGVydGllcyhvYmosIGtleXMpIHsgdmFyIHRhcmdldCA9IHt9OyBmb3IgKHZhciBpIGluIG9iaikgeyBpZiAoa2V5cy5pbmRleE9mKGkpID49IDApIGNvbnRpbnVlOyBpZiAoIU9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbChvYmosIGkpKSBjb250aW51ZTsgdGFyZ2V0W2ldID0gb2JqW2ldOyB9IHJldHVybiB0YXJnZXQ7IH1cblxuaW1wb3J0IGNvbm5lY3RBZHZhbmNlZCBmcm9tICcuLi9jb21wb25lbnRzL2Nvbm5lY3RBZHZhbmNlZCc7XG5pbXBvcnQgc2hhbGxvd0VxdWFsIGZyb20gJy4uL3V0aWxzL3NoYWxsb3dFcXVhbCc7XG5pbXBvcnQgZGVmYXVsdE1hcERpc3BhdGNoVG9Qcm9wc0ZhY3RvcmllcyBmcm9tICcuL21hcERpc3BhdGNoVG9Qcm9wcyc7XG5pbXBvcnQgZGVmYXVsdE1hcFN0YXRlVG9Qcm9wc0ZhY3RvcmllcyBmcm9tICcuL21hcFN0YXRlVG9Qcm9wcyc7XG5pbXBvcnQgZGVmYXVsdE1lcmdlUHJvcHNGYWN0b3JpZXMgZnJvbSAnLi9tZXJnZVByb3BzJztcbmltcG9ydCBkZWZhdWx0U2VsZWN0b3JGYWN0b3J5IGZyb20gJy4vc2VsZWN0b3JGYWN0b3J5JztcblxuLypcbiAgY29ubmVjdCBpcyBhIGZhY2FkZSBvdmVyIGNvbm5lY3RBZHZhbmNlZC4gSXQgdHVybnMgaXRzIGFyZ3MgaW50byBhIGNvbXBhdGlibGVcbiAgc2VsZWN0b3JGYWN0b3J5LCB3aGljaCBoYXMgdGhlIHNpZ25hdHVyZTpcblxuICAgIChkaXNwYXRjaCwgb3B0aW9ucykgPT4gKG5leHRTdGF0ZSwgbmV4dE93blByb3BzKSA9PiBuZXh0RmluYWxQcm9wc1xuICBcbiAgY29ubmVjdCBwYXNzZXMgaXRzIGFyZ3MgdG8gY29ubmVjdEFkdmFuY2VkIGFzIG9wdGlvbnMsIHdoaWNoIHdpbGwgaW4gdHVybiBwYXNzIHRoZW0gdG9cbiAgc2VsZWN0b3JGYWN0b3J5IGVhY2ggdGltZSBhIENvbm5lY3QgY29tcG9uZW50IGluc3RhbmNlIGlzIGluc3RhbnRpYXRlZCBvciBob3QgcmVsb2FkZWQuXG5cbiAgc2VsZWN0b3JGYWN0b3J5IHJldHVybnMgYSBmaW5hbCBwcm9wcyBzZWxlY3RvciBmcm9tIGl0cyBtYXBTdGF0ZVRvUHJvcHMsXG4gIG1hcFN0YXRlVG9Qcm9wc0ZhY3RvcmllcywgbWFwRGlzcGF0Y2hUb1Byb3BzLCBtYXBEaXNwYXRjaFRvUHJvcHNGYWN0b3JpZXMsIG1lcmdlUHJvcHMsXG4gIG1lcmdlUHJvcHNGYWN0b3JpZXMsIGFuZCBwdXJlIGFyZ3MuXG5cbiAgVGhlIHJlc3VsdGluZyBmaW5hbCBwcm9wcyBzZWxlY3RvciBpcyBjYWxsZWQgYnkgdGhlIENvbm5lY3QgY29tcG9uZW50IGluc3RhbmNlIHdoZW5ldmVyXG4gIGl0IHJlY2VpdmVzIG5ldyBwcm9wcyBvciBzdG9yZSBzdGF0ZS5cbiAqL1xuXG5mdW5jdGlvbiBtYXRjaChhcmcsIGZhY3RvcmllcywgbmFtZSkge1xuICBmb3IgKHZhciBpID0gZmFjdG9yaWVzLmxlbmd0aCAtIDE7IGkgPj0gMDsgaS0tKSB7XG4gICAgdmFyIHJlc3VsdCA9IGZhY3Rvcmllc1tpXShhcmcpO1xuICAgIGlmIChyZXN1bHQpIHJldHVybiByZXN1bHQ7XG4gIH1cblxuICByZXR1cm4gZnVuY3Rpb24gKGRpc3BhdGNoLCBvcHRpb25zKSB7XG4gICAgdGhyb3cgbmV3IEVycm9yKCdJbnZhbGlkIHZhbHVlIG9mIHR5cGUgJyArIHR5cGVvZiBhcmcgKyAnIGZvciAnICsgbmFtZSArICcgYXJndW1lbnQgd2hlbiBjb25uZWN0aW5nIGNvbXBvbmVudCAnICsgb3B0aW9ucy53cmFwcGVkQ29tcG9uZW50TmFtZSArICcuJyk7XG4gIH07XG59XG5cbmZ1bmN0aW9uIHN0cmljdEVxdWFsKGEsIGIpIHtcbiAgcmV0dXJuIGEgPT09IGI7XG59XG5cbi8vIGNyZWF0ZUNvbm5lY3Qgd2l0aCBkZWZhdWx0IGFyZ3MgYnVpbGRzIHRoZSAnb2ZmaWNpYWwnIGNvbm5lY3QgYmVoYXZpb3IuIENhbGxpbmcgaXQgd2l0aFxuLy8gZGlmZmVyZW50IG9wdGlvbnMgb3BlbnMgdXAgc29tZSB0ZXN0aW5nIGFuZCBleHRlbnNpYmlsaXR5IHNjZW5hcmlvc1xuZXhwb3J0IGZ1bmN0aW9uIGNyZWF0ZUNvbm5lY3QoKSB7XG4gIHZhciBfcmVmID0gYXJndW1lbnRzLmxlbmd0aCA+IDAgJiYgYXJndW1lbnRzWzBdICE9PSB1bmRlZmluZWQgPyBhcmd1bWVudHNbMF0gOiB7fSxcbiAgICAgIF9yZWYkY29ubmVjdEhPQyA9IF9yZWYuY29ubmVjdEhPQyxcbiAgICAgIGNvbm5lY3RIT0MgPSBfcmVmJGNvbm5lY3RIT0MgPT09IHVuZGVmaW5lZCA/IGNvbm5lY3RBZHZhbmNlZCA6IF9yZWYkY29ubmVjdEhPQyxcbiAgICAgIF9yZWYkbWFwU3RhdGVUb1Byb3BzRiA9IF9yZWYubWFwU3RhdGVUb1Byb3BzRmFjdG9yaWVzLFxuICAgICAgbWFwU3RhdGVUb1Byb3BzRmFjdG9yaWVzID0gX3JlZiRtYXBTdGF0ZVRvUHJvcHNGID09PSB1bmRlZmluZWQgPyBkZWZhdWx0TWFwU3RhdGVUb1Byb3BzRmFjdG9yaWVzIDogX3JlZiRtYXBTdGF0ZVRvUHJvcHNGLFxuICAgICAgX3JlZiRtYXBEaXNwYXRjaFRvUHJvID0gX3JlZi5tYXBEaXNwYXRjaFRvUHJvcHNGYWN0b3JpZXMsXG4gICAgICBtYXBEaXNwYXRjaFRvUHJvcHNGYWN0b3JpZXMgPSBfcmVmJG1hcERpc3BhdGNoVG9Qcm8gPT09IHVuZGVmaW5lZCA/IGRlZmF1bHRNYXBEaXNwYXRjaFRvUHJvcHNGYWN0b3JpZXMgOiBfcmVmJG1hcERpc3BhdGNoVG9Qcm8sXG4gICAgICBfcmVmJG1lcmdlUHJvcHNGYWN0b3IgPSBfcmVmLm1lcmdlUHJvcHNGYWN0b3JpZXMsXG4gICAgICBtZXJnZVByb3BzRmFjdG9yaWVzID0gX3JlZiRtZXJnZVByb3BzRmFjdG9yID09PSB1bmRlZmluZWQgPyBkZWZhdWx0TWVyZ2VQcm9wc0ZhY3RvcmllcyA6IF9yZWYkbWVyZ2VQcm9wc0ZhY3RvcixcbiAgICAgIF9yZWYkc2VsZWN0b3JGYWN0b3J5ID0gX3JlZi5zZWxlY3RvckZhY3RvcnksXG4gICAgICBzZWxlY3RvckZhY3RvcnkgPSBfcmVmJHNlbGVjdG9yRmFjdG9yeSA9PT0gdW5kZWZpbmVkID8gZGVmYXVsdFNlbGVjdG9yRmFjdG9yeSA6IF9yZWYkc2VsZWN0b3JGYWN0b3J5O1xuXG4gIHJldHVybiBmdW5jdGlvbiBjb25uZWN0KG1hcFN0YXRlVG9Qcm9wcywgbWFwRGlzcGF0Y2hUb1Byb3BzLCBtZXJnZVByb3BzKSB7XG4gICAgdmFyIF9yZWYyID0gYXJndW1lbnRzLmxlbmd0aCA+IDMgJiYgYXJndW1lbnRzWzNdICE9PSB1bmRlZmluZWQgPyBhcmd1bWVudHNbM10gOiB7fSxcbiAgICAgICAgX3JlZjIkcHVyZSA9IF9yZWYyLnB1cmUsXG4gICAgICAgIHB1cmUgPSBfcmVmMiRwdXJlID09PSB1bmRlZmluZWQgPyB0cnVlIDogX3JlZjIkcHVyZSxcbiAgICAgICAgX3JlZjIkYXJlU3RhdGVzRXF1YWwgPSBfcmVmMi5hcmVTdGF0ZXNFcXVhbCxcbiAgICAgICAgYXJlU3RhdGVzRXF1YWwgPSBfcmVmMiRhcmVTdGF0ZXNFcXVhbCA9PT0gdW5kZWZpbmVkID8gc3RyaWN0RXF1YWwgOiBfcmVmMiRhcmVTdGF0ZXNFcXVhbCxcbiAgICAgICAgX3JlZjIkYXJlT3duUHJvcHNFcXVhID0gX3JlZjIuYXJlT3duUHJvcHNFcXVhbCxcbiAgICAgICAgYXJlT3duUHJvcHNFcXVhbCA9IF9yZWYyJGFyZU93blByb3BzRXF1YSA9PT0gdW5kZWZpbmVkID8gc2hhbGxvd0VxdWFsIDogX3JlZjIkYXJlT3duUHJvcHNFcXVhLFxuICAgICAgICBfcmVmMiRhcmVTdGF0ZVByb3BzRXEgPSBfcmVmMi5hcmVTdGF0ZVByb3BzRXF1YWwsXG4gICAgICAgIGFyZVN0YXRlUHJvcHNFcXVhbCA9IF9yZWYyJGFyZVN0YXRlUHJvcHNFcSA9PT0gdW5kZWZpbmVkID8gc2hhbGxvd0VxdWFsIDogX3JlZjIkYXJlU3RhdGVQcm9wc0VxLFxuICAgICAgICBfcmVmMiRhcmVNZXJnZWRQcm9wc0UgPSBfcmVmMi5hcmVNZXJnZWRQcm9wc0VxdWFsLFxuICAgICAgICBhcmVNZXJnZWRQcm9wc0VxdWFsID0gX3JlZjIkYXJlTWVyZ2VkUHJvcHNFID09PSB1bmRlZmluZWQgPyBzaGFsbG93RXF1YWwgOiBfcmVmMiRhcmVNZXJnZWRQcm9wc0UsXG4gICAgICAgIGV4dHJhT3B0aW9ucyA9IF9vYmplY3RXaXRob3V0UHJvcGVydGllcyhfcmVmMiwgWydwdXJlJywgJ2FyZVN0YXRlc0VxdWFsJywgJ2FyZU93blByb3BzRXF1YWwnLCAnYXJlU3RhdGVQcm9wc0VxdWFsJywgJ2FyZU1lcmdlZFByb3BzRXF1YWwnXSk7XG5cbiAgICB2YXIgaW5pdE1hcFN0YXRlVG9Qcm9wcyA9IG1hdGNoKG1hcFN0YXRlVG9Qcm9wcywgbWFwU3RhdGVUb1Byb3BzRmFjdG9yaWVzLCAnbWFwU3RhdGVUb1Byb3BzJyk7XG4gICAgdmFyIGluaXRNYXBEaXNwYXRjaFRvUHJvcHMgPSBtYXRjaChtYXBEaXNwYXRjaFRvUHJvcHMsIG1hcERpc3BhdGNoVG9Qcm9wc0ZhY3RvcmllcywgJ21hcERpc3BhdGNoVG9Qcm9wcycpO1xuICAgIHZhciBpbml0TWVyZ2VQcm9wcyA9IG1hdGNoKG1lcmdlUHJvcHMsIG1lcmdlUHJvcHNGYWN0b3JpZXMsICdtZXJnZVByb3BzJyk7XG5cbiAgICByZXR1cm4gY29ubmVjdEhPQyhzZWxlY3RvckZhY3RvcnksIF9leHRlbmRzKHtcbiAgICAgIC8vIHVzZWQgaW4gZXJyb3IgbWVzc2FnZXNcbiAgICAgIG1ldGhvZE5hbWU6ICdjb25uZWN0JyxcblxuICAgICAgLy8gdXNlZCB0byBjb21wdXRlIENvbm5lY3QncyBkaXNwbGF5TmFtZSBmcm9tIHRoZSB3cmFwcGVkIGNvbXBvbmVudCdzIGRpc3BsYXlOYW1lLlxuICAgICAgZ2V0RGlzcGxheU5hbWU6IGZ1bmN0aW9uIGdldERpc3BsYXlOYW1lKG5hbWUpIHtcbiAgICAgICAgcmV0dXJuICdDb25uZWN0KCcgKyBuYW1lICsgJyknO1xuICAgICAgfSxcblxuICAgICAgLy8gaWYgbWFwU3RhdGVUb1Byb3BzIGlzIGZhbHN5LCB0aGUgQ29ubmVjdCBjb21wb25lbnQgZG9lc24ndCBzdWJzY3JpYmUgdG8gc3RvcmUgc3RhdGUgY2hhbmdlc1xuICAgICAgc2hvdWxkSGFuZGxlU3RhdGVDaGFuZ2VzOiBCb29sZWFuKG1hcFN0YXRlVG9Qcm9wcyksXG5cbiAgICAgIC8vIHBhc3NlZCB0aHJvdWdoIHRvIHNlbGVjdG9yRmFjdG9yeVxuICAgICAgaW5pdE1hcFN0YXRlVG9Qcm9wczogaW5pdE1hcFN0YXRlVG9Qcm9wcyxcbiAgICAgIGluaXRNYXBEaXNwYXRjaFRvUHJvcHM6IGluaXRNYXBEaXNwYXRjaFRvUHJvcHMsXG4gICAgICBpbml0TWVyZ2VQcm9wczogaW5pdE1lcmdlUHJvcHMsXG4gICAgICBwdXJlOiBwdXJlLFxuICAgICAgYXJlU3RhdGVzRXF1YWw6IGFyZVN0YXRlc0VxdWFsLFxuICAgICAgYXJlT3duUHJvcHNFcXVhbDogYXJlT3duUHJvcHNFcXVhbCxcbiAgICAgIGFyZVN0YXRlUHJvcHNFcXVhbDogYXJlU3RhdGVQcm9wc0VxdWFsLFxuICAgICAgYXJlTWVyZ2VkUHJvcHNFcXVhbDogYXJlTWVyZ2VkUHJvcHNFcXVhbFxuXG4gICAgfSwgZXh0cmFPcHRpb25zKSk7XG4gIH07XG59XG5cbmV4cG9ydCBkZWZhdWx0IGNyZWF0ZUNvbm5lY3QoKTsiLCJ2YXIgaXNPYmplY3QgPSByZXF1aXJlKCcuL19pcy1vYmplY3QnKTtcbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKGl0LCBUWVBFKSB7XG4gIGlmICghaXNPYmplY3QoaXQpIHx8IGl0Ll90ICE9PSBUWVBFKSB0aHJvdyBUeXBlRXJyb3IoJ0luY29tcGF0aWJsZSByZWNlaXZlciwgJyArIFRZUEUgKyAnIHJlcXVpcmVkIScpO1xuICByZXR1cm4gaXQ7XG59O1xuIiwibW9kdWxlLmV4cG9ydHMgPSB7fTtcbiIsInZhciAkZXhwb3J0ID0gcmVxdWlyZSgnLi9fZXhwb3J0Jyk7XG52YXIgZGVmaW5lZCA9IHJlcXVpcmUoJy4vX2RlZmluZWQnKTtcbnZhciBmYWlscyA9IHJlcXVpcmUoJy4vX2ZhaWxzJyk7XG52YXIgc3BhY2VzID0gcmVxdWlyZSgnLi9fc3RyaW5nLXdzJyk7XG52YXIgc3BhY2UgPSAnWycgKyBzcGFjZXMgKyAnXSc7XG52YXIgbm9uID0gJ1xcdTIwMGJcXHUwMDg1JztcbnZhciBsdHJpbSA9IFJlZ0V4cCgnXicgKyBzcGFjZSArIHNwYWNlICsgJyonKTtcbnZhciBydHJpbSA9IFJlZ0V4cChzcGFjZSArIHNwYWNlICsgJyokJyk7XG5cbnZhciBleHBvcnRlciA9IGZ1bmN0aW9uIChLRVksIGV4ZWMsIEFMSUFTKSB7XG4gIHZhciBleHAgPSB7fTtcbiAgdmFyIEZPUkNFID0gZmFpbHMoZnVuY3Rpb24gKCkge1xuICAgIHJldHVybiAhIXNwYWNlc1tLRVldKCkgfHwgbm9uW0tFWV0oKSAhPSBub247XG4gIH0pO1xuICB2YXIgZm4gPSBleHBbS0VZXSA9IEZPUkNFID8gZXhlYyh0cmltKSA6IHNwYWNlc1tLRVldO1xuICBpZiAoQUxJQVMpIGV4cFtBTElBU10gPSBmbjtcbiAgJGV4cG9ydCgkZXhwb3J0LlAgKyAkZXhwb3J0LkYgKiBGT1JDRSwgJ1N0cmluZycsIGV4cCk7XG59O1xuXG4vLyAxIC0+IFN0cmluZyN0cmltTGVmdFxuLy8gMiAtPiBTdHJpbmcjdHJpbVJpZ2h0XG4vLyAzIC0+IFN0cmluZyN0cmltXG52YXIgdHJpbSA9IGV4cG9ydGVyLnRyaW0gPSBmdW5jdGlvbiAoc3RyaW5nLCBUWVBFKSB7XG4gIHN0cmluZyA9IFN0cmluZyhkZWZpbmVkKHN0cmluZykpO1xuICBpZiAoVFlQRSAmIDEpIHN0cmluZyA9IHN0cmluZy5yZXBsYWNlKGx0cmltLCAnJyk7XG4gIGlmIChUWVBFICYgMikgc3RyaW5nID0gc3RyaW5nLnJlcGxhY2UocnRyaW0sICcnKTtcbiAgcmV0dXJuIHN0cmluZztcbn07XG5cbm1vZHVsZS5leHBvcnRzID0gZXhwb3J0ZXI7XG4iLCJ2YXIgZGVmID0gcmVxdWlyZSgnLi9fb2JqZWN0LWRwJykuZjtcbnZhciBoYXMgPSByZXF1aXJlKCcuL19oYXMnKTtcbnZhciBUQUcgPSByZXF1aXJlKCcuL193a3MnKSgndG9TdHJpbmdUYWcnKTtcblxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAoaXQsIHRhZywgc3RhdCkge1xuICBpZiAoaXQgJiYgIWhhcyhpdCA9IHN0YXQgPyBpdCA6IGl0LnByb3RvdHlwZSwgVEFHKSkgZGVmKGl0LCBUQUcsIHsgY29uZmlndXJhYmxlOiB0cnVlLCB2YWx1ZTogdGFnIH0pO1xufTtcbiIsImltcG9ydCB7IGZldGNoQXN5bmMgfSBmcm9tICdVdGlscy9pbmRleCdcblxuZXhwb3J0IGNvbnN0IExJU1RfUkVRVUVTVCA9ICdMSVNUX1JFUVVFU1QnXG5leHBvcnQgY29uc3QgTElTVF9SRVFVRVNUX1NVQ0NFU1MgPSAnTElTVF9SRVFVRVNUX1NVQ0NFU1MnXG5leHBvcnQgY29uc3QgTElTVF9SRVFVRVNUX0ZBSUxFRCA9ICdMSVNUX1JFUVVFU1RfRkFJTEVEJ1xuZXhwb3J0IGNvbnN0IFBST1BFUlRZX0RBVEFfUkVRVUVTVCA9ICdQUk9QRVJUWV9EQVRBX1JFUVVFU1QnXG5leHBvcnQgY29uc3QgUFJPUEVSVFlfREFUQV9TVUNDRVNTID0gJ1BST1BFUlRZX0RBVEFfU1VDQ0VTUydcbmV4cG9ydCBjb25zdCBQUk9QRVJUWV9EQVRBX0ZBSUxFRCA9ICdQUk9QRVJUWV9EQVRBX0ZBSUxFRCdcbmV4cG9ydCBjb25zdCBTSE9XX1BST1BFUlRZX1BBTkVMID0gJ1NIT1dfUFJPUEVSVFlfUEFORUwnXG5leHBvcnQgY29uc3QgSElERV9QUk9QRVJUWV9QQU5FTCA9ICdISURFX1BST1BFUlRZX1BBTkVMJ1xuXG5leHBvcnQgY29uc3QgcmVxdWVzdExpc3QgPSAocHJpY2UsIHR5cGUpID0+IHtcbiAgcmV0dXJuIGFzeW5jIChkaXNwYXRjaCkgPT4ge1xuICAgIGRpc3BhdGNoKHt0eXBlOiBMSVNUX1JFUVVFU1R9KVxuXG4gICAgZmV0Y2goJy9saXN0Jywge1xuICAgICAgaGVhZGVyczoge1xuICAgICAgICAnQWNjZXB0JzogJ2FwcGxpY2F0aW9uL2pzb24nLFxuICAgICAgICAnQ29udGVudC1UeXBlJzogJ2FwcGxpY2F0aW9uL2pzb24nXG4gICAgICB9LFxuICAgICAgbWV0aG9kOiAncG9zdCcsXG4gICAgICBjcmVkZW50aWFsczogJ3NhbWUtb3JpZ2luJyxcbiAgICAgIGJvZHk6IEpTT04uc3RyaW5naWZ5KHtcbiAgICAgICAgcHJpY2UsXG4gICAgICAgIHR5cGVcbiAgICAgIH0pXG4gICAgfSlcbiAgICAudGhlbihkYXRhID0+IGRhdGEuanNvbigpLFxuICAgICAgZXJyb3IgPT4ge1xuICAgICAgICBjb25zb2xlLmVycm9yKGVycm9yKVxuICAgICAgICBkaXNwYXRjaCh7dHlwZTogTElTVF9SRVFVRVNUX0ZBSUxFRH0pXG4gICAgfSlcbiAgICAudGhlbihsaXN0ID0+IHtcbiAgICAgIGRpc3BhdGNoKHtcbiAgICAgICAgdHlwZTogTElTVF9SRVFVRVNUX1NVQ0NFU1MsXG4gICAgICAgIGxpc3RcbiAgICAgIH0pXG4gICAgfSlcbiAgfVxufVxuXG5leHBvcnQgY29uc3QgcmVxdWVzdFByb3BlcnR5RGF0YSA9IChpZCkgPT4ge1xuICByZXR1cm4gKGRpc3BhdGNoKSA9PiB7XG4gICAgZGlzcGF0Y2goe3R5cGU6IFBST1BFUlRZX0RBVEFfUkVRVUVTVH0pXG5cbiAgICBmZXRjaCgnL3Byb3BlcnR5Jywge1xuICAgICAgaGVhZGVyczoge1xuICAgICAgICAnQWNjZXB0JzogJ2FwcGxpY2F0aW9uL2pzb24nLFxuICAgICAgICAnQ29udGVudC1UeXBlJzogJ2FwcGxpY2F0aW9uL2pzb24nXG4gICAgICB9LFxuICAgICAgbWV0aG9kOiAncG9zdCcsXG4gICAgICBjcmVkZW50aWFsczogJ3NhbWUtb3JpZ2luJyxcbiAgICAgIGJvZHk6IEpTT04uc3RyaW5naWZ5KHtcbiAgICAgICAgaWRcbiAgICAgIH0pXG4gICAgfSlcbiAgICAudGhlbihkYXRhID0+IGRhdGEuanNvbigpLFxuICAgICAgZXJyb3IgPT4ge1xuICAgICAgICBjb25zb2xlLmVycm9yKGVycm9yKVxuICAgICAgICBkaXNwYXRjaCh7dHlwZTogUFJPUEVSVFlfREFUQV9GQUlMRUR9KVxuICAgIH0pXG4gICAgLnRoZW4oZGF0YSA9PiB7XG4gICAgICBjb25zb2xlLmxvZyhkYXRhKVxuICAgICAgZGlzcGF0Y2goe1xuICAgICAgICB0eXBlOiBQUk9QRVJUWV9EQVRBX1NVQ0NFU1MsXG4gICAgICAgIGRhdGFcbiAgICAgIH0pXG4gICAgfSlcbiAgfVxufSIsIi8vIGdldHRpbmcgdGFnIGZyb20gMTkuMS4zLjYgT2JqZWN0LnByb3RvdHlwZS50b1N0cmluZygpXG52YXIgY29mID0gcmVxdWlyZSgnLi9fY29mJyk7XG52YXIgVEFHID0gcmVxdWlyZSgnLi9fd2tzJykoJ3RvU3RyaW5nVGFnJyk7XG4vLyBFUzMgd3JvbmcgaGVyZVxudmFyIEFSRyA9IGNvZihmdW5jdGlvbiAoKSB7IHJldHVybiBhcmd1bWVudHM7IH0oKSkgPT0gJ0FyZ3VtZW50cyc7XG5cbi8vIGZhbGxiYWNrIGZvciBJRTExIFNjcmlwdCBBY2Nlc3MgRGVuaWVkIGVycm9yXG52YXIgdHJ5R2V0ID0gZnVuY3Rpb24gKGl0LCBrZXkpIHtcbiAgdHJ5IHtcbiAgICByZXR1cm4gaXRba2V5XTtcbiAgfSBjYXRjaCAoZSkgeyAvKiBlbXB0eSAqLyB9XG59O1xuXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChpdCkge1xuICB2YXIgTywgVCwgQjtcbiAgcmV0dXJuIGl0ID09PSB1bmRlZmluZWQgPyAnVW5kZWZpbmVkJyA6IGl0ID09PSBudWxsID8gJ051bGwnXG4gICAgLy8gQEB0b1N0cmluZ1RhZyBjYXNlXG4gICAgOiB0eXBlb2YgKFQgPSB0cnlHZXQoTyA9IE9iamVjdChpdCksIFRBRykpID09ICdzdHJpbmcnID8gVFxuICAgIC8vIGJ1aWx0aW5UYWcgY2FzZVxuICAgIDogQVJHID8gY29mKE8pXG4gICAgLy8gRVMzIGFyZ3VtZW50cyBmYWxsYmFja1xuICAgIDogKEIgPSBjb2YoTykpID09ICdPYmplY3QnICYmIHR5cGVvZiBPLmNhbGxlZSA9PSAnZnVuY3Rpb24nID8gJ0FyZ3VtZW50cycgOiBCO1xufTtcbiIsImV4cG9ydHMuZiA9IHt9LnByb3BlcnR5SXNFbnVtZXJhYmxlO1xuIiwiLy8gZmFsbGJhY2sgZm9yIG5vbi1hcnJheS1saWtlIEVTMyBhbmQgbm9uLWVudW1lcmFibGUgb2xkIFY4IHN0cmluZ3NcbnZhciBjb2YgPSByZXF1aXJlKCcuL19jb2YnKTtcbi8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBuby1wcm90b3R5cGUtYnVpbHRpbnNcbm1vZHVsZS5leHBvcnRzID0gT2JqZWN0KCd6JykucHJvcGVydHlJc0VudW1lcmFibGUoMCkgPyBPYmplY3QgOiBmdW5jdGlvbiAoaXQpIHtcbiAgcmV0dXJuIGNvZihpdCkgPT0gJ1N0cmluZycgPyBpdC5zcGxpdCgnJykgOiBPYmplY3QoaXQpO1xufTtcbiIsIid1c2Ugc3RyaWN0Jztcbi8vIGh0dHBzOi8vdGMzOS5naXRodWIuaW8vcHJvcG9zYWwtc2V0bWFwLW9mZnJvbS9cbnZhciAkZXhwb3J0ID0gcmVxdWlyZSgnLi9fZXhwb3J0Jyk7XG52YXIgYUZ1bmN0aW9uID0gcmVxdWlyZSgnLi9fYS1mdW5jdGlvbicpO1xudmFyIGN0eCA9IHJlcXVpcmUoJy4vX2N0eCcpO1xudmFyIGZvck9mID0gcmVxdWlyZSgnLi9fZm9yLW9mJyk7XG5cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKENPTExFQ1RJT04pIHtcbiAgJGV4cG9ydCgkZXhwb3J0LlMsIENPTExFQ1RJT04sIHsgZnJvbTogZnVuY3Rpb24gZnJvbShzb3VyY2UgLyogLCBtYXBGbiwgdGhpc0FyZyAqLykge1xuICAgIHZhciBtYXBGbiA9IGFyZ3VtZW50c1sxXTtcbiAgICB2YXIgbWFwcGluZywgQSwgbiwgY2I7XG4gICAgYUZ1bmN0aW9uKHRoaXMpO1xuICAgIG1hcHBpbmcgPSBtYXBGbiAhPT0gdW5kZWZpbmVkO1xuICAgIGlmIChtYXBwaW5nKSBhRnVuY3Rpb24obWFwRm4pO1xuICAgIGlmIChzb3VyY2UgPT0gdW5kZWZpbmVkKSByZXR1cm4gbmV3IHRoaXMoKTtcbiAgICBBID0gW107XG4gICAgaWYgKG1hcHBpbmcpIHtcbiAgICAgIG4gPSAwO1xuICAgICAgY2IgPSBjdHgobWFwRm4sIGFyZ3VtZW50c1syXSwgMik7XG4gICAgICBmb3JPZihzb3VyY2UsIGZhbHNlLCBmdW5jdGlvbiAobmV4dEl0ZW0pIHtcbiAgICAgICAgQS5wdXNoKGNiKG5leHRJdGVtLCBuKyspKTtcbiAgICAgIH0pO1xuICAgIH0gZWxzZSB7XG4gICAgICBmb3JPZihzb3VyY2UsIGZhbHNlLCBBLnB1c2gsIEEpO1xuICAgIH1cbiAgICByZXR1cm4gbmV3IHRoaXMoQSk7XG4gIH0gfSk7XG59O1xuIiwiJ3VzZSBzdHJpY3QnO1xuLy8gaHR0cHM6Ly90YzM5LmdpdGh1Yi5pby9wcm9wb3NhbC1zZXRtYXAtb2Zmcm9tL1xudmFyICRleHBvcnQgPSByZXF1aXJlKCcuL19leHBvcnQnKTtcblxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAoQ09MTEVDVElPTikge1xuICAkZXhwb3J0KCRleHBvcnQuUywgQ09MTEVDVElPTiwgeyBvZjogZnVuY3Rpb24gb2YoKSB7XG4gICAgdmFyIGxlbmd0aCA9IGFyZ3VtZW50cy5sZW5ndGg7XG4gICAgdmFyIEEgPSBuZXcgQXJyYXkobGVuZ3RoKTtcbiAgICB3aGlsZSAobGVuZ3RoLS0pIEFbbGVuZ3RoXSA9IGFyZ3VtZW50c1tsZW5ndGhdO1xuICAgIHJldHVybiBuZXcgdGhpcyhBKTtcbiAgfSB9KTtcbn07XG4iLCIndXNlIHN0cmljdCc7XG4vLyBGb3JjZWQgcmVwbGFjZW1lbnQgcHJvdG90eXBlIGFjY2Vzc29ycyBtZXRob2RzXG5tb2R1bGUuZXhwb3J0cyA9IHJlcXVpcmUoJy4vX2xpYnJhcnknKSB8fCAhcmVxdWlyZSgnLi9fZmFpbHMnKShmdW5jdGlvbiAoKSB7XG4gIHZhciBLID0gTWF0aC5yYW5kb20oKTtcbiAgLy8gSW4gRkYgdGhyb3dzIG9ubHkgZGVmaW5lIG1ldGhvZHNcbiAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIG5vLXVuZGVmLCBuby11c2VsZXNzLWNhbGxcbiAgX19kZWZpbmVTZXR0ZXJfXy5jYWxsKG51bGwsIEssIGZ1bmN0aW9uICgpIHsgLyogZW1wdHkgKi8gfSk7XG4gIGRlbGV0ZSByZXF1aXJlKCcuL19nbG9iYWwnKVtLXTtcbn0pO1xuIiwidmFyIGdsb2JhbCA9IHJlcXVpcmUoJy4vX2dsb2JhbCcpO1xudmFyIGhpZGUgPSByZXF1aXJlKCcuL19oaWRlJyk7XG52YXIgdWlkID0gcmVxdWlyZSgnLi9fdWlkJyk7XG52YXIgVFlQRUQgPSB1aWQoJ3R5cGVkX2FycmF5Jyk7XG52YXIgVklFVyA9IHVpZCgndmlldycpO1xudmFyIEFCViA9ICEhKGdsb2JhbC5BcnJheUJ1ZmZlciAmJiBnbG9iYWwuRGF0YVZpZXcpO1xudmFyIENPTlNUUiA9IEFCVjtcbnZhciBpID0gMDtcbnZhciBsID0gOTtcbnZhciBUeXBlZDtcblxudmFyIFR5cGVkQXJyYXlDb25zdHJ1Y3RvcnMgPSAoXG4gICdJbnQ4QXJyYXksVWludDhBcnJheSxVaW50OENsYW1wZWRBcnJheSxJbnQxNkFycmF5LFVpbnQxNkFycmF5LEludDMyQXJyYXksVWludDMyQXJyYXksRmxvYXQzMkFycmF5LEZsb2F0NjRBcnJheSdcbikuc3BsaXQoJywnKTtcblxud2hpbGUgKGkgPCBsKSB7XG4gIGlmIChUeXBlZCA9IGdsb2JhbFtUeXBlZEFycmF5Q29uc3RydWN0b3JzW2krK11dKSB7XG4gICAgaGlkZShUeXBlZC5wcm90b3R5cGUsIFRZUEVELCB0cnVlKTtcbiAgICBoaWRlKFR5cGVkLnByb3RvdHlwZSwgVklFVywgdHJ1ZSk7XG4gIH0gZWxzZSBDT05TVFIgPSBmYWxzZTtcbn1cblxubW9kdWxlLmV4cG9ydHMgPSB7XG4gIEFCVjogQUJWLFxuICBDT05TVFI6IENPTlNUUixcbiAgVFlQRUQ6IFRZUEVELFxuICBWSUVXOiBWSUVXXG59O1xuIiwiJ3VzZSBzdHJpY3QnO1xudmFyIGdsb2JhbCA9IHJlcXVpcmUoJy4vX2dsb2JhbCcpO1xudmFyICRleHBvcnQgPSByZXF1aXJlKCcuL19leHBvcnQnKTtcbnZhciByZWRlZmluZSA9IHJlcXVpcmUoJy4vX3JlZGVmaW5lJyk7XG52YXIgcmVkZWZpbmVBbGwgPSByZXF1aXJlKCcuL19yZWRlZmluZS1hbGwnKTtcbnZhciBtZXRhID0gcmVxdWlyZSgnLi9fbWV0YScpO1xudmFyIGZvck9mID0gcmVxdWlyZSgnLi9fZm9yLW9mJyk7XG52YXIgYW5JbnN0YW5jZSA9IHJlcXVpcmUoJy4vX2FuLWluc3RhbmNlJyk7XG52YXIgaXNPYmplY3QgPSByZXF1aXJlKCcuL19pcy1vYmplY3QnKTtcbnZhciBmYWlscyA9IHJlcXVpcmUoJy4vX2ZhaWxzJyk7XG52YXIgJGl0ZXJEZXRlY3QgPSByZXF1aXJlKCcuL19pdGVyLWRldGVjdCcpO1xudmFyIHNldFRvU3RyaW5nVGFnID0gcmVxdWlyZSgnLi9fc2V0LXRvLXN0cmluZy10YWcnKTtcbnZhciBpbmhlcml0SWZSZXF1aXJlZCA9IHJlcXVpcmUoJy4vX2luaGVyaXQtaWYtcmVxdWlyZWQnKTtcblxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAoTkFNRSwgd3JhcHBlciwgbWV0aG9kcywgY29tbW9uLCBJU19NQVAsIElTX1dFQUspIHtcbiAgdmFyIEJhc2UgPSBnbG9iYWxbTkFNRV07XG4gIHZhciBDID0gQmFzZTtcbiAgdmFyIEFEREVSID0gSVNfTUFQID8gJ3NldCcgOiAnYWRkJztcbiAgdmFyIHByb3RvID0gQyAmJiBDLnByb3RvdHlwZTtcbiAgdmFyIE8gPSB7fTtcbiAgdmFyIGZpeE1ldGhvZCA9IGZ1bmN0aW9uIChLRVkpIHtcbiAgICB2YXIgZm4gPSBwcm90b1tLRVldO1xuICAgIHJlZGVmaW5lKHByb3RvLCBLRVksXG4gICAgICBLRVkgPT0gJ2RlbGV0ZScgPyBmdW5jdGlvbiAoYSkge1xuICAgICAgICByZXR1cm4gSVNfV0VBSyAmJiAhaXNPYmplY3QoYSkgPyBmYWxzZSA6IGZuLmNhbGwodGhpcywgYSA9PT0gMCA/IDAgOiBhKTtcbiAgICAgIH0gOiBLRVkgPT0gJ2hhcycgPyBmdW5jdGlvbiBoYXMoYSkge1xuICAgICAgICByZXR1cm4gSVNfV0VBSyAmJiAhaXNPYmplY3QoYSkgPyBmYWxzZSA6IGZuLmNhbGwodGhpcywgYSA9PT0gMCA/IDAgOiBhKTtcbiAgICAgIH0gOiBLRVkgPT0gJ2dldCcgPyBmdW5jdGlvbiBnZXQoYSkge1xuICAgICAgICByZXR1cm4gSVNfV0VBSyAmJiAhaXNPYmplY3QoYSkgPyB1bmRlZmluZWQgOiBmbi5jYWxsKHRoaXMsIGEgPT09IDAgPyAwIDogYSk7XG4gICAgICB9IDogS0VZID09ICdhZGQnID8gZnVuY3Rpb24gYWRkKGEpIHsgZm4uY2FsbCh0aGlzLCBhID09PSAwID8gMCA6IGEpOyByZXR1cm4gdGhpczsgfVxuICAgICAgICA6IGZ1bmN0aW9uIHNldChhLCBiKSB7IGZuLmNhbGwodGhpcywgYSA9PT0gMCA/IDAgOiBhLCBiKTsgcmV0dXJuIHRoaXM7IH1cbiAgICApO1xuICB9O1xuICBpZiAodHlwZW9mIEMgIT0gJ2Z1bmN0aW9uJyB8fCAhKElTX1dFQUsgfHwgcHJvdG8uZm9yRWFjaCAmJiAhZmFpbHMoZnVuY3Rpb24gKCkge1xuICAgIG5ldyBDKCkuZW50cmllcygpLm5leHQoKTtcbiAgfSkpKSB7XG4gICAgLy8gY3JlYXRlIGNvbGxlY3Rpb24gY29uc3RydWN0b3JcbiAgICBDID0gY29tbW9uLmdldENvbnN0cnVjdG9yKHdyYXBwZXIsIE5BTUUsIElTX01BUCwgQURERVIpO1xuICAgIHJlZGVmaW5lQWxsKEMucHJvdG90eXBlLCBtZXRob2RzKTtcbiAgICBtZXRhLk5FRUQgPSB0cnVlO1xuICB9IGVsc2Uge1xuICAgIHZhciBpbnN0YW5jZSA9IG5ldyBDKCk7XG4gICAgLy8gZWFybHkgaW1wbGVtZW50YXRpb25zIG5vdCBzdXBwb3J0cyBjaGFpbmluZ1xuICAgIHZhciBIQVNOVF9DSEFJTklORyA9IGluc3RhbmNlW0FEREVSXShJU19XRUFLID8ge30gOiAtMCwgMSkgIT0gaW5zdGFuY2U7XG4gICAgLy8gVjggfiAgQ2hyb21pdW0gNDAtIHdlYWstY29sbGVjdGlvbnMgdGhyb3dzIG9uIHByaW1pdGl2ZXMsIGJ1dCBzaG91bGQgcmV0dXJuIGZhbHNlXG4gICAgdmFyIFRIUk9XU19PTl9QUklNSVRJVkVTID0gZmFpbHMoZnVuY3Rpb24gKCkgeyBpbnN0YW5jZS5oYXMoMSk7IH0pO1xuICAgIC8vIG1vc3QgZWFybHkgaW1wbGVtZW50YXRpb25zIGRvZXNuJ3Qgc3VwcG9ydHMgaXRlcmFibGVzLCBtb3N0IG1vZGVybiAtIG5vdCBjbG9zZSBpdCBjb3JyZWN0bHlcbiAgICB2YXIgQUNDRVBUX0lURVJBQkxFUyA9ICRpdGVyRGV0ZWN0KGZ1bmN0aW9uIChpdGVyKSB7IG5ldyBDKGl0ZXIpOyB9KTsgLy8gZXNsaW50LWRpc2FibGUtbGluZSBuby1uZXdcbiAgICAvLyBmb3IgZWFybHkgaW1wbGVtZW50YXRpb25zIC0wIGFuZCArMCBub3QgdGhlIHNhbWVcbiAgICB2YXIgQlVHR1lfWkVSTyA9ICFJU19XRUFLICYmIGZhaWxzKGZ1bmN0aW9uICgpIHtcbiAgICAgIC8vIFY4IH4gQ2hyb21pdW0gNDItIGZhaWxzIG9ubHkgd2l0aCA1KyBlbGVtZW50c1xuICAgICAgdmFyICRpbnN0YW5jZSA9IG5ldyBDKCk7XG4gICAgICB2YXIgaW5kZXggPSA1O1xuICAgICAgd2hpbGUgKGluZGV4LS0pICRpbnN0YW5jZVtBRERFUl0oaW5kZXgsIGluZGV4KTtcbiAgICAgIHJldHVybiAhJGluc3RhbmNlLmhhcygtMCk7XG4gICAgfSk7XG4gICAgaWYgKCFBQ0NFUFRfSVRFUkFCTEVTKSB7XG4gICAgICBDID0gd3JhcHBlcihmdW5jdGlvbiAodGFyZ2V0LCBpdGVyYWJsZSkge1xuICAgICAgICBhbkluc3RhbmNlKHRhcmdldCwgQywgTkFNRSk7XG4gICAgICAgIHZhciB0aGF0ID0gaW5oZXJpdElmUmVxdWlyZWQobmV3IEJhc2UoKSwgdGFyZ2V0LCBDKTtcbiAgICAgICAgaWYgKGl0ZXJhYmxlICE9IHVuZGVmaW5lZCkgZm9yT2YoaXRlcmFibGUsIElTX01BUCwgdGhhdFtBRERFUl0sIHRoYXQpO1xuICAgICAgICByZXR1cm4gdGhhdDtcbiAgICAgIH0pO1xuICAgICAgQy5wcm90b3R5cGUgPSBwcm90bztcbiAgICAgIHByb3RvLmNvbnN0cnVjdG9yID0gQztcbiAgICB9XG4gICAgaWYgKFRIUk9XU19PTl9QUklNSVRJVkVTIHx8IEJVR0dZX1pFUk8pIHtcbiAgICAgIGZpeE1ldGhvZCgnZGVsZXRlJyk7XG4gICAgICBmaXhNZXRob2QoJ2hhcycpO1xuICAgICAgSVNfTUFQICYmIGZpeE1ldGhvZCgnZ2V0Jyk7XG4gICAgfVxuICAgIGlmIChCVUdHWV9aRVJPIHx8IEhBU05UX0NIQUlOSU5HKSBmaXhNZXRob2QoQURERVIpO1xuICAgIC8vIHdlYWsgY29sbGVjdGlvbnMgc2hvdWxkIG5vdCBjb250YWlucyAuY2xlYXIgbWV0aG9kXG4gICAgaWYgKElTX1dFQUsgJiYgcHJvdG8uY2xlYXIpIGRlbGV0ZSBwcm90by5jbGVhcjtcbiAgfVxuXG4gIHNldFRvU3RyaW5nVGFnKEMsIE5BTUUpO1xuXG4gIE9bTkFNRV0gPSBDO1xuICAkZXhwb3J0KCRleHBvcnQuRyArICRleHBvcnQuVyArICRleHBvcnQuRiAqIChDICE9IEJhc2UpLCBPKTtcblxuICBpZiAoIUlTX1dFQUspIGNvbW1vbi5zZXRTdHJvbmcoQywgTkFNRSwgSVNfTUFQKTtcblxuICByZXR1cm4gQztcbn07XG4iLCJ2YXIgZ2xvYmFsID0gcmVxdWlyZSgnLi9fZ2xvYmFsJyk7XG52YXIgbmF2aWdhdG9yID0gZ2xvYmFsLm5hdmlnYXRvcjtcblxubW9kdWxlLmV4cG9ydHMgPSBuYXZpZ2F0b3IgJiYgbmF2aWdhdG9yLnVzZXJBZ2VudCB8fCAnJztcbiIsIi8vIDcuMy4yMCBTcGVjaWVzQ29uc3RydWN0b3IoTywgZGVmYXVsdENvbnN0cnVjdG9yKVxudmFyIGFuT2JqZWN0ID0gcmVxdWlyZSgnLi9fYW4tb2JqZWN0Jyk7XG52YXIgYUZ1bmN0aW9uID0gcmVxdWlyZSgnLi9fYS1mdW5jdGlvbicpO1xudmFyIFNQRUNJRVMgPSByZXF1aXJlKCcuL193a3MnKSgnc3BlY2llcycpO1xubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAoTywgRCkge1xuICB2YXIgQyA9IGFuT2JqZWN0KE8pLmNvbnN0cnVjdG9yO1xuICB2YXIgUztcbiAgcmV0dXJuIEMgPT09IHVuZGVmaW5lZCB8fCAoUyA9IGFuT2JqZWN0KEMpW1NQRUNJRVNdKSA9PSB1bmRlZmluZWQgPyBEIDogYUZ1bmN0aW9uKFMpO1xufTtcbiIsIid1c2Ugc3RyaWN0JztcbnZhciBoaWRlID0gcmVxdWlyZSgnLi9faGlkZScpO1xudmFyIHJlZGVmaW5lID0gcmVxdWlyZSgnLi9fcmVkZWZpbmUnKTtcbnZhciBmYWlscyA9IHJlcXVpcmUoJy4vX2ZhaWxzJyk7XG52YXIgZGVmaW5lZCA9IHJlcXVpcmUoJy4vX2RlZmluZWQnKTtcbnZhciB3a3MgPSByZXF1aXJlKCcuL193a3MnKTtcblxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAoS0VZLCBsZW5ndGgsIGV4ZWMpIHtcbiAgdmFyIFNZTUJPTCA9IHdrcyhLRVkpO1xuICB2YXIgZm5zID0gZXhlYyhkZWZpbmVkLCBTWU1CT0wsICcnW0tFWV0pO1xuICB2YXIgc3RyZm4gPSBmbnNbMF07XG4gIHZhciByeGZuID0gZm5zWzFdO1xuICBpZiAoZmFpbHMoZnVuY3Rpb24gKCkge1xuICAgIHZhciBPID0ge307XG4gICAgT1tTWU1CT0xdID0gZnVuY3Rpb24gKCkgeyByZXR1cm4gNzsgfTtcbiAgICByZXR1cm4gJydbS0VZXShPKSAhPSA3O1xuICB9KSkge1xuICAgIHJlZGVmaW5lKFN0cmluZy5wcm90b3R5cGUsIEtFWSwgc3RyZm4pO1xuICAgIGhpZGUoUmVnRXhwLnByb3RvdHlwZSwgU1lNQk9MLCBsZW5ndGggPT0gMlxuICAgICAgLy8gMjEuMi41LjggUmVnRXhwLnByb3RvdHlwZVtAQHJlcGxhY2VdKHN0cmluZywgcmVwbGFjZVZhbHVlKVxuICAgICAgLy8gMjEuMi41LjExIFJlZ0V4cC5wcm90b3R5cGVbQEBzcGxpdF0oc3RyaW5nLCBsaW1pdClcbiAgICAgID8gZnVuY3Rpb24gKHN0cmluZywgYXJnKSB7IHJldHVybiByeGZuLmNhbGwoc3RyaW5nLCB0aGlzLCBhcmcpOyB9XG4gICAgICAvLyAyMS4yLjUuNiBSZWdFeHAucHJvdG90eXBlW0BAbWF0Y2hdKHN0cmluZylcbiAgICAgIC8vIDIxLjIuNS45IFJlZ0V4cC5wcm90b3R5cGVbQEBzZWFyY2hdKHN0cmluZylcbiAgICAgIDogZnVuY3Rpb24gKHN0cmluZykgeyByZXR1cm4gcnhmbi5jYWxsKHN0cmluZywgdGhpcyk7IH1cbiAgICApO1xuICB9XG59O1xuIiwiJ3VzZSBzdHJpY3QnO1xuLy8gMjEuMi41LjMgZ2V0IFJlZ0V4cC5wcm90b3R5cGUuZmxhZ3NcbnZhciBhbk9iamVjdCA9IHJlcXVpcmUoJy4vX2FuLW9iamVjdCcpO1xubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAoKSB7XG4gIHZhciB0aGF0ID0gYW5PYmplY3QodGhpcyk7XG4gIHZhciByZXN1bHQgPSAnJztcbiAgaWYgKHRoYXQuZ2xvYmFsKSByZXN1bHQgKz0gJ2cnO1xuICBpZiAodGhhdC5pZ25vcmVDYXNlKSByZXN1bHQgKz0gJ2knO1xuICBpZiAodGhhdC5tdWx0aWxpbmUpIHJlc3VsdCArPSAnbSc7XG4gIGlmICh0aGF0LnVuaWNvZGUpIHJlc3VsdCArPSAndSc7XG4gIGlmICh0aGF0LnN0aWNreSkgcmVzdWx0ICs9ICd5JztcbiAgcmV0dXJuIHJlc3VsdDtcbn07XG4iLCJ2YXIgSVRFUkFUT1IgPSByZXF1aXJlKCcuL193a3MnKSgnaXRlcmF0b3InKTtcbnZhciBTQUZFX0NMT1NJTkcgPSBmYWxzZTtcblxudHJ5IHtcbiAgdmFyIHJpdGVyID0gWzddW0lURVJBVE9SXSgpO1xuICByaXRlclsncmV0dXJuJ10gPSBmdW5jdGlvbiAoKSB7IFNBRkVfQ0xPU0lORyA9IHRydWU7IH07XG4gIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBuby10aHJvdy1saXRlcmFsXG4gIEFycmF5LmZyb20ocml0ZXIsIGZ1bmN0aW9uICgpIHsgdGhyb3cgMjsgfSk7XG59IGNhdGNoIChlKSB7IC8qIGVtcHR5ICovIH1cblxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAoZXhlYywgc2tpcENsb3NpbmcpIHtcbiAgaWYgKCFza2lwQ2xvc2luZyAmJiAhU0FGRV9DTE9TSU5HKSByZXR1cm4gZmFsc2U7XG4gIHZhciBzYWZlID0gZmFsc2U7XG4gIHRyeSB7XG4gICAgdmFyIGFyciA9IFs3XTtcbiAgICB2YXIgaXRlciA9IGFycltJVEVSQVRPUl0oKTtcbiAgICBpdGVyLm5leHQgPSBmdW5jdGlvbiAoKSB7IHJldHVybiB7IGRvbmU6IHNhZmUgPSB0cnVlIH07IH07XG4gICAgYXJyW0lURVJBVE9SXSA9IGZ1bmN0aW9uICgpIHsgcmV0dXJuIGl0ZXI7IH07XG4gICAgZXhlYyhhcnIpO1xuICB9IGNhdGNoIChlKSB7IC8qIGVtcHR5ICovIH1cbiAgcmV0dXJuIHNhZmU7XG59O1xuIiwiLy8gNy4yLjggSXNSZWdFeHAoYXJndW1lbnQpXG52YXIgaXNPYmplY3QgPSByZXF1aXJlKCcuL19pcy1vYmplY3QnKTtcbnZhciBjb2YgPSByZXF1aXJlKCcuL19jb2YnKTtcbnZhciBNQVRDSCA9IHJlcXVpcmUoJy4vX3drcycpKCdtYXRjaCcpO1xubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAoaXQpIHtcbiAgdmFyIGlzUmVnRXhwO1xuICByZXR1cm4gaXNPYmplY3QoaXQpICYmICgoaXNSZWdFeHAgPSBpdFtNQVRDSF0pICE9PSB1bmRlZmluZWQgPyAhIWlzUmVnRXhwIDogY29mKGl0KSA9PSAnUmVnRXhwJyk7XG59O1xuIiwiLy8gNy4yLjIgSXNBcnJheShhcmd1bWVudClcbnZhciBjb2YgPSByZXF1aXJlKCcuL19jb2YnKTtcbm1vZHVsZS5leHBvcnRzID0gQXJyYXkuaXNBcnJheSB8fCBmdW5jdGlvbiBpc0FycmF5KGFyZykge1xuICByZXR1cm4gY29mKGFyZykgPT0gJ0FycmF5Jztcbn07XG4iLCJleHBvcnRzLmYgPSBPYmplY3QuZ2V0T3duUHJvcGVydHlTeW1ib2xzO1xuIiwiLy8gZmFsc2UgLT4gQXJyYXkjaW5kZXhPZlxuLy8gdHJ1ZSAgLT4gQXJyYXkjaW5jbHVkZXNcbnZhciB0b0lPYmplY3QgPSByZXF1aXJlKCcuL190by1pb2JqZWN0Jyk7XG52YXIgdG9MZW5ndGggPSByZXF1aXJlKCcuL190by1sZW5ndGgnKTtcbnZhciB0b0Fic29sdXRlSW5kZXggPSByZXF1aXJlKCcuL190by1hYnNvbHV0ZS1pbmRleCcpO1xubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAoSVNfSU5DTFVERVMpIHtcbiAgcmV0dXJuIGZ1bmN0aW9uICgkdGhpcywgZWwsIGZyb21JbmRleCkge1xuICAgIHZhciBPID0gdG9JT2JqZWN0KCR0aGlzKTtcbiAgICB2YXIgbGVuZ3RoID0gdG9MZW5ndGgoTy5sZW5ndGgpO1xuICAgIHZhciBpbmRleCA9IHRvQWJzb2x1dGVJbmRleChmcm9tSW5kZXgsIGxlbmd0aCk7XG4gICAgdmFyIHZhbHVlO1xuICAgIC8vIEFycmF5I2luY2x1ZGVzIHVzZXMgU2FtZVZhbHVlWmVybyBlcXVhbGl0eSBhbGdvcml0aG1cbiAgICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgbm8tc2VsZi1jb21wYXJlXG4gICAgaWYgKElTX0lOQ0xVREVTICYmIGVsICE9IGVsKSB3aGlsZSAobGVuZ3RoID4gaW5kZXgpIHtcbiAgICAgIHZhbHVlID0gT1tpbmRleCsrXTtcbiAgICAgIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBuby1zZWxmLWNvbXBhcmVcbiAgICAgIGlmICh2YWx1ZSAhPSB2YWx1ZSkgcmV0dXJuIHRydWU7XG4gICAgLy8gQXJyYXkjaW5kZXhPZiBpZ25vcmVzIGhvbGVzLCBBcnJheSNpbmNsdWRlcyAtIG5vdFxuICAgIH0gZWxzZSBmb3IgKDtsZW5ndGggPiBpbmRleDsgaW5kZXgrKykgaWYgKElTX0lOQ0xVREVTIHx8IGluZGV4IGluIE8pIHtcbiAgICAgIGlmIChPW2luZGV4XSA9PT0gZWwpIHJldHVybiBJU19JTkNMVURFUyB8fCBpbmRleCB8fCAwO1xuICAgIH0gcmV0dXJuICFJU19JTkNMVURFUyAmJiAtMTtcbiAgfTtcbn07XG4iLCJ2YXIgY29yZSA9IHJlcXVpcmUoJy4vX2NvcmUnKTtcbnZhciBnbG9iYWwgPSByZXF1aXJlKCcuL19nbG9iYWwnKTtcbnZhciBTSEFSRUQgPSAnX19jb3JlLWpzX3NoYXJlZF9fJztcbnZhciBzdG9yZSA9IGdsb2JhbFtTSEFSRURdIHx8IChnbG9iYWxbU0hBUkVEXSA9IHt9KTtcblxuKG1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKGtleSwgdmFsdWUpIHtcbiAgcmV0dXJuIHN0b3JlW2tleV0gfHwgKHN0b3JlW2tleV0gPSB2YWx1ZSAhPT0gdW5kZWZpbmVkID8gdmFsdWUgOiB7fSk7XG59KSgndmVyc2lvbnMnLCBbXSkucHVzaCh7XG4gIHZlcnNpb246IGNvcmUudmVyc2lvbixcbiAgbW9kZTogcmVxdWlyZSgnLi9fbGlicmFyeScpID8gJ3B1cmUnIDogJ2dsb2JhbCcsXG4gIGNvcHlyaWdodDogJ8KpIDIwMTggRGVuaXMgUHVzaGthcmV2ICh6bG9pcm9jay5ydSknXG59KTtcbiIsInZhciBnO1xyXG5cclxuLy8gVGhpcyB3b3JrcyBpbiBub24tc3RyaWN0IG1vZGVcclxuZyA9IChmdW5jdGlvbigpIHtcclxuXHRyZXR1cm4gdGhpcztcclxufSkoKTtcclxuXHJcbnRyeSB7XHJcblx0Ly8gVGhpcyB3b3JrcyBpZiBldmFsIGlzIGFsbG93ZWQgKHNlZSBDU1ApXHJcblx0ZyA9IGcgfHwgRnVuY3Rpb24oXCJyZXR1cm4gdGhpc1wiKSgpIHx8ICgxLCBldmFsKShcInRoaXNcIik7XHJcbn0gY2F0Y2ggKGUpIHtcclxuXHQvLyBUaGlzIHdvcmtzIGlmIHRoZSB3aW5kb3cgcmVmZXJlbmNlIGlzIGF2YWlsYWJsZVxyXG5cdGlmICh0eXBlb2Ygd2luZG93ID09PSBcIm9iamVjdFwiKSBnID0gd2luZG93O1xyXG59XHJcblxyXG4vLyBnIGNhbiBzdGlsbCBiZSB1bmRlZmluZWQsIGJ1dCBub3RoaW5nIHRvIGRvIGFib3V0IGl0Li4uXHJcbi8vIFdlIHJldHVybiB1bmRlZmluZWQsIGluc3RlYWQgb2Ygbm90aGluZyBoZXJlLCBzbyBpdCdzXHJcbi8vIGVhc2llciB0byBoYW5kbGUgdGhpcyBjYXNlLiBpZighZ2xvYmFsKSB7IC4uLn1cclxuXHJcbm1vZHVsZS5leHBvcnRzID0gZztcclxuIiwiLyoqXG4gKiBDb3B5cmlnaHQgKGMpIDIwMTMtcHJlc2VudCwgRmFjZWJvb2ssIEluYy5cbiAqXG4gKiBUaGlzIHNvdXJjZSBjb2RlIGlzIGxpY2Vuc2VkIHVuZGVyIHRoZSBNSVQgbGljZW5zZSBmb3VuZCBpbiB0aGVcbiAqIExJQ0VOU0UgZmlsZSBpbiB0aGUgcm9vdCBkaXJlY3Rvcnkgb2YgdGhpcyBzb3VyY2UgdHJlZS5cbiAqL1xuXG4ndXNlIHN0cmljdCc7XG5cbi8qKlxuICogVXNlIGludmFyaWFudCgpIHRvIGFzc2VydCBzdGF0ZSB3aGljaCB5b3VyIHByb2dyYW0gYXNzdW1lcyB0byBiZSB0cnVlLlxuICpcbiAqIFByb3ZpZGUgc3ByaW50Zi1zdHlsZSBmb3JtYXQgKG9ubHkgJXMgaXMgc3VwcG9ydGVkKSBhbmQgYXJndW1lbnRzXG4gKiB0byBwcm92aWRlIGluZm9ybWF0aW9uIGFib3V0IHdoYXQgYnJva2UgYW5kIHdoYXQgeW91IHdlcmVcbiAqIGV4cGVjdGluZy5cbiAqXG4gKiBUaGUgaW52YXJpYW50IG1lc3NhZ2Ugd2lsbCBiZSBzdHJpcHBlZCBpbiBwcm9kdWN0aW9uLCBidXQgdGhlIGludmFyaWFudFxuICogd2lsbCByZW1haW4gdG8gZW5zdXJlIGxvZ2ljIGRvZXMgbm90IGRpZmZlciBpbiBwcm9kdWN0aW9uLlxuICovXG5cbnZhciBpbnZhcmlhbnQgPSBmdW5jdGlvbihjb25kaXRpb24sIGZvcm1hdCwgYSwgYiwgYywgZCwgZSwgZikge1xuICBpZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJykge1xuICAgIGlmIChmb3JtYXQgPT09IHVuZGVmaW5lZCkge1xuICAgICAgdGhyb3cgbmV3IEVycm9yKCdpbnZhcmlhbnQgcmVxdWlyZXMgYW4gZXJyb3IgbWVzc2FnZSBhcmd1bWVudCcpO1xuICAgIH1cbiAgfVxuXG4gIGlmICghY29uZGl0aW9uKSB7XG4gICAgdmFyIGVycm9yO1xuICAgIGlmIChmb3JtYXQgPT09IHVuZGVmaW5lZCkge1xuICAgICAgZXJyb3IgPSBuZXcgRXJyb3IoXG4gICAgICAgICdNaW5pZmllZCBleGNlcHRpb24gb2NjdXJyZWQ7IHVzZSB0aGUgbm9uLW1pbmlmaWVkIGRldiBlbnZpcm9ubWVudCAnICtcbiAgICAgICAgJ2ZvciB0aGUgZnVsbCBlcnJvciBtZXNzYWdlIGFuZCBhZGRpdGlvbmFsIGhlbHBmdWwgd2FybmluZ3MuJ1xuICAgICAgKTtcbiAgICB9IGVsc2Uge1xuICAgICAgdmFyIGFyZ3MgPSBbYSwgYiwgYywgZCwgZSwgZl07XG4gICAgICB2YXIgYXJnSW5kZXggPSAwO1xuICAgICAgZXJyb3IgPSBuZXcgRXJyb3IoXG4gICAgICAgIGZvcm1hdC5yZXBsYWNlKC8lcy9nLCBmdW5jdGlvbigpIHsgcmV0dXJuIGFyZ3NbYXJnSW5kZXgrK107IH0pXG4gICAgICApO1xuICAgICAgZXJyb3IubmFtZSA9ICdJbnZhcmlhbnQgVmlvbGF0aW9uJztcbiAgICB9XG5cbiAgICBlcnJvci5mcmFtZXNUb1BvcCA9IDE7IC8vIHdlIGRvbid0IGNhcmUgYWJvdXQgaW52YXJpYW50J3Mgb3duIGZyYW1lXG4gICAgdGhyb3cgZXJyb3I7XG4gIH1cbn07XG5cbm1vZHVsZS5leHBvcnRzID0gaW52YXJpYW50O1xuIiwiLypcblx0TUlUIExpY2Vuc2UgaHR0cDovL3d3dy5vcGVuc291cmNlLm9yZy9saWNlbnNlcy9taXQtbGljZW5zZS5waHBcblx0QXV0aG9yIFRvYmlhcyBLb3BwZXJzIEBzb2tyYVxuKi9cblxudmFyIHN0eWxlc0luRG9tID0ge307XG5cbnZhclx0bWVtb2l6ZSA9IGZ1bmN0aW9uIChmbikge1xuXHR2YXIgbWVtbztcblxuXHRyZXR1cm4gZnVuY3Rpb24gKCkge1xuXHRcdGlmICh0eXBlb2YgbWVtbyA9PT0gXCJ1bmRlZmluZWRcIikgbWVtbyA9IGZuLmFwcGx5KHRoaXMsIGFyZ3VtZW50cyk7XG5cdFx0cmV0dXJuIG1lbW87XG5cdH07XG59O1xuXG52YXIgaXNPbGRJRSA9IG1lbW9pemUoZnVuY3Rpb24gKCkge1xuXHQvLyBUZXN0IGZvciBJRSA8PSA5IGFzIHByb3Bvc2VkIGJ5IEJyb3dzZXJoYWNrc1xuXHQvLyBAc2VlIGh0dHA6Ly9icm93c2VyaGFja3MuY29tLyNoYWNrLWU3MWQ4NjkyZjY1MzM0MTczZmVlNzE1YzIyMmNiODA1XG5cdC8vIFRlc3RzIGZvciBleGlzdGVuY2Ugb2Ygc3RhbmRhcmQgZ2xvYmFscyBpcyB0byBhbGxvdyBzdHlsZS1sb2FkZXJcblx0Ly8gdG8gb3BlcmF0ZSBjb3JyZWN0bHkgaW50byBub24tc3RhbmRhcmQgZW52aXJvbm1lbnRzXG5cdC8vIEBzZWUgaHR0cHM6Ly9naXRodWIuY29tL3dlYnBhY2stY29udHJpYi9zdHlsZS1sb2FkZXIvaXNzdWVzLzE3N1xuXHRyZXR1cm4gd2luZG93ICYmIGRvY3VtZW50ICYmIGRvY3VtZW50LmFsbCAmJiAhd2luZG93LmF0b2I7XG59KTtcblxudmFyIGdldFRhcmdldCA9IGZ1bmN0aW9uICh0YXJnZXQpIHtcbiAgcmV0dXJuIGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IodGFyZ2V0KTtcbn07XG5cbnZhciBnZXRFbGVtZW50ID0gKGZ1bmN0aW9uIChmbikge1xuXHR2YXIgbWVtbyA9IHt9O1xuXG5cdHJldHVybiBmdW5jdGlvbih0YXJnZXQpIHtcbiAgICAgICAgICAgICAgICAvLyBJZiBwYXNzaW5nIGZ1bmN0aW9uIGluIG9wdGlvbnMsIHRoZW4gdXNlIGl0IGZvciByZXNvbHZlIFwiaGVhZFwiIGVsZW1lbnQuXG4gICAgICAgICAgICAgICAgLy8gVXNlZnVsIGZvciBTaGFkb3cgUm9vdCBzdHlsZSBpLmVcbiAgICAgICAgICAgICAgICAvLyB7XG4gICAgICAgICAgICAgICAgLy8gICBpbnNlcnRJbnRvOiBmdW5jdGlvbiAoKSB7IHJldHVybiBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKFwiI2Zvb1wiKS5zaGFkb3dSb290IH1cbiAgICAgICAgICAgICAgICAvLyB9XG4gICAgICAgICAgICAgICAgaWYgKHR5cGVvZiB0YXJnZXQgPT09ICdmdW5jdGlvbicpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiB0YXJnZXQoKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgaWYgKHR5cGVvZiBtZW1vW3RhcmdldF0gPT09IFwidW5kZWZpbmVkXCIpIHtcblx0XHRcdHZhciBzdHlsZVRhcmdldCA9IGdldFRhcmdldC5jYWxsKHRoaXMsIHRhcmdldCk7XG5cdFx0XHQvLyBTcGVjaWFsIGNhc2UgdG8gcmV0dXJuIGhlYWQgb2YgaWZyYW1lIGluc3RlYWQgb2YgaWZyYW1lIGl0c2VsZlxuXHRcdFx0aWYgKHdpbmRvdy5IVE1MSUZyYW1lRWxlbWVudCAmJiBzdHlsZVRhcmdldCBpbnN0YW5jZW9mIHdpbmRvdy5IVE1MSUZyYW1lRWxlbWVudCkge1xuXHRcdFx0XHR0cnkge1xuXHRcdFx0XHRcdC8vIFRoaXMgd2lsbCB0aHJvdyBhbiBleGNlcHRpb24gaWYgYWNjZXNzIHRvIGlmcmFtZSBpcyBibG9ja2VkXG5cdFx0XHRcdFx0Ly8gZHVlIHRvIGNyb3NzLW9yaWdpbiByZXN0cmljdGlvbnNcblx0XHRcdFx0XHRzdHlsZVRhcmdldCA9IHN0eWxlVGFyZ2V0LmNvbnRlbnREb2N1bWVudC5oZWFkO1xuXHRcdFx0XHR9IGNhdGNoKGUpIHtcblx0XHRcdFx0XHRzdHlsZVRhcmdldCA9IG51bGw7XG5cdFx0XHRcdH1cblx0XHRcdH1cblx0XHRcdG1lbW9bdGFyZ2V0XSA9IHN0eWxlVGFyZ2V0O1xuXHRcdH1cblx0XHRyZXR1cm4gbWVtb1t0YXJnZXRdXG5cdH07XG59KSgpO1xuXG52YXIgc2luZ2xldG9uID0gbnVsbDtcbnZhclx0c2luZ2xldG9uQ291bnRlciA9IDA7XG52YXJcdHN0eWxlc0luc2VydGVkQXRUb3AgPSBbXTtcblxudmFyXHRmaXhVcmxzID0gcmVxdWlyZShcIi4vdXJsc1wiKTtcblxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbihsaXN0LCBvcHRpb25zKSB7XG5cdGlmICh0eXBlb2YgREVCVUcgIT09IFwidW5kZWZpbmVkXCIgJiYgREVCVUcpIHtcblx0XHRpZiAodHlwZW9mIGRvY3VtZW50ICE9PSBcIm9iamVjdFwiKSB0aHJvdyBuZXcgRXJyb3IoXCJUaGUgc3R5bGUtbG9hZGVyIGNhbm5vdCBiZSB1c2VkIGluIGEgbm9uLWJyb3dzZXIgZW52aXJvbm1lbnRcIik7XG5cdH1cblxuXHRvcHRpb25zID0gb3B0aW9ucyB8fCB7fTtcblxuXHRvcHRpb25zLmF0dHJzID0gdHlwZW9mIG9wdGlvbnMuYXR0cnMgPT09IFwib2JqZWN0XCIgPyBvcHRpb25zLmF0dHJzIDoge307XG5cblx0Ly8gRm9yY2Ugc2luZ2xlLXRhZyBzb2x1dGlvbiBvbiBJRTYtOSwgd2hpY2ggaGFzIGEgaGFyZCBsaW1pdCBvbiB0aGUgIyBvZiA8c3R5bGU+XG5cdC8vIHRhZ3MgaXQgd2lsbCBhbGxvdyBvbiBhIHBhZ2Vcblx0aWYgKCFvcHRpb25zLnNpbmdsZXRvbiAmJiB0eXBlb2Ygb3B0aW9ucy5zaW5nbGV0b24gIT09IFwiYm9vbGVhblwiKSBvcHRpb25zLnNpbmdsZXRvbiA9IGlzT2xkSUUoKTtcblxuXHQvLyBCeSBkZWZhdWx0LCBhZGQgPHN0eWxlPiB0YWdzIHRvIHRoZSA8aGVhZD4gZWxlbWVudFxuICAgICAgICBpZiAoIW9wdGlvbnMuaW5zZXJ0SW50bykgb3B0aW9ucy5pbnNlcnRJbnRvID0gXCJoZWFkXCI7XG5cblx0Ly8gQnkgZGVmYXVsdCwgYWRkIDxzdHlsZT4gdGFncyB0byB0aGUgYm90dG9tIG9mIHRoZSB0YXJnZXRcblx0aWYgKCFvcHRpb25zLmluc2VydEF0KSBvcHRpb25zLmluc2VydEF0ID0gXCJib3R0b21cIjtcblxuXHR2YXIgc3R5bGVzID0gbGlzdFRvU3R5bGVzKGxpc3QsIG9wdGlvbnMpO1xuXG5cdGFkZFN0eWxlc1RvRG9tKHN0eWxlcywgb3B0aW9ucyk7XG5cblx0cmV0dXJuIGZ1bmN0aW9uIHVwZGF0ZSAobmV3TGlzdCkge1xuXHRcdHZhciBtYXlSZW1vdmUgPSBbXTtcblxuXHRcdGZvciAodmFyIGkgPSAwOyBpIDwgc3R5bGVzLmxlbmd0aDsgaSsrKSB7XG5cdFx0XHR2YXIgaXRlbSA9IHN0eWxlc1tpXTtcblx0XHRcdHZhciBkb21TdHlsZSA9IHN0eWxlc0luRG9tW2l0ZW0uaWRdO1xuXG5cdFx0XHRkb21TdHlsZS5yZWZzLS07XG5cdFx0XHRtYXlSZW1vdmUucHVzaChkb21TdHlsZSk7XG5cdFx0fVxuXG5cdFx0aWYobmV3TGlzdCkge1xuXHRcdFx0dmFyIG5ld1N0eWxlcyA9IGxpc3RUb1N0eWxlcyhuZXdMaXN0LCBvcHRpb25zKTtcblx0XHRcdGFkZFN0eWxlc1RvRG9tKG5ld1N0eWxlcywgb3B0aW9ucyk7XG5cdFx0fVxuXG5cdFx0Zm9yICh2YXIgaSA9IDA7IGkgPCBtYXlSZW1vdmUubGVuZ3RoOyBpKyspIHtcblx0XHRcdHZhciBkb21TdHlsZSA9IG1heVJlbW92ZVtpXTtcblxuXHRcdFx0aWYoZG9tU3R5bGUucmVmcyA9PT0gMCkge1xuXHRcdFx0XHRmb3IgKHZhciBqID0gMDsgaiA8IGRvbVN0eWxlLnBhcnRzLmxlbmd0aDsgaisrKSBkb21TdHlsZS5wYXJ0c1tqXSgpO1xuXG5cdFx0XHRcdGRlbGV0ZSBzdHlsZXNJbkRvbVtkb21TdHlsZS5pZF07XG5cdFx0XHR9XG5cdFx0fVxuXHR9O1xufTtcblxuZnVuY3Rpb24gYWRkU3R5bGVzVG9Eb20gKHN0eWxlcywgb3B0aW9ucykge1xuXHRmb3IgKHZhciBpID0gMDsgaSA8IHN0eWxlcy5sZW5ndGg7IGkrKykge1xuXHRcdHZhciBpdGVtID0gc3R5bGVzW2ldO1xuXHRcdHZhciBkb21TdHlsZSA9IHN0eWxlc0luRG9tW2l0ZW0uaWRdO1xuXG5cdFx0aWYoZG9tU3R5bGUpIHtcblx0XHRcdGRvbVN0eWxlLnJlZnMrKztcblxuXHRcdFx0Zm9yKHZhciBqID0gMDsgaiA8IGRvbVN0eWxlLnBhcnRzLmxlbmd0aDsgaisrKSB7XG5cdFx0XHRcdGRvbVN0eWxlLnBhcnRzW2pdKGl0ZW0ucGFydHNbal0pO1xuXHRcdFx0fVxuXG5cdFx0XHRmb3IoOyBqIDwgaXRlbS5wYXJ0cy5sZW5ndGg7IGorKykge1xuXHRcdFx0XHRkb21TdHlsZS5wYXJ0cy5wdXNoKGFkZFN0eWxlKGl0ZW0ucGFydHNbal0sIG9wdGlvbnMpKTtcblx0XHRcdH1cblx0XHR9IGVsc2Uge1xuXHRcdFx0dmFyIHBhcnRzID0gW107XG5cblx0XHRcdGZvcih2YXIgaiA9IDA7IGogPCBpdGVtLnBhcnRzLmxlbmd0aDsgaisrKSB7XG5cdFx0XHRcdHBhcnRzLnB1c2goYWRkU3R5bGUoaXRlbS5wYXJ0c1tqXSwgb3B0aW9ucykpO1xuXHRcdFx0fVxuXG5cdFx0XHRzdHlsZXNJbkRvbVtpdGVtLmlkXSA9IHtpZDogaXRlbS5pZCwgcmVmczogMSwgcGFydHM6IHBhcnRzfTtcblx0XHR9XG5cdH1cbn1cblxuZnVuY3Rpb24gbGlzdFRvU3R5bGVzIChsaXN0LCBvcHRpb25zKSB7XG5cdHZhciBzdHlsZXMgPSBbXTtcblx0dmFyIG5ld1N0eWxlcyA9IHt9O1xuXG5cdGZvciAodmFyIGkgPSAwOyBpIDwgbGlzdC5sZW5ndGg7IGkrKykge1xuXHRcdHZhciBpdGVtID0gbGlzdFtpXTtcblx0XHR2YXIgaWQgPSBvcHRpb25zLmJhc2UgPyBpdGVtWzBdICsgb3B0aW9ucy5iYXNlIDogaXRlbVswXTtcblx0XHR2YXIgY3NzID0gaXRlbVsxXTtcblx0XHR2YXIgbWVkaWEgPSBpdGVtWzJdO1xuXHRcdHZhciBzb3VyY2VNYXAgPSBpdGVtWzNdO1xuXHRcdHZhciBwYXJ0ID0ge2NzczogY3NzLCBtZWRpYTogbWVkaWEsIHNvdXJjZU1hcDogc291cmNlTWFwfTtcblxuXHRcdGlmKCFuZXdTdHlsZXNbaWRdKSBzdHlsZXMucHVzaChuZXdTdHlsZXNbaWRdID0ge2lkOiBpZCwgcGFydHM6IFtwYXJ0XX0pO1xuXHRcdGVsc2UgbmV3U3R5bGVzW2lkXS5wYXJ0cy5wdXNoKHBhcnQpO1xuXHR9XG5cblx0cmV0dXJuIHN0eWxlcztcbn1cblxuZnVuY3Rpb24gaW5zZXJ0U3R5bGVFbGVtZW50IChvcHRpb25zLCBzdHlsZSkge1xuXHR2YXIgdGFyZ2V0ID0gZ2V0RWxlbWVudChvcHRpb25zLmluc2VydEludG8pXG5cblx0aWYgKCF0YXJnZXQpIHtcblx0XHR0aHJvdyBuZXcgRXJyb3IoXCJDb3VsZG4ndCBmaW5kIGEgc3R5bGUgdGFyZ2V0LiBUaGlzIHByb2JhYmx5IG1lYW5zIHRoYXQgdGhlIHZhbHVlIGZvciB0aGUgJ2luc2VydEludG8nIHBhcmFtZXRlciBpcyBpbnZhbGlkLlwiKTtcblx0fVxuXG5cdHZhciBsYXN0U3R5bGVFbGVtZW50SW5zZXJ0ZWRBdFRvcCA9IHN0eWxlc0luc2VydGVkQXRUb3Bbc3R5bGVzSW5zZXJ0ZWRBdFRvcC5sZW5ndGggLSAxXTtcblxuXHRpZiAob3B0aW9ucy5pbnNlcnRBdCA9PT0gXCJ0b3BcIikge1xuXHRcdGlmICghbGFzdFN0eWxlRWxlbWVudEluc2VydGVkQXRUb3ApIHtcblx0XHRcdHRhcmdldC5pbnNlcnRCZWZvcmUoc3R5bGUsIHRhcmdldC5maXJzdENoaWxkKTtcblx0XHR9IGVsc2UgaWYgKGxhc3RTdHlsZUVsZW1lbnRJbnNlcnRlZEF0VG9wLm5leHRTaWJsaW5nKSB7XG5cdFx0XHR0YXJnZXQuaW5zZXJ0QmVmb3JlKHN0eWxlLCBsYXN0U3R5bGVFbGVtZW50SW5zZXJ0ZWRBdFRvcC5uZXh0U2libGluZyk7XG5cdFx0fSBlbHNlIHtcblx0XHRcdHRhcmdldC5hcHBlbmRDaGlsZChzdHlsZSk7XG5cdFx0fVxuXHRcdHN0eWxlc0luc2VydGVkQXRUb3AucHVzaChzdHlsZSk7XG5cdH0gZWxzZSBpZiAob3B0aW9ucy5pbnNlcnRBdCA9PT0gXCJib3R0b21cIikge1xuXHRcdHRhcmdldC5hcHBlbmRDaGlsZChzdHlsZSk7XG5cdH0gZWxzZSBpZiAodHlwZW9mIG9wdGlvbnMuaW5zZXJ0QXQgPT09IFwib2JqZWN0XCIgJiYgb3B0aW9ucy5pbnNlcnRBdC5iZWZvcmUpIHtcblx0XHR2YXIgbmV4dFNpYmxpbmcgPSBnZXRFbGVtZW50KG9wdGlvbnMuaW5zZXJ0SW50byArIFwiIFwiICsgb3B0aW9ucy5pbnNlcnRBdC5iZWZvcmUpO1xuXHRcdHRhcmdldC5pbnNlcnRCZWZvcmUoc3R5bGUsIG5leHRTaWJsaW5nKTtcblx0fSBlbHNlIHtcblx0XHR0aHJvdyBuZXcgRXJyb3IoXCJbU3R5bGUgTG9hZGVyXVxcblxcbiBJbnZhbGlkIHZhbHVlIGZvciBwYXJhbWV0ZXIgJ2luc2VydEF0JyAoJ29wdGlvbnMuaW5zZXJ0QXQnKSBmb3VuZC5cXG4gTXVzdCBiZSAndG9wJywgJ2JvdHRvbScsIG9yIE9iamVjdC5cXG4gKGh0dHBzOi8vZ2l0aHViLmNvbS93ZWJwYWNrLWNvbnRyaWIvc3R5bGUtbG9hZGVyI2luc2VydGF0KVxcblwiKTtcblx0fVxufVxuXG5mdW5jdGlvbiByZW1vdmVTdHlsZUVsZW1lbnQgKHN0eWxlKSB7XG5cdGlmIChzdHlsZS5wYXJlbnROb2RlID09PSBudWxsKSByZXR1cm4gZmFsc2U7XG5cdHN0eWxlLnBhcmVudE5vZGUucmVtb3ZlQ2hpbGQoc3R5bGUpO1xuXG5cdHZhciBpZHggPSBzdHlsZXNJbnNlcnRlZEF0VG9wLmluZGV4T2Yoc3R5bGUpO1xuXHRpZihpZHggPj0gMCkge1xuXHRcdHN0eWxlc0luc2VydGVkQXRUb3Auc3BsaWNlKGlkeCwgMSk7XG5cdH1cbn1cblxuZnVuY3Rpb24gY3JlYXRlU3R5bGVFbGVtZW50IChvcHRpb25zKSB7XG5cdHZhciBzdHlsZSA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoXCJzdHlsZVwiKTtcblxuXHRpZihvcHRpb25zLmF0dHJzLnR5cGUgPT09IHVuZGVmaW5lZCkge1xuXHRcdG9wdGlvbnMuYXR0cnMudHlwZSA9IFwidGV4dC9jc3NcIjtcblx0fVxuXG5cdGFkZEF0dHJzKHN0eWxlLCBvcHRpb25zLmF0dHJzKTtcblx0aW5zZXJ0U3R5bGVFbGVtZW50KG9wdGlvbnMsIHN0eWxlKTtcblxuXHRyZXR1cm4gc3R5bGU7XG59XG5cbmZ1bmN0aW9uIGNyZWF0ZUxpbmtFbGVtZW50IChvcHRpb25zKSB7XG5cdHZhciBsaW5rID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudChcImxpbmtcIik7XG5cblx0aWYob3B0aW9ucy5hdHRycy50eXBlID09PSB1bmRlZmluZWQpIHtcblx0XHRvcHRpb25zLmF0dHJzLnR5cGUgPSBcInRleHQvY3NzXCI7XG5cdH1cblx0b3B0aW9ucy5hdHRycy5yZWwgPSBcInN0eWxlc2hlZXRcIjtcblxuXHRhZGRBdHRycyhsaW5rLCBvcHRpb25zLmF0dHJzKTtcblx0aW5zZXJ0U3R5bGVFbGVtZW50KG9wdGlvbnMsIGxpbmspO1xuXG5cdHJldHVybiBsaW5rO1xufVxuXG5mdW5jdGlvbiBhZGRBdHRycyAoZWwsIGF0dHJzKSB7XG5cdE9iamVjdC5rZXlzKGF0dHJzKS5mb3JFYWNoKGZ1bmN0aW9uIChrZXkpIHtcblx0XHRlbC5zZXRBdHRyaWJ1dGUoa2V5LCBhdHRyc1trZXldKTtcblx0fSk7XG59XG5cbmZ1bmN0aW9uIGFkZFN0eWxlIChvYmosIG9wdGlvbnMpIHtcblx0dmFyIHN0eWxlLCB1cGRhdGUsIHJlbW92ZSwgcmVzdWx0O1xuXG5cdC8vIElmIGEgdHJhbnNmb3JtIGZ1bmN0aW9uIHdhcyBkZWZpbmVkLCBydW4gaXQgb24gdGhlIGNzc1xuXHRpZiAob3B0aW9ucy50cmFuc2Zvcm0gJiYgb2JqLmNzcykge1xuXHQgICAgcmVzdWx0ID0gb3B0aW9ucy50cmFuc2Zvcm0ob2JqLmNzcyk7XG5cblx0ICAgIGlmIChyZXN1bHQpIHtcblx0ICAgIFx0Ly8gSWYgdHJhbnNmb3JtIHJldHVybnMgYSB2YWx1ZSwgdXNlIHRoYXQgaW5zdGVhZCBvZiB0aGUgb3JpZ2luYWwgY3NzLlxuXHQgICAgXHQvLyBUaGlzIGFsbG93cyBydW5uaW5nIHJ1bnRpbWUgdHJhbnNmb3JtYXRpb25zIG9uIHRoZSBjc3MuXG5cdCAgICBcdG9iai5jc3MgPSByZXN1bHQ7XG5cdCAgICB9IGVsc2Uge1xuXHQgICAgXHQvLyBJZiB0aGUgdHJhbnNmb3JtIGZ1bmN0aW9uIHJldHVybnMgYSBmYWxzeSB2YWx1ZSwgZG9uJ3QgYWRkIHRoaXMgY3NzLlxuXHQgICAgXHQvLyBUaGlzIGFsbG93cyBjb25kaXRpb25hbCBsb2FkaW5nIG9mIGNzc1xuXHQgICAgXHRyZXR1cm4gZnVuY3Rpb24oKSB7XG5cdCAgICBcdFx0Ly8gbm9vcFxuXHQgICAgXHR9O1xuXHQgICAgfVxuXHR9XG5cblx0aWYgKG9wdGlvbnMuc2luZ2xldG9uKSB7XG5cdFx0dmFyIHN0eWxlSW5kZXggPSBzaW5nbGV0b25Db3VudGVyKys7XG5cblx0XHRzdHlsZSA9IHNpbmdsZXRvbiB8fCAoc2luZ2xldG9uID0gY3JlYXRlU3R5bGVFbGVtZW50KG9wdGlvbnMpKTtcblxuXHRcdHVwZGF0ZSA9IGFwcGx5VG9TaW5nbGV0b25UYWcuYmluZChudWxsLCBzdHlsZSwgc3R5bGVJbmRleCwgZmFsc2UpO1xuXHRcdHJlbW92ZSA9IGFwcGx5VG9TaW5nbGV0b25UYWcuYmluZChudWxsLCBzdHlsZSwgc3R5bGVJbmRleCwgdHJ1ZSk7XG5cblx0fSBlbHNlIGlmIChcblx0XHRvYmouc291cmNlTWFwICYmXG5cdFx0dHlwZW9mIFVSTCA9PT0gXCJmdW5jdGlvblwiICYmXG5cdFx0dHlwZW9mIFVSTC5jcmVhdGVPYmplY3RVUkwgPT09IFwiZnVuY3Rpb25cIiAmJlxuXHRcdHR5cGVvZiBVUkwucmV2b2tlT2JqZWN0VVJMID09PSBcImZ1bmN0aW9uXCIgJiZcblx0XHR0eXBlb2YgQmxvYiA9PT0gXCJmdW5jdGlvblwiICYmXG5cdFx0dHlwZW9mIGJ0b2EgPT09IFwiZnVuY3Rpb25cIlxuXHQpIHtcblx0XHRzdHlsZSA9IGNyZWF0ZUxpbmtFbGVtZW50KG9wdGlvbnMpO1xuXHRcdHVwZGF0ZSA9IHVwZGF0ZUxpbmsuYmluZChudWxsLCBzdHlsZSwgb3B0aW9ucyk7XG5cdFx0cmVtb3ZlID0gZnVuY3Rpb24gKCkge1xuXHRcdFx0cmVtb3ZlU3R5bGVFbGVtZW50KHN0eWxlKTtcblxuXHRcdFx0aWYoc3R5bGUuaHJlZikgVVJMLnJldm9rZU9iamVjdFVSTChzdHlsZS5ocmVmKTtcblx0XHR9O1xuXHR9IGVsc2Uge1xuXHRcdHN0eWxlID0gY3JlYXRlU3R5bGVFbGVtZW50KG9wdGlvbnMpO1xuXHRcdHVwZGF0ZSA9IGFwcGx5VG9UYWcuYmluZChudWxsLCBzdHlsZSk7XG5cdFx0cmVtb3ZlID0gZnVuY3Rpb24gKCkge1xuXHRcdFx0cmVtb3ZlU3R5bGVFbGVtZW50KHN0eWxlKTtcblx0XHR9O1xuXHR9XG5cblx0dXBkYXRlKG9iaik7XG5cblx0cmV0dXJuIGZ1bmN0aW9uIHVwZGF0ZVN0eWxlIChuZXdPYmopIHtcblx0XHRpZiAobmV3T2JqKSB7XG5cdFx0XHRpZiAoXG5cdFx0XHRcdG5ld09iai5jc3MgPT09IG9iai5jc3MgJiZcblx0XHRcdFx0bmV3T2JqLm1lZGlhID09PSBvYmoubWVkaWEgJiZcblx0XHRcdFx0bmV3T2JqLnNvdXJjZU1hcCA9PT0gb2JqLnNvdXJjZU1hcFxuXHRcdFx0KSB7XG5cdFx0XHRcdHJldHVybjtcblx0XHRcdH1cblxuXHRcdFx0dXBkYXRlKG9iaiA9IG5ld09iaik7XG5cdFx0fSBlbHNlIHtcblx0XHRcdHJlbW92ZSgpO1xuXHRcdH1cblx0fTtcbn1cblxudmFyIHJlcGxhY2VUZXh0ID0gKGZ1bmN0aW9uICgpIHtcblx0dmFyIHRleHRTdG9yZSA9IFtdO1xuXG5cdHJldHVybiBmdW5jdGlvbiAoaW5kZXgsIHJlcGxhY2VtZW50KSB7XG5cdFx0dGV4dFN0b3JlW2luZGV4XSA9IHJlcGxhY2VtZW50O1xuXG5cdFx0cmV0dXJuIHRleHRTdG9yZS5maWx0ZXIoQm9vbGVhbikuam9pbignXFxuJyk7XG5cdH07XG59KSgpO1xuXG5mdW5jdGlvbiBhcHBseVRvU2luZ2xldG9uVGFnIChzdHlsZSwgaW5kZXgsIHJlbW92ZSwgb2JqKSB7XG5cdHZhciBjc3MgPSByZW1vdmUgPyBcIlwiIDogb2JqLmNzcztcblxuXHRpZiAoc3R5bGUuc3R5bGVTaGVldCkge1xuXHRcdHN0eWxlLnN0eWxlU2hlZXQuY3NzVGV4dCA9IHJlcGxhY2VUZXh0KGluZGV4LCBjc3MpO1xuXHR9IGVsc2Uge1xuXHRcdHZhciBjc3NOb2RlID0gZG9jdW1lbnQuY3JlYXRlVGV4dE5vZGUoY3NzKTtcblx0XHR2YXIgY2hpbGROb2RlcyA9IHN0eWxlLmNoaWxkTm9kZXM7XG5cblx0XHRpZiAoY2hpbGROb2Rlc1tpbmRleF0pIHN0eWxlLnJlbW92ZUNoaWxkKGNoaWxkTm9kZXNbaW5kZXhdKTtcblxuXHRcdGlmIChjaGlsZE5vZGVzLmxlbmd0aCkge1xuXHRcdFx0c3R5bGUuaW5zZXJ0QmVmb3JlKGNzc05vZGUsIGNoaWxkTm9kZXNbaW5kZXhdKTtcblx0XHR9IGVsc2Uge1xuXHRcdFx0c3R5bGUuYXBwZW5kQ2hpbGQoY3NzTm9kZSk7XG5cdFx0fVxuXHR9XG59XG5cbmZ1bmN0aW9uIGFwcGx5VG9UYWcgKHN0eWxlLCBvYmopIHtcblx0dmFyIGNzcyA9IG9iai5jc3M7XG5cdHZhciBtZWRpYSA9IG9iai5tZWRpYTtcblxuXHRpZihtZWRpYSkge1xuXHRcdHN0eWxlLnNldEF0dHJpYnV0ZShcIm1lZGlhXCIsIG1lZGlhKVxuXHR9XG5cblx0aWYoc3R5bGUuc3R5bGVTaGVldCkge1xuXHRcdHN0eWxlLnN0eWxlU2hlZXQuY3NzVGV4dCA9IGNzcztcblx0fSBlbHNlIHtcblx0XHR3aGlsZShzdHlsZS5maXJzdENoaWxkKSB7XG5cdFx0XHRzdHlsZS5yZW1vdmVDaGlsZChzdHlsZS5maXJzdENoaWxkKTtcblx0XHR9XG5cblx0XHRzdHlsZS5hcHBlbmRDaGlsZChkb2N1bWVudC5jcmVhdGVUZXh0Tm9kZShjc3MpKTtcblx0fVxufVxuXG5mdW5jdGlvbiB1cGRhdGVMaW5rIChsaW5rLCBvcHRpb25zLCBvYmopIHtcblx0dmFyIGNzcyA9IG9iai5jc3M7XG5cdHZhciBzb3VyY2VNYXAgPSBvYmouc291cmNlTWFwO1xuXG5cdC8qXG5cdFx0SWYgY29udmVydFRvQWJzb2x1dGVVcmxzIGlzbid0IGRlZmluZWQsIGJ1dCBzb3VyY2VtYXBzIGFyZSBlbmFibGVkXG5cdFx0YW5kIHRoZXJlIGlzIG5vIHB1YmxpY1BhdGggZGVmaW5lZCB0aGVuIGxldHMgdHVybiBjb252ZXJ0VG9BYnNvbHV0ZVVybHNcblx0XHRvbiBieSBkZWZhdWx0LiAgT3RoZXJ3aXNlIGRlZmF1bHQgdG8gdGhlIGNvbnZlcnRUb0Fic29sdXRlVXJscyBvcHRpb25cblx0XHRkaXJlY3RseVxuXHQqL1xuXHR2YXIgYXV0b0ZpeFVybHMgPSBvcHRpb25zLmNvbnZlcnRUb0Fic29sdXRlVXJscyA9PT0gdW5kZWZpbmVkICYmIHNvdXJjZU1hcDtcblxuXHRpZiAob3B0aW9ucy5jb252ZXJ0VG9BYnNvbHV0ZVVybHMgfHwgYXV0b0ZpeFVybHMpIHtcblx0XHRjc3MgPSBmaXhVcmxzKGNzcyk7XG5cdH1cblxuXHRpZiAoc291cmNlTWFwKSB7XG5cdFx0Ly8gaHR0cDovL3N0YWNrb3ZlcmZsb3cuY29tL2EvMjY2MDM4NzVcblx0XHRjc3MgKz0gXCJcXG4vKiMgc291cmNlTWFwcGluZ1VSTD1kYXRhOmFwcGxpY2F0aW9uL2pzb247YmFzZTY0LFwiICsgYnRvYSh1bmVzY2FwZShlbmNvZGVVUklDb21wb25lbnQoSlNPTi5zdHJpbmdpZnkoc291cmNlTWFwKSkpKSArIFwiICovXCI7XG5cdH1cblxuXHR2YXIgYmxvYiA9IG5ldyBCbG9iKFtjc3NdLCB7IHR5cGU6IFwidGV4dC9jc3NcIiB9KTtcblxuXHR2YXIgb2xkU3JjID0gbGluay5ocmVmO1xuXG5cdGxpbmsuaHJlZiA9IFVSTC5jcmVhdGVPYmplY3RVUkwoYmxvYik7XG5cblx0aWYob2xkU3JjKSBVUkwucmV2b2tlT2JqZWN0VVJMKG9sZFNyYyk7XG59XG4iLCIvKlxuXHRNSVQgTGljZW5zZSBodHRwOi8vd3d3Lm9wZW5zb3VyY2Uub3JnL2xpY2Vuc2VzL21pdC1saWNlbnNlLnBocFxuXHRBdXRob3IgVG9iaWFzIEtvcHBlcnMgQHNva3JhXG4qL1xuLy8gY3NzIGJhc2UgY29kZSwgaW5qZWN0ZWQgYnkgdGhlIGNzcy1sb2FkZXJcbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24odXNlU291cmNlTWFwKSB7XG5cdHZhciBsaXN0ID0gW107XG5cblx0Ly8gcmV0dXJuIHRoZSBsaXN0IG9mIG1vZHVsZXMgYXMgY3NzIHN0cmluZ1xuXHRsaXN0LnRvU3RyaW5nID0gZnVuY3Rpb24gdG9TdHJpbmcoKSB7XG5cdFx0cmV0dXJuIHRoaXMubWFwKGZ1bmN0aW9uIChpdGVtKSB7XG5cdFx0XHR2YXIgY29udGVudCA9IGNzc1dpdGhNYXBwaW5nVG9TdHJpbmcoaXRlbSwgdXNlU291cmNlTWFwKTtcblx0XHRcdGlmKGl0ZW1bMl0pIHtcblx0XHRcdFx0cmV0dXJuIFwiQG1lZGlhIFwiICsgaXRlbVsyXSArIFwie1wiICsgY29udGVudCArIFwifVwiO1xuXHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0cmV0dXJuIGNvbnRlbnQ7XG5cdFx0XHR9XG5cdFx0fSkuam9pbihcIlwiKTtcblx0fTtcblxuXHQvLyBpbXBvcnQgYSBsaXN0IG9mIG1vZHVsZXMgaW50byB0aGUgbGlzdFxuXHRsaXN0LmkgPSBmdW5jdGlvbihtb2R1bGVzLCBtZWRpYVF1ZXJ5KSB7XG5cdFx0aWYodHlwZW9mIG1vZHVsZXMgPT09IFwic3RyaW5nXCIpXG5cdFx0XHRtb2R1bGVzID0gW1tudWxsLCBtb2R1bGVzLCBcIlwiXV07XG5cdFx0dmFyIGFscmVhZHlJbXBvcnRlZE1vZHVsZXMgPSB7fTtcblx0XHRmb3IodmFyIGkgPSAwOyBpIDwgdGhpcy5sZW5ndGg7IGkrKykge1xuXHRcdFx0dmFyIGlkID0gdGhpc1tpXVswXTtcblx0XHRcdGlmKHR5cGVvZiBpZCA9PT0gXCJudW1iZXJcIilcblx0XHRcdFx0YWxyZWFkeUltcG9ydGVkTW9kdWxlc1tpZF0gPSB0cnVlO1xuXHRcdH1cblx0XHRmb3IoaSA9IDA7IGkgPCBtb2R1bGVzLmxlbmd0aDsgaSsrKSB7XG5cdFx0XHR2YXIgaXRlbSA9IG1vZHVsZXNbaV07XG5cdFx0XHQvLyBza2lwIGFscmVhZHkgaW1wb3J0ZWQgbW9kdWxlXG5cdFx0XHQvLyB0aGlzIGltcGxlbWVudGF0aW9uIGlzIG5vdCAxMDAlIHBlcmZlY3QgZm9yIHdlaXJkIG1lZGlhIHF1ZXJ5IGNvbWJpbmF0aW9uc1xuXHRcdFx0Ly8gIHdoZW4gYSBtb2R1bGUgaXMgaW1wb3J0ZWQgbXVsdGlwbGUgdGltZXMgd2l0aCBkaWZmZXJlbnQgbWVkaWEgcXVlcmllcy5cblx0XHRcdC8vICBJIGhvcGUgdGhpcyB3aWxsIG5ldmVyIG9jY3VyIChIZXkgdGhpcyB3YXkgd2UgaGF2ZSBzbWFsbGVyIGJ1bmRsZXMpXG5cdFx0XHRpZih0eXBlb2YgaXRlbVswXSAhPT0gXCJudW1iZXJcIiB8fCAhYWxyZWFkeUltcG9ydGVkTW9kdWxlc1tpdGVtWzBdXSkge1xuXHRcdFx0XHRpZihtZWRpYVF1ZXJ5ICYmICFpdGVtWzJdKSB7XG5cdFx0XHRcdFx0aXRlbVsyXSA9IG1lZGlhUXVlcnk7XG5cdFx0XHRcdH0gZWxzZSBpZihtZWRpYVF1ZXJ5KSB7XG5cdFx0XHRcdFx0aXRlbVsyXSA9IFwiKFwiICsgaXRlbVsyXSArIFwiKSBhbmQgKFwiICsgbWVkaWFRdWVyeSArIFwiKVwiO1xuXHRcdFx0XHR9XG5cdFx0XHRcdGxpc3QucHVzaChpdGVtKTtcblx0XHRcdH1cblx0XHR9XG5cdH07XG5cdHJldHVybiBsaXN0O1xufTtcblxuZnVuY3Rpb24gY3NzV2l0aE1hcHBpbmdUb1N0cmluZyhpdGVtLCB1c2VTb3VyY2VNYXApIHtcblx0dmFyIGNvbnRlbnQgPSBpdGVtWzFdIHx8ICcnO1xuXHR2YXIgY3NzTWFwcGluZyA9IGl0ZW1bM107XG5cdGlmICghY3NzTWFwcGluZykge1xuXHRcdHJldHVybiBjb250ZW50O1xuXHR9XG5cblx0aWYgKHVzZVNvdXJjZU1hcCAmJiB0eXBlb2YgYnRvYSA9PT0gJ2Z1bmN0aW9uJykge1xuXHRcdHZhciBzb3VyY2VNYXBwaW5nID0gdG9Db21tZW50KGNzc01hcHBpbmcpO1xuXHRcdHZhciBzb3VyY2VVUkxzID0gY3NzTWFwcGluZy5zb3VyY2VzLm1hcChmdW5jdGlvbiAoc291cmNlKSB7XG5cdFx0XHRyZXR1cm4gJy8qIyBzb3VyY2VVUkw9JyArIGNzc01hcHBpbmcuc291cmNlUm9vdCArIHNvdXJjZSArICcgKi8nXG5cdFx0fSk7XG5cblx0XHRyZXR1cm4gW2NvbnRlbnRdLmNvbmNhdChzb3VyY2VVUkxzKS5jb25jYXQoW3NvdXJjZU1hcHBpbmddKS5qb2luKCdcXG4nKTtcblx0fVxuXG5cdHJldHVybiBbY29udGVudF0uam9pbignXFxuJyk7XG59XG5cbi8vIEFkYXB0ZWQgZnJvbSBjb252ZXJ0LXNvdXJjZS1tYXAgKE1JVClcbmZ1bmN0aW9uIHRvQ29tbWVudChzb3VyY2VNYXApIHtcblx0Ly8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIG5vLXVuZGVmXG5cdHZhciBiYXNlNjQgPSBidG9hKHVuZXNjYXBlKGVuY29kZVVSSUNvbXBvbmVudChKU09OLnN0cmluZ2lmeShzb3VyY2VNYXApKSkpO1xuXHR2YXIgZGF0YSA9ICdzb3VyY2VNYXBwaW5nVVJMPWRhdGE6YXBwbGljYXRpb24vanNvbjtjaGFyc2V0PXV0Zi04O2Jhc2U2NCwnICsgYmFzZTY0O1xuXG5cdHJldHVybiAnLyojICcgKyBkYXRhICsgJyAqLyc7XG59XG4iLCJpbXBvcnQgUmVhY3QgZnJvbSAncmVhY3QnXG5pbXBvcnQgbG9hZGluZyBmcm9tICcuL2xvYWRpbmcucG5nJ1xuXG5leHBvcnQgZGVmYXVsdCBjbGFzcyBJbWFnZSBleHRlbmRzIFJlYWN0LkNvbXBvbmVudCB7XG4gIGNvbnN0cnVjdG9yKHByb3BzKSB7XG4gICAgc3VwZXIocHJvcHMpXG5cbiAgICB0aGlzLnN0YXRlID0ge1xuICAgICAgaXNMb2FkaW5nOiB0cnVlXG4gICAgfVxuICB9XG5cbiAgcmVuZGVyKCkge1xuICAgIGNvbnN0IHsgaXNMb2FkaW5nIH0gPSB0aGlzLnN0YXRlO1xuICAgIGNvbnN0IHtcbiAgICAgIGFsdCxcbiAgICAgIHNyY1xuICAgIH0gPSB0aGlzLnByb3BzXG5cbiAgICByZXR1cm4gKFxuICAgICAgPFJlYWN0LkZyYWdtZW50PlxuICAgICAgICA8aW1nXG4gICAgICAgICAgc3JjPXtsb2FkaW5nfVxuICAgICAgICAgIHN0eWxlPXt7dmlzaWJpbGl0eTogKGlzTG9hZGluZyA/ICd2aXNpYmxlJyA6ICdoaWRkZW4nKSwgd2lkdGg6ICc1MHB4J319XG4gICAgICAgICAgLz5cbiAgICAgICAgPGltZ1xuICAgICAgICAgIHNyYz17c3JjfVxuICAgICAgICAgIGFsdD17YWx0fSBcbiAgICAgICAgICBzdHlsZT17e3Zpc2liaWxpdHk6ICghaXNMb2FkaW5nID8gJ3Zpc2libGUnIDogJ2hpZGRlbicpfX1cbiAgICAgICAgICBvbkxvYWQ9eygpID0+IHRoaXMuc2V0U3RhdGUoe2lzTG9hZGluZzogZmFsc2V9KX1cbiAgICAgICAgLz5cbiAgICAgIDwvUmVhY3QuRnJhZ21lbnQ+XG4gICAgKVxuICB9XG59IiwiXCJ1c2Ugc3RyaWN0XCI7XG5cbi8qKlxuICogQ29weXJpZ2h0IChjKSAyMDEzLXByZXNlbnQsIEZhY2Vib29rLCBJbmMuXG4gKlxuICogVGhpcyBzb3VyY2UgY29kZSBpcyBsaWNlbnNlZCB1bmRlciB0aGUgTUlUIGxpY2Vuc2UgZm91bmQgaW4gdGhlXG4gKiBMSUNFTlNFIGZpbGUgaW4gdGhlIHJvb3QgZGlyZWN0b3J5IG9mIHRoaXMgc291cmNlIHRyZWUuXG4gKlxuICogXG4gKi9cblxuZnVuY3Rpb24gbWFrZUVtcHR5RnVuY3Rpb24oYXJnKSB7XG4gIHJldHVybiBmdW5jdGlvbiAoKSB7XG4gICAgcmV0dXJuIGFyZztcbiAgfTtcbn1cblxuLyoqXG4gKiBUaGlzIGZ1bmN0aW9uIGFjY2VwdHMgYW5kIGRpc2NhcmRzIGlucHV0czsgaXQgaGFzIG5vIHNpZGUgZWZmZWN0cy4gVGhpcyBpc1xuICogcHJpbWFyaWx5IHVzZWZ1bCBpZGlvbWF0aWNhbGx5IGZvciBvdmVycmlkYWJsZSBmdW5jdGlvbiBlbmRwb2ludHMgd2hpY2hcbiAqIGFsd2F5cyBuZWVkIHRvIGJlIGNhbGxhYmxlLCBzaW5jZSBKUyBsYWNrcyBhIG51bGwtY2FsbCBpZGlvbSBhbGEgQ29jb2EuXG4gKi9cbnZhciBlbXB0eUZ1bmN0aW9uID0gZnVuY3Rpb24gZW1wdHlGdW5jdGlvbigpIHt9O1xuXG5lbXB0eUZ1bmN0aW9uLnRoYXRSZXR1cm5zID0gbWFrZUVtcHR5RnVuY3Rpb247XG5lbXB0eUZ1bmN0aW9uLnRoYXRSZXR1cm5zRmFsc2UgPSBtYWtlRW1wdHlGdW5jdGlvbihmYWxzZSk7XG5lbXB0eUZ1bmN0aW9uLnRoYXRSZXR1cm5zVHJ1ZSA9IG1ha2VFbXB0eUZ1bmN0aW9uKHRydWUpO1xuZW1wdHlGdW5jdGlvbi50aGF0UmV0dXJuc051bGwgPSBtYWtlRW1wdHlGdW5jdGlvbihudWxsKTtcbmVtcHR5RnVuY3Rpb24udGhhdFJldHVybnNUaGlzID0gZnVuY3Rpb24gKCkge1xuICByZXR1cm4gdGhpcztcbn07XG5lbXB0eUZ1bmN0aW9uLnRoYXRSZXR1cm5zQXJndW1lbnQgPSBmdW5jdGlvbiAoYXJnKSB7XG4gIHJldHVybiBhcmc7XG59O1xuXG5tb2R1bGUuZXhwb3J0cyA9IGVtcHR5RnVuY3Rpb247IiwiLyoqXG4gKiBDb3B5cmlnaHQgKGMpIDIwMTMtcHJlc2VudCwgRmFjZWJvb2ssIEluYy5cbiAqXG4gKiBUaGlzIHNvdXJjZSBjb2RlIGlzIGxpY2Vuc2VkIHVuZGVyIHRoZSBNSVQgbGljZW5zZSBmb3VuZCBpbiB0aGVcbiAqIExJQ0VOU0UgZmlsZSBpbiB0aGUgcm9vdCBkaXJlY3Rvcnkgb2YgdGhpcyBzb3VyY2UgdHJlZS5cbiAqXG4gKi9cblxuJ3VzZSBzdHJpY3QnO1xuXG4vKipcbiAqIFVzZSBpbnZhcmlhbnQoKSB0byBhc3NlcnQgc3RhdGUgd2hpY2ggeW91ciBwcm9ncmFtIGFzc3VtZXMgdG8gYmUgdHJ1ZS5cbiAqXG4gKiBQcm92aWRlIHNwcmludGYtc3R5bGUgZm9ybWF0IChvbmx5ICVzIGlzIHN1cHBvcnRlZCkgYW5kIGFyZ3VtZW50c1xuICogdG8gcHJvdmlkZSBpbmZvcm1hdGlvbiBhYm91dCB3aGF0IGJyb2tlIGFuZCB3aGF0IHlvdSB3ZXJlXG4gKiBleHBlY3RpbmcuXG4gKlxuICogVGhlIGludmFyaWFudCBtZXNzYWdlIHdpbGwgYmUgc3RyaXBwZWQgaW4gcHJvZHVjdGlvbiwgYnV0IHRoZSBpbnZhcmlhbnRcbiAqIHdpbGwgcmVtYWluIHRvIGVuc3VyZSBsb2dpYyBkb2VzIG5vdCBkaWZmZXIgaW4gcHJvZHVjdGlvbi5cbiAqL1xuXG52YXIgdmFsaWRhdGVGb3JtYXQgPSBmdW5jdGlvbiB2YWxpZGF0ZUZvcm1hdChmb3JtYXQpIHt9O1xuXG5pZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJykge1xuICB2YWxpZGF0ZUZvcm1hdCA9IGZ1bmN0aW9uIHZhbGlkYXRlRm9ybWF0KGZvcm1hdCkge1xuICAgIGlmIChmb3JtYXQgPT09IHVuZGVmaW5lZCkge1xuICAgICAgdGhyb3cgbmV3IEVycm9yKCdpbnZhcmlhbnQgcmVxdWlyZXMgYW4gZXJyb3IgbWVzc2FnZSBhcmd1bWVudCcpO1xuICAgIH1cbiAgfTtcbn1cblxuZnVuY3Rpb24gaW52YXJpYW50KGNvbmRpdGlvbiwgZm9ybWF0LCBhLCBiLCBjLCBkLCBlLCBmKSB7XG4gIHZhbGlkYXRlRm9ybWF0KGZvcm1hdCk7XG5cbiAgaWYgKCFjb25kaXRpb24pIHtcbiAgICB2YXIgZXJyb3I7XG4gICAgaWYgKGZvcm1hdCA9PT0gdW5kZWZpbmVkKSB7XG4gICAgICBlcnJvciA9IG5ldyBFcnJvcignTWluaWZpZWQgZXhjZXB0aW9uIG9jY3VycmVkOyB1c2UgdGhlIG5vbi1taW5pZmllZCBkZXYgZW52aXJvbm1lbnQgJyArICdmb3IgdGhlIGZ1bGwgZXJyb3IgbWVzc2FnZSBhbmQgYWRkaXRpb25hbCBoZWxwZnVsIHdhcm5pbmdzLicpO1xuICAgIH0gZWxzZSB7XG4gICAgICB2YXIgYXJncyA9IFthLCBiLCBjLCBkLCBlLCBmXTtcbiAgICAgIHZhciBhcmdJbmRleCA9IDA7XG4gICAgICBlcnJvciA9IG5ldyBFcnJvcihmb3JtYXQucmVwbGFjZSgvJXMvZywgZnVuY3Rpb24gKCkge1xuICAgICAgICByZXR1cm4gYXJnc1thcmdJbmRleCsrXTtcbiAgICAgIH0pKTtcbiAgICAgIGVycm9yLm5hbWUgPSAnSW52YXJpYW50IFZpb2xhdGlvbic7XG4gICAgfVxuXG4gICAgZXJyb3IuZnJhbWVzVG9Qb3AgPSAxOyAvLyB3ZSBkb24ndCBjYXJlIGFib3V0IGludmFyaWFudCdzIG93biBmcmFtZVxuICAgIHRocm93IGVycm9yO1xuICB9XG59XG5cbm1vZHVsZS5leHBvcnRzID0gaW52YXJpYW50OyIsIid1c2Ugc3RyaWN0JztcbnZhciBnbG9iYWwgPSByZXF1aXJlKCcuL19nbG9iYWwnKTtcbnZhciBERVNDUklQVE9SUyA9IHJlcXVpcmUoJy4vX2Rlc2NyaXB0b3JzJyk7XG52YXIgTElCUkFSWSA9IHJlcXVpcmUoJy4vX2xpYnJhcnknKTtcbnZhciAkdHlwZWQgPSByZXF1aXJlKCcuL190eXBlZCcpO1xudmFyIGhpZGUgPSByZXF1aXJlKCcuL19oaWRlJyk7XG52YXIgcmVkZWZpbmVBbGwgPSByZXF1aXJlKCcuL19yZWRlZmluZS1hbGwnKTtcbnZhciBmYWlscyA9IHJlcXVpcmUoJy4vX2ZhaWxzJyk7XG52YXIgYW5JbnN0YW5jZSA9IHJlcXVpcmUoJy4vX2FuLWluc3RhbmNlJyk7XG52YXIgdG9JbnRlZ2VyID0gcmVxdWlyZSgnLi9fdG8taW50ZWdlcicpO1xudmFyIHRvTGVuZ3RoID0gcmVxdWlyZSgnLi9fdG8tbGVuZ3RoJyk7XG52YXIgdG9JbmRleCA9IHJlcXVpcmUoJy4vX3RvLWluZGV4Jyk7XG52YXIgZ09QTiA9IHJlcXVpcmUoJy4vX29iamVjdC1nb3BuJykuZjtcbnZhciBkUCA9IHJlcXVpcmUoJy4vX29iamVjdC1kcCcpLmY7XG52YXIgYXJyYXlGaWxsID0gcmVxdWlyZSgnLi9fYXJyYXktZmlsbCcpO1xudmFyIHNldFRvU3RyaW5nVGFnID0gcmVxdWlyZSgnLi9fc2V0LXRvLXN0cmluZy10YWcnKTtcbnZhciBBUlJBWV9CVUZGRVIgPSAnQXJyYXlCdWZmZXInO1xudmFyIERBVEFfVklFVyA9ICdEYXRhVmlldyc7XG52YXIgUFJPVE9UWVBFID0gJ3Byb3RvdHlwZSc7XG52YXIgV1JPTkdfTEVOR1RIID0gJ1dyb25nIGxlbmd0aCEnO1xudmFyIFdST05HX0lOREVYID0gJ1dyb25nIGluZGV4ISc7XG52YXIgJEFycmF5QnVmZmVyID0gZ2xvYmFsW0FSUkFZX0JVRkZFUl07XG52YXIgJERhdGFWaWV3ID0gZ2xvYmFsW0RBVEFfVklFV107XG52YXIgTWF0aCA9IGdsb2JhbC5NYXRoO1xudmFyIFJhbmdlRXJyb3IgPSBnbG9iYWwuUmFuZ2VFcnJvcjtcbi8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBuby1zaGFkb3ctcmVzdHJpY3RlZC1uYW1lc1xudmFyIEluZmluaXR5ID0gZ2xvYmFsLkluZmluaXR5O1xudmFyIEJhc2VCdWZmZXIgPSAkQXJyYXlCdWZmZXI7XG52YXIgYWJzID0gTWF0aC5hYnM7XG52YXIgcG93ID0gTWF0aC5wb3c7XG52YXIgZmxvb3IgPSBNYXRoLmZsb29yO1xudmFyIGxvZyA9IE1hdGgubG9nO1xudmFyIExOMiA9IE1hdGguTE4yO1xudmFyIEJVRkZFUiA9ICdidWZmZXInO1xudmFyIEJZVEVfTEVOR1RIID0gJ2J5dGVMZW5ndGgnO1xudmFyIEJZVEVfT0ZGU0VUID0gJ2J5dGVPZmZzZXQnO1xudmFyICRCVUZGRVIgPSBERVNDUklQVE9SUyA/ICdfYicgOiBCVUZGRVI7XG52YXIgJExFTkdUSCA9IERFU0NSSVBUT1JTID8gJ19sJyA6IEJZVEVfTEVOR1RIO1xudmFyICRPRkZTRVQgPSBERVNDUklQVE9SUyA/ICdfbycgOiBCWVRFX09GRlNFVDtcblxuLy8gSUVFRTc1NCBjb252ZXJzaW9ucyBiYXNlZCBvbiBodHRwczovL2dpdGh1Yi5jb20vZmVyb3NzL2llZWU3NTRcbmZ1bmN0aW9uIHBhY2tJRUVFNzU0KHZhbHVlLCBtTGVuLCBuQnl0ZXMpIHtcbiAgdmFyIGJ1ZmZlciA9IG5ldyBBcnJheShuQnl0ZXMpO1xuICB2YXIgZUxlbiA9IG5CeXRlcyAqIDggLSBtTGVuIC0gMTtcbiAgdmFyIGVNYXggPSAoMSA8PCBlTGVuKSAtIDE7XG4gIHZhciBlQmlhcyA9IGVNYXggPj4gMTtcbiAgdmFyIHJ0ID0gbUxlbiA9PT0gMjMgPyBwb3coMiwgLTI0KSAtIHBvdygyLCAtNzcpIDogMDtcbiAgdmFyIGkgPSAwO1xuICB2YXIgcyA9IHZhbHVlIDwgMCB8fCB2YWx1ZSA9PT0gMCAmJiAxIC8gdmFsdWUgPCAwID8gMSA6IDA7XG4gIHZhciBlLCBtLCBjO1xuICB2YWx1ZSA9IGFicyh2YWx1ZSk7XG4gIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBuby1zZWxmLWNvbXBhcmVcbiAgaWYgKHZhbHVlICE9IHZhbHVlIHx8IHZhbHVlID09PSBJbmZpbml0eSkge1xuICAgIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBuby1zZWxmLWNvbXBhcmVcbiAgICBtID0gdmFsdWUgIT0gdmFsdWUgPyAxIDogMDtcbiAgICBlID0gZU1heDtcbiAgfSBlbHNlIHtcbiAgICBlID0gZmxvb3IobG9nKHZhbHVlKSAvIExOMik7XG4gICAgaWYgKHZhbHVlICogKGMgPSBwb3coMiwgLWUpKSA8IDEpIHtcbiAgICAgIGUtLTtcbiAgICAgIGMgKj0gMjtcbiAgICB9XG4gICAgaWYgKGUgKyBlQmlhcyA+PSAxKSB7XG4gICAgICB2YWx1ZSArPSBydCAvIGM7XG4gICAgfSBlbHNlIHtcbiAgICAgIHZhbHVlICs9IHJ0ICogcG93KDIsIDEgLSBlQmlhcyk7XG4gICAgfVxuICAgIGlmICh2YWx1ZSAqIGMgPj0gMikge1xuICAgICAgZSsrO1xuICAgICAgYyAvPSAyO1xuICAgIH1cbiAgICBpZiAoZSArIGVCaWFzID49IGVNYXgpIHtcbiAgICAgIG0gPSAwO1xuICAgICAgZSA9IGVNYXg7XG4gICAgfSBlbHNlIGlmIChlICsgZUJpYXMgPj0gMSkge1xuICAgICAgbSA9ICh2YWx1ZSAqIGMgLSAxKSAqIHBvdygyLCBtTGVuKTtcbiAgICAgIGUgPSBlICsgZUJpYXM7XG4gICAgfSBlbHNlIHtcbiAgICAgIG0gPSB2YWx1ZSAqIHBvdygyLCBlQmlhcyAtIDEpICogcG93KDIsIG1MZW4pO1xuICAgICAgZSA9IDA7XG4gICAgfVxuICB9XG4gIGZvciAoOyBtTGVuID49IDg7IGJ1ZmZlcltpKytdID0gbSAmIDI1NSwgbSAvPSAyNTYsIG1MZW4gLT0gOCk7XG4gIGUgPSBlIDw8IG1MZW4gfCBtO1xuICBlTGVuICs9IG1MZW47XG4gIGZvciAoOyBlTGVuID4gMDsgYnVmZmVyW2krK10gPSBlICYgMjU1LCBlIC89IDI1NiwgZUxlbiAtPSA4KTtcbiAgYnVmZmVyWy0taV0gfD0gcyAqIDEyODtcbiAgcmV0dXJuIGJ1ZmZlcjtcbn1cbmZ1bmN0aW9uIHVucGFja0lFRUU3NTQoYnVmZmVyLCBtTGVuLCBuQnl0ZXMpIHtcbiAgdmFyIGVMZW4gPSBuQnl0ZXMgKiA4IC0gbUxlbiAtIDE7XG4gIHZhciBlTWF4ID0gKDEgPDwgZUxlbikgLSAxO1xuICB2YXIgZUJpYXMgPSBlTWF4ID4+IDE7XG4gIHZhciBuQml0cyA9IGVMZW4gLSA3O1xuICB2YXIgaSA9IG5CeXRlcyAtIDE7XG4gIHZhciBzID0gYnVmZmVyW2ktLV07XG4gIHZhciBlID0gcyAmIDEyNztcbiAgdmFyIG07XG4gIHMgPj49IDc7XG4gIGZvciAoOyBuQml0cyA+IDA7IGUgPSBlICogMjU2ICsgYnVmZmVyW2ldLCBpLS0sIG5CaXRzIC09IDgpO1xuICBtID0gZSAmICgxIDw8IC1uQml0cykgLSAxO1xuICBlID4+PSAtbkJpdHM7XG4gIG5CaXRzICs9IG1MZW47XG4gIGZvciAoOyBuQml0cyA+IDA7IG0gPSBtICogMjU2ICsgYnVmZmVyW2ldLCBpLS0sIG5CaXRzIC09IDgpO1xuICBpZiAoZSA9PT0gMCkge1xuICAgIGUgPSAxIC0gZUJpYXM7XG4gIH0gZWxzZSBpZiAoZSA9PT0gZU1heCkge1xuICAgIHJldHVybiBtID8gTmFOIDogcyA/IC1JbmZpbml0eSA6IEluZmluaXR5O1xuICB9IGVsc2Uge1xuICAgIG0gPSBtICsgcG93KDIsIG1MZW4pO1xuICAgIGUgPSBlIC0gZUJpYXM7XG4gIH0gcmV0dXJuIChzID8gLTEgOiAxKSAqIG0gKiBwb3coMiwgZSAtIG1MZW4pO1xufVxuXG5mdW5jdGlvbiB1bnBhY2tJMzIoYnl0ZXMpIHtcbiAgcmV0dXJuIGJ5dGVzWzNdIDw8IDI0IHwgYnl0ZXNbMl0gPDwgMTYgfCBieXRlc1sxXSA8PCA4IHwgYnl0ZXNbMF07XG59XG5mdW5jdGlvbiBwYWNrSTgoaXQpIHtcbiAgcmV0dXJuIFtpdCAmIDB4ZmZdO1xufVxuZnVuY3Rpb24gcGFja0kxNihpdCkge1xuICByZXR1cm4gW2l0ICYgMHhmZiwgaXQgPj4gOCAmIDB4ZmZdO1xufVxuZnVuY3Rpb24gcGFja0kzMihpdCkge1xuICByZXR1cm4gW2l0ICYgMHhmZiwgaXQgPj4gOCAmIDB4ZmYsIGl0ID4+IDE2ICYgMHhmZiwgaXQgPj4gMjQgJiAweGZmXTtcbn1cbmZ1bmN0aW9uIHBhY2tGNjQoaXQpIHtcbiAgcmV0dXJuIHBhY2tJRUVFNzU0KGl0LCA1MiwgOCk7XG59XG5mdW5jdGlvbiBwYWNrRjMyKGl0KSB7XG4gIHJldHVybiBwYWNrSUVFRTc1NChpdCwgMjMsIDQpO1xufVxuXG5mdW5jdGlvbiBhZGRHZXR0ZXIoQywga2V5LCBpbnRlcm5hbCkge1xuICBkUChDW1BST1RPVFlQRV0sIGtleSwgeyBnZXQ6IGZ1bmN0aW9uICgpIHsgcmV0dXJuIHRoaXNbaW50ZXJuYWxdOyB9IH0pO1xufVxuXG5mdW5jdGlvbiBnZXQodmlldywgYnl0ZXMsIGluZGV4LCBpc0xpdHRsZUVuZGlhbikge1xuICB2YXIgbnVtSW5kZXggPSAraW5kZXg7XG4gIHZhciBpbnRJbmRleCA9IHRvSW5kZXgobnVtSW5kZXgpO1xuICBpZiAoaW50SW5kZXggKyBieXRlcyA+IHZpZXdbJExFTkdUSF0pIHRocm93IFJhbmdlRXJyb3IoV1JPTkdfSU5ERVgpO1xuICB2YXIgc3RvcmUgPSB2aWV3WyRCVUZGRVJdLl9iO1xuICB2YXIgc3RhcnQgPSBpbnRJbmRleCArIHZpZXdbJE9GRlNFVF07XG4gIHZhciBwYWNrID0gc3RvcmUuc2xpY2Uoc3RhcnQsIHN0YXJ0ICsgYnl0ZXMpO1xuICByZXR1cm4gaXNMaXR0bGVFbmRpYW4gPyBwYWNrIDogcGFjay5yZXZlcnNlKCk7XG59XG5mdW5jdGlvbiBzZXQodmlldywgYnl0ZXMsIGluZGV4LCBjb252ZXJzaW9uLCB2YWx1ZSwgaXNMaXR0bGVFbmRpYW4pIHtcbiAgdmFyIG51bUluZGV4ID0gK2luZGV4O1xuICB2YXIgaW50SW5kZXggPSB0b0luZGV4KG51bUluZGV4KTtcbiAgaWYgKGludEluZGV4ICsgYnl0ZXMgPiB2aWV3WyRMRU5HVEhdKSB0aHJvdyBSYW5nZUVycm9yKFdST05HX0lOREVYKTtcbiAgdmFyIHN0b3JlID0gdmlld1skQlVGRkVSXS5fYjtcbiAgdmFyIHN0YXJ0ID0gaW50SW5kZXggKyB2aWV3WyRPRkZTRVRdO1xuICB2YXIgcGFjayA9IGNvbnZlcnNpb24oK3ZhbHVlKTtcbiAgZm9yICh2YXIgaSA9IDA7IGkgPCBieXRlczsgaSsrKSBzdG9yZVtzdGFydCArIGldID0gcGFja1tpc0xpdHRsZUVuZGlhbiA/IGkgOiBieXRlcyAtIGkgLSAxXTtcbn1cblxuaWYgKCEkdHlwZWQuQUJWKSB7XG4gICRBcnJheUJ1ZmZlciA9IGZ1bmN0aW9uIEFycmF5QnVmZmVyKGxlbmd0aCkge1xuICAgIGFuSW5zdGFuY2UodGhpcywgJEFycmF5QnVmZmVyLCBBUlJBWV9CVUZGRVIpO1xuICAgIHZhciBieXRlTGVuZ3RoID0gdG9JbmRleChsZW5ndGgpO1xuICAgIHRoaXMuX2IgPSBhcnJheUZpbGwuY2FsbChuZXcgQXJyYXkoYnl0ZUxlbmd0aCksIDApO1xuICAgIHRoaXNbJExFTkdUSF0gPSBieXRlTGVuZ3RoO1xuICB9O1xuXG4gICREYXRhVmlldyA9IGZ1bmN0aW9uIERhdGFWaWV3KGJ1ZmZlciwgYnl0ZU9mZnNldCwgYnl0ZUxlbmd0aCkge1xuICAgIGFuSW5zdGFuY2UodGhpcywgJERhdGFWaWV3LCBEQVRBX1ZJRVcpO1xuICAgIGFuSW5zdGFuY2UoYnVmZmVyLCAkQXJyYXlCdWZmZXIsIERBVEFfVklFVyk7XG4gICAgdmFyIGJ1ZmZlckxlbmd0aCA9IGJ1ZmZlclskTEVOR1RIXTtcbiAgICB2YXIgb2Zmc2V0ID0gdG9JbnRlZ2VyKGJ5dGVPZmZzZXQpO1xuICAgIGlmIChvZmZzZXQgPCAwIHx8IG9mZnNldCA+IGJ1ZmZlckxlbmd0aCkgdGhyb3cgUmFuZ2VFcnJvcignV3Jvbmcgb2Zmc2V0IScpO1xuICAgIGJ5dGVMZW5ndGggPSBieXRlTGVuZ3RoID09PSB1bmRlZmluZWQgPyBidWZmZXJMZW5ndGggLSBvZmZzZXQgOiB0b0xlbmd0aChieXRlTGVuZ3RoKTtcbiAgICBpZiAob2Zmc2V0ICsgYnl0ZUxlbmd0aCA+IGJ1ZmZlckxlbmd0aCkgdGhyb3cgUmFuZ2VFcnJvcihXUk9OR19MRU5HVEgpO1xuICAgIHRoaXNbJEJVRkZFUl0gPSBidWZmZXI7XG4gICAgdGhpc1skT0ZGU0VUXSA9IG9mZnNldDtcbiAgICB0aGlzWyRMRU5HVEhdID0gYnl0ZUxlbmd0aDtcbiAgfTtcblxuICBpZiAoREVTQ1JJUFRPUlMpIHtcbiAgICBhZGRHZXR0ZXIoJEFycmF5QnVmZmVyLCBCWVRFX0xFTkdUSCwgJ19sJyk7XG4gICAgYWRkR2V0dGVyKCREYXRhVmlldywgQlVGRkVSLCAnX2InKTtcbiAgICBhZGRHZXR0ZXIoJERhdGFWaWV3LCBCWVRFX0xFTkdUSCwgJ19sJyk7XG4gICAgYWRkR2V0dGVyKCREYXRhVmlldywgQllURV9PRkZTRVQsICdfbycpO1xuICB9XG5cbiAgcmVkZWZpbmVBbGwoJERhdGFWaWV3W1BST1RPVFlQRV0sIHtcbiAgICBnZXRJbnQ4OiBmdW5jdGlvbiBnZXRJbnQ4KGJ5dGVPZmZzZXQpIHtcbiAgICAgIHJldHVybiBnZXQodGhpcywgMSwgYnl0ZU9mZnNldClbMF0gPDwgMjQgPj4gMjQ7XG4gICAgfSxcbiAgICBnZXRVaW50ODogZnVuY3Rpb24gZ2V0VWludDgoYnl0ZU9mZnNldCkge1xuICAgICAgcmV0dXJuIGdldCh0aGlzLCAxLCBieXRlT2Zmc2V0KVswXTtcbiAgICB9LFxuICAgIGdldEludDE2OiBmdW5jdGlvbiBnZXRJbnQxNihieXRlT2Zmc2V0IC8qICwgbGl0dGxlRW5kaWFuICovKSB7XG4gICAgICB2YXIgYnl0ZXMgPSBnZXQodGhpcywgMiwgYnl0ZU9mZnNldCwgYXJndW1lbnRzWzFdKTtcbiAgICAgIHJldHVybiAoYnl0ZXNbMV0gPDwgOCB8IGJ5dGVzWzBdKSA8PCAxNiA+PiAxNjtcbiAgICB9LFxuICAgIGdldFVpbnQxNjogZnVuY3Rpb24gZ2V0VWludDE2KGJ5dGVPZmZzZXQgLyogLCBsaXR0bGVFbmRpYW4gKi8pIHtcbiAgICAgIHZhciBieXRlcyA9IGdldCh0aGlzLCAyLCBieXRlT2Zmc2V0LCBhcmd1bWVudHNbMV0pO1xuICAgICAgcmV0dXJuIGJ5dGVzWzFdIDw8IDggfCBieXRlc1swXTtcbiAgICB9LFxuICAgIGdldEludDMyOiBmdW5jdGlvbiBnZXRJbnQzMihieXRlT2Zmc2V0IC8qICwgbGl0dGxlRW5kaWFuICovKSB7XG4gICAgICByZXR1cm4gdW5wYWNrSTMyKGdldCh0aGlzLCA0LCBieXRlT2Zmc2V0LCBhcmd1bWVudHNbMV0pKTtcbiAgICB9LFxuICAgIGdldFVpbnQzMjogZnVuY3Rpb24gZ2V0VWludDMyKGJ5dGVPZmZzZXQgLyogLCBsaXR0bGVFbmRpYW4gKi8pIHtcbiAgICAgIHJldHVybiB1bnBhY2tJMzIoZ2V0KHRoaXMsIDQsIGJ5dGVPZmZzZXQsIGFyZ3VtZW50c1sxXSkpID4+PiAwO1xuICAgIH0sXG4gICAgZ2V0RmxvYXQzMjogZnVuY3Rpb24gZ2V0RmxvYXQzMihieXRlT2Zmc2V0IC8qICwgbGl0dGxlRW5kaWFuICovKSB7XG4gICAgICByZXR1cm4gdW5wYWNrSUVFRTc1NChnZXQodGhpcywgNCwgYnl0ZU9mZnNldCwgYXJndW1lbnRzWzFdKSwgMjMsIDQpO1xuICAgIH0sXG4gICAgZ2V0RmxvYXQ2NDogZnVuY3Rpb24gZ2V0RmxvYXQ2NChieXRlT2Zmc2V0IC8qICwgbGl0dGxlRW5kaWFuICovKSB7XG4gICAgICByZXR1cm4gdW5wYWNrSUVFRTc1NChnZXQodGhpcywgOCwgYnl0ZU9mZnNldCwgYXJndW1lbnRzWzFdKSwgNTIsIDgpO1xuICAgIH0sXG4gICAgc2V0SW50ODogZnVuY3Rpb24gc2V0SW50OChieXRlT2Zmc2V0LCB2YWx1ZSkge1xuICAgICAgc2V0KHRoaXMsIDEsIGJ5dGVPZmZzZXQsIHBhY2tJOCwgdmFsdWUpO1xuICAgIH0sXG4gICAgc2V0VWludDg6IGZ1bmN0aW9uIHNldFVpbnQ4KGJ5dGVPZmZzZXQsIHZhbHVlKSB7XG4gICAgICBzZXQodGhpcywgMSwgYnl0ZU9mZnNldCwgcGFja0k4LCB2YWx1ZSk7XG4gICAgfSxcbiAgICBzZXRJbnQxNjogZnVuY3Rpb24gc2V0SW50MTYoYnl0ZU9mZnNldCwgdmFsdWUgLyogLCBsaXR0bGVFbmRpYW4gKi8pIHtcbiAgICAgIHNldCh0aGlzLCAyLCBieXRlT2Zmc2V0LCBwYWNrSTE2LCB2YWx1ZSwgYXJndW1lbnRzWzJdKTtcbiAgICB9LFxuICAgIHNldFVpbnQxNjogZnVuY3Rpb24gc2V0VWludDE2KGJ5dGVPZmZzZXQsIHZhbHVlIC8qICwgbGl0dGxlRW5kaWFuICovKSB7XG4gICAgICBzZXQodGhpcywgMiwgYnl0ZU9mZnNldCwgcGFja0kxNiwgdmFsdWUsIGFyZ3VtZW50c1syXSk7XG4gICAgfSxcbiAgICBzZXRJbnQzMjogZnVuY3Rpb24gc2V0SW50MzIoYnl0ZU9mZnNldCwgdmFsdWUgLyogLCBsaXR0bGVFbmRpYW4gKi8pIHtcbiAgICAgIHNldCh0aGlzLCA0LCBieXRlT2Zmc2V0LCBwYWNrSTMyLCB2YWx1ZSwgYXJndW1lbnRzWzJdKTtcbiAgICB9LFxuICAgIHNldFVpbnQzMjogZnVuY3Rpb24gc2V0VWludDMyKGJ5dGVPZmZzZXQsIHZhbHVlIC8qICwgbGl0dGxlRW5kaWFuICovKSB7XG4gICAgICBzZXQodGhpcywgNCwgYnl0ZU9mZnNldCwgcGFja0kzMiwgdmFsdWUsIGFyZ3VtZW50c1syXSk7XG4gICAgfSxcbiAgICBzZXRGbG9hdDMyOiBmdW5jdGlvbiBzZXRGbG9hdDMyKGJ5dGVPZmZzZXQsIHZhbHVlIC8qICwgbGl0dGxlRW5kaWFuICovKSB7XG4gICAgICBzZXQodGhpcywgNCwgYnl0ZU9mZnNldCwgcGFja0YzMiwgdmFsdWUsIGFyZ3VtZW50c1syXSk7XG4gICAgfSxcbiAgICBzZXRGbG9hdDY0OiBmdW5jdGlvbiBzZXRGbG9hdDY0KGJ5dGVPZmZzZXQsIHZhbHVlIC8qICwgbGl0dGxlRW5kaWFuICovKSB7XG4gICAgICBzZXQodGhpcywgOCwgYnl0ZU9mZnNldCwgcGFja0Y2NCwgdmFsdWUsIGFyZ3VtZW50c1syXSk7XG4gICAgfVxuICB9KTtcbn0gZWxzZSB7XG4gIGlmICghZmFpbHMoZnVuY3Rpb24gKCkge1xuICAgICRBcnJheUJ1ZmZlcigxKTtcbiAgfSkgfHwgIWZhaWxzKGZ1bmN0aW9uICgpIHtcbiAgICBuZXcgJEFycmF5QnVmZmVyKC0xKTsgLy8gZXNsaW50LWRpc2FibGUtbGluZSBuby1uZXdcbiAgfSkgfHwgZmFpbHMoZnVuY3Rpb24gKCkge1xuICAgIG5ldyAkQXJyYXlCdWZmZXIoKTsgLy8gZXNsaW50LWRpc2FibGUtbGluZSBuby1uZXdcbiAgICBuZXcgJEFycmF5QnVmZmVyKDEuNSk7IC8vIGVzbGludC1kaXNhYmxlLWxpbmUgbm8tbmV3XG4gICAgbmV3ICRBcnJheUJ1ZmZlcihOYU4pOyAvLyBlc2xpbnQtZGlzYWJsZS1saW5lIG5vLW5ld1xuICAgIHJldHVybiAkQXJyYXlCdWZmZXIubmFtZSAhPSBBUlJBWV9CVUZGRVI7XG4gIH0pKSB7XG4gICAgJEFycmF5QnVmZmVyID0gZnVuY3Rpb24gQXJyYXlCdWZmZXIobGVuZ3RoKSB7XG4gICAgICBhbkluc3RhbmNlKHRoaXMsICRBcnJheUJ1ZmZlcik7XG4gICAgICByZXR1cm4gbmV3IEJhc2VCdWZmZXIodG9JbmRleChsZW5ndGgpKTtcbiAgICB9O1xuICAgIHZhciBBcnJheUJ1ZmZlclByb3RvID0gJEFycmF5QnVmZmVyW1BST1RPVFlQRV0gPSBCYXNlQnVmZmVyW1BST1RPVFlQRV07XG4gICAgZm9yICh2YXIga2V5cyA9IGdPUE4oQmFzZUJ1ZmZlciksIGogPSAwLCBrZXk7IGtleXMubGVuZ3RoID4gajspIHtcbiAgICAgIGlmICghKChrZXkgPSBrZXlzW2orK10pIGluICRBcnJheUJ1ZmZlcikpIGhpZGUoJEFycmF5QnVmZmVyLCBrZXksIEJhc2VCdWZmZXJba2V5XSk7XG4gICAgfVxuICAgIGlmICghTElCUkFSWSkgQXJyYXlCdWZmZXJQcm90by5jb25zdHJ1Y3RvciA9ICRBcnJheUJ1ZmZlcjtcbiAgfVxuICAvLyBpT1MgU2FmYXJpIDcueCBidWdcbiAgdmFyIHZpZXcgPSBuZXcgJERhdGFWaWV3KG5ldyAkQXJyYXlCdWZmZXIoMikpO1xuICB2YXIgJHNldEludDggPSAkRGF0YVZpZXdbUFJPVE9UWVBFXS5zZXRJbnQ4O1xuICB2aWV3LnNldEludDgoMCwgMjE0NzQ4MzY0OCk7XG4gIHZpZXcuc2V0SW50OCgxLCAyMTQ3NDgzNjQ5KTtcbiAgaWYgKHZpZXcuZ2V0SW50OCgwKSB8fCAhdmlldy5nZXRJbnQ4KDEpKSByZWRlZmluZUFsbCgkRGF0YVZpZXdbUFJPVE9UWVBFXSwge1xuICAgIHNldEludDg6IGZ1bmN0aW9uIHNldEludDgoYnl0ZU9mZnNldCwgdmFsdWUpIHtcbiAgICAgICRzZXRJbnQ4LmNhbGwodGhpcywgYnl0ZU9mZnNldCwgdmFsdWUgPDwgMjQgPj4gMjQpO1xuICAgIH0sXG4gICAgc2V0VWludDg6IGZ1bmN0aW9uIHNldFVpbnQ4KGJ5dGVPZmZzZXQsIHZhbHVlKSB7XG4gICAgICAkc2V0SW50OC5jYWxsKHRoaXMsIGJ5dGVPZmZzZXQsIHZhbHVlIDw8IDI0ID4+IDI0KTtcbiAgICB9XG4gIH0sIHRydWUpO1xufVxuc2V0VG9TdHJpbmdUYWcoJEFycmF5QnVmZmVyLCBBUlJBWV9CVUZGRVIpO1xuc2V0VG9TdHJpbmdUYWcoJERhdGFWaWV3LCBEQVRBX1ZJRVcpO1xuaGlkZSgkRGF0YVZpZXdbUFJPVE9UWVBFXSwgJHR5cGVkLlZJRVcsIHRydWUpO1xuZXhwb3J0c1tBUlJBWV9CVUZGRVJdID0gJEFycmF5QnVmZmVyO1xuZXhwb3J0c1tEQVRBX1ZJRVddID0gJERhdGFWaWV3O1xuIiwiJ3VzZSBzdHJpY3QnO1xuLy8gMjUuNC4xLjUgTmV3UHJvbWlzZUNhcGFiaWxpdHkoQylcbnZhciBhRnVuY3Rpb24gPSByZXF1aXJlKCcuL19hLWZ1bmN0aW9uJyk7XG5cbmZ1bmN0aW9uIFByb21pc2VDYXBhYmlsaXR5KEMpIHtcbiAgdmFyIHJlc29sdmUsIHJlamVjdDtcbiAgdGhpcy5wcm9taXNlID0gbmV3IEMoZnVuY3Rpb24gKCQkcmVzb2x2ZSwgJCRyZWplY3QpIHtcbiAgICBpZiAocmVzb2x2ZSAhPT0gdW5kZWZpbmVkIHx8IHJlamVjdCAhPT0gdW5kZWZpbmVkKSB0aHJvdyBUeXBlRXJyb3IoJ0JhZCBQcm9taXNlIGNvbnN0cnVjdG9yJyk7XG4gICAgcmVzb2x2ZSA9ICQkcmVzb2x2ZTtcbiAgICByZWplY3QgPSAkJHJlamVjdDtcbiAgfSk7XG4gIHRoaXMucmVzb2x2ZSA9IGFGdW5jdGlvbihyZXNvbHZlKTtcbiAgdGhpcy5yZWplY3QgPSBhRnVuY3Rpb24ocmVqZWN0KTtcbn1cblxubW9kdWxlLmV4cG9ydHMuZiA9IGZ1bmN0aW9uIChDKSB7XG4gIHJldHVybiBuZXcgUHJvbWlzZUNhcGFiaWxpdHkoQyk7XG59O1xuIiwidmFyIGdsb2JhbCA9IHJlcXVpcmUoJy4vX2dsb2JhbCcpO1xudmFyIG1hY3JvdGFzayA9IHJlcXVpcmUoJy4vX3Rhc2snKS5zZXQ7XG52YXIgT2JzZXJ2ZXIgPSBnbG9iYWwuTXV0YXRpb25PYnNlcnZlciB8fCBnbG9iYWwuV2ViS2l0TXV0YXRpb25PYnNlcnZlcjtcbnZhciBwcm9jZXNzID0gZ2xvYmFsLnByb2Nlc3M7XG52YXIgUHJvbWlzZSA9IGdsb2JhbC5Qcm9taXNlO1xudmFyIGlzTm9kZSA9IHJlcXVpcmUoJy4vX2NvZicpKHByb2Nlc3MpID09ICdwcm9jZXNzJztcblxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAoKSB7XG4gIHZhciBoZWFkLCBsYXN0LCBub3RpZnk7XG5cbiAgdmFyIGZsdXNoID0gZnVuY3Rpb24gKCkge1xuICAgIHZhciBwYXJlbnQsIGZuO1xuICAgIGlmIChpc05vZGUgJiYgKHBhcmVudCA9IHByb2Nlc3MuZG9tYWluKSkgcGFyZW50LmV4aXQoKTtcbiAgICB3aGlsZSAoaGVhZCkge1xuICAgICAgZm4gPSBoZWFkLmZuO1xuICAgICAgaGVhZCA9IGhlYWQubmV4dDtcbiAgICAgIHRyeSB7XG4gICAgICAgIGZuKCk7XG4gICAgICB9IGNhdGNoIChlKSB7XG4gICAgICAgIGlmIChoZWFkKSBub3RpZnkoKTtcbiAgICAgICAgZWxzZSBsYXN0ID0gdW5kZWZpbmVkO1xuICAgICAgICB0aHJvdyBlO1xuICAgICAgfVxuICAgIH0gbGFzdCA9IHVuZGVmaW5lZDtcbiAgICBpZiAocGFyZW50KSBwYXJlbnQuZW50ZXIoKTtcbiAgfTtcblxuICAvLyBOb2RlLmpzXG4gIGlmIChpc05vZGUpIHtcbiAgICBub3RpZnkgPSBmdW5jdGlvbiAoKSB7XG4gICAgICBwcm9jZXNzLm5leHRUaWNrKGZsdXNoKTtcbiAgICB9O1xuICAvLyBicm93c2VycyB3aXRoIE11dGF0aW9uT2JzZXJ2ZXIsIGV4Y2VwdCBpT1MgU2FmYXJpIC0gaHR0cHM6Ly9naXRodWIuY29tL3psb2lyb2NrL2NvcmUtanMvaXNzdWVzLzMzOVxuICB9IGVsc2UgaWYgKE9ic2VydmVyICYmICEoZ2xvYmFsLm5hdmlnYXRvciAmJiBnbG9iYWwubmF2aWdhdG9yLnN0YW5kYWxvbmUpKSB7XG4gICAgdmFyIHRvZ2dsZSA9IHRydWU7XG4gICAgdmFyIG5vZGUgPSBkb2N1bWVudC5jcmVhdGVUZXh0Tm9kZSgnJyk7XG4gICAgbmV3IE9ic2VydmVyKGZsdXNoKS5vYnNlcnZlKG5vZGUsIHsgY2hhcmFjdGVyRGF0YTogdHJ1ZSB9KTsgLy8gZXNsaW50LWRpc2FibGUtbGluZSBuby1uZXdcbiAgICBub3RpZnkgPSBmdW5jdGlvbiAoKSB7XG4gICAgICBub2RlLmRhdGEgPSB0b2dnbGUgPSAhdG9nZ2xlO1xuICAgIH07XG4gIC8vIGVudmlyb25tZW50cyB3aXRoIG1heWJlIG5vbi1jb21wbGV0ZWx5IGNvcnJlY3QsIGJ1dCBleGlzdGVudCBQcm9taXNlXG4gIH0gZWxzZSBpZiAoUHJvbWlzZSAmJiBQcm9taXNlLnJlc29sdmUpIHtcbiAgICAvLyBQcm9taXNlLnJlc29sdmUgd2l0aG91dCBhbiBhcmd1bWVudCB0aHJvd3MgYW4gZXJyb3IgaW4gTEcgV2ViT1MgMlxuICAgIHZhciBwcm9taXNlID0gUHJvbWlzZS5yZXNvbHZlKHVuZGVmaW5lZCk7XG4gICAgbm90aWZ5ID0gZnVuY3Rpb24gKCkge1xuICAgICAgcHJvbWlzZS50aGVuKGZsdXNoKTtcbiAgICB9O1xuICAvLyBmb3Igb3RoZXIgZW52aXJvbm1lbnRzIC0gbWFjcm90YXNrIGJhc2VkIG9uOlxuICAvLyAtIHNldEltbWVkaWF0ZVxuICAvLyAtIE1lc3NhZ2VDaGFubmVsXG4gIC8vIC0gd2luZG93LnBvc3RNZXNzYWdcbiAgLy8gLSBvbnJlYWR5c3RhdGVjaGFuZ2VcbiAgLy8gLSBzZXRUaW1lb3V0XG4gIH0gZWxzZSB7XG4gICAgbm90aWZ5ID0gZnVuY3Rpb24gKCkge1xuICAgICAgLy8gc3RyYW5nZSBJRSArIHdlYnBhY2sgZGV2IHNlcnZlciBidWcgLSB1c2UgLmNhbGwoZ2xvYmFsKVxuICAgICAgbWFjcm90YXNrLmNhbGwoZ2xvYmFsLCBmbHVzaCk7XG4gICAgfTtcbiAgfVxuXG4gIHJldHVybiBmdW5jdGlvbiAoZm4pIHtcbiAgICB2YXIgdGFzayA9IHsgZm46IGZuLCBuZXh0OiB1bmRlZmluZWQgfTtcbiAgICBpZiAobGFzdCkgbGFzdC5uZXh0ID0gdGFzaztcbiAgICBpZiAoIWhlYWQpIHtcbiAgICAgIGhlYWQgPSB0YXNrO1xuICAgICAgbm90aWZ5KCk7XG4gICAgfSBsYXN0ID0gdGFzaztcbiAgfTtcbn07XG4iLCJ2YXIgY3R4ID0gcmVxdWlyZSgnLi9fY3R4Jyk7XG52YXIgaW52b2tlID0gcmVxdWlyZSgnLi9faW52b2tlJyk7XG52YXIgaHRtbCA9IHJlcXVpcmUoJy4vX2h0bWwnKTtcbnZhciBjZWwgPSByZXF1aXJlKCcuL19kb20tY3JlYXRlJyk7XG52YXIgZ2xvYmFsID0gcmVxdWlyZSgnLi9fZ2xvYmFsJyk7XG52YXIgcHJvY2VzcyA9IGdsb2JhbC5wcm9jZXNzO1xudmFyIHNldFRhc2sgPSBnbG9iYWwuc2V0SW1tZWRpYXRlO1xudmFyIGNsZWFyVGFzayA9IGdsb2JhbC5jbGVhckltbWVkaWF0ZTtcbnZhciBNZXNzYWdlQ2hhbm5lbCA9IGdsb2JhbC5NZXNzYWdlQ2hhbm5lbDtcbnZhciBEaXNwYXRjaCA9IGdsb2JhbC5EaXNwYXRjaDtcbnZhciBjb3VudGVyID0gMDtcbnZhciBxdWV1ZSA9IHt9O1xudmFyIE9OUkVBRFlTVEFURUNIQU5HRSA9ICdvbnJlYWR5c3RhdGVjaGFuZ2UnO1xudmFyIGRlZmVyLCBjaGFubmVsLCBwb3J0O1xudmFyIHJ1biA9IGZ1bmN0aW9uICgpIHtcbiAgdmFyIGlkID0gK3RoaXM7XG4gIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBuby1wcm90b3R5cGUtYnVpbHRpbnNcbiAgaWYgKHF1ZXVlLmhhc093blByb3BlcnR5KGlkKSkge1xuICAgIHZhciBmbiA9IHF1ZXVlW2lkXTtcbiAgICBkZWxldGUgcXVldWVbaWRdO1xuICAgIGZuKCk7XG4gIH1cbn07XG52YXIgbGlzdGVuZXIgPSBmdW5jdGlvbiAoZXZlbnQpIHtcbiAgcnVuLmNhbGwoZXZlbnQuZGF0YSk7XG59O1xuLy8gTm9kZS5qcyAwLjkrICYgSUUxMCsgaGFzIHNldEltbWVkaWF0ZSwgb3RoZXJ3aXNlOlxuaWYgKCFzZXRUYXNrIHx8ICFjbGVhclRhc2spIHtcbiAgc2V0VGFzayA9IGZ1bmN0aW9uIHNldEltbWVkaWF0ZShmbikge1xuICAgIHZhciBhcmdzID0gW107XG4gICAgdmFyIGkgPSAxO1xuICAgIHdoaWxlIChhcmd1bWVudHMubGVuZ3RoID4gaSkgYXJncy5wdXNoKGFyZ3VtZW50c1tpKytdKTtcbiAgICBxdWV1ZVsrK2NvdW50ZXJdID0gZnVuY3Rpb24gKCkge1xuICAgICAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIG5vLW5ldy1mdW5jXG4gICAgICBpbnZva2UodHlwZW9mIGZuID09ICdmdW5jdGlvbicgPyBmbiA6IEZ1bmN0aW9uKGZuKSwgYXJncyk7XG4gICAgfTtcbiAgICBkZWZlcihjb3VudGVyKTtcbiAgICByZXR1cm4gY291bnRlcjtcbiAgfTtcbiAgY2xlYXJUYXNrID0gZnVuY3Rpb24gY2xlYXJJbW1lZGlhdGUoaWQpIHtcbiAgICBkZWxldGUgcXVldWVbaWRdO1xuICB9O1xuICAvLyBOb2RlLmpzIDAuOC1cbiAgaWYgKHJlcXVpcmUoJy4vX2NvZicpKHByb2Nlc3MpID09ICdwcm9jZXNzJykge1xuICAgIGRlZmVyID0gZnVuY3Rpb24gKGlkKSB7XG4gICAgICBwcm9jZXNzLm5leHRUaWNrKGN0eChydW4sIGlkLCAxKSk7XG4gICAgfTtcbiAgLy8gU3BoZXJlIChKUyBnYW1lIGVuZ2luZSkgRGlzcGF0Y2ggQVBJXG4gIH0gZWxzZSBpZiAoRGlzcGF0Y2ggJiYgRGlzcGF0Y2gubm93KSB7XG4gICAgZGVmZXIgPSBmdW5jdGlvbiAoaWQpIHtcbiAgICAgIERpc3BhdGNoLm5vdyhjdHgocnVuLCBpZCwgMSkpO1xuICAgIH07XG4gIC8vIEJyb3dzZXJzIHdpdGggTWVzc2FnZUNoYW5uZWwsIGluY2x1ZGVzIFdlYldvcmtlcnNcbiAgfSBlbHNlIGlmIChNZXNzYWdlQ2hhbm5lbCkge1xuICAgIGNoYW5uZWwgPSBuZXcgTWVzc2FnZUNoYW5uZWwoKTtcbiAgICBwb3J0ID0gY2hhbm5lbC5wb3J0MjtcbiAgICBjaGFubmVsLnBvcnQxLm9ubWVzc2FnZSA9IGxpc3RlbmVyO1xuICAgIGRlZmVyID0gY3R4KHBvcnQucG9zdE1lc3NhZ2UsIHBvcnQsIDEpO1xuICAvLyBCcm93c2VycyB3aXRoIHBvc3RNZXNzYWdlLCBza2lwIFdlYldvcmtlcnNcbiAgLy8gSUU4IGhhcyBwb3N0TWVzc2FnZSwgYnV0IGl0J3Mgc3luYyAmIHR5cGVvZiBpdHMgcG9zdE1lc3NhZ2UgaXMgJ29iamVjdCdcbiAgfSBlbHNlIGlmIChnbG9iYWwuYWRkRXZlbnRMaXN0ZW5lciAmJiB0eXBlb2YgcG9zdE1lc3NhZ2UgPT0gJ2Z1bmN0aW9uJyAmJiAhZ2xvYmFsLmltcG9ydFNjcmlwdHMpIHtcbiAgICBkZWZlciA9IGZ1bmN0aW9uIChpZCkge1xuICAgICAgZ2xvYmFsLnBvc3RNZXNzYWdlKGlkICsgJycsICcqJyk7XG4gICAgfTtcbiAgICBnbG9iYWwuYWRkRXZlbnRMaXN0ZW5lcignbWVzc2FnZScsIGxpc3RlbmVyLCBmYWxzZSk7XG4gIC8vIElFOC1cbiAgfSBlbHNlIGlmIChPTlJFQURZU1RBVEVDSEFOR0UgaW4gY2VsKCdzY3JpcHQnKSkge1xuICAgIGRlZmVyID0gZnVuY3Rpb24gKGlkKSB7XG4gICAgICBodG1sLmFwcGVuZENoaWxkKGNlbCgnc2NyaXB0JykpW09OUkVBRFlTVEFURUNIQU5HRV0gPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgIGh0bWwucmVtb3ZlQ2hpbGQodGhpcyk7XG4gICAgICAgIHJ1bi5jYWxsKGlkKTtcbiAgICAgIH07XG4gICAgfTtcbiAgLy8gUmVzdCBvbGQgYnJvd3NlcnNcbiAgfSBlbHNlIHtcbiAgICBkZWZlciA9IGZ1bmN0aW9uIChpZCkge1xuICAgICAgc2V0VGltZW91dChjdHgocnVuLCBpZCwgMSksIDApO1xuICAgIH07XG4gIH1cbn1cbm1vZHVsZS5leHBvcnRzID0ge1xuICBzZXQ6IHNldFRhc2ssXG4gIGNsZWFyOiBjbGVhclRhc2tcbn07XG4iLCIndXNlIHN0cmljdCc7XG52YXIgYWRkVG9VbnNjb3BhYmxlcyA9IHJlcXVpcmUoJy4vX2FkZC10by11bnNjb3BhYmxlcycpO1xudmFyIHN0ZXAgPSByZXF1aXJlKCcuL19pdGVyLXN0ZXAnKTtcbnZhciBJdGVyYXRvcnMgPSByZXF1aXJlKCcuL19pdGVyYXRvcnMnKTtcbnZhciB0b0lPYmplY3QgPSByZXF1aXJlKCcuL190by1pb2JqZWN0Jyk7XG5cbi8vIDIyLjEuMy40IEFycmF5LnByb3RvdHlwZS5lbnRyaWVzKClcbi8vIDIyLjEuMy4xMyBBcnJheS5wcm90b3R5cGUua2V5cygpXG4vLyAyMi4xLjMuMjkgQXJyYXkucHJvdG90eXBlLnZhbHVlcygpXG4vLyAyMi4xLjMuMzAgQXJyYXkucHJvdG90eXBlW0BAaXRlcmF0b3JdKClcbm1vZHVsZS5leHBvcnRzID0gcmVxdWlyZSgnLi9faXRlci1kZWZpbmUnKShBcnJheSwgJ0FycmF5JywgZnVuY3Rpb24gKGl0ZXJhdGVkLCBraW5kKSB7XG4gIHRoaXMuX3QgPSB0b0lPYmplY3QoaXRlcmF0ZWQpOyAvLyB0YXJnZXRcbiAgdGhpcy5faSA9IDA7ICAgICAgICAgICAgICAgICAgIC8vIG5leHQgaW5kZXhcbiAgdGhpcy5fayA9IGtpbmQ7ICAgICAgICAgICAgICAgIC8vIGtpbmRcbi8vIDIyLjEuNS4yLjEgJUFycmF5SXRlcmF0b3JQcm90b3R5cGUlLm5leHQoKVxufSwgZnVuY3Rpb24gKCkge1xuICB2YXIgTyA9IHRoaXMuX3Q7XG4gIHZhciBraW5kID0gdGhpcy5faztcbiAgdmFyIGluZGV4ID0gdGhpcy5faSsrO1xuICBpZiAoIU8gfHwgaW5kZXggPj0gTy5sZW5ndGgpIHtcbiAgICB0aGlzLl90ID0gdW5kZWZpbmVkO1xuICAgIHJldHVybiBzdGVwKDEpO1xuICB9XG4gIGlmIChraW5kID09ICdrZXlzJykgcmV0dXJuIHN0ZXAoMCwgaW5kZXgpO1xuICBpZiAoa2luZCA9PSAndmFsdWVzJykgcmV0dXJuIHN0ZXAoMCwgT1tpbmRleF0pO1xuICByZXR1cm4gc3RlcCgwLCBbaW5kZXgsIE9baW5kZXhdXSk7XG59LCAndmFsdWVzJyk7XG5cbi8vIGFyZ3VtZW50c0xpc3RbQEBpdGVyYXRvcl0gaXMgJUFycmF5UHJvdG9fdmFsdWVzJSAoOS40LjQuNiwgOS40LjQuNylcbkl0ZXJhdG9ycy5Bcmd1bWVudHMgPSBJdGVyYXRvcnMuQXJyYXk7XG5cbmFkZFRvVW5zY29wYWJsZXMoJ2tleXMnKTtcbmFkZFRvVW5zY29wYWJsZXMoJ3ZhbHVlcycpO1xuYWRkVG9VbnNjb3BhYmxlcygnZW50cmllcycpO1xuIiwiLy8gMjIuMS4zLjYgQXJyYXkucHJvdG90eXBlLmZpbGwodmFsdWUsIHN0YXJ0ID0gMCwgZW5kID0gdGhpcy5sZW5ndGgpXG4ndXNlIHN0cmljdCc7XG52YXIgdG9PYmplY3QgPSByZXF1aXJlKCcuL190by1vYmplY3QnKTtcbnZhciB0b0Fic29sdXRlSW5kZXggPSByZXF1aXJlKCcuL190by1hYnNvbHV0ZS1pbmRleCcpO1xudmFyIHRvTGVuZ3RoID0gcmVxdWlyZSgnLi9fdG8tbGVuZ3RoJyk7XG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIGZpbGwodmFsdWUgLyogLCBzdGFydCA9IDAsIGVuZCA9IEBsZW5ndGggKi8pIHtcbiAgdmFyIE8gPSB0b09iamVjdCh0aGlzKTtcbiAgdmFyIGxlbmd0aCA9IHRvTGVuZ3RoKE8ubGVuZ3RoKTtcbiAgdmFyIGFMZW4gPSBhcmd1bWVudHMubGVuZ3RoO1xuICB2YXIgaW5kZXggPSB0b0Fic29sdXRlSW5kZXgoYUxlbiA+IDEgPyBhcmd1bWVudHNbMV0gOiB1bmRlZmluZWQsIGxlbmd0aCk7XG4gIHZhciBlbmQgPSBhTGVuID4gMiA/IGFyZ3VtZW50c1syXSA6IHVuZGVmaW5lZDtcbiAgdmFyIGVuZFBvcyA9IGVuZCA9PT0gdW5kZWZpbmVkID8gbGVuZ3RoIDogdG9BYnNvbHV0ZUluZGV4KGVuZCwgbGVuZ3RoKTtcbiAgd2hpbGUgKGVuZFBvcyA+IGluZGV4KSBPW2luZGV4KytdID0gdmFsdWU7XG4gIHJldHVybiBPO1xufTtcbiIsIi8vIDkuNC4yLjMgQXJyYXlTcGVjaWVzQ3JlYXRlKG9yaWdpbmFsQXJyYXksIGxlbmd0aClcbnZhciBzcGVjaWVzQ29uc3RydWN0b3IgPSByZXF1aXJlKCcuL19hcnJheS1zcGVjaWVzLWNvbnN0cnVjdG9yJyk7XG5cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKG9yaWdpbmFsLCBsZW5ndGgpIHtcbiAgcmV0dXJuIG5ldyAoc3BlY2llc0NvbnN0cnVjdG9yKG9yaWdpbmFsKSkobGVuZ3RoKTtcbn07XG4iLCJ2YXIgY2xhc3NvZiA9IHJlcXVpcmUoJy4vX2NsYXNzb2YnKTtcbnZhciBJVEVSQVRPUiA9IHJlcXVpcmUoJy4vX3drcycpKCdpdGVyYXRvcicpO1xudmFyIEl0ZXJhdG9ycyA9IHJlcXVpcmUoJy4vX2l0ZXJhdG9ycycpO1xubW9kdWxlLmV4cG9ydHMgPSByZXF1aXJlKCcuL19jb3JlJykuZ2V0SXRlcmF0b3JNZXRob2QgPSBmdW5jdGlvbiAoaXQpIHtcbiAgaWYgKGl0ICE9IHVuZGVmaW5lZCkgcmV0dXJuIGl0W0lURVJBVE9SXVxuICAgIHx8IGl0WydAQGl0ZXJhdG9yJ11cbiAgICB8fCBJdGVyYXRvcnNbY2xhc3NvZihpdCldO1xufTtcbiIsIid1c2Ugc3RyaWN0JztcbnZhciAkZGVmaW5lUHJvcGVydHkgPSByZXF1aXJlKCcuL19vYmplY3QtZHAnKTtcbnZhciBjcmVhdGVEZXNjID0gcmVxdWlyZSgnLi9fcHJvcGVydHktZGVzYycpO1xuXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChvYmplY3QsIGluZGV4LCB2YWx1ZSkge1xuICBpZiAoaW5kZXggaW4gb2JqZWN0KSAkZGVmaW5lUHJvcGVydHkuZihvYmplY3QsIGluZGV4LCBjcmVhdGVEZXNjKDAsIHZhbHVlKSk7XG4gIGVsc2Ugb2JqZWN0W2luZGV4XSA9IHZhbHVlO1xufTtcbiIsIi8vIGNoZWNrIG9uIGRlZmF1bHQgQXJyYXkgaXRlcmF0b3JcbnZhciBJdGVyYXRvcnMgPSByZXF1aXJlKCcuL19pdGVyYXRvcnMnKTtcbnZhciBJVEVSQVRPUiA9IHJlcXVpcmUoJy4vX3drcycpKCdpdGVyYXRvcicpO1xudmFyIEFycmF5UHJvdG8gPSBBcnJheS5wcm90b3R5cGU7XG5cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKGl0KSB7XG4gIHJldHVybiBpdCAhPT0gdW5kZWZpbmVkICYmIChJdGVyYXRvcnMuQXJyYXkgPT09IGl0IHx8IEFycmF5UHJvdG9bSVRFUkFUT1JdID09PSBpdCk7XG59O1xuIiwidmFyIE1BVENIID0gcmVxdWlyZSgnLi9fd2tzJykoJ21hdGNoJyk7XG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChLRVkpIHtcbiAgdmFyIHJlID0gLy4vO1xuICB0cnkge1xuICAgICcvLi8nW0tFWV0ocmUpO1xuICB9IGNhdGNoIChlKSB7XG4gICAgdHJ5IHtcbiAgICAgIHJlW01BVENIXSA9IGZhbHNlO1xuICAgICAgcmV0dXJuICEnLy4vJ1tLRVldKHJlKTtcbiAgICB9IGNhdGNoIChmKSB7IC8qIGVtcHR5ICovIH1cbiAgfSByZXR1cm4gdHJ1ZTtcbn07XG4iLCIvLyBoZWxwZXIgZm9yIFN0cmluZyN7c3RhcnRzV2l0aCwgZW5kc1dpdGgsIGluY2x1ZGVzfVxudmFyIGlzUmVnRXhwID0gcmVxdWlyZSgnLi9faXMtcmVnZXhwJyk7XG52YXIgZGVmaW5lZCA9IHJlcXVpcmUoJy4vX2RlZmluZWQnKTtcblxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAodGhhdCwgc2VhcmNoU3RyaW5nLCBOQU1FKSB7XG4gIGlmIChpc1JlZ0V4cChzZWFyY2hTdHJpbmcpKSB0aHJvdyBUeXBlRXJyb3IoJ1N0cmluZyMnICsgTkFNRSArIFwiIGRvZXNuJ3QgYWNjZXB0IHJlZ2V4IVwiKTtcbiAgcmV0dXJuIFN0cmluZyhkZWZpbmVkKHRoYXQpKTtcbn07XG4iLCIndXNlIHN0cmljdCc7XG52YXIgY3JlYXRlID0gcmVxdWlyZSgnLi9fb2JqZWN0LWNyZWF0ZScpO1xudmFyIGRlc2NyaXB0b3IgPSByZXF1aXJlKCcuL19wcm9wZXJ0eS1kZXNjJyk7XG52YXIgc2V0VG9TdHJpbmdUYWcgPSByZXF1aXJlKCcuL19zZXQtdG8tc3RyaW5nLXRhZycpO1xudmFyIEl0ZXJhdG9yUHJvdG90eXBlID0ge307XG5cbi8vIDI1LjEuMi4xLjEgJUl0ZXJhdG9yUHJvdG90eXBlJVtAQGl0ZXJhdG9yXSgpXG5yZXF1aXJlKCcuL19oaWRlJykoSXRlcmF0b3JQcm90b3R5cGUsIHJlcXVpcmUoJy4vX3drcycpKCdpdGVyYXRvcicpLCBmdW5jdGlvbiAoKSB7IHJldHVybiB0aGlzOyB9KTtcblxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAoQ29uc3RydWN0b3IsIE5BTUUsIG5leHQpIHtcbiAgQ29uc3RydWN0b3IucHJvdG90eXBlID0gY3JlYXRlKEl0ZXJhdG9yUHJvdG90eXBlLCB7IG5leHQ6IGRlc2NyaXB0b3IoMSwgbmV4dCkgfSk7XG4gIHNldFRvU3RyaW5nVGFnKENvbnN0cnVjdG9yLCBOQU1FICsgJyBJdGVyYXRvcicpO1xufTtcbiIsIid1c2Ugc3RyaWN0JztcbnZhciBMSUJSQVJZID0gcmVxdWlyZSgnLi9fbGlicmFyeScpO1xudmFyICRleHBvcnQgPSByZXF1aXJlKCcuL19leHBvcnQnKTtcbnZhciByZWRlZmluZSA9IHJlcXVpcmUoJy4vX3JlZGVmaW5lJyk7XG52YXIgaGlkZSA9IHJlcXVpcmUoJy4vX2hpZGUnKTtcbnZhciBJdGVyYXRvcnMgPSByZXF1aXJlKCcuL19pdGVyYXRvcnMnKTtcbnZhciAkaXRlckNyZWF0ZSA9IHJlcXVpcmUoJy4vX2l0ZXItY3JlYXRlJyk7XG52YXIgc2V0VG9TdHJpbmdUYWcgPSByZXF1aXJlKCcuL19zZXQtdG8tc3RyaW5nLXRhZycpO1xudmFyIGdldFByb3RvdHlwZU9mID0gcmVxdWlyZSgnLi9fb2JqZWN0LWdwbycpO1xudmFyIElURVJBVE9SID0gcmVxdWlyZSgnLi9fd2tzJykoJ2l0ZXJhdG9yJyk7XG52YXIgQlVHR1kgPSAhKFtdLmtleXMgJiYgJ25leHQnIGluIFtdLmtleXMoKSk7IC8vIFNhZmFyaSBoYXMgYnVnZ3kgaXRlcmF0b3JzIHcvbyBgbmV4dGBcbnZhciBGRl9JVEVSQVRPUiA9ICdAQGl0ZXJhdG9yJztcbnZhciBLRVlTID0gJ2tleXMnO1xudmFyIFZBTFVFUyA9ICd2YWx1ZXMnO1xuXG52YXIgcmV0dXJuVGhpcyA9IGZ1bmN0aW9uICgpIHsgcmV0dXJuIHRoaXM7IH07XG5cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKEJhc2UsIE5BTUUsIENvbnN0cnVjdG9yLCBuZXh0LCBERUZBVUxULCBJU19TRVQsIEZPUkNFRCkge1xuICAkaXRlckNyZWF0ZShDb25zdHJ1Y3RvciwgTkFNRSwgbmV4dCk7XG4gIHZhciBnZXRNZXRob2QgPSBmdW5jdGlvbiAoa2luZCkge1xuICAgIGlmICghQlVHR1kgJiYga2luZCBpbiBwcm90bykgcmV0dXJuIHByb3RvW2tpbmRdO1xuICAgIHN3aXRjaCAoa2luZCkge1xuICAgICAgY2FzZSBLRVlTOiByZXR1cm4gZnVuY3Rpb24ga2V5cygpIHsgcmV0dXJuIG5ldyBDb25zdHJ1Y3Rvcih0aGlzLCBraW5kKTsgfTtcbiAgICAgIGNhc2UgVkFMVUVTOiByZXR1cm4gZnVuY3Rpb24gdmFsdWVzKCkgeyByZXR1cm4gbmV3IENvbnN0cnVjdG9yKHRoaXMsIGtpbmQpOyB9O1xuICAgIH0gcmV0dXJuIGZ1bmN0aW9uIGVudHJpZXMoKSB7IHJldHVybiBuZXcgQ29uc3RydWN0b3IodGhpcywga2luZCk7IH07XG4gIH07XG4gIHZhciBUQUcgPSBOQU1FICsgJyBJdGVyYXRvcic7XG4gIHZhciBERUZfVkFMVUVTID0gREVGQVVMVCA9PSBWQUxVRVM7XG4gIHZhciBWQUxVRVNfQlVHID0gZmFsc2U7XG4gIHZhciBwcm90byA9IEJhc2UucHJvdG90eXBlO1xuICB2YXIgJG5hdGl2ZSA9IHByb3RvW0lURVJBVE9SXSB8fCBwcm90b1tGRl9JVEVSQVRPUl0gfHwgREVGQVVMVCAmJiBwcm90b1tERUZBVUxUXTtcbiAgdmFyICRkZWZhdWx0ID0gJG5hdGl2ZSB8fCBnZXRNZXRob2QoREVGQVVMVCk7XG4gIHZhciAkZW50cmllcyA9IERFRkFVTFQgPyAhREVGX1ZBTFVFUyA/ICRkZWZhdWx0IDogZ2V0TWV0aG9kKCdlbnRyaWVzJykgOiB1bmRlZmluZWQ7XG4gIHZhciAkYW55TmF0aXZlID0gTkFNRSA9PSAnQXJyYXknID8gcHJvdG8uZW50cmllcyB8fCAkbmF0aXZlIDogJG5hdGl2ZTtcbiAgdmFyIG1ldGhvZHMsIGtleSwgSXRlcmF0b3JQcm90b3R5cGU7XG4gIC8vIEZpeCBuYXRpdmVcbiAgaWYgKCRhbnlOYXRpdmUpIHtcbiAgICBJdGVyYXRvclByb3RvdHlwZSA9IGdldFByb3RvdHlwZU9mKCRhbnlOYXRpdmUuY2FsbChuZXcgQmFzZSgpKSk7XG4gICAgaWYgKEl0ZXJhdG9yUHJvdG90eXBlICE9PSBPYmplY3QucHJvdG90eXBlICYmIEl0ZXJhdG9yUHJvdG90eXBlLm5leHQpIHtcbiAgICAgIC8vIFNldCBAQHRvU3RyaW5nVGFnIHRvIG5hdGl2ZSBpdGVyYXRvcnNcbiAgICAgIHNldFRvU3RyaW5nVGFnKEl0ZXJhdG9yUHJvdG90eXBlLCBUQUcsIHRydWUpO1xuICAgICAgLy8gZml4IGZvciBzb21lIG9sZCBlbmdpbmVzXG4gICAgICBpZiAoIUxJQlJBUlkgJiYgdHlwZW9mIEl0ZXJhdG9yUHJvdG90eXBlW0lURVJBVE9SXSAhPSAnZnVuY3Rpb24nKSBoaWRlKEl0ZXJhdG9yUHJvdG90eXBlLCBJVEVSQVRPUiwgcmV0dXJuVGhpcyk7XG4gICAgfVxuICB9XG4gIC8vIGZpeCBBcnJheSN7dmFsdWVzLCBAQGl0ZXJhdG9yfS5uYW1lIGluIFY4IC8gRkZcbiAgaWYgKERFRl9WQUxVRVMgJiYgJG5hdGl2ZSAmJiAkbmF0aXZlLm5hbWUgIT09IFZBTFVFUykge1xuICAgIFZBTFVFU19CVUcgPSB0cnVlO1xuICAgICRkZWZhdWx0ID0gZnVuY3Rpb24gdmFsdWVzKCkgeyByZXR1cm4gJG5hdGl2ZS5jYWxsKHRoaXMpOyB9O1xuICB9XG4gIC8vIERlZmluZSBpdGVyYXRvclxuICBpZiAoKCFMSUJSQVJZIHx8IEZPUkNFRCkgJiYgKEJVR0dZIHx8IFZBTFVFU19CVUcgfHwgIXByb3RvW0lURVJBVE9SXSkpIHtcbiAgICBoaWRlKHByb3RvLCBJVEVSQVRPUiwgJGRlZmF1bHQpO1xuICB9XG4gIC8vIFBsdWcgZm9yIGxpYnJhcnlcbiAgSXRlcmF0b3JzW05BTUVdID0gJGRlZmF1bHQ7XG4gIEl0ZXJhdG9yc1tUQUddID0gcmV0dXJuVGhpcztcbiAgaWYgKERFRkFVTFQpIHtcbiAgICBtZXRob2RzID0ge1xuICAgICAgdmFsdWVzOiBERUZfVkFMVUVTID8gJGRlZmF1bHQgOiBnZXRNZXRob2QoVkFMVUVTKSxcbiAgICAgIGtleXM6IElTX1NFVCA/ICRkZWZhdWx0IDogZ2V0TWV0aG9kKEtFWVMpLFxuICAgICAgZW50cmllczogJGVudHJpZXNcbiAgICB9O1xuICAgIGlmIChGT1JDRUQpIGZvciAoa2V5IGluIG1ldGhvZHMpIHtcbiAgICAgIGlmICghKGtleSBpbiBwcm90bykpIHJlZGVmaW5lKHByb3RvLCBrZXksIG1ldGhvZHNba2V5XSk7XG4gICAgfSBlbHNlICRleHBvcnQoJGV4cG9ydC5QICsgJGV4cG9ydC5GICogKEJVR0dZIHx8IFZBTFVFU19CVUcpLCBOQU1FLCBtZXRob2RzKTtcbiAgfVxuICByZXR1cm4gbWV0aG9kcztcbn07XG4iLCJ2YXIgdG9JbnRlZ2VyID0gcmVxdWlyZSgnLi9fdG8taW50ZWdlcicpO1xudmFyIGRlZmluZWQgPSByZXF1aXJlKCcuL19kZWZpbmVkJyk7XG4vLyB0cnVlICAtPiBTdHJpbmcjYXRcbi8vIGZhbHNlIC0+IFN0cmluZyNjb2RlUG9pbnRBdFxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAoVE9fU1RSSU5HKSB7XG4gIHJldHVybiBmdW5jdGlvbiAodGhhdCwgcG9zKSB7XG4gICAgdmFyIHMgPSBTdHJpbmcoZGVmaW5lZCh0aGF0KSk7XG4gICAgdmFyIGkgPSB0b0ludGVnZXIocG9zKTtcbiAgICB2YXIgbCA9IHMubGVuZ3RoO1xuICAgIHZhciBhLCBiO1xuICAgIGlmIChpIDwgMCB8fCBpID49IGwpIHJldHVybiBUT19TVFJJTkcgPyAnJyA6IHVuZGVmaW5lZDtcbiAgICBhID0gcy5jaGFyQ29kZUF0KGkpO1xuICAgIHJldHVybiBhIDwgMHhkODAwIHx8IGEgPiAweGRiZmYgfHwgaSArIDEgPT09IGwgfHwgKGIgPSBzLmNoYXJDb2RlQXQoaSArIDEpKSA8IDB4ZGMwMCB8fCBiID4gMHhkZmZmXG4gICAgICA/IFRPX1NUUklORyA/IHMuY2hhckF0KGkpIDogYVxuICAgICAgOiBUT19TVFJJTkcgPyBzLnNsaWNlKGksIGkgKyAyKSA6IChhIC0gMHhkODAwIDw8IDEwKSArIChiIC0gMHhkYzAwKSArIDB4MTAwMDA7XG4gIH07XG59O1xuIiwiLy8gMjAuMi4yLjE0IE1hdGguZXhwbTEoeClcbnZhciAkZXhwbTEgPSBNYXRoLmV4cG0xO1xubW9kdWxlLmV4cG9ydHMgPSAoISRleHBtMVxuICAvLyBPbGQgRkYgYnVnXG4gIHx8ICRleHBtMSgxMCkgPiAyMjAyNS40NjU3OTQ4MDY3MTkgfHwgJGV4cG0xKDEwKSA8IDIyMDI1LjQ2NTc5NDgwNjcxNjUxNjhcbiAgLy8gVG9yIEJyb3dzZXIgYnVnXG4gIHx8ICRleHBtMSgtMmUtMTcpICE9IC0yZS0xN1xuKSA/IGZ1bmN0aW9uIGV4cG0xKHgpIHtcbiAgcmV0dXJuICh4ID0gK3gpID09IDAgPyB4IDogeCA+IC0xZS02ICYmIHggPCAxZS02ID8geCArIHggKiB4IC8gMiA6IE1hdGguZXhwKHgpIC0gMTtcbn0gOiAkZXhwbTE7XG4iLCIvLyAyMC4yLjIuMjggTWF0aC5zaWduKHgpXG5tb2R1bGUuZXhwb3J0cyA9IE1hdGguc2lnbiB8fCBmdW5jdGlvbiBzaWduKHgpIHtcbiAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIG5vLXNlbGYtY29tcGFyZVxuICByZXR1cm4gKHggPSAreCkgPT0gMCB8fCB4ICE9IHggPyB4IDogeCA8IDAgPyAtMSA6IDE7XG59O1xuIiwiJ3VzZSBzdHJpY3QnO1xudmFyIHRvSW50ZWdlciA9IHJlcXVpcmUoJy4vX3RvLWludGVnZXInKTtcbnZhciBkZWZpbmVkID0gcmVxdWlyZSgnLi9fZGVmaW5lZCcpO1xuXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIHJlcGVhdChjb3VudCkge1xuICB2YXIgc3RyID0gU3RyaW5nKGRlZmluZWQodGhpcykpO1xuICB2YXIgcmVzID0gJyc7XG4gIHZhciBuID0gdG9JbnRlZ2VyKGNvdW50KTtcbiAgaWYgKG4gPCAwIHx8IG4gPT0gSW5maW5pdHkpIHRocm93IFJhbmdlRXJyb3IoXCJDb3VudCBjYW4ndCBiZSBuZWdhdGl2ZVwiKTtcbiAgZm9yICg7biA+IDA7IChuID4+Pj0gMSkgJiYgKHN0ciArPSBzdHIpKSBpZiAobiAmIDEpIHJlcyArPSBzdHI7XG4gIHJldHVybiByZXM7XG59O1xuIiwidmFyIGlzT2JqZWN0ID0gcmVxdWlyZSgnLi9faXMtb2JqZWN0Jyk7XG52YXIgc2V0UHJvdG90eXBlT2YgPSByZXF1aXJlKCcuL19zZXQtcHJvdG8nKS5zZXQ7XG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uICh0aGF0LCB0YXJnZXQsIEMpIHtcbiAgdmFyIFMgPSB0YXJnZXQuY29uc3RydWN0b3I7XG4gIHZhciBQO1xuICBpZiAoUyAhPT0gQyAmJiB0eXBlb2YgUyA9PSAnZnVuY3Rpb24nICYmIChQID0gUy5wcm90b3R5cGUpICE9PSBDLnByb3RvdHlwZSAmJiBpc09iamVjdChQKSAmJiBzZXRQcm90b3R5cGVPZikge1xuICAgIHNldFByb3RvdHlwZU9mKHRoYXQsIFApO1xuICB9IHJldHVybiB0aGF0O1xufTtcbiIsIm1vZHVsZS5leHBvcnRzID0gJ1xceDA5XFx4MEFcXHgwQlxceDBDXFx4MERcXHgyMFxceEEwXFx1MTY4MFxcdTE4MEVcXHUyMDAwXFx1MjAwMVxcdTIwMDJcXHUyMDAzJyArXG4gICdcXHUyMDA0XFx1MjAwNVxcdTIwMDZcXHUyMDA3XFx1MjAwOFxcdTIwMDlcXHUyMDBBXFx1MjAyRlxcdTIwNUZcXHUzMDAwXFx1MjAyOFxcdTIwMjlcXHVGRUZGJztcbiIsIi8vIFdvcmtzIHdpdGggX19wcm90b19fIG9ubHkuIE9sZCB2OCBjYW4ndCB3b3JrIHdpdGggbnVsbCBwcm90byBvYmplY3RzLlxuLyogZXNsaW50LWRpc2FibGUgbm8tcHJvdG8gKi9cbnZhciBpc09iamVjdCA9IHJlcXVpcmUoJy4vX2lzLW9iamVjdCcpO1xudmFyIGFuT2JqZWN0ID0gcmVxdWlyZSgnLi9fYW4tb2JqZWN0Jyk7XG52YXIgY2hlY2sgPSBmdW5jdGlvbiAoTywgcHJvdG8pIHtcbiAgYW5PYmplY3QoTyk7XG4gIGlmICghaXNPYmplY3QocHJvdG8pICYmIHByb3RvICE9PSBudWxsKSB0aHJvdyBUeXBlRXJyb3IocHJvdG8gKyBcIjogY2FuJ3Qgc2V0IGFzIHByb3RvdHlwZSFcIik7XG59O1xubW9kdWxlLmV4cG9ydHMgPSB7XG4gIHNldDogT2JqZWN0LnNldFByb3RvdHlwZU9mIHx8ICgnX19wcm90b19fJyBpbiB7fSA/IC8vIGVzbGludC1kaXNhYmxlLWxpbmVcbiAgICBmdW5jdGlvbiAodGVzdCwgYnVnZ3ksIHNldCkge1xuICAgICAgdHJ5IHtcbiAgICAgICAgc2V0ID0gcmVxdWlyZSgnLi9fY3R4JykoRnVuY3Rpb24uY2FsbCwgcmVxdWlyZSgnLi9fb2JqZWN0LWdvcGQnKS5mKE9iamVjdC5wcm90b3R5cGUsICdfX3Byb3RvX18nKS5zZXQsIDIpO1xuICAgICAgICBzZXQodGVzdCwgW10pO1xuICAgICAgICBidWdneSA9ICEodGVzdCBpbnN0YW5jZW9mIEFycmF5KTtcbiAgICAgIH0gY2F0Y2ggKGUpIHsgYnVnZ3kgPSB0cnVlOyB9XG4gICAgICByZXR1cm4gZnVuY3Rpb24gc2V0UHJvdG90eXBlT2YoTywgcHJvdG8pIHtcbiAgICAgICAgY2hlY2soTywgcHJvdG8pO1xuICAgICAgICBpZiAoYnVnZ3kpIE8uX19wcm90b19fID0gcHJvdG87XG4gICAgICAgIGVsc2Ugc2V0KE8sIHByb3RvKTtcbiAgICAgICAgcmV0dXJuIE87XG4gICAgICB9O1xuICAgIH0oe30sIGZhbHNlKSA6IHVuZGVmaW5lZCksXG4gIGNoZWNrOiBjaGVja1xufTtcbiIsInZhciBkb2N1bWVudCA9IHJlcXVpcmUoJy4vX2dsb2JhbCcpLmRvY3VtZW50O1xubW9kdWxlLmV4cG9ydHMgPSBkb2N1bWVudCAmJiBkb2N1bWVudC5kb2N1bWVudEVsZW1lbnQ7XG4iLCIvLyBJRSA4LSBkb24ndCBlbnVtIGJ1ZyBrZXlzXG5tb2R1bGUuZXhwb3J0cyA9IChcbiAgJ2NvbnN0cnVjdG9yLGhhc093blByb3BlcnR5LGlzUHJvdG90eXBlT2YscHJvcGVydHlJc0VudW1lcmFibGUsdG9Mb2NhbGVTdHJpbmcsdG9TdHJpbmcsdmFsdWVPZidcbikuc3BsaXQoJywnKTtcbiIsInZhciBzaGFyZWQgPSByZXF1aXJlKCcuL19zaGFyZWQnKSgna2V5cycpO1xudmFyIHVpZCA9IHJlcXVpcmUoJy4vX3VpZCcpO1xubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAoa2V5KSB7XG4gIHJldHVybiBzaGFyZWRba2V5XSB8fCAoc2hhcmVkW2tleV0gPSB1aWQoa2V5KSk7XG59O1xuIiwidmFyIGdsb2JhbCA9IHJlcXVpcmUoJy4vX2dsb2JhbCcpO1xudmFyIGNvcmUgPSByZXF1aXJlKCcuL19jb3JlJyk7XG52YXIgTElCUkFSWSA9IHJlcXVpcmUoJy4vX2xpYnJhcnknKTtcbnZhciB3a3NFeHQgPSByZXF1aXJlKCcuL193a3MtZXh0Jyk7XG52YXIgZGVmaW5lUHJvcGVydHkgPSByZXF1aXJlKCcuL19vYmplY3QtZHAnKS5mO1xubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAobmFtZSkge1xuICB2YXIgJFN5bWJvbCA9IGNvcmUuU3ltYm9sIHx8IChjb3JlLlN5bWJvbCA9IExJQlJBUlkgPyB7fSA6IGdsb2JhbC5TeW1ib2wgfHwge30pO1xuICBpZiAobmFtZS5jaGFyQXQoMCkgIT0gJ18nICYmICEobmFtZSBpbiAkU3ltYm9sKSkgZGVmaW5lUHJvcGVydHkoJFN5bWJvbCwgbmFtZSwgeyB2YWx1ZTogd2tzRXh0LmYobmFtZSkgfSk7XG59O1xuIiwidmFyIGlzT2JqZWN0ID0gcmVxdWlyZSgnLi9faXMtb2JqZWN0Jyk7XG52YXIgZG9jdW1lbnQgPSByZXF1aXJlKCcuL19nbG9iYWwnKS5kb2N1bWVudDtcbi8vIHR5cGVvZiBkb2N1bWVudC5jcmVhdGVFbGVtZW50IGlzICdvYmplY3QnIGluIG9sZCBJRVxudmFyIGlzID0gaXNPYmplY3QoZG9jdW1lbnQpICYmIGlzT2JqZWN0KGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQpO1xubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAoaXQpIHtcbiAgcmV0dXJuIGlzID8gZG9jdW1lbnQuY3JlYXRlRWxlbWVudChpdCkgOiB7fTtcbn07XG4iLCJpbXBvcnQgJCRvYnNlcnZhYmxlIGZyb20gJ3N5bWJvbC1vYnNlcnZhYmxlJztcblxuLyoqXG4gKiBUaGVzZSBhcmUgcHJpdmF0ZSBhY3Rpb24gdHlwZXMgcmVzZXJ2ZWQgYnkgUmVkdXguXG4gKiBGb3IgYW55IHVua25vd24gYWN0aW9ucywgeW91IG11c3QgcmV0dXJuIHRoZSBjdXJyZW50IHN0YXRlLlxuICogSWYgdGhlIGN1cnJlbnQgc3RhdGUgaXMgdW5kZWZpbmVkLCB5b3UgbXVzdCByZXR1cm4gdGhlIGluaXRpYWwgc3RhdGUuXG4gKiBEbyBub3QgcmVmZXJlbmNlIHRoZXNlIGFjdGlvbiB0eXBlcyBkaXJlY3RseSBpbiB5b3VyIGNvZGUuXG4gKi9cbnZhciBBY3Rpb25UeXBlcyA9IHtcbiAgSU5JVDogJ0BAcmVkdXgvSU5JVCcgKyBNYXRoLnJhbmRvbSgpLnRvU3RyaW5nKDM2KS5zdWJzdHJpbmcoNykuc3BsaXQoJycpLmpvaW4oJy4nKSxcbiAgUkVQTEFDRTogJ0BAcmVkdXgvUkVQTEFDRScgKyBNYXRoLnJhbmRvbSgpLnRvU3RyaW5nKDM2KS5zdWJzdHJpbmcoNykuc3BsaXQoJycpLmpvaW4oJy4nKVxufTtcblxudmFyIF90eXBlb2YgPSB0eXBlb2YgU3ltYm9sID09PSBcImZ1bmN0aW9uXCIgJiYgdHlwZW9mIFN5bWJvbC5pdGVyYXRvciA9PT0gXCJzeW1ib2xcIiA/IGZ1bmN0aW9uIChvYmopIHtcbiAgcmV0dXJuIHR5cGVvZiBvYmo7XG59IDogZnVuY3Rpb24gKG9iaikge1xuICByZXR1cm4gb2JqICYmIHR5cGVvZiBTeW1ib2wgPT09IFwiZnVuY3Rpb25cIiAmJiBvYmouY29uc3RydWN0b3IgPT09IFN5bWJvbCAmJiBvYmogIT09IFN5bWJvbC5wcm90b3R5cGUgPyBcInN5bWJvbFwiIDogdHlwZW9mIG9iajtcbn07XG5cbnZhciBfZXh0ZW5kcyA9IE9iamVjdC5hc3NpZ24gfHwgZnVuY3Rpb24gKHRhcmdldCkge1xuICBmb3IgKHZhciBpID0gMTsgaSA8IGFyZ3VtZW50cy5sZW5ndGg7IGkrKykge1xuICAgIHZhciBzb3VyY2UgPSBhcmd1bWVudHNbaV07XG5cbiAgICBmb3IgKHZhciBrZXkgaW4gc291cmNlKSB7XG4gICAgICBpZiAoT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsKHNvdXJjZSwga2V5KSkge1xuICAgICAgICB0YXJnZXRba2V5XSA9IHNvdXJjZVtrZXldO1xuICAgICAgfVxuICAgIH1cbiAgfVxuXG4gIHJldHVybiB0YXJnZXQ7XG59O1xuXG4vKipcbiAqIEBwYXJhbSB7YW55fSBvYmogVGhlIG9iamVjdCB0byBpbnNwZWN0LlxuICogQHJldHVybnMge2Jvb2xlYW59IFRydWUgaWYgdGhlIGFyZ3VtZW50IGFwcGVhcnMgdG8gYmUgYSBwbGFpbiBvYmplY3QuXG4gKi9cbmZ1bmN0aW9uIGlzUGxhaW5PYmplY3Qob2JqKSB7XG4gIGlmICgodHlwZW9mIG9iaiA9PT0gJ3VuZGVmaW5lZCcgPyAndW5kZWZpbmVkJyA6IF90eXBlb2Yob2JqKSkgIT09ICdvYmplY3QnIHx8IG9iaiA9PT0gbnVsbCkgcmV0dXJuIGZhbHNlO1xuXG4gIHZhciBwcm90byA9IG9iajtcbiAgd2hpbGUgKE9iamVjdC5nZXRQcm90b3R5cGVPZihwcm90bykgIT09IG51bGwpIHtcbiAgICBwcm90byA9IE9iamVjdC5nZXRQcm90b3R5cGVPZihwcm90byk7XG4gIH1cblxuICByZXR1cm4gT2JqZWN0LmdldFByb3RvdHlwZU9mKG9iaikgPT09IHByb3RvO1xufVxuXG4vKipcbiAqIENyZWF0ZXMgYSBSZWR1eCBzdG9yZSB0aGF0IGhvbGRzIHRoZSBzdGF0ZSB0cmVlLlxuICogVGhlIG9ubHkgd2F5IHRvIGNoYW5nZSB0aGUgZGF0YSBpbiB0aGUgc3RvcmUgaXMgdG8gY2FsbCBgZGlzcGF0Y2goKWAgb24gaXQuXG4gKlxuICogVGhlcmUgc2hvdWxkIG9ubHkgYmUgYSBzaW5nbGUgc3RvcmUgaW4geW91ciBhcHAuIFRvIHNwZWNpZnkgaG93IGRpZmZlcmVudFxuICogcGFydHMgb2YgdGhlIHN0YXRlIHRyZWUgcmVzcG9uZCB0byBhY3Rpb25zLCB5b3UgbWF5IGNvbWJpbmUgc2V2ZXJhbCByZWR1Y2Vyc1xuICogaW50byBhIHNpbmdsZSByZWR1Y2VyIGZ1bmN0aW9uIGJ5IHVzaW5nIGBjb21iaW5lUmVkdWNlcnNgLlxuICpcbiAqIEBwYXJhbSB7RnVuY3Rpb259IHJlZHVjZXIgQSBmdW5jdGlvbiB0aGF0IHJldHVybnMgdGhlIG5leHQgc3RhdGUgdHJlZSwgZ2l2ZW5cbiAqIHRoZSBjdXJyZW50IHN0YXRlIHRyZWUgYW5kIHRoZSBhY3Rpb24gdG8gaGFuZGxlLlxuICpcbiAqIEBwYXJhbSB7YW55fSBbcHJlbG9hZGVkU3RhdGVdIFRoZSBpbml0aWFsIHN0YXRlLiBZb3UgbWF5IG9wdGlvbmFsbHkgc3BlY2lmeSBpdFxuICogdG8gaHlkcmF0ZSB0aGUgc3RhdGUgZnJvbSB0aGUgc2VydmVyIGluIHVuaXZlcnNhbCBhcHBzLCBvciB0byByZXN0b3JlIGFcbiAqIHByZXZpb3VzbHkgc2VyaWFsaXplZCB1c2VyIHNlc3Npb24uXG4gKiBJZiB5b3UgdXNlIGBjb21iaW5lUmVkdWNlcnNgIHRvIHByb2R1Y2UgdGhlIHJvb3QgcmVkdWNlciBmdW5jdGlvbiwgdGhpcyBtdXN0IGJlXG4gKiBhbiBvYmplY3Qgd2l0aCB0aGUgc2FtZSBzaGFwZSBhcyBgY29tYmluZVJlZHVjZXJzYCBrZXlzLlxuICpcbiAqIEBwYXJhbSB7RnVuY3Rpb259IFtlbmhhbmNlcl0gVGhlIHN0b3JlIGVuaGFuY2VyLiBZb3UgbWF5IG9wdGlvbmFsbHkgc3BlY2lmeSBpdFxuICogdG8gZW5oYW5jZSB0aGUgc3RvcmUgd2l0aCB0aGlyZC1wYXJ0eSBjYXBhYmlsaXRpZXMgc3VjaCBhcyBtaWRkbGV3YXJlLFxuICogdGltZSB0cmF2ZWwsIHBlcnNpc3RlbmNlLCBldGMuIFRoZSBvbmx5IHN0b3JlIGVuaGFuY2VyIHRoYXQgc2hpcHMgd2l0aCBSZWR1eFxuICogaXMgYGFwcGx5TWlkZGxld2FyZSgpYC5cbiAqXG4gKiBAcmV0dXJucyB7U3RvcmV9IEEgUmVkdXggc3RvcmUgdGhhdCBsZXRzIHlvdSByZWFkIHRoZSBzdGF0ZSwgZGlzcGF0Y2ggYWN0aW9uc1xuICogYW5kIHN1YnNjcmliZSB0byBjaGFuZ2VzLlxuICovXG5mdW5jdGlvbiBjcmVhdGVTdG9yZShyZWR1Y2VyLCBwcmVsb2FkZWRTdGF0ZSwgZW5oYW5jZXIpIHtcbiAgdmFyIF9yZWYyO1xuXG4gIGlmICh0eXBlb2YgcHJlbG9hZGVkU3RhdGUgPT09ICdmdW5jdGlvbicgJiYgdHlwZW9mIGVuaGFuY2VyID09PSAndW5kZWZpbmVkJykge1xuICAgIGVuaGFuY2VyID0gcHJlbG9hZGVkU3RhdGU7XG4gICAgcHJlbG9hZGVkU3RhdGUgPSB1bmRlZmluZWQ7XG4gIH1cblxuICBpZiAodHlwZW9mIGVuaGFuY2VyICE9PSAndW5kZWZpbmVkJykge1xuICAgIGlmICh0eXBlb2YgZW5oYW5jZXIgIT09ICdmdW5jdGlvbicpIHtcbiAgICAgIHRocm93IG5ldyBFcnJvcignRXhwZWN0ZWQgdGhlIGVuaGFuY2VyIHRvIGJlIGEgZnVuY3Rpb24uJyk7XG4gICAgfVxuXG4gICAgcmV0dXJuIGVuaGFuY2VyKGNyZWF0ZVN0b3JlKShyZWR1Y2VyLCBwcmVsb2FkZWRTdGF0ZSk7XG4gIH1cblxuICBpZiAodHlwZW9mIHJlZHVjZXIgIT09ICdmdW5jdGlvbicpIHtcbiAgICB0aHJvdyBuZXcgRXJyb3IoJ0V4cGVjdGVkIHRoZSByZWR1Y2VyIHRvIGJlIGEgZnVuY3Rpb24uJyk7XG4gIH1cblxuICB2YXIgY3VycmVudFJlZHVjZXIgPSByZWR1Y2VyO1xuICB2YXIgY3VycmVudFN0YXRlID0gcHJlbG9hZGVkU3RhdGU7XG4gIHZhciBjdXJyZW50TGlzdGVuZXJzID0gW107XG4gIHZhciBuZXh0TGlzdGVuZXJzID0gY3VycmVudExpc3RlbmVycztcbiAgdmFyIGlzRGlzcGF0Y2hpbmcgPSBmYWxzZTtcblxuICBmdW5jdGlvbiBlbnN1cmVDYW5NdXRhdGVOZXh0TGlzdGVuZXJzKCkge1xuICAgIGlmIChuZXh0TGlzdGVuZXJzID09PSBjdXJyZW50TGlzdGVuZXJzKSB7XG4gICAgICBuZXh0TGlzdGVuZXJzID0gY3VycmVudExpc3RlbmVycy5zbGljZSgpO1xuICAgIH1cbiAgfVxuXG4gIC8qKlxuICAgKiBSZWFkcyB0aGUgc3RhdGUgdHJlZSBtYW5hZ2VkIGJ5IHRoZSBzdG9yZS5cbiAgICpcbiAgICogQHJldHVybnMge2FueX0gVGhlIGN1cnJlbnQgc3RhdGUgdHJlZSBvZiB5b3VyIGFwcGxpY2F0aW9uLlxuICAgKi9cbiAgZnVuY3Rpb24gZ2V0U3RhdGUoKSB7XG4gICAgaWYgKGlzRGlzcGF0Y2hpbmcpIHtcbiAgICAgIHRocm93IG5ldyBFcnJvcignWW91IG1heSBub3QgY2FsbCBzdG9yZS5nZXRTdGF0ZSgpIHdoaWxlIHRoZSByZWR1Y2VyIGlzIGV4ZWN1dGluZy4gJyArICdUaGUgcmVkdWNlciBoYXMgYWxyZWFkeSByZWNlaXZlZCB0aGUgc3RhdGUgYXMgYW4gYXJndW1lbnQuICcgKyAnUGFzcyBpdCBkb3duIGZyb20gdGhlIHRvcCByZWR1Y2VyIGluc3RlYWQgb2YgcmVhZGluZyBpdCBmcm9tIHRoZSBzdG9yZS4nKTtcbiAgICB9XG5cbiAgICByZXR1cm4gY3VycmVudFN0YXRlO1xuICB9XG5cbiAgLyoqXG4gICAqIEFkZHMgYSBjaGFuZ2UgbGlzdGVuZXIuIEl0IHdpbGwgYmUgY2FsbGVkIGFueSB0aW1lIGFuIGFjdGlvbiBpcyBkaXNwYXRjaGVkLFxuICAgKiBhbmQgc29tZSBwYXJ0IG9mIHRoZSBzdGF0ZSB0cmVlIG1heSBwb3RlbnRpYWxseSBoYXZlIGNoYW5nZWQuIFlvdSBtYXkgdGhlblxuICAgKiBjYWxsIGBnZXRTdGF0ZSgpYCB0byByZWFkIHRoZSBjdXJyZW50IHN0YXRlIHRyZWUgaW5zaWRlIHRoZSBjYWxsYmFjay5cbiAgICpcbiAgICogWW91IG1heSBjYWxsIGBkaXNwYXRjaCgpYCBmcm9tIGEgY2hhbmdlIGxpc3RlbmVyLCB3aXRoIHRoZSBmb2xsb3dpbmdcbiAgICogY2F2ZWF0czpcbiAgICpcbiAgICogMS4gVGhlIHN1YnNjcmlwdGlvbnMgYXJlIHNuYXBzaG90dGVkIGp1c3QgYmVmb3JlIGV2ZXJ5IGBkaXNwYXRjaCgpYCBjYWxsLlxuICAgKiBJZiB5b3Ugc3Vic2NyaWJlIG9yIHVuc3Vic2NyaWJlIHdoaWxlIHRoZSBsaXN0ZW5lcnMgYXJlIGJlaW5nIGludm9rZWQsIHRoaXNcbiAgICogd2lsbCBub3QgaGF2ZSBhbnkgZWZmZWN0IG9uIHRoZSBgZGlzcGF0Y2goKWAgdGhhdCBpcyBjdXJyZW50bHkgaW4gcHJvZ3Jlc3MuXG4gICAqIEhvd2V2ZXIsIHRoZSBuZXh0IGBkaXNwYXRjaCgpYCBjYWxsLCB3aGV0aGVyIG5lc3RlZCBvciBub3QsIHdpbGwgdXNlIGEgbW9yZVxuICAgKiByZWNlbnQgc25hcHNob3Qgb2YgdGhlIHN1YnNjcmlwdGlvbiBsaXN0LlxuICAgKlxuICAgKiAyLiBUaGUgbGlzdGVuZXIgc2hvdWxkIG5vdCBleHBlY3QgdG8gc2VlIGFsbCBzdGF0ZSBjaGFuZ2VzLCBhcyB0aGUgc3RhdGVcbiAgICogbWlnaHQgaGF2ZSBiZWVuIHVwZGF0ZWQgbXVsdGlwbGUgdGltZXMgZHVyaW5nIGEgbmVzdGVkIGBkaXNwYXRjaCgpYCBiZWZvcmVcbiAgICogdGhlIGxpc3RlbmVyIGlzIGNhbGxlZC4gSXQgaXMsIGhvd2V2ZXIsIGd1YXJhbnRlZWQgdGhhdCBhbGwgc3Vic2NyaWJlcnNcbiAgICogcmVnaXN0ZXJlZCBiZWZvcmUgdGhlIGBkaXNwYXRjaCgpYCBzdGFydGVkIHdpbGwgYmUgY2FsbGVkIHdpdGggdGhlIGxhdGVzdFxuICAgKiBzdGF0ZSBieSB0aGUgdGltZSBpdCBleGl0cy5cbiAgICpcbiAgICogQHBhcmFtIHtGdW5jdGlvbn0gbGlzdGVuZXIgQSBjYWxsYmFjayB0byBiZSBpbnZva2VkIG9uIGV2ZXJ5IGRpc3BhdGNoLlxuICAgKiBAcmV0dXJucyB7RnVuY3Rpb259IEEgZnVuY3Rpb24gdG8gcmVtb3ZlIHRoaXMgY2hhbmdlIGxpc3RlbmVyLlxuICAgKi9cbiAgZnVuY3Rpb24gc3Vic2NyaWJlKGxpc3RlbmVyKSB7XG4gICAgaWYgKHR5cGVvZiBsaXN0ZW5lciAhPT0gJ2Z1bmN0aW9uJykge1xuICAgICAgdGhyb3cgbmV3IEVycm9yKCdFeHBlY3RlZCB0aGUgbGlzdGVuZXIgdG8gYmUgYSBmdW5jdGlvbi4nKTtcbiAgICB9XG5cbiAgICBpZiAoaXNEaXNwYXRjaGluZykge1xuICAgICAgdGhyb3cgbmV3IEVycm9yKCdZb3UgbWF5IG5vdCBjYWxsIHN0b3JlLnN1YnNjcmliZSgpIHdoaWxlIHRoZSByZWR1Y2VyIGlzIGV4ZWN1dGluZy4gJyArICdJZiB5b3Ugd291bGQgbGlrZSB0byBiZSBub3RpZmllZCBhZnRlciB0aGUgc3RvcmUgaGFzIGJlZW4gdXBkYXRlZCwgc3Vic2NyaWJlIGZyb20gYSAnICsgJ2NvbXBvbmVudCBhbmQgaW52b2tlIHN0b3JlLmdldFN0YXRlKCkgaW4gdGhlIGNhbGxiYWNrIHRvIGFjY2VzcyB0aGUgbGF0ZXN0IHN0YXRlLiAnICsgJ1NlZSBodHRwczovL3JlZHV4LmpzLm9yZy9hcGktcmVmZXJlbmNlL3N0b3JlI3N1YnNjcmliZShsaXN0ZW5lcikgZm9yIG1vcmUgZGV0YWlscy4nKTtcbiAgICB9XG5cbiAgICB2YXIgaXNTdWJzY3JpYmVkID0gdHJ1ZTtcblxuICAgIGVuc3VyZUNhbk11dGF0ZU5leHRMaXN0ZW5lcnMoKTtcbiAgICBuZXh0TGlzdGVuZXJzLnB1c2gobGlzdGVuZXIpO1xuXG4gICAgcmV0dXJuIGZ1bmN0aW9uIHVuc3Vic2NyaWJlKCkge1xuICAgICAgaWYgKCFpc1N1YnNjcmliZWQpIHtcbiAgICAgICAgcmV0dXJuO1xuICAgICAgfVxuXG4gICAgICBpZiAoaXNEaXNwYXRjaGluZykge1xuICAgICAgICB0aHJvdyBuZXcgRXJyb3IoJ1lvdSBtYXkgbm90IHVuc3Vic2NyaWJlIGZyb20gYSBzdG9yZSBsaXN0ZW5lciB3aGlsZSB0aGUgcmVkdWNlciBpcyBleGVjdXRpbmcuICcgKyAnU2VlIGh0dHBzOi8vcmVkdXguanMub3JnL2FwaS1yZWZlcmVuY2Uvc3RvcmUjc3Vic2NyaWJlKGxpc3RlbmVyKSBmb3IgbW9yZSBkZXRhaWxzLicpO1xuICAgICAgfVxuXG4gICAgICBpc1N1YnNjcmliZWQgPSBmYWxzZTtcblxuICAgICAgZW5zdXJlQ2FuTXV0YXRlTmV4dExpc3RlbmVycygpO1xuICAgICAgdmFyIGluZGV4ID0gbmV4dExpc3RlbmVycy5pbmRleE9mKGxpc3RlbmVyKTtcbiAgICAgIG5leHRMaXN0ZW5lcnMuc3BsaWNlKGluZGV4LCAxKTtcbiAgICB9O1xuICB9XG5cbiAgLyoqXG4gICAqIERpc3BhdGNoZXMgYW4gYWN0aW9uLiBJdCBpcyB0aGUgb25seSB3YXkgdG8gdHJpZ2dlciBhIHN0YXRlIGNoYW5nZS5cbiAgICpcbiAgICogVGhlIGByZWR1Y2VyYCBmdW5jdGlvbiwgdXNlZCB0byBjcmVhdGUgdGhlIHN0b3JlLCB3aWxsIGJlIGNhbGxlZCB3aXRoIHRoZVxuICAgKiBjdXJyZW50IHN0YXRlIHRyZWUgYW5kIHRoZSBnaXZlbiBgYWN0aW9uYC4gSXRzIHJldHVybiB2YWx1ZSB3aWxsXG4gICAqIGJlIGNvbnNpZGVyZWQgdGhlICoqbmV4dCoqIHN0YXRlIG9mIHRoZSB0cmVlLCBhbmQgdGhlIGNoYW5nZSBsaXN0ZW5lcnNcbiAgICogd2lsbCBiZSBub3RpZmllZC5cbiAgICpcbiAgICogVGhlIGJhc2UgaW1wbGVtZW50YXRpb24gb25seSBzdXBwb3J0cyBwbGFpbiBvYmplY3QgYWN0aW9ucy4gSWYgeW91IHdhbnQgdG9cbiAgICogZGlzcGF0Y2ggYSBQcm9taXNlLCBhbiBPYnNlcnZhYmxlLCBhIHRodW5rLCBvciBzb21ldGhpbmcgZWxzZSwgeW91IG5lZWQgdG9cbiAgICogd3JhcCB5b3VyIHN0b3JlIGNyZWF0aW5nIGZ1bmN0aW9uIGludG8gdGhlIGNvcnJlc3BvbmRpbmcgbWlkZGxld2FyZS4gRm9yXG4gICAqIGV4YW1wbGUsIHNlZSB0aGUgZG9jdW1lbnRhdGlvbiBmb3IgdGhlIGByZWR1eC10aHVua2AgcGFja2FnZS4gRXZlbiB0aGVcbiAgICogbWlkZGxld2FyZSB3aWxsIGV2ZW50dWFsbHkgZGlzcGF0Y2ggcGxhaW4gb2JqZWN0IGFjdGlvbnMgdXNpbmcgdGhpcyBtZXRob2QuXG4gICAqXG4gICAqIEBwYXJhbSB7T2JqZWN0fSBhY3Rpb24gQSBwbGFpbiBvYmplY3QgcmVwcmVzZW50aW5nIOKAnHdoYXQgY2hhbmdlZOKAnS4gSXQgaXNcbiAgICogYSBnb29kIGlkZWEgdG8ga2VlcCBhY3Rpb25zIHNlcmlhbGl6YWJsZSBzbyB5b3UgY2FuIHJlY29yZCBhbmQgcmVwbGF5IHVzZXJcbiAgICogc2Vzc2lvbnMsIG9yIHVzZSB0aGUgdGltZSB0cmF2ZWxsaW5nIGByZWR1eC1kZXZ0b29sc2AuIEFuIGFjdGlvbiBtdXN0IGhhdmVcbiAgICogYSBgdHlwZWAgcHJvcGVydHkgd2hpY2ggbWF5IG5vdCBiZSBgdW5kZWZpbmVkYC4gSXQgaXMgYSBnb29kIGlkZWEgdG8gdXNlXG4gICAqIHN0cmluZyBjb25zdGFudHMgZm9yIGFjdGlvbiB0eXBlcy5cbiAgICpcbiAgICogQHJldHVybnMge09iamVjdH0gRm9yIGNvbnZlbmllbmNlLCB0aGUgc2FtZSBhY3Rpb24gb2JqZWN0IHlvdSBkaXNwYXRjaGVkLlxuICAgKlxuICAgKiBOb3RlIHRoYXQsIGlmIHlvdSB1c2UgYSBjdXN0b20gbWlkZGxld2FyZSwgaXQgbWF5IHdyYXAgYGRpc3BhdGNoKClgIHRvXG4gICAqIHJldHVybiBzb21ldGhpbmcgZWxzZSAoZm9yIGV4YW1wbGUsIGEgUHJvbWlzZSB5b3UgY2FuIGF3YWl0KS5cbiAgICovXG4gIGZ1bmN0aW9uIGRpc3BhdGNoKGFjdGlvbikge1xuICAgIGlmICghaXNQbGFpbk9iamVjdChhY3Rpb24pKSB7XG4gICAgICB0aHJvdyBuZXcgRXJyb3IoJ0FjdGlvbnMgbXVzdCBiZSBwbGFpbiBvYmplY3RzLiAnICsgJ1VzZSBjdXN0b20gbWlkZGxld2FyZSBmb3IgYXN5bmMgYWN0aW9ucy4nKTtcbiAgICB9XG5cbiAgICBpZiAodHlwZW9mIGFjdGlvbi50eXBlID09PSAndW5kZWZpbmVkJykge1xuICAgICAgdGhyb3cgbmV3IEVycm9yKCdBY3Rpb25zIG1heSBub3QgaGF2ZSBhbiB1bmRlZmluZWQgXCJ0eXBlXCIgcHJvcGVydHkuICcgKyAnSGF2ZSB5b3UgbWlzc3BlbGxlZCBhIGNvbnN0YW50PycpO1xuICAgIH1cblxuICAgIGlmIChpc0Rpc3BhdGNoaW5nKSB7XG4gICAgICB0aHJvdyBuZXcgRXJyb3IoJ1JlZHVjZXJzIG1heSBub3QgZGlzcGF0Y2ggYWN0aW9ucy4nKTtcbiAgICB9XG5cbiAgICB0cnkge1xuICAgICAgaXNEaXNwYXRjaGluZyA9IHRydWU7XG4gICAgICBjdXJyZW50U3RhdGUgPSBjdXJyZW50UmVkdWNlcihjdXJyZW50U3RhdGUsIGFjdGlvbik7XG4gICAgfSBmaW5hbGx5IHtcbiAgICAgIGlzRGlzcGF0Y2hpbmcgPSBmYWxzZTtcbiAgICB9XG5cbiAgICB2YXIgbGlzdGVuZXJzID0gY3VycmVudExpc3RlbmVycyA9IG5leHRMaXN0ZW5lcnM7XG4gICAgZm9yICh2YXIgaSA9IDA7IGkgPCBsaXN0ZW5lcnMubGVuZ3RoOyBpKyspIHtcbiAgICAgIHZhciBsaXN0ZW5lciA9IGxpc3RlbmVyc1tpXTtcbiAgICAgIGxpc3RlbmVyKCk7XG4gICAgfVxuXG4gICAgcmV0dXJuIGFjdGlvbjtcbiAgfVxuXG4gIC8qKlxuICAgKiBSZXBsYWNlcyB0aGUgcmVkdWNlciBjdXJyZW50bHkgdXNlZCBieSB0aGUgc3RvcmUgdG8gY2FsY3VsYXRlIHRoZSBzdGF0ZS5cbiAgICpcbiAgICogWW91IG1pZ2h0IG5lZWQgdGhpcyBpZiB5b3VyIGFwcCBpbXBsZW1lbnRzIGNvZGUgc3BsaXR0aW5nIGFuZCB5b3Ugd2FudCB0b1xuICAgKiBsb2FkIHNvbWUgb2YgdGhlIHJlZHVjZXJzIGR5bmFtaWNhbGx5LiBZb3UgbWlnaHQgYWxzbyBuZWVkIHRoaXMgaWYgeW91XG4gICAqIGltcGxlbWVudCBhIGhvdCByZWxvYWRpbmcgbWVjaGFuaXNtIGZvciBSZWR1eC5cbiAgICpcbiAgICogQHBhcmFtIHtGdW5jdGlvbn0gbmV4dFJlZHVjZXIgVGhlIHJlZHVjZXIgZm9yIHRoZSBzdG9yZSB0byB1c2UgaW5zdGVhZC5cbiAgICogQHJldHVybnMge3ZvaWR9XG4gICAqL1xuICBmdW5jdGlvbiByZXBsYWNlUmVkdWNlcihuZXh0UmVkdWNlcikge1xuICAgIGlmICh0eXBlb2YgbmV4dFJlZHVjZXIgIT09ICdmdW5jdGlvbicpIHtcbiAgICAgIHRocm93IG5ldyBFcnJvcignRXhwZWN0ZWQgdGhlIG5leHRSZWR1Y2VyIHRvIGJlIGEgZnVuY3Rpb24uJyk7XG4gICAgfVxuXG4gICAgY3VycmVudFJlZHVjZXIgPSBuZXh0UmVkdWNlcjtcbiAgICBkaXNwYXRjaCh7IHR5cGU6IEFjdGlvblR5cGVzLlJFUExBQ0UgfSk7XG4gIH1cblxuICAvKipcbiAgICogSW50ZXJvcGVyYWJpbGl0eSBwb2ludCBmb3Igb2JzZXJ2YWJsZS9yZWFjdGl2ZSBsaWJyYXJpZXMuXG4gICAqIEByZXR1cm5zIHtvYnNlcnZhYmxlfSBBIG1pbmltYWwgb2JzZXJ2YWJsZSBvZiBzdGF0ZSBjaGFuZ2VzLlxuICAgKiBGb3IgbW9yZSBpbmZvcm1hdGlvbiwgc2VlIHRoZSBvYnNlcnZhYmxlIHByb3Bvc2FsOlxuICAgKiBodHRwczovL2dpdGh1Yi5jb20vdGMzOS9wcm9wb3NhbC1vYnNlcnZhYmxlXG4gICAqL1xuICBmdW5jdGlvbiBvYnNlcnZhYmxlKCkge1xuICAgIHZhciBfcmVmO1xuXG4gICAgdmFyIG91dGVyU3Vic2NyaWJlID0gc3Vic2NyaWJlO1xuICAgIHJldHVybiBfcmVmID0ge1xuICAgICAgLyoqXG4gICAgICAgKiBUaGUgbWluaW1hbCBvYnNlcnZhYmxlIHN1YnNjcmlwdGlvbiBtZXRob2QuXG4gICAgICAgKiBAcGFyYW0ge09iamVjdH0gb2JzZXJ2ZXIgQW55IG9iamVjdCB0aGF0IGNhbiBiZSB1c2VkIGFzIGFuIG9ic2VydmVyLlxuICAgICAgICogVGhlIG9ic2VydmVyIG9iamVjdCBzaG91bGQgaGF2ZSBhIGBuZXh0YCBtZXRob2QuXG4gICAgICAgKiBAcmV0dXJucyB7c3Vic2NyaXB0aW9ufSBBbiBvYmplY3Qgd2l0aCBhbiBgdW5zdWJzY3JpYmVgIG1ldGhvZCB0aGF0IGNhblxuICAgICAgICogYmUgdXNlZCB0byB1bnN1YnNjcmliZSB0aGUgb2JzZXJ2YWJsZSBmcm9tIHRoZSBzdG9yZSwgYW5kIHByZXZlbnQgZnVydGhlclxuICAgICAgICogZW1pc3Npb24gb2YgdmFsdWVzIGZyb20gdGhlIG9ic2VydmFibGUuXG4gICAgICAgKi9cbiAgICAgIHN1YnNjcmliZTogZnVuY3Rpb24gc3Vic2NyaWJlKG9ic2VydmVyKSB7XG4gICAgICAgIGlmICgodHlwZW9mIG9ic2VydmVyID09PSAndW5kZWZpbmVkJyA/ICd1bmRlZmluZWQnIDogX3R5cGVvZihvYnNlcnZlcikpICE9PSAnb2JqZWN0JyB8fCBvYnNlcnZlciA9PT0gbnVsbCkge1xuICAgICAgICAgIHRocm93IG5ldyBUeXBlRXJyb3IoJ0V4cGVjdGVkIHRoZSBvYnNlcnZlciB0byBiZSBhbiBvYmplY3QuJyk7XG4gICAgICAgIH1cblxuICAgICAgICBmdW5jdGlvbiBvYnNlcnZlU3RhdGUoKSB7XG4gICAgICAgICAgaWYgKG9ic2VydmVyLm5leHQpIHtcbiAgICAgICAgICAgIG9ic2VydmVyLm5leHQoZ2V0U3RhdGUoKSk7XG4gICAgICAgICAgfVxuICAgICAgICB9XG5cbiAgICAgICAgb2JzZXJ2ZVN0YXRlKCk7XG4gICAgICAgIHZhciB1bnN1YnNjcmliZSA9IG91dGVyU3Vic2NyaWJlKG9ic2VydmVTdGF0ZSk7XG4gICAgICAgIHJldHVybiB7IHVuc3Vic2NyaWJlOiB1bnN1YnNjcmliZSB9O1xuICAgICAgfVxuICAgIH0sIF9yZWZbJCRvYnNlcnZhYmxlXSA9IGZ1bmN0aW9uICgpIHtcbiAgICAgIHJldHVybiB0aGlzO1xuICAgIH0sIF9yZWY7XG4gIH1cblxuICAvLyBXaGVuIGEgc3RvcmUgaXMgY3JlYXRlZCwgYW4gXCJJTklUXCIgYWN0aW9uIGlzIGRpc3BhdGNoZWQgc28gdGhhdCBldmVyeVxuICAvLyByZWR1Y2VyIHJldHVybnMgdGhlaXIgaW5pdGlhbCBzdGF0ZS4gVGhpcyBlZmZlY3RpdmVseSBwb3B1bGF0ZXNcbiAgLy8gdGhlIGluaXRpYWwgc3RhdGUgdHJlZS5cbiAgZGlzcGF0Y2goeyB0eXBlOiBBY3Rpb25UeXBlcy5JTklUIH0pO1xuXG4gIHJldHVybiBfcmVmMiA9IHtcbiAgICBkaXNwYXRjaDogZGlzcGF0Y2gsXG4gICAgc3Vic2NyaWJlOiBzdWJzY3JpYmUsXG4gICAgZ2V0U3RhdGU6IGdldFN0YXRlLFxuICAgIHJlcGxhY2VSZWR1Y2VyOiByZXBsYWNlUmVkdWNlclxuICB9LCBfcmVmMlskJG9ic2VydmFibGVdID0gb2JzZXJ2YWJsZSwgX3JlZjI7XG59XG5cbi8qKlxuICogUHJpbnRzIGEgd2FybmluZyBpbiB0aGUgY29uc29sZSBpZiBpdCBleGlzdHMuXG4gKlxuICogQHBhcmFtIHtTdHJpbmd9IG1lc3NhZ2UgVGhlIHdhcm5pbmcgbWVzc2FnZS5cbiAqIEByZXR1cm5zIHt2b2lkfVxuICovXG5mdW5jdGlvbiB3YXJuaW5nKG1lc3NhZ2UpIHtcbiAgLyogZXNsaW50LWRpc2FibGUgbm8tY29uc29sZSAqL1xuICBpZiAodHlwZW9mIGNvbnNvbGUgIT09ICd1bmRlZmluZWQnICYmIHR5cGVvZiBjb25zb2xlLmVycm9yID09PSAnZnVuY3Rpb24nKSB7XG4gICAgY29uc29sZS5lcnJvcihtZXNzYWdlKTtcbiAgfVxuICAvKiBlc2xpbnQtZW5hYmxlIG5vLWNvbnNvbGUgKi9cbiAgdHJ5IHtcbiAgICAvLyBUaGlzIGVycm9yIHdhcyB0aHJvd24gYXMgYSBjb252ZW5pZW5jZSBzbyB0aGF0IGlmIHlvdSBlbmFibGVcbiAgICAvLyBcImJyZWFrIG9uIGFsbCBleGNlcHRpb25zXCIgaW4geW91ciBjb25zb2xlLFxuICAgIC8vIGl0IHdvdWxkIHBhdXNlIHRoZSBleGVjdXRpb24gYXQgdGhpcyBsaW5lLlxuICAgIHRocm93IG5ldyBFcnJvcihtZXNzYWdlKTtcbiAgfSBjYXRjaCAoZSkge30gLy8gZXNsaW50LWRpc2FibGUtbGluZSBuby1lbXB0eVxufVxuXG5mdW5jdGlvbiBnZXRVbmRlZmluZWRTdGF0ZUVycm9yTWVzc2FnZShrZXksIGFjdGlvbikge1xuICB2YXIgYWN0aW9uVHlwZSA9IGFjdGlvbiAmJiBhY3Rpb24udHlwZTtcbiAgdmFyIGFjdGlvbkRlc2NyaXB0aW9uID0gYWN0aW9uVHlwZSAmJiAnYWN0aW9uIFwiJyArIFN0cmluZyhhY3Rpb25UeXBlKSArICdcIicgfHwgJ2FuIGFjdGlvbic7XG5cbiAgcmV0dXJuICdHaXZlbiAnICsgYWN0aW9uRGVzY3JpcHRpb24gKyAnLCByZWR1Y2VyIFwiJyArIGtleSArICdcIiByZXR1cm5lZCB1bmRlZmluZWQuICcgKyAnVG8gaWdub3JlIGFuIGFjdGlvbiwgeW91IG11c3QgZXhwbGljaXRseSByZXR1cm4gdGhlIHByZXZpb3VzIHN0YXRlLiAnICsgJ0lmIHlvdSB3YW50IHRoaXMgcmVkdWNlciB0byBob2xkIG5vIHZhbHVlLCB5b3UgY2FuIHJldHVybiBudWxsIGluc3RlYWQgb2YgdW5kZWZpbmVkLic7XG59XG5cbmZ1bmN0aW9uIGdldFVuZXhwZWN0ZWRTdGF0ZVNoYXBlV2FybmluZ01lc3NhZ2UoaW5wdXRTdGF0ZSwgcmVkdWNlcnMsIGFjdGlvbiwgdW5leHBlY3RlZEtleUNhY2hlKSB7XG4gIHZhciByZWR1Y2VyS2V5cyA9IE9iamVjdC5rZXlzKHJlZHVjZXJzKTtcbiAgdmFyIGFyZ3VtZW50TmFtZSA9IGFjdGlvbiAmJiBhY3Rpb24udHlwZSA9PT0gQWN0aW9uVHlwZXMuSU5JVCA/ICdwcmVsb2FkZWRTdGF0ZSBhcmd1bWVudCBwYXNzZWQgdG8gY3JlYXRlU3RvcmUnIDogJ3ByZXZpb3VzIHN0YXRlIHJlY2VpdmVkIGJ5IHRoZSByZWR1Y2VyJztcblxuICBpZiAocmVkdWNlcktleXMubGVuZ3RoID09PSAwKSB7XG4gICAgcmV0dXJuICdTdG9yZSBkb2VzIG5vdCBoYXZlIGEgdmFsaWQgcmVkdWNlci4gTWFrZSBzdXJlIHRoZSBhcmd1bWVudCBwYXNzZWQgJyArICd0byBjb21iaW5lUmVkdWNlcnMgaXMgYW4gb2JqZWN0IHdob3NlIHZhbHVlcyBhcmUgcmVkdWNlcnMuJztcbiAgfVxuXG4gIGlmICghaXNQbGFpbk9iamVjdChpbnB1dFN0YXRlKSkge1xuICAgIHJldHVybiAnVGhlICcgKyBhcmd1bWVudE5hbWUgKyAnIGhhcyB1bmV4cGVjdGVkIHR5cGUgb2YgXCInICsge30udG9TdHJpbmcuY2FsbChpbnB1dFN0YXRlKS5tYXRjaCgvXFxzKFthLXp8QS1aXSspLylbMV0gKyAnXCIuIEV4cGVjdGVkIGFyZ3VtZW50IHRvIGJlIGFuIG9iamVjdCB3aXRoIHRoZSBmb2xsb3dpbmcgJyArICgna2V5czogXCInICsgcmVkdWNlcktleXMuam9pbignXCIsIFwiJykgKyAnXCInKTtcbiAgfVxuXG4gIHZhciB1bmV4cGVjdGVkS2V5cyA9IE9iamVjdC5rZXlzKGlucHV0U3RhdGUpLmZpbHRlcihmdW5jdGlvbiAoa2V5KSB7XG4gICAgcmV0dXJuICFyZWR1Y2Vycy5oYXNPd25Qcm9wZXJ0eShrZXkpICYmICF1bmV4cGVjdGVkS2V5Q2FjaGVba2V5XTtcbiAgfSk7XG5cbiAgdW5leHBlY3RlZEtleXMuZm9yRWFjaChmdW5jdGlvbiAoa2V5KSB7XG4gICAgdW5leHBlY3RlZEtleUNhY2hlW2tleV0gPSB0cnVlO1xuICB9KTtcblxuICBpZiAoYWN0aW9uICYmIGFjdGlvbi50eXBlID09PSBBY3Rpb25UeXBlcy5SRVBMQUNFKSByZXR1cm47XG5cbiAgaWYgKHVuZXhwZWN0ZWRLZXlzLmxlbmd0aCA+IDApIHtcbiAgICByZXR1cm4gJ1VuZXhwZWN0ZWQgJyArICh1bmV4cGVjdGVkS2V5cy5sZW5ndGggPiAxID8gJ2tleXMnIDogJ2tleScpICsgJyAnICsgKCdcIicgKyB1bmV4cGVjdGVkS2V5cy5qb2luKCdcIiwgXCInKSArICdcIiBmb3VuZCBpbiAnICsgYXJndW1lbnROYW1lICsgJy4gJykgKyAnRXhwZWN0ZWQgdG8gZmluZCBvbmUgb2YgdGhlIGtub3duIHJlZHVjZXIga2V5cyBpbnN0ZWFkOiAnICsgKCdcIicgKyByZWR1Y2VyS2V5cy5qb2luKCdcIiwgXCInKSArICdcIi4gVW5leHBlY3RlZCBrZXlzIHdpbGwgYmUgaWdub3JlZC4nKTtcbiAgfVxufVxuXG5mdW5jdGlvbiBhc3NlcnRSZWR1Y2VyU2hhcGUocmVkdWNlcnMpIHtcbiAgT2JqZWN0LmtleXMocmVkdWNlcnMpLmZvckVhY2goZnVuY3Rpb24gKGtleSkge1xuICAgIHZhciByZWR1Y2VyID0gcmVkdWNlcnNba2V5XTtcbiAgICB2YXIgaW5pdGlhbFN0YXRlID0gcmVkdWNlcih1bmRlZmluZWQsIHsgdHlwZTogQWN0aW9uVHlwZXMuSU5JVCB9KTtcblxuICAgIGlmICh0eXBlb2YgaW5pdGlhbFN0YXRlID09PSAndW5kZWZpbmVkJykge1xuICAgICAgdGhyb3cgbmV3IEVycm9yKCdSZWR1Y2VyIFwiJyArIGtleSArICdcIiByZXR1cm5lZCB1bmRlZmluZWQgZHVyaW5nIGluaXRpYWxpemF0aW9uLiAnICsgJ0lmIHRoZSBzdGF0ZSBwYXNzZWQgdG8gdGhlIHJlZHVjZXIgaXMgdW5kZWZpbmVkLCB5b3UgbXVzdCAnICsgJ2V4cGxpY2l0bHkgcmV0dXJuIHRoZSBpbml0aWFsIHN0YXRlLiBUaGUgaW5pdGlhbCBzdGF0ZSBtYXkgJyArICdub3QgYmUgdW5kZWZpbmVkLiBJZiB5b3UgZG9uXFwndCB3YW50IHRvIHNldCBhIHZhbHVlIGZvciB0aGlzIHJlZHVjZXIsICcgKyAneW91IGNhbiB1c2UgbnVsbCBpbnN0ZWFkIG9mIHVuZGVmaW5lZC4nKTtcbiAgICB9XG5cbiAgICB2YXIgdHlwZSA9ICdAQHJlZHV4L1BST0JFX1VOS05PV05fQUNUSU9OXycgKyBNYXRoLnJhbmRvbSgpLnRvU3RyaW5nKDM2KS5zdWJzdHJpbmcoNykuc3BsaXQoJycpLmpvaW4oJy4nKTtcbiAgICBpZiAodHlwZW9mIHJlZHVjZXIodW5kZWZpbmVkLCB7IHR5cGU6IHR5cGUgfSkgPT09ICd1bmRlZmluZWQnKSB7XG4gICAgICB0aHJvdyBuZXcgRXJyb3IoJ1JlZHVjZXIgXCInICsga2V5ICsgJ1wiIHJldHVybmVkIHVuZGVmaW5lZCB3aGVuIHByb2JlZCB3aXRoIGEgcmFuZG9tIHR5cGUuICcgKyAoJ0RvblxcJ3QgdHJ5IHRvIGhhbmRsZSAnICsgQWN0aW9uVHlwZXMuSU5JVCArICcgb3Igb3RoZXIgYWN0aW9ucyBpbiBcInJlZHV4LypcIiAnKSArICduYW1lc3BhY2UuIFRoZXkgYXJlIGNvbnNpZGVyZWQgcHJpdmF0ZS4gSW5zdGVhZCwgeW91IG11c3QgcmV0dXJuIHRoZSAnICsgJ2N1cnJlbnQgc3RhdGUgZm9yIGFueSB1bmtub3duIGFjdGlvbnMsIHVubGVzcyBpdCBpcyB1bmRlZmluZWQsICcgKyAnaW4gd2hpY2ggY2FzZSB5b3UgbXVzdCByZXR1cm4gdGhlIGluaXRpYWwgc3RhdGUsIHJlZ2FyZGxlc3Mgb2YgdGhlICcgKyAnYWN0aW9uIHR5cGUuIFRoZSBpbml0aWFsIHN0YXRlIG1heSBub3QgYmUgdW5kZWZpbmVkLCBidXQgY2FuIGJlIG51bGwuJyk7XG4gICAgfVxuICB9KTtcbn1cblxuLyoqXG4gKiBUdXJucyBhbiBvYmplY3Qgd2hvc2UgdmFsdWVzIGFyZSBkaWZmZXJlbnQgcmVkdWNlciBmdW5jdGlvbnMsIGludG8gYSBzaW5nbGVcbiAqIHJlZHVjZXIgZnVuY3Rpb24uIEl0IHdpbGwgY2FsbCBldmVyeSBjaGlsZCByZWR1Y2VyLCBhbmQgZ2F0aGVyIHRoZWlyIHJlc3VsdHNcbiAqIGludG8gYSBzaW5nbGUgc3RhdGUgb2JqZWN0LCB3aG9zZSBrZXlzIGNvcnJlc3BvbmQgdG8gdGhlIGtleXMgb2YgdGhlIHBhc3NlZFxuICogcmVkdWNlciBmdW5jdGlvbnMuXG4gKlxuICogQHBhcmFtIHtPYmplY3R9IHJlZHVjZXJzIEFuIG9iamVjdCB3aG9zZSB2YWx1ZXMgY29ycmVzcG9uZCB0byBkaWZmZXJlbnRcbiAqIHJlZHVjZXIgZnVuY3Rpb25zIHRoYXQgbmVlZCB0byBiZSBjb21iaW5lZCBpbnRvIG9uZS4gT25lIGhhbmR5IHdheSB0byBvYnRhaW5cbiAqIGl0IGlzIHRvIHVzZSBFUzYgYGltcG9ydCAqIGFzIHJlZHVjZXJzYCBzeW50YXguIFRoZSByZWR1Y2VycyBtYXkgbmV2ZXIgcmV0dXJuXG4gKiB1bmRlZmluZWQgZm9yIGFueSBhY3Rpb24uIEluc3RlYWQsIHRoZXkgc2hvdWxkIHJldHVybiB0aGVpciBpbml0aWFsIHN0YXRlXG4gKiBpZiB0aGUgc3RhdGUgcGFzc2VkIHRvIHRoZW0gd2FzIHVuZGVmaW5lZCwgYW5kIHRoZSBjdXJyZW50IHN0YXRlIGZvciBhbnlcbiAqIHVucmVjb2duaXplZCBhY3Rpb24uXG4gKlxuICogQHJldHVybnMge0Z1bmN0aW9ufSBBIHJlZHVjZXIgZnVuY3Rpb24gdGhhdCBpbnZva2VzIGV2ZXJ5IHJlZHVjZXIgaW5zaWRlIHRoZVxuICogcGFzc2VkIG9iamVjdCwgYW5kIGJ1aWxkcyBhIHN0YXRlIG9iamVjdCB3aXRoIHRoZSBzYW1lIHNoYXBlLlxuICovXG5mdW5jdGlvbiBjb21iaW5lUmVkdWNlcnMocmVkdWNlcnMpIHtcbiAgdmFyIHJlZHVjZXJLZXlzID0gT2JqZWN0LmtleXMocmVkdWNlcnMpO1xuICB2YXIgZmluYWxSZWR1Y2VycyA9IHt9O1xuICBmb3IgKHZhciBpID0gMDsgaSA8IHJlZHVjZXJLZXlzLmxlbmd0aDsgaSsrKSB7XG4gICAgdmFyIGtleSA9IHJlZHVjZXJLZXlzW2ldO1xuXG4gICAgaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicpIHtcbiAgICAgIGlmICh0eXBlb2YgcmVkdWNlcnNba2V5XSA9PT0gJ3VuZGVmaW5lZCcpIHtcbiAgICAgICAgd2FybmluZygnTm8gcmVkdWNlciBwcm92aWRlZCBmb3Iga2V5IFwiJyArIGtleSArICdcIicpO1xuICAgICAgfVxuICAgIH1cblxuICAgIGlmICh0eXBlb2YgcmVkdWNlcnNba2V5XSA9PT0gJ2Z1bmN0aW9uJykge1xuICAgICAgZmluYWxSZWR1Y2Vyc1trZXldID0gcmVkdWNlcnNba2V5XTtcbiAgICB9XG4gIH1cbiAgdmFyIGZpbmFsUmVkdWNlcktleXMgPSBPYmplY3Qua2V5cyhmaW5hbFJlZHVjZXJzKTtcblxuICB2YXIgdW5leHBlY3RlZEtleUNhY2hlID0gdm9pZCAwO1xuICBpZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJykge1xuICAgIHVuZXhwZWN0ZWRLZXlDYWNoZSA9IHt9O1xuICB9XG5cbiAgdmFyIHNoYXBlQXNzZXJ0aW9uRXJyb3IgPSB2b2lkIDA7XG4gIHRyeSB7XG4gICAgYXNzZXJ0UmVkdWNlclNoYXBlKGZpbmFsUmVkdWNlcnMpO1xuICB9IGNhdGNoIChlKSB7XG4gICAgc2hhcGVBc3NlcnRpb25FcnJvciA9IGU7XG4gIH1cblxuICByZXR1cm4gZnVuY3Rpb24gY29tYmluYXRpb24oKSB7XG4gICAgdmFyIHN0YXRlID0gYXJndW1lbnRzLmxlbmd0aCA+IDAgJiYgYXJndW1lbnRzWzBdICE9PSB1bmRlZmluZWQgPyBhcmd1bWVudHNbMF0gOiB7fTtcbiAgICB2YXIgYWN0aW9uID0gYXJndW1lbnRzWzFdO1xuXG4gICAgaWYgKHNoYXBlQXNzZXJ0aW9uRXJyb3IpIHtcbiAgICAgIHRocm93IHNoYXBlQXNzZXJ0aW9uRXJyb3I7XG4gICAgfVxuXG4gICAgaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicpIHtcbiAgICAgIHZhciB3YXJuaW5nTWVzc2FnZSA9IGdldFVuZXhwZWN0ZWRTdGF0ZVNoYXBlV2FybmluZ01lc3NhZ2Uoc3RhdGUsIGZpbmFsUmVkdWNlcnMsIGFjdGlvbiwgdW5leHBlY3RlZEtleUNhY2hlKTtcbiAgICAgIGlmICh3YXJuaW5nTWVzc2FnZSkge1xuICAgICAgICB3YXJuaW5nKHdhcm5pbmdNZXNzYWdlKTtcbiAgICAgIH1cbiAgICB9XG5cbiAgICB2YXIgaGFzQ2hhbmdlZCA9IGZhbHNlO1xuICAgIHZhciBuZXh0U3RhdGUgPSB7fTtcbiAgICBmb3IgKHZhciBfaSA9IDA7IF9pIDwgZmluYWxSZWR1Y2VyS2V5cy5sZW5ndGg7IF9pKyspIHtcbiAgICAgIHZhciBfa2V5ID0gZmluYWxSZWR1Y2VyS2V5c1tfaV07XG4gICAgICB2YXIgcmVkdWNlciA9IGZpbmFsUmVkdWNlcnNbX2tleV07XG4gICAgICB2YXIgcHJldmlvdXNTdGF0ZUZvcktleSA9IHN0YXRlW19rZXldO1xuICAgICAgdmFyIG5leHRTdGF0ZUZvcktleSA9IHJlZHVjZXIocHJldmlvdXNTdGF0ZUZvcktleSwgYWN0aW9uKTtcbiAgICAgIGlmICh0eXBlb2YgbmV4dFN0YXRlRm9yS2V5ID09PSAndW5kZWZpbmVkJykge1xuICAgICAgICB2YXIgZXJyb3JNZXNzYWdlID0gZ2V0VW5kZWZpbmVkU3RhdGVFcnJvck1lc3NhZ2UoX2tleSwgYWN0aW9uKTtcbiAgICAgICAgdGhyb3cgbmV3IEVycm9yKGVycm9yTWVzc2FnZSk7XG4gICAgICB9XG4gICAgICBuZXh0U3RhdGVbX2tleV0gPSBuZXh0U3RhdGVGb3JLZXk7XG4gICAgICBoYXNDaGFuZ2VkID0gaGFzQ2hhbmdlZCB8fCBuZXh0U3RhdGVGb3JLZXkgIT09IHByZXZpb3VzU3RhdGVGb3JLZXk7XG4gICAgfVxuICAgIHJldHVybiBoYXNDaGFuZ2VkID8gbmV4dFN0YXRlIDogc3RhdGU7XG4gIH07XG59XG5cbmZ1bmN0aW9uIGJpbmRBY3Rpb25DcmVhdG9yKGFjdGlvbkNyZWF0b3IsIGRpc3BhdGNoKSB7XG4gIHJldHVybiBmdW5jdGlvbiAoKSB7XG4gICAgcmV0dXJuIGRpc3BhdGNoKGFjdGlvbkNyZWF0b3IuYXBwbHkodGhpcywgYXJndW1lbnRzKSk7XG4gIH07XG59XG5cbi8qKlxuICogVHVybnMgYW4gb2JqZWN0IHdob3NlIHZhbHVlcyBhcmUgYWN0aW9uIGNyZWF0b3JzLCBpbnRvIGFuIG9iamVjdCB3aXRoIHRoZVxuICogc2FtZSBrZXlzLCBidXQgd2l0aCBldmVyeSBmdW5jdGlvbiB3cmFwcGVkIGludG8gYSBgZGlzcGF0Y2hgIGNhbGwgc28gdGhleVxuICogbWF5IGJlIGludm9rZWQgZGlyZWN0bHkuIFRoaXMgaXMganVzdCBhIGNvbnZlbmllbmNlIG1ldGhvZCwgYXMgeW91IGNhbiBjYWxsXG4gKiBgc3RvcmUuZGlzcGF0Y2goTXlBY3Rpb25DcmVhdG9ycy5kb1NvbWV0aGluZygpKWAgeW91cnNlbGYganVzdCBmaW5lLlxuICpcbiAqIEZvciBjb252ZW5pZW5jZSwgeW91IGNhbiBhbHNvIHBhc3MgYSBzaW5nbGUgZnVuY3Rpb24gYXMgdGhlIGZpcnN0IGFyZ3VtZW50LFxuICogYW5kIGdldCBhIGZ1bmN0aW9uIGluIHJldHVybi5cbiAqXG4gKiBAcGFyYW0ge0Z1bmN0aW9ufE9iamVjdH0gYWN0aW9uQ3JlYXRvcnMgQW4gb2JqZWN0IHdob3NlIHZhbHVlcyBhcmUgYWN0aW9uXG4gKiBjcmVhdG9yIGZ1bmN0aW9ucy4gT25lIGhhbmR5IHdheSB0byBvYnRhaW4gaXQgaXMgdG8gdXNlIEVTNiBgaW1wb3J0ICogYXNgXG4gKiBzeW50YXguIFlvdSBtYXkgYWxzbyBwYXNzIGEgc2luZ2xlIGZ1bmN0aW9uLlxuICpcbiAqIEBwYXJhbSB7RnVuY3Rpb259IGRpc3BhdGNoIFRoZSBgZGlzcGF0Y2hgIGZ1bmN0aW9uIGF2YWlsYWJsZSBvbiB5b3VyIFJlZHV4XG4gKiBzdG9yZS5cbiAqXG4gKiBAcmV0dXJucyB7RnVuY3Rpb258T2JqZWN0fSBUaGUgb2JqZWN0IG1pbWlja2luZyB0aGUgb3JpZ2luYWwgb2JqZWN0LCBidXQgd2l0aFxuICogZXZlcnkgYWN0aW9uIGNyZWF0b3Igd3JhcHBlZCBpbnRvIHRoZSBgZGlzcGF0Y2hgIGNhbGwuIElmIHlvdSBwYXNzZWQgYVxuICogZnVuY3Rpb24gYXMgYGFjdGlvbkNyZWF0b3JzYCwgdGhlIHJldHVybiB2YWx1ZSB3aWxsIGFsc28gYmUgYSBzaW5nbGVcbiAqIGZ1bmN0aW9uLlxuICovXG5mdW5jdGlvbiBiaW5kQWN0aW9uQ3JlYXRvcnMoYWN0aW9uQ3JlYXRvcnMsIGRpc3BhdGNoKSB7XG4gIGlmICh0eXBlb2YgYWN0aW9uQ3JlYXRvcnMgPT09ICdmdW5jdGlvbicpIHtcbiAgICByZXR1cm4gYmluZEFjdGlvbkNyZWF0b3IoYWN0aW9uQ3JlYXRvcnMsIGRpc3BhdGNoKTtcbiAgfVxuXG4gIGlmICgodHlwZW9mIGFjdGlvbkNyZWF0b3JzID09PSAndW5kZWZpbmVkJyA/ICd1bmRlZmluZWQnIDogX3R5cGVvZihhY3Rpb25DcmVhdG9ycykpICE9PSAnb2JqZWN0JyB8fCBhY3Rpb25DcmVhdG9ycyA9PT0gbnVsbCkge1xuICAgIHRocm93IG5ldyBFcnJvcignYmluZEFjdGlvbkNyZWF0b3JzIGV4cGVjdGVkIGFuIG9iamVjdCBvciBhIGZ1bmN0aW9uLCBpbnN0ZWFkIHJlY2VpdmVkICcgKyAoYWN0aW9uQ3JlYXRvcnMgPT09IG51bGwgPyAnbnVsbCcgOiB0eXBlb2YgYWN0aW9uQ3JlYXRvcnMgPT09ICd1bmRlZmluZWQnID8gJ3VuZGVmaW5lZCcgOiBfdHlwZW9mKGFjdGlvbkNyZWF0b3JzKSkgKyAnLiAnICsgJ0RpZCB5b3Ugd3JpdGUgXCJpbXBvcnQgQWN0aW9uQ3JlYXRvcnMgZnJvbVwiIGluc3RlYWQgb2YgXCJpbXBvcnQgKiBhcyBBY3Rpb25DcmVhdG9ycyBmcm9tXCI/Jyk7XG4gIH1cblxuICB2YXIga2V5cyA9IE9iamVjdC5rZXlzKGFjdGlvbkNyZWF0b3JzKTtcbiAgdmFyIGJvdW5kQWN0aW9uQ3JlYXRvcnMgPSB7fTtcbiAgZm9yICh2YXIgaSA9IDA7IGkgPCBrZXlzLmxlbmd0aDsgaSsrKSB7XG4gICAgdmFyIGtleSA9IGtleXNbaV07XG4gICAgdmFyIGFjdGlvbkNyZWF0b3IgPSBhY3Rpb25DcmVhdG9yc1trZXldO1xuICAgIGlmICh0eXBlb2YgYWN0aW9uQ3JlYXRvciA9PT0gJ2Z1bmN0aW9uJykge1xuICAgICAgYm91bmRBY3Rpb25DcmVhdG9yc1trZXldID0gYmluZEFjdGlvbkNyZWF0b3IoYWN0aW9uQ3JlYXRvciwgZGlzcGF0Y2gpO1xuICAgIH1cbiAgfVxuICByZXR1cm4gYm91bmRBY3Rpb25DcmVhdG9ycztcbn1cblxuLyoqXG4gKiBDb21wb3NlcyBzaW5nbGUtYXJndW1lbnQgZnVuY3Rpb25zIGZyb20gcmlnaHQgdG8gbGVmdC4gVGhlIHJpZ2h0bW9zdFxuICogZnVuY3Rpb24gY2FuIHRha2UgbXVsdGlwbGUgYXJndW1lbnRzIGFzIGl0IHByb3ZpZGVzIHRoZSBzaWduYXR1cmUgZm9yXG4gKiB0aGUgcmVzdWx0aW5nIGNvbXBvc2l0ZSBmdW5jdGlvbi5cbiAqXG4gKiBAcGFyYW0gey4uLkZ1bmN0aW9ufSBmdW5jcyBUaGUgZnVuY3Rpb25zIHRvIGNvbXBvc2UuXG4gKiBAcmV0dXJucyB7RnVuY3Rpb259IEEgZnVuY3Rpb24gb2J0YWluZWQgYnkgY29tcG9zaW5nIHRoZSBhcmd1bWVudCBmdW5jdGlvbnNcbiAqIGZyb20gcmlnaHQgdG8gbGVmdC4gRm9yIGV4YW1wbGUsIGNvbXBvc2UoZiwgZywgaCkgaXMgaWRlbnRpY2FsIHRvIGRvaW5nXG4gKiAoLi4uYXJncykgPT4gZihnKGgoLi4uYXJncykpKS5cbiAqL1xuXG5mdW5jdGlvbiBjb21wb3NlKCkge1xuICBmb3IgKHZhciBfbGVuID0gYXJndW1lbnRzLmxlbmd0aCwgZnVuY3MgPSBBcnJheShfbGVuKSwgX2tleSA9IDA7IF9rZXkgPCBfbGVuOyBfa2V5KyspIHtcbiAgICBmdW5jc1tfa2V5XSA9IGFyZ3VtZW50c1tfa2V5XTtcbiAgfVxuXG4gIGlmIChmdW5jcy5sZW5ndGggPT09IDApIHtcbiAgICByZXR1cm4gZnVuY3Rpb24gKGFyZykge1xuICAgICAgcmV0dXJuIGFyZztcbiAgICB9O1xuICB9XG5cbiAgaWYgKGZ1bmNzLmxlbmd0aCA9PT0gMSkge1xuICAgIHJldHVybiBmdW5jc1swXTtcbiAgfVxuXG4gIHJldHVybiBmdW5jcy5yZWR1Y2UoZnVuY3Rpb24gKGEsIGIpIHtcbiAgICByZXR1cm4gZnVuY3Rpb24gKCkge1xuICAgICAgcmV0dXJuIGEoYi5hcHBseSh1bmRlZmluZWQsIGFyZ3VtZW50cykpO1xuICAgIH07XG4gIH0pO1xufVxuXG4vKipcbiAqIENyZWF0ZXMgYSBzdG9yZSBlbmhhbmNlciB0aGF0IGFwcGxpZXMgbWlkZGxld2FyZSB0byB0aGUgZGlzcGF0Y2ggbWV0aG9kXG4gKiBvZiB0aGUgUmVkdXggc3RvcmUuIFRoaXMgaXMgaGFuZHkgZm9yIGEgdmFyaWV0eSBvZiB0YXNrcywgc3VjaCBhcyBleHByZXNzaW5nXG4gKiBhc3luY2hyb25vdXMgYWN0aW9ucyBpbiBhIGNvbmNpc2UgbWFubmVyLCBvciBsb2dnaW5nIGV2ZXJ5IGFjdGlvbiBwYXlsb2FkLlxuICpcbiAqIFNlZSBgcmVkdXgtdGh1bmtgIHBhY2thZ2UgYXMgYW4gZXhhbXBsZSBvZiB0aGUgUmVkdXggbWlkZGxld2FyZS5cbiAqXG4gKiBCZWNhdXNlIG1pZGRsZXdhcmUgaXMgcG90ZW50aWFsbHkgYXN5bmNocm9ub3VzLCB0aGlzIHNob3VsZCBiZSB0aGUgZmlyc3RcbiAqIHN0b3JlIGVuaGFuY2VyIGluIHRoZSBjb21wb3NpdGlvbiBjaGFpbi5cbiAqXG4gKiBOb3RlIHRoYXQgZWFjaCBtaWRkbGV3YXJlIHdpbGwgYmUgZ2l2ZW4gdGhlIGBkaXNwYXRjaGAgYW5kIGBnZXRTdGF0ZWAgZnVuY3Rpb25zXG4gKiBhcyBuYW1lZCBhcmd1bWVudHMuXG4gKlxuICogQHBhcmFtIHsuLi5GdW5jdGlvbn0gbWlkZGxld2FyZXMgVGhlIG1pZGRsZXdhcmUgY2hhaW4gdG8gYmUgYXBwbGllZC5cbiAqIEByZXR1cm5zIHtGdW5jdGlvbn0gQSBzdG9yZSBlbmhhbmNlciBhcHBseWluZyB0aGUgbWlkZGxld2FyZS5cbiAqL1xuZnVuY3Rpb24gYXBwbHlNaWRkbGV3YXJlKCkge1xuICBmb3IgKHZhciBfbGVuID0gYXJndW1lbnRzLmxlbmd0aCwgbWlkZGxld2FyZXMgPSBBcnJheShfbGVuKSwgX2tleSA9IDA7IF9rZXkgPCBfbGVuOyBfa2V5KyspIHtcbiAgICBtaWRkbGV3YXJlc1tfa2V5XSA9IGFyZ3VtZW50c1tfa2V5XTtcbiAgfVxuXG4gIHJldHVybiBmdW5jdGlvbiAoY3JlYXRlU3RvcmUpIHtcbiAgICByZXR1cm4gZnVuY3Rpb24gKCkge1xuICAgICAgZm9yICh2YXIgX2xlbjIgPSBhcmd1bWVudHMubGVuZ3RoLCBhcmdzID0gQXJyYXkoX2xlbjIpLCBfa2V5MiA9IDA7IF9rZXkyIDwgX2xlbjI7IF9rZXkyKyspIHtcbiAgICAgICAgYXJnc1tfa2V5Ml0gPSBhcmd1bWVudHNbX2tleTJdO1xuICAgICAgfVxuXG4gICAgICB2YXIgc3RvcmUgPSBjcmVhdGVTdG9yZS5hcHBseSh1bmRlZmluZWQsIGFyZ3MpO1xuICAgICAgdmFyIF9kaXNwYXRjaCA9IGZ1bmN0aW9uIGRpc3BhdGNoKCkge1xuICAgICAgICB0aHJvdyBuZXcgRXJyb3IoJ0Rpc3BhdGNoaW5nIHdoaWxlIGNvbnN0cnVjdGluZyB5b3VyIG1pZGRsZXdhcmUgaXMgbm90IGFsbG93ZWQuICcgKyAnT3RoZXIgbWlkZGxld2FyZSB3b3VsZCBub3QgYmUgYXBwbGllZCB0byB0aGlzIGRpc3BhdGNoLicpO1xuICAgICAgfTtcblxuICAgICAgdmFyIG1pZGRsZXdhcmVBUEkgPSB7XG4gICAgICAgIGdldFN0YXRlOiBzdG9yZS5nZXRTdGF0ZSxcbiAgICAgICAgZGlzcGF0Y2g6IGZ1bmN0aW9uIGRpc3BhdGNoKCkge1xuICAgICAgICAgIHJldHVybiBfZGlzcGF0Y2guYXBwbHkodW5kZWZpbmVkLCBhcmd1bWVudHMpO1xuICAgICAgICB9XG4gICAgICB9O1xuICAgICAgdmFyIGNoYWluID0gbWlkZGxld2FyZXMubWFwKGZ1bmN0aW9uIChtaWRkbGV3YXJlKSB7XG4gICAgICAgIHJldHVybiBtaWRkbGV3YXJlKG1pZGRsZXdhcmVBUEkpO1xuICAgICAgfSk7XG4gICAgICBfZGlzcGF0Y2ggPSBjb21wb3NlLmFwcGx5KHVuZGVmaW5lZCwgY2hhaW4pKHN0b3JlLmRpc3BhdGNoKTtcblxuICAgICAgcmV0dXJuIF9leHRlbmRzKHt9LCBzdG9yZSwge1xuICAgICAgICBkaXNwYXRjaDogX2Rpc3BhdGNoXG4gICAgICB9KTtcbiAgICB9O1xuICB9O1xufVxuXG4vKlxuICogVGhpcyBpcyBhIGR1bW15IGZ1bmN0aW9uIHRvIGNoZWNrIGlmIHRoZSBmdW5jdGlvbiBuYW1lIGhhcyBiZWVuIGFsdGVyZWQgYnkgbWluaWZpY2F0aW9uLlxuICogSWYgdGhlIGZ1bmN0aW9uIGhhcyBiZWVuIG1pbmlmaWVkIGFuZCBOT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nLCB3YXJuIHRoZSB1c2VyLlxuICovXG5mdW5jdGlvbiBpc0NydXNoZWQoKSB7fVxuXG5pZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJyAmJiB0eXBlb2YgaXNDcnVzaGVkLm5hbWUgPT09ICdzdHJpbmcnICYmIGlzQ3J1c2hlZC5uYW1lICE9PSAnaXNDcnVzaGVkJykge1xuICB3YXJuaW5nKFwiWW91IGFyZSBjdXJyZW50bHkgdXNpbmcgbWluaWZpZWQgY29kZSBvdXRzaWRlIG9mIE5PREVfRU5WID09PSAncHJvZHVjdGlvbicuIFwiICsgJ1RoaXMgbWVhbnMgdGhhdCB5b3UgYXJlIHJ1bm5pbmcgYSBzbG93ZXIgZGV2ZWxvcG1lbnQgYnVpbGQgb2YgUmVkdXguICcgKyAnWW91IGNhbiB1c2UgbG9vc2UtZW52aWZ5IChodHRwczovL2dpdGh1Yi5jb20vemVydG9zaC9sb29zZS1lbnZpZnkpIGZvciBicm93c2VyaWZ5ICcgKyAnb3IgRGVmaW5lUGx1Z2luIGZvciB3ZWJwYWNrIChodHRwOi8vc3RhY2tvdmVyZmxvdy5jb20vcXVlc3Rpb25zLzMwMDMwMDMxKSAnICsgJ3RvIGVuc3VyZSB5b3UgaGF2ZSB0aGUgY29ycmVjdCBjb2RlIGZvciB5b3VyIHByb2R1Y3Rpb24gYnVpbGQuJyk7XG59XG5cbmV4cG9ydCB7IGNyZWF0ZVN0b3JlLCBjb21iaW5lUmVkdWNlcnMsIGJpbmRBY3Rpb25DcmVhdG9ycywgYXBwbHlNaWRkbGV3YXJlLCBjb21wb3NlLCBBY3Rpb25UeXBlcyBhcyBfX0RPX05PVF9VU0VfX0FjdGlvblR5cGVzIH07XG4iLCIvKiBnbG9iYWwgd2luZG93ICovXG5pbXBvcnQgcG9ueWZpbGwgZnJvbSAnLi9wb255ZmlsbC5qcyc7XG5cbnZhciByb290O1xuXG5pZiAodHlwZW9mIHNlbGYgIT09ICd1bmRlZmluZWQnKSB7XG4gIHJvb3QgPSBzZWxmO1xufSBlbHNlIGlmICh0eXBlb2Ygd2luZG93ICE9PSAndW5kZWZpbmVkJykge1xuICByb290ID0gd2luZG93O1xufSBlbHNlIGlmICh0eXBlb2YgZ2xvYmFsICE9PSAndW5kZWZpbmVkJykge1xuICByb290ID0gZ2xvYmFsO1xufSBlbHNlIGlmICh0eXBlb2YgbW9kdWxlICE9PSAndW5kZWZpbmVkJykge1xuICByb290ID0gbW9kdWxlO1xufSBlbHNlIHtcbiAgcm9vdCA9IEZ1bmN0aW9uKCdyZXR1cm4gdGhpcycpKCk7XG59XG5cbnZhciByZXN1bHQgPSBwb255ZmlsbChyb290KTtcbmV4cG9ydCBkZWZhdWx0IHJlc3VsdDtcbiIsIid1c2Ugc3RyaWN0JztcblxuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7XG4gIHZhbHVlOiB0cnVlXG59KTtcbmV4cG9ydHMuZGVmYXVsdCA9IHtcblxuICBHTE9CQUw6IHtcbiAgICBISURFOiAnX19yZWFjdF90b29sdGlwX2hpZGVfZXZlbnQnLFxuICAgIFJFQlVJTEQ6ICdfX3JlYWN0X3Rvb2x0aXBfcmVidWlsZF9ldmVudCcsXG4gICAgU0hPVzogJ19fcmVhY3RfdG9vbHRpcF9zaG93X2V2ZW50J1xuICB9XG59OyIsImV4cG9ydCBjb25zdCBnZXRSYW5kb21JbnQgPSAobWluLCBtYXgpID0+IHtcbiAgcmV0dXJuIE1hdGguZmxvb3IoTWF0aC5yYW5kb20oKSAqIChtYXggLSBtaW4gKyAxKSArIG1pbilcbn1cblxuY29uc3QgaW50ZXJ2YWxzID0gW1xuICB7bGFiZWw6ICd5ZWFyJywgICAgIHNlY29uZHM6IDMxNTM2MDAwfSxcbiAge2xhYmVsOiAnbW9udGgnLCAgICBzZWNvbmRzOiAyNTkyMDAwfSxcbiAge2xhYmVsOiAnZGF5JywgICAgICBzZWNvbmRzOiA4NjQwMH0sXG4gIHtsYWJlbDogJ2hvdXInLCAgICAgc2Vjb25kczogMzYwMH0sXG4gIHtsYWJlbDogJ21pbnV0ZScsICAgc2Vjb25kczogNjB9LFxuICB7bGFiZWw6ICdzZWNvbmQnLCAgIHNlY29uZHM6IDB9XG5dXG5cbmV4cG9ydCBjb25zdCB0aW1lU2luY2UgPSAoZGF0ZSkgPT4ge1xuICBpZigoRGF0ZS5ub3coKSAtIGRhdGUpIC8gMTAwMCA8IDYwKVxuICAgIHJldHVybiAnanVzdCBub3cnO1xuXG4gIGNvbnN0IHNlY29uZHMgPSBNYXRoLmZsb29yKChEYXRlLm5vdygpIC0gZGF0ZSkgLyAxMDAwKVxuICBjb25zdCBpbnRlcnZhbCA9IGludGVydmFscy5maW5kKGkgPT4gaS5zZWNvbmRzIDwgc2Vjb25kcylcbiAgY29uc3QgY291bnQgPSBNYXRoLmZsb29yKHNlY29uZHMgLyBpbnRlcnZhbC5zZWNvbmRzKVxuXG4gIHJldHVybiBgJHtjb3VudH0gJHtpbnRlcnZhbC5sYWJlbH0ke2NvdW50ICE9PSAxID8gJ3MnIDogJyd9IGFnb2Bcbn1cblxuZXhwb3J0IGNvbnN0IGZldGNoQXN5bmMgPSBhc3luYyAodXJsLCBib2R5LCBvcHRpb25zKSA9PiB7XG4gIHJldHVybiBhd2FpdCAoYXdhaXQgZmV0Y2godXJsLCB7XG4gICAgaGVhZGVyczoge1xuICAgICAgJ0FjY2VwdCc6ICdhcHBsaWNhdGlvbi9qc29uJyxcbiAgICAgICdDb250ZW50LVR5cGUnOiAnYXBwbGljYXRpb24vanNvbidcbiAgICB9LFxuICAgIG1ldGhvZDogJ3Bvc3QnLFxuICAgIGNyZWRlbnRpYWxzOiAnc2FtZS1vcmlnaW4nLFxuICAgIC4uLm9wdGlvbnMsXG4gICAgYm9keVxuICB9KSkuanNvbigpXG59IiwiJ3VzZSBzdHJpY3QnO1xuXG5mdW5jdGlvbiBjaGVja0RDRSgpIHtcbiAgLyogZ2xvYmFsIF9fUkVBQ1RfREVWVE9PTFNfR0xPQkFMX0hPT0tfXyAqL1xuICBpZiAoXG4gICAgdHlwZW9mIF9fUkVBQ1RfREVWVE9PTFNfR0xPQkFMX0hPT0tfXyA9PT0gJ3VuZGVmaW5lZCcgfHxcbiAgICB0eXBlb2YgX19SRUFDVF9ERVZUT09MU19HTE9CQUxfSE9PS19fLmNoZWNrRENFICE9PSAnZnVuY3Rpb24nXG4gICkge1xuICAgIHJldHVybjtcbiAgfVxuICBpZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJykge1xuICAgIC8vIFRoaXMgYnJhbmNoIGlzIHVucmVhY2hhYmxlIGJlY2F1c2UgdGhpcyBmdW5jdGlvbiBpcyBvbmx5IGNhbGxlZFxuICAgIC8vIGluIHByb2R1Y3Rpb24sIGJ1dCB0aGUgY29uZGl0aW9uIGlzIHRydWUgb25seSBpbiBkZXZlbG9wbWVudC5cbiAgICAvLyBUaGVyZWZvcmUgaWYgdGhlIGJyYW5jaCBpcyBzdGlsbCBoZXJlLCBkZWFkIGNvZGUgZWxpbWluYXRpb24gd2Fzbid0XG4gICAgLy8gcHJvcGVybHkgYXBwbGllZC5cbiAgICAvLyBEb24ndCBjaGFuZ2UgdGhlIG1lc3NhZ2UuIFJlYWN0IERldlRvb2xzIHJlbGllcyBvbiBpdC4gQWxzbyBtYWtlIHN1cmVcbiAgICAvLyB0aGlzIG1lc3NhZ2UgZG9lc24ndCBvY2N1ciBlbHNld2hlcmUgaW4gdGhpcyBmdW5jdGlvbiwgb3IgaXQgd2lsbCBjYXVzZVxuICAgIC8vIGEgZmFsc2UgcG9zaXRpdmUuXG4gICAgdGhyb3cgbmV3IEVycm9yKCdeX14nKTtcbiAgfVxuICB0cnkge1xuICAgIC8vIFZlcmlmeSB0aGF0IHRoZSBjb2RlIGFib3ZlIGhhcyBiZWVuIGRlYWQgY29kZSBlbGltaW5hdGVkIChEQ0UnZCkuXG4gICAgX19SRUFDVF9ERVZUT09MU19HTE9CQUxfSE9PS19fLmNoZWNrRENFKGNoZWNrRENFKTtcbiAgfSBjYXRjaCAoZXJyKSB7XG4gICAgLy8gRGV2VG9vbHMgc2hvdWxkbid0IGNyYXNoIFJlYWN0LCBubyBtYXR0ZXIgd2hhdC5cbiAgICAvLyBXZSBzaG91bGQgc3RpbGwgcmVwb3J0IGluIGNhc2Ugd2UgYnJlYWsgdGhpcyBjb2RlLlxuICAgIGNvbnNvbGUuZXJyb3IoZXJyKTtcbiAgfVxufVxuXG5pZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgPT09ICdwcm9kdWN0aW9uJykge1xuICAvLyBEQ0UgY2hlY2sgc2hvdWxkIGhhcHBlbiBiZWZvcmUgUmVhY3RET00gYnVuZGxlIGV4ZWN1dGVzIHNvIHRoYXRcbiAgLy8gRGV2VG9vbHMgY2FuIHJlcG9ydCBiYWQgbWluaWZpY2F0aW9uIGR1cmluZyBpbmplY3Rpb24uXG4gIGNoZWNrRENFKCk7XG4gIG1vZHVsZS5leHBvcnRzID0gcmVxdWlyZSgnLi9janMvcmVhY3QtZG9tLnByb2R1Y3Rpb24ubWluLmpzJyk7XG59IGVsc2Uge1xuICBtb2R1bGUuZXhwb3J0cyA9IHJlcXVpcmUoJy4vY2pzL3JlYWN0LWRvbS5kZXZlbG9wbWVudC5qcycpO1xufVxuIiwiLyoqXG4gKiBDb3B5cmlnaHQgKGMpIDIwMTMtcHJlc2VudCwgRmFjZWJvb2ssIEluYy5cbiAqXG4gKiBUaGlzIHNvdXJjZSBjb2RlIGlzIGxpY2Vuc2VkIHVuZGVyIHRoZSBNSVQgbGljZW5zZSBmb3VuZCBpbiB0aGVcbiAqIExJQ0VOU0UgZmlsZSBpbiB0aGUgcm9vdCBkaXJlY3Rvcnkgb2YgdGhpcyBzb3VyY2UgdHJlZS5cbiAqXG4gKi9cblxuJ3VzZSBzdHJpY3QnO1xuXG52YXIgZW1wdHlPYmplY3QgPSB7fTtcblxuaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicpIHtcbiAgT2JqZWN0LmZyZWV6ZShlbXB0eU9iamVjdCk7XG59XG5cbm1vZHVsZS5leHBvcnRzID0gZW1wdHlPYmplY3Q7IiwiLypcbm9iamVjdC1hc3NpZ25cbihjKSBTaW5kcmUgU29yaHVzXG5AbGljZW5zZSBNSVRcbiovXG5cbid1c2Ugc3RyaWN0Jztcbi8qIGVzbGludC1kaXNhYmxlIG5vLXVudXNlZC12YXJzICovXG52YXIgZ2V0T3duUHJvcGVydHlTeW1ib2xzID0gT2JqZWN0LmdldE93blByb3BlcnR5U3ltYm9scztcbnZhciBoYXNPd25Qcm9wZXJ0eSA9IE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHk7XG52YXIgcHJvcElzRW51bWVyYWJsZSA9IE9iamVjdC5wcm90b3R5cGUucHJvcGVydHlJc0VudW1lcmFibGU7XG5cbmZ1bmN0aW9uIHRvT2JqZWN0KHZhbCkge1xuXHRpZiAodmFsID09PSBudWxsIHx8IHZhbCA9PT0gdW5kZWZpbmVkKSB7XG5cdFx0dGhyb3cgbmV3IFR5cGVFcnJvcignT2JqZWN0LmFzc2lnbiBjYW5ub3QgYmUgY2FsbGVkIHdpdGggbnVsbCBvciB1bmRlZmluZWQnKTtcblx0fVxuXG5cdHJldHVybiBPYmplY3QodmFsKTtcbn1cblxuZnVuY3Rpb24gc2hvdWxkVXNlTmF0aXZlKCkge1xuXHR0cnkge1xuXHRcdGlmICghT2JqZWN0LmFzc2lnbikge1xuXHRcdFx0cmV0dXJuIGZhbHNlO1xuXHRcdH1cblxuXHRcdC8vIERldGVjdCBidWdneSBwcm9wZXJ0eSBlbnVtZXJhdGlvbiBvcmRlciBpbiBvbGRlciBWOCB2ZXJzaW9ucy5cblxuXHRcdC8vIGh0dHBzOi8vYnVncy5jaHJvbWl1bS5vcmcvcC92OC9pc3N1ZXMvZGV0YWlsP2lkPTQxMThcblx0XHR2YXIgdGVzdDEgPSBuZXcgU3RyaW5nKCdhYmMnKTsgIC8vIGVzbGludC1kaXNhYmxlLWxpbmUgbm8tbmV3LXdyYXBwZXJzXG5cdFx0dGVzdDFbNV0gPSAnZGUnO1xuXHRcdGlmIChPYmplY3QuZ2V0T3duUHJvcGVydHlOYW1lcyh0ZXN0MSlbMF0gPT09ICc1Jykge1xuXHRcdFx0cmV0dXJuIGZhbHNlO1xuXHRcdH1cblxuXHRcdC8vIGh0dHBzOi8vYnVncy5jaHJvbWl1bS5vcmcvcC92OC9pc3N1ZXMvZGV0YWlsP2lkPTMwNTZcblx0XHR2YXIgdGVzdDIgPSB7fTtcblx0XHRmb3IgKHZhciBpID0gMDsgaSA8IDEwOyBpKyspIHtcblx0XHRcdHRlc3QyWydfJyArIFN0cmluZy5mcm9tQ2hhckNvZGUoaSldID0gaTtcblx0XHR9XG5cdFx0dmFyIG9yZGVyMiA9IE9iamVjdC5nZXRPd25Qcm9wZXJ0eU5hbWVzKHRlc3QyKS5tYXAoZnVuY3Rpb24gKG4pIHtcblx0XHRcdHJldHVybiB0ZXN0MltuXTtcblx0XHR9KTtcblx0XHRpZiAob3JkZXIyLmpvaW4oJycpICE9PSAnMDEyMzQ1Njc4OScpIHtcblx0XHRcdHJldHVybiBmYWxzZTtcblx0XHR9XG5cblx0XHQvLyBodHRwczovL2J1Z3MuY2hyb21pdW0ub3JnL3AvdjgvaXNzdWVzL2RldGFpbD9pZD0zMDU2XG5cdFx0dmFyIHRlc3QzID0ge307XG5cdFx0J2FiY2RlZmdoaWprbG1ub3BxcnN0Jy5zcGxpdCgnJykuZm9yRWFjaChmdW5jdGlvbiAobGV0dGVyKSB7XG5cdFx0XHR0ZXN0M1tsZXR0ZXJdID0gbGV0dGVyO1xuXHRcdH0pO1xuXHRcdGlmIChPYmplY3Qua2V5cyhPYmplY3QuYXNzaWduKHt9LCB0ZXN0MykpLmpvaW4oJycpICE9PVxuXHRcdFx0XHQnYWJjZGVmZ2hpamtsbW5vcHFyc3QnKSB7XG5cdFx0XHRyZXR1cm4gZmFsc2U7XG5cdFx0fVxuXG5cdFx0cmV0dXJuIHRydWU7XG5cdH0gY2F0Y2ggKGVycikge1xuXHRcdC8vIFdlIGRvbid0IGV4cGVjdCBhbnkgb2YgdGhlIGFib3ZlIHRvIHRocm93LCBidXQgYmV0dGVyIHRvIGJlIHNhZmUuXG5cdFx0cmV0dXJuIGZhbHNlO1xuXHR9XG59XG5cbm1vZHVsZS5leHBvcnRzID0gc2hvdWxkVXNlTmF0aXZlKCkgPyBPYmplY3QuYXNzaWduIDogZnVuY3Rpb24gKHRhcmdldCwgc291cmNlKSB7XG5cdHZhciBmcm9tO1xuXHR2YXIgdG8gPSB0b09iamVjdCh0YXJnZXQpO1xuXHR2YXIgc3ltYm9scztcblxuXHRmb3IgKHZhciBzID0gMTsgcyA8IGFyZ3VtZW50cy5sZW5ndGg7IHMrKykge1xuXHRcdGZyb20gPSBPYmplY3QoYXJndW1lbnRzW3NdKTtcblxuXHRcdGZvciAodmFyIGtleSBpbiBmcm9tKSB7XG5cdFx0XHRpZiAoaGFzT3duUHJvcGVydHkuY2FsbChmcm9tLCBrZXkpKSB7XG5cdFx0XHRcdHRvW2tleV0gPSBmcm9tW2tleV07XG5cdFx0XHR9XG5cdFx0fVxuXG5cdFx0aWYgKGdldE93blByb3BlcnR5U3ltYm9scykge1xuXHRcdFx0c3ltYm9scyA9IGdldE93blByb3BlcnR5U3ltYm9scyhmcm9tKTtcblx0XHRcdGZvciAodmFyIGkgPSAwOyBpIDwgc3ltYm9scy5sZW5ndGg7IGkrKykge1xuXHRcdFx0XHRpZiAocHJvcElzRW51bWVyYWJsZS5jYWxsKGZyb20sIHN5bWJvbHNbaV0pKSB7XG5cdFx0XHRcdFx0dG9bc3ltYm9sc1tpXV0gPSBmcm9tW3N5bWJvbHNbaV1dO1xuXHRcdFx0XHR9XG5cdFx0XHR9XG5cdFx0fVxuXHR9XG5cblx0cmV0dXJuIHRvO1xufTtcbiIsIi8vIGh0dHBzOi8vcndhbGRyb24uZ2l0aHViLmlvL3Byb3Bvc2FsLW1hdGgtZXh0ZW5zaW9ucy9cbm1vZHVsZS5leHBvcnRzID0gTWF0aC5zY2FsZSB8fCBmdW5jdGlvbiBzY2FsZSh4LCBpbkxvdywgaW5IaWdoLCBvdXRMb3csIG91dEhpZ2gpIHtcbiAgaWYgKFxuICAgIGFyZ3VtZW50cy5sZW5ndGggPT09IDBcbiAgICAgIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBuby1zZWxmLWNvbXBhcmVcbiAgICAgIHx8IHggIT0geFxuICAgICAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIG5vLXNlbGYtY29tcGFyZVxuICAgICAgfHwgaW5Mb3cgIT0gaW5Mb3dcbiAgICAgIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBuby1zZWxmLWNvbXBhcmVcbiAgICAgIHx8IGluSGlnaCAhPSBpbkhpZ2hcbiAgICAgIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBuby1zZWxmLWNvbXBhcmVcbiAgICAgIHx8IG91dExvdyAhPSBvdXRMb3dcbiAgICAgIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBuby1zZWxmLWNvbXBhcmVcbiAgICAgIHx8IG91dEhpZ2ggIT0gb3V0SGlnaFxuICApIHJldHVybiBOYU47XG4gIGlmICh4ID09PSBJbmZpbml0eSB8fCB4ID09PSAtSW5maW5pdHkpIHJldHVybiB4O1xuICByZXR1cm4gKHggLSBpbkxvdykgKiAob3V0SGlnaCAtIG91dExvdykgLyAoaW5IaWdoIC0gaW5Mb3cpICsgb3V0TG93O1xufTtcbiIsInZhciBmb3JPZiA9IHJlcXVpcmUoJy4vX2Zvci1vZicpO1xuXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChpdGVyLCBJVEVSQVRPUikge1xuICB2YXIgcmVzdWx0ID0gW107XG4gIGZvck9mKGl0ZXIsIGZhbHNlLCByZXN1bHQucHVzaCwgcmVzdWx0LCBJVEVSQVRPUik7XG4gIHJldHVybiByZXN1bHQ7XG59O1xuIiwiLy8gaHR0cHM6Ly9naXRodWIuY29tL0RhdmlkQnJ1YW50L01hcC1TZXQucHJvdG90eXBlLnRvSlNPTlxudmFyIGNsYXNzb2YgPSByZXF1aXJlKCcuL19jbGFzc29mJyk7XG52YXIgZnJvbSA9IHJlcXVpcmUoJy4vX2FycmF5LWZyb20taXRlcmFibGUnKTtcbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKE5BTUUpIHtcbiAgcmV0dXJuIGZ1bmN0aW9uIHRvSlNPTigpIHtcbiAgICBpZiAoY2xhc3NvZih0aGlzKSAhPSBOQU1FKSB0aHJvdyBUeXBlRXJyb3IoTkFNRSArIFwiI3RvSlNPTiBpc24ndCBnZW5lcmljXCIpO1xuICAgIHJldHVybiBmcm9tKHRoaXMpO1xuICB9O1xufTtcbiIsInZhciBnZXRLZXlzID0gcmVxdWlyZSgnLi9fb2JqZWN0LWtleXMnKTtcbnZhciB0b0lPYmplY3QgPSByZXF1aXJlKCcuL190by1pb2JqZWN0Jyk7XG52YXIgaXNFbnVtID0gcmVxdWlyZSgnLi9fb2JqZWN0LXBpZScpLmY7XG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChpc0VudHJpZXMpIHtcbiAgcmV0dXJuIGZ1bmN0aW9uIChpdCkge1xuICAgIHZhciBPID0gdG9JT2JqZWN0KGl0KTtcbiAgICB2YXIga2V5cyA9IGdldEtleXMoTyk7XG4gICAgdmFyIGxlbmd0aCA9IGtleXMubGVuZ3RoO1xuICAgIHZhciBpID0gMDtcbiAgICB2YXIgcmVzdWx0ID0gW107XG4gICAgdmFyIGtleTtcbiAgICB3aGlsZSAobGVuZ3RoID4gaSkgaWYgKGlzRW51bS5jYWxsKE8sIGtleSA9IGtleXNbaSsrXSkpIHtcbiAgICAgIHJlc3VsdC5wdXNoKGlzRW50cmllcyA/IFtrZXksIE9ba2V5XV0gOiBPW2tleV0pO1xuICAgIH0gcmV0dXJuIHJlc3VsdDtcbiAgfTtcbn07XG4iLCIvLyBodHRwczovL2dpdGh1Yi5jb20vdGMzOS9wcm9wb3NhbC1zdHJpbmctcGFkLXN0YXJ0LWVuZFxudmFyIHRvTGVuZ3RoID0gcmVxdWlyZSgnLi9fdG8tbGVuZ3RoJyk7XG52YXIgcmVwZWF0ID0gcmVxdWlyZSgnLi9fc3RyaW5nLXJlcGVhdCcpO1xudmFyIGRlZmluZWQgPSByZXF1aXJlKCcuL19kZWZpbmVkJyk7XG5cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKHRoYXQsIG1heExlbmd0aCwgZmlsbFN0cmluZywgbGVmdCkge1xuICB2YXIgUyA9IFN0cmluZyhkZWZpbmVkKHRoYXQpKTtcbiAgdmFyIHN0cmluZ0xlbmd0aCA9IFMubGVuZ3RoO1xuICB2YXIgZmlsbFN0ciA9IGZpbGxTdHJpbmcgPT09IHVuZGVmaW5lZCA/ICcgJyA6IFN0cmluZyhmaWxsU3RyaW5nKTtcbiAgdmFyIGludE1heExlbmd0aCA9IHRvTGVuZ3RoKG1heExlbmd0aCk7XG4gIGlmIChpbnRNYXhMZW5ndGggPD0gc3RyaW5nTGVuZ3RoIHx8IGZpbGxTdHIgPT0gJycpIHJldHVybiBTO1xuICB2YXIgZmlsbExlbiA9IGludE1heExlbmd0aCAtIHN0cmluZ0xlbmd0aDtcbiAgdmFyIHN0cmluZ0ZpbGxlciA9IHJlcGVhdC5jYWxsKGZpbGxTdHIsIE1hdGguY2VpbChmaWxsTGVuIC8gZmlsbFN0ci5sZW5ndGgpKTtcbiAgaWYgKHN0cmluZ0ZpbGxlci5sZW5ndGggPiBmaWxsTGVuKSBzdHJpbmdGaWxsZXIgPSBzdHJpbmdGaWxsZXIuc2xpY2UoMCwgZmlsbExlbik7XG4gIHJldHVybiBsZWZ0ID8gc3RyaW5nRmlsbGVyICsgUyA6IFMgKyBzdHJpbmdGaWxsZXI7XG59O1xuIiwiJ3VzZSBzdHJpY3QnO1xuLy8gaHR0cHM6Ly90YzM5LmdpdGh1Yi5pby9wcm9wb3NhbC1mbGF0TWFwLyNzZWMtRmxhdHRlbkludG9BcnJheVxudmFyIGlzQXJyYXkgPSByZXF1aXJlKCcuL19pcy1hcnJheScpO1xudmFyIGlzT2JqZWN0ID0gcmVxdWlyZSgnLi9faXMtb2JqZWN0Jyk7XG52YXIgdG9MZW5ndGggPSByZXF1aXJlKCcuL190by1sZW5ndGgnKTtcbnZhciBjdHggPSByZXF1aXJlKCcuL19jdHgnKTtcbnZhciBJU19DT05DQVRfU1BSRUFEQUJMRSA9IHJlcXVpcmUoJy4vX3drcycpKCdpc0NvbmNhdFNwcmVhZGFibGUnKTtcblxuZnVuY3Rpb24gZmxhdHRlbkludG9BcnJheSh0YXJnZXQsIG9yaWdpbmFsLCBzb3VyY2UsIHNvdXJjZUxlbiwgc3RhcnQsIGRlcHRoLCBtYXBwZXIsIHRoaXNBcmcpIHtcbiAgdmFyIHRhcmdldEluZGV4ID0gc3RhcnQ7XG4gIHZhciBzb3VyY2VJbmRleCA9IDA7XG4gIHZhciBtYXBGbiA9IG1hcHBlciA/IGN0eChtYXBwZXIsIHRoaXNBcmcsIDMpIDogZmFsc2U7XG4gIHZhciBlbGVtZW50LCBzcHJlYWRhYmxlO1xuXG4gIHdoaWxlIChzb3VyY2VJbmRleCA8IHNvdXJjZUxlbikge1xuICAgIGlmIChzb3VyY2VJbmRleCBpbiBzb3VyY2UpIHtcbiAgICAgIGVsZW1lbnQgPSBtYXBGbiA/IG1hcEZuKHNvdXJjZVtzb3VyY2VJbmRleF0sIHNvdXJjZUluZGV4LCBvcmlnaW5hbCkgOiBzb3VyY2Vbc291cmNlSW5kZXhdO1xuXG4gICAgICBzcHJlYWRhYmxlID0gZmFsc2U7XG4gICAgICBpZiAoaXNPYmplY3QoZWxlbWVudCkpIHtcbiAgICAgICAgc3ByZWFkYWJsZSA9IGVsZW1lbnRbSVNfQ09OQ0FUX1NQUkVBREFCTEVdO1xuICAgICAgICBzcHJlYWRhYmxlID0gc3ByZWFkYWJsZSAhPT0gdW5kZWZpbmVkID8gISFzcHJlYWRhYmxlIDogaXNBcnJheShlbGVtZW50KTtcbiAgICAgIH1cblxuICAgICAgaWYgKHNwcmVhZGFibGUgJiYgZGVwdGggPiAwKSB7XG4gICAgICAgIHRhcmdldEluZGV4ID0gZmxhdHRlbkludG9BcnJheSh0YXJnZXQsIG9yaWdpbmFsLCBlbGVtZW50LCB0b0xlbmd0aChlbGVtZW50Lmxlbmd0aCksIHRhcmdldEluZGV4LCBkZXB0aCAtIDEpIC0gMTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIGlmICh0YXJnZXRJbmRleCA+PSAweDFmZmZmZmZmZmZmZmZmKSB0aHJvdyBUeXBlRXJyb3IoKTtcbiAgICAgICAgdGFyZ2V0W3RhcmdldEluZGV4XSA9IGVsZW1lbnQ7XG4gICAgICB9XG5cbiAgICAgIHRhcmdldEluZGV4Kys7XG4gICAgfVxuICAgIHNvdXJjZUluZGV4Kys7XG4gIH1cbiAgcmV0dXJuIHRhcmdldEluZGV4O1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IGZsYXR0ZW5JbnRvQXJyYXk7XG4iLCIvLyBhbGwgb2JqZWN0IGtleXMsIGluY2x1ZGVzIG5vbi1lbnVtZXJhYmxlIGFuZCBzeW1ib2xzXG52YXIgZ09QTiA9IHJlcXVpcmUoJy4vX29iamVjdC1nb3BuJyk7XG52YXIgZ09QUyA9IHJlcXVpcmUoJy4vX29iamVjdC1nb3BzJyk7XG52YXIgYW5PYmplY3QgPSByZXF1aXJlKCcuL19hbi1vYmplY3QnKTtcbnZhciBSZWZsZWN0ID0gcmVxdWlyZSgnLi9fZ2xvYmFsJykuUmVmbGVjdDtcbm1vZHVsZS5leHBvcnRzID0gUmVmbGVjdCAmJiBSZWZsZWN0Lm93bktleXMgfHwgZnVuY3Rpb24gb3duS2V5cyhpdCkge1xuICB2YXIga2V5cyA9IGdPUE4uZihhbk9iamVjdChpdCkpO1xuICB2YXIgZ2V0U3ltYm9scyA9IGdPUFMuZjtcbiAgcmV0dXJuIGdldFN5bWJvbHMgPyBrZXlzLmNvbmNhdChnZXRTeW1ib2xzKGl0KSkgOiBrZXlzO1xufTtcbiIsIi8vIGh0dHBzOi8vdGMzOS5naXRodWIuaW8vZWNtYTI2Mi8jc2VjLXRvaW5kZXhcbnZhciB0b0ludGVnZXIgPSByZXF1aXJlKCcuL190by1pbnRlZ2VyJyk7XG52YXIgdG9MZW5ndGggPSByZXF1aXJlKCcuL190by1sZW5ndGgnKTtcbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKGl0KSB7XG4gIGlmIChpdCA9PT0gdW5kZWZpbmVkKSByZXR1cm4gMDtcbiAgdmFyIG51bWJlciA9IHRvSW50ZWdlcihpdCk7XG4gIHZhciBsZW5ndGggPSB0b0xlbmd0aChudW1iZXIpO1xuICBpZiAobnVtYmVyICE9PSBsZW5ndGgpIHRocm93IFJhbmdlRXJyb3IoJ1dyb25nIGxlbmd0aCEnKTtcbiAgcmV0dXJuIGxlbmd0aDtcbn07XG4iLCIndXNlIHN0cmljdCc7XG52YXIgcmVkZWZpbmVBbGwgPSByZXF1aXJlKCcuL19yZWRlZmluZS1hbGwnKTtcbnZhciBnZXRXZWFrID0gcmVxdWlyZSgnLi9fbWV0YScpLmdldFdlYWs7XG52YXIgYW5PYmplY3QgPSByZXF1aXJlKCcuL19hbi1vYmplY3QnKTtcbnZhciBpc09iamVjdCA9IHJlcXVpcmUoJy4vX2lzLW9iamVjdCcpO1xudmFyIGFuSW5zdGFuY2UgPSByZXF1aXJlKCcuL19hbi1pbnN0YW5jZScpO1xudmFyIGZvck9mID0gcmVxdWlyZSgnLi9fZm9yLW9mJyk7XG52YXIgY3JlYXRlQXJyYXlNZXRob2QgPSByZXF1aXJlKCcuL19hcnJheS1tZXRob2RzJyk7XG52YXIgJGhhcyA9IHJlcXVpcmUoJy4vX2hhcycpO1xudmFyIHZhbGlkYXRlID0gcmVxdWlyZSgnLi9fdmFsaWRhdGUtY29sbGVjdGlvbicpO1xudmFyIGFycmF5RmluZCA9IGNyZWF0ZUFycmF5TWV0aG9kKDUpO1xudmFyIGFycmF5RmluZEluZGV4ID0gY3JlYXRlQXJyYXlNZXRob2QoNik7XG52YXIgaWQgPSAwO1xuXG4vLyBmYWxsYmFjayBmb3IgdW5jYXVnaHQgZnJvemVuIGtleXNcbnZhciB1bmNhdWdodEZyb3plblN0b3JlID0gZnVuY3Rpb24gKHRoYXQpIHtcbiAgcmV0dXJuIHRoYXQuX2wgfHwgKHRoYXQuX2wgPSBuZXcgVW5jYXVnaHRGcm96ZW5TdG9yZSgpKTtcbn07XG52YXIgVW5jYXVnaHRGcm96ZW5TdG9yZSA9IGZ1bmN0aW9uICgpIHtcbiAgdGhpcy5hID0gW107XG59O1xudmFyIGZpbmRVbmNhdWdodEZyb3plbiA9IGZ1bmN0aW9uIChzdG9yZSwga2V5KSB7XG4gIHJldHVybiBhcnJheUZpbmQoc3RvcmUuYSwgZnVuY3Rpb24gKGl0KSB7XG4gICAgcmV0dXJuIGl0WzBdID09PSBrZXk7XG4gIH0pO1xufTtcblVuY2F1Z2h0RnJvemVuU3RvcmUucHJvdG90eXBlID0ge1xuICBnZXQ6IGZ1bmN0aW9uIChrZXkpIHtcbiAgICB2YXIgZW50cnkgPSBmaW5kVW5jYXVnaHRGcm96ZW4odGhpcywga2V5KTtcbiAgICBpZiAoZW50cnkpIHJldHVybiBlbnRyeVsxXTtcbiAgfSxcbiAgaGFzOiBmdW5jdGlvbiAoa2V5KSB7XG4gICAgcmV0dXJuICEhZmluZFVuY2F1Z2h0RnJvemVuKHRoaXMsIGtleSk7XG4gIH0sXG4gIHNldDogZnVuY3Rpb24gKGtleSwgdmFsdWUpIHtcbiAgICB2YXIgZW50cnkgPSBmaW5kVW5jYXVnaHRGcm96ZW4odGhpcywga2V5KTtcbiAgICBpZiAoZW50cnkpIGVudHJ5WzFdID0gdmFsdWU7XG4gICAgZWxzZSB0aGlzLmEucHVzaChba2V5LCB2YWx1ZV0pO1xuICB9LFxuICAnZGVsZXRlJzogZnVuY3Rpb24gKGtleSkge1xuICAgIHZhciBpbmRleCA9IGFycmF5RmluZEluZGV4KHRoaXMuYSwgZnVuY3Rpb24gKGl0KSB7XG4gICAgICByZXR1cm4gaXRbMF0gPT09IGtleTtcbiAgICB9KTtcbiAgICBpZiAofmluZGV4KSB0aGlzLmEuc3BsaWNlKGluZGV4LCAxKTtcbiAgICByZXR1cm4gISF+aW5kZXg7XG4gIH1cbn07XG5cbm1vZHVsZS5leHBvcnRzID0ge1xuICBnZXRDb25zdHJ1Y3RvcjogZnVuY3Rpb24gKHdyYXBwZXIsIE5BTUUsIElTX01BUCwgQURERVIpIHtcbiAgICB2YXIgQyA9IHdyYXBwZXIoZnVuY3Rpb24gKHRoYXQsIGl0ZXJhYmxlKSB7XG4gICAgICBhbkluc3RhbmNlKHRoYXQsIEMsIE5BTUUsICdfaScpO1xuICAgICAgdGhhdC5fdCA9IE5BTUU7ICAgICAgLy8gY29sbGVjdGlvbiB0eXBlXG4gICAgICB0aGF0Ll9pID0gaWQrKzsgICAgICAvLyBjb2xsZWN0aW9uIGlkXG4gICAgICB0aGF0Ll9sID0gdW5kZWZpbmVkOyAvLyBsZWFrIHN0b3JlIGZvciB1bmNhdWdodCBmcm96ZW4gb2JqZWN0c1xuICAgICAgaWYgKGl0ZXJhYmxlICE9IHVuZGVmaW5lZCkgZm9yT2YoaXRlcmFibGUsIElTX01BUCwgdGhhdFtBRERFUl0sIHRoYXQpO1xuICAgIH0pO1xuICAgIHJlZGVmaW5lQWxsKEMucHJvdG90eXBlLCB7XG4gICAgICAvLyAyMy4zLjMuMiBXZWFrTWFwLnByb3RvdHlwZS5kZWxldGUoa2V5KVxuICAgICAgLy8gMjMuNC4zLjMgV2Vha1NldC5wcm90b3R5cGUuZGVsZXRlKHZhbHVlKVxuICAgICAgJ2RlbGV0ZSc6IGZ1bmN0aW9uIChrZXkpIHtcbiAgICAgICAgaWYgKCFpc09iamVjdChrZXkpKSByZXR1cm4gZmFsc2U7XG4gICAgICAgIHZhciBkYXRhID0gZ2V0V2VhayhrZXkpO1xuICAgICAgICBpZiAoZGF0YSA9PT0gdHJ1ZSkgcmV0dXJuIHVuY2F1Z2h0RnJvemVuU3RvcmUodmFsaWRhdGUodGhpcywgTkFNRSkpWydkZWxldGUnXShrZXkpO1xuICAgICAgICByZXR1cm4gZGF0YSAmJiAkaGFzKGRhdGEsIHRoaXMuX2kpICYmIGRlbGV0ZSBkYXRhW3RoaXMuX2ldO1xuICAgICAgfSxcbiAgICAgIC8vIDIzLjMuMy40IFdlYWtNYXAucHJvdG90eXBlLmhhcyhrZXkpXG4gICAgICAvLyAyMy40LjMuNCBXZWFrU2V0LnByb3RvdHlwZS5oYXModmFsdWUpXG4gICAgICBoYXM6IGZ1bmN0aW9uIGhhcyhrZXkpIHtcbiAgICAgICAgaWYgKCFpc09iamVjdChrZXkpKSByZXR1cm4gZmFsc2U7XG4gICAgICAgIHZhciBkYXRhID0gZ2V0V2VhayhrZXkpO1xuICAgICAgICBpZiAoZGF0YSA9PT0gdHJ1ZSkgcmV0dXJuIHVuY2F1Z2h0RnJvemVuU3RvcmUodmFsaWRhdGUodGhpcywgTkFNRSkpLmhhcyhrZXkpO1xuICAgICAgICByZXR1cm4gZGF0YSAmJiAkaGFzKGRhdGEsIHRoaXMuX2kpO1xuICAgICAgfVxuICAgIH0pO1xuICAgIHJldHVybiBDO1xuICB9LFxuICBkZWY6IGZ1bmN0aW9uICh0aGF0LCBrZXksIHZhbHVlKSB7XG4gICAgdmFyIGRhdGEgPSBnZXRXZWFrKGFuT2JqZWN0KGtleSksIHRydWUpO1xuICAgIGlmIChkYXRhID09PSB0cnVlKSB1bmNhdWdodEZyb3plblN0b3JlKHRoYXQpLnNldChrZXksIHZhbHVlKTtcbiAgICBlbHNlIGRhdGFbdGhhdC5faV0gPSB2YWx1ZTtcbiAgICByZXR1cm4gdGhhdDtcbiAgfSxcbiAgdWZzdG9yZTogdW5jYXVnaHRGcm96ZW5TdG9yZVxufTtcbiIsIid1c2Ugc3RyaWN0JztcbnZhciBlYWNoID0gcmVxdWlyZSgnLi9fYXJyYXktbWV0aG9kcycpKDApO1xudmFyIHJlZGVmaW5lID0gcmVxdWlyZSgnLi9fcmVkZWZpbmUnKTtcbnZhciBtZXRhID0gcmVxdWlyZSgnLi9fbWV0YScpO1xudmFyIGFzc2lnbiA9IHJlcXVpcmUoJy4vX29iamVjdC1hc3NpZ24nKTtcbnZhciB3ZWFrID0gcmVxdWlyZSgnLi9fY29sbGVjdGlvbi13ZWFrJyk7XG52YXIgaXNPYmplY3QgPSByZXF1aXJlKCcuL19pcy1vYmplY3QnKTtcbnZhciBmYWlscyA9IHJlcXVpcmUoJy4vX2ZhaWxzJyk7XG52YXIgdmFsaWRhdGUgPSByZXF1aXJlKCcuL192YWxpZGF0ZS1jb2xsZWN0aW9uJyk7XG52YXIgV0VBS19NQVAgPSAnV2Vha01hcCc7XG52YXIgZ2V0V2VhayA9IG1ldGEuZ2V0V2VhaztcbnZhciBpc0V4dGVuc2libGUgPSBPYmplY3QuaXNFeHRlbnNpYmxlO1xudmFyIHVuY2F1Z2h0RnJvemVuU3RvcmUgPSB3ZWFrLnVmc3RvcmU7XG52YXIgdG1wID0ge307XG52YXIgSW50ZXJuYWxNYXA7XG5cbnZhciB3cmFwcGVyID0gZnVuY3Rpb24gKGdldCkge1xuICByZXR1cm4gZnVuY3Rpb24gV2Vha01hcCgpIHtcbiAgICByZXR1cm4gZ2V0KHRoaXMsIGFyZ3VtZW50cy5sZW5ndGggPiAwID8gYXJndW1lbnRzWzBdIDogdW5kZWZpbmVkKTtcbiAgfTtcbn07XG5cbnZhciBtZXRob2RzID0ge1xuICAvLyAyMy4zLjMuMyBXZWFrTWFwLnByb3RvdHlwZS5nZXQoa2V5KVxuICBnZXQ6IGZ1bmN0aW9uIGdldChrZXkpIHtcbiAgICBpZiAoaXNPYmplY3Qoa2V5KSkge1xuICAgICAgdmFyIGRhdGEgPSBnZXRXZWFrKGtleSk7XG4gICAgICBpZiAoZGF0YSA9PT0gdHJ1ZSkgcmV0dXJuIHVuY2F1Z2h0RnJvemVuU3RvcmUodmFsaWRhdGUodGhpcywgV0VBS19NQVApKS5nZXQoa2V5KTtcbiAgICAgIHJldHVybiBkYXRhID8gZGF0YVt0aGlzLl9pXSA6IHVuZGVmaW5lZDtcbiAgICB9XG4gIH0sXG4gIC8vIDIzLjMuMy41IFdlYWtNYXAucHJvdG90eXBlLnNldChrZXksIHZhbHVlKVxuICBzZXQ6IGZ1bmN0aW9uIHNldChrZXksIHZhbHVlKSB7XG4gICAgcmV0dXJuIHdlYWsuZGVmKHZhbGlkYXRlKHRoaXMsIFdFQUtfTUFQKSwga2V5LCB2YWx1ZSk7XG4gIH1cbn07XG5cbi8vIDIzLjMgV2Vha01hcCBPYmplY3RzXG52YXIgJFdlYWtNYXAgPSBtb2R1bGUuZXhwb3J0cyA9IHJlcXVpcmUoJy4vX2NvbGxlY3Rpb24nKShXRUFLX01BUCwgd3JhcHBlciwgbWV0aG9kcywgd2VhaywgdHJ1ZSwgdHJ1ZSk7XG5cbi8vIElFMTEgV2Vha01hcCBmcm96ZW4ga2V5cyBmaXhcbmlmIChmYWlscyhmdW5jdGlvbiAoKSB7IHJldHVybiBuZXcgJFdlYWtNYXAoKS5zZXQoKE9iamVjdC5mcmVlemUgfHwgT2JqZWN0KSh0bXApLCA3KS5nZXQodG1wKSAhPSA3OyB9KSkge1xuICBJbnRlcm5hbE1hcCA9IHdlYWsuZ2V0Q29uc3RydWN0b3Iod3JhcHBlciwgV0VBS19NQVApO1xuICBhc3NpZ24oSW50ZXJuYWxNYXAucHJvdG90eXBlLCBtZXRob2RzKTtcbiAgbWV0YS5ORUVEID0gdHJ1ZTtcbiAgZWFjaChbJ2RlbGV0ZScsICdoYXMnLCAnZ2V0JywgJ3NldCddLCBmdW5jdGlvbiAoa2V5KSB7XG4gICAgdmFyIHByb3RvID0gJFdlYWtNYXAucHJvdG90eXBlO1xuICAgIHZhciBtZXRob2QgPSBwcm90b1trZXldO1xuICAgIHJlZGVmaW5lKHByb3RvLCBrZXksIGZ1bmN0aW9uIChhLCBiKSB7XG4gICAgICAvLyBzdG9yZSBmcm96ZW4gb2JqZWN0cyBvbiBpbnRlcm5hbCB3ZWFrbWFwIHNoaW1cbiAgICAgIGlmIChpc09iamVjdChhKSAmJiAhaXNFeHRlbnNpYmxlKGEpKSB7XG4gICAgICAgIGlmICghdGhpcy5fZikgdGhpcy5fZiA9IG5ldyBJbnRlcm5hbE1hcCgpO1xuICAgICAgICB2YXIgcmVzdWx0ID0gdGhpcy5fZltrZXldKGEsIGIpO1xuICAgICAgICByZXR1cm4ga2V5ID09ICdzZXQnID8gdGhpcyA6IHJlc3VsdDtcbiAgICAgIC8vIHN0b3JlIGFsbCB0aGUgcmVzdCBvbiBuYXRpdmUgd2Vha21hcFxuICAgICAgfSByZXR1cm4gbWV0aG9kLmNhbGwodGhpcywgYSwgYik7XG4gICAgfSk7XG4gIH0pO1xufVxuIiwiJ3VzZSBzdHJpY3QnO1xudmFyIHN0cm9uZyA9IHJlcXVpcmUoJy4vX2NvbGxlY3Rpb24tc3Ryb25nJyk7XG52YXIgdmFsaWRhdGUgPSByZXF1aXJlKCcuL192YWxpZGF0ZS1jb2xsZWN0aW9uJyk7XG52YXIgU0VUID0gJ1NldCc7XG5cbi8vIDIzLjIgU2V0IE9iamVjdHNcbm1vZHVsZS5leHBvcnRzID0gcmVxdWlyZSgnLi9fY29sbGVjdGlvbicpKFNFVCwgZnVuY3Rpb24gKGdldCkge1xuICByZXR1cm4gZnVuY3Rpb24gU2V0KCkgeyByZXR1cm4gZ2V0KHRoaXMsIGFyZ3VtZW50cy5sZW5ndGggPiAwID8gYXJndW1lbnRzWzBdIDogdW5kZWZpbmVkKTsgfTtcbn0sIHtcbiAgLy8gMjMuMi4zLjEgU2V0LnByb3RvdHlwZS5hZGQodmFsdWUpXG4gIGFkZDogZnVuY3Rpb24gYWRkKHZhbHVlKSB7XG4gICAgcmV0dXJuIHN0cm9uZy5kZWYodmFsaWRhdGUodGhpcywgU0VUKSwgdmFsdWUgPSB2YWx1ZSA9PT0gMCA/IDAgOiB2YWx1ZSwgdmFsdWUpO1xuICB9XG59LCBzdHJvbmcpO1xuIiwiJ3VzZSBzdHJpY3QnO1xudmFyIGRQID0gcmVxdWlyZSgnLi9fb2JqZWN0LWRwJykuZjtcbnZhciBjcmVhdGUgPSByZXF1aXJlKCcuL19vYmplY3QtY3JlYXRlJyk7XG52YXIgcmVkZWZpbmVBbGwgPSByZXF1aXJlKCcuL19yZWRlZmluZS1hbGwnKTtcbnZhciBjdHggPSByZXF1aXJlKCcuL19jdHgnKTtcbnZhciBhbkluc3RhbmNlID0gcmVxdWlyZSgnLi9fYW4taW5zdGFuY2UnKTtcbnZhciBmb3JPZiA9IHJlcXVpcmUoJy4vX2Zvci1vZicpO1xudmFyICRpdGVyRGVmaW5lID0gcmVxdWlyZSgnLi9faXRlci1kZWZpbmUnKTtcbnZhciBzdGVwID0gcmVxdWlyZSgnLi9faXRlci1zdGVwJyk7XG52YXIgc2V0U3BlY2llcyA9IHJlcXVpcmUoJy4vX3NldC1zcGVjaWVzJyk7XG52YXIgREVTQ1JJUFRPUlMgPSByZXF1aXJlKCcuL19kZXNjcmlwdG9ycycpO1xudmFyIGZhc3RLZXkgPSByZXF1aXJlKCcuL19tZXRhJykuZmFzdEtleTtcbnZhciB2YWxpZGF0ZSA9IHJlcXVpcmUoJy4vX3ZhbGlkYXRlLWNvbGxlY3Rpb24nKTtcbnZhciBTSVpFID0gREVTQ1JJUFRPUlMgPyAnX3MnIDogJ3NpemUnO1xuXG52YXIgZ2V0RW50cnkgPSBmdW5jdGlvbiAodGhhdCwga2V5KSB7XG4gIC8vIGZhc3QgY2FzZVxuICB2YXIgaW5kZXggPSBmYXN0S2V5KGtleSk7XG4gIHZhciBlbnRyeTtcbiAgaWYgKGluZGV4ICE9PSAnRicpIHJldHVybiB0aGF0Ll9pW2luZGV4XTtcbiAgLy8gZnJvemVuIG9iamVjdCBjYXNlXG4gIGZvciAoZW50cnkgPSB0aGF0Ll9mOyBlbnRyeTsgZW50cnkgPSBlbnRyeS5uKSB7XG4gICAgaWYgKGVudHJ5LmsgPT0ga2V5KSByZXR1cm4gZW50cnk7XG4gIH1cbn07XG5cbm1vZHVsZS5leHBvcnRzID0ge1xuICBnZXRDb25zdHJ1Y3RvcjogZnVuY3Rpb24gKHdyYXBwZXIsIE5BTUUsIElTX01BUCwgQURERVIpIHtcbiAgICB2YXIgQyA9IHdyYXBwZXIoZnVuY3Rpb24gKHRoYXQsIGl0ZXJhYmxlKSB7XG4gICAgICBhbkluc3RhbmNlKHRoYXQsIEMsIE5BTUUsICdfaScpO1xuICAgICAgdGhhdC5fdCA9IE5BTUU7ICAgICAgICAgLy8gY29sbGVjdGlvbiB0eXBlXG4gICAgICB0aGF0Ll9pID0gY3JlYXRlKG51bGwpOyAvLyBpbmRleFxuICAgICAgdGhhdC5fZiA9IHVuZGVmaW5lZDsgICAgLy8gZmlyc3QgZW50cnlcbiAgICAgIHRoYXQuX2wgPSB1bmRlZmluZWQ7ICAgIC8vIGxhc3QgZW50cnlcbiAgICAgIHRoYXRbU0laRV0gPSAwOyAgICAgICAgIC8vIHNpemVcbiAgICAgIGlmIChpdGVyYWJsZSAhPSB1bmRlZmluZWQpIGZvck9mKGl0ZXJhYmxlLCBJU19NQVAsIHRoYXRbQURERVJdLCB0aGF0KTtcbiAgICB9KTtcbiAgICByZWRlZmluZUFsbChDLnByb3RvdHlwZSwge1xuICAgICAgLy8gMjMuMS4zLjEgTWFwLnByb3RvdHlwZS5jbGVhcigpXG4gICAgICAvLyAyMy4yLjMuMiBTZXQucHJvdG90eXBlLmNsZWFyKClcbiAgICAgIGNsZWFyOiBmdW5jdGlvbiBjbGVhcigpIHtcbiAgICAgICAgZm9yICh2YXIgdGhhdCA9IHZhbGlkYXRlKHRoaXMsIE5BTUUpLCBkYXRhID0gdGhhdC5faSwgZW50cnkgPSB0aGF0Ll9mOyBlbnRyeTsgZW50cnkgPSBlbnRyeS5uKSB7XG4gICAgICAgICAgZW50cnkuciA9IHRydWU7XG4gICAgICAgICAgaWYgKGVudHJ5LnApIGVudHJ5LnAgPSBlbnRyeS5wLm4gPSB1bmRlZmluZWQ7XG4gICAgICAgICAgZGVsZXRlIGRhdGFbZW50cnkuaV07XG4gICAgICAgIH1cbiAgICAgICAgdGhhdC5fZiA9IHRoYXQuX2wgPSB1bmRlZmluZWQ7XG4gICAgICAgIHRoYXRbU0laRV0gPSAwO1xuICAgICAgfSxcbiAgICAgIC8vIDIzLjEuMy4zIE1hcC5wcm90b3R5cGUuZGVsZXRlKGtleSlcbiAgICAgIC8vIDIzLjIuMy40IFNldC5wcm90b3R5cGUuZGVsZXRlKHZhbHVlKVxuICAgICAgJ2RlbGV0ZSc6IGZ1bmN0aW9uIChrZXkpIHtcbiAgICAgICAgdmFyIHRoYXQgPSB2YWxpZGF0ZSh0aGlzLCBOQU1FKTtcbiAgICAgICAgdmFyIGVudHJ5ID0gZ2V0RW50cnkodGhhdCwga2V5KTtcbiAgICAgICAgaWYgKGVudHJ5KSB7XG4gICAgICAgICAgdmFyIG5leHQgPSBlbnRyeS5uO1xuICAgICAgICAgIHZhciBwcmV2ID0gZW50cnkucDtcbiAgICAgICAgICBkZWxldGUgdGhhdC5faVtlbnRyeS5pXTtcbiAgICAgICAgICBlbnRyeS5yID0gdHJ1ZTtcbiAgICAgICAgICBpZiAocHJldikgcHJldi5uID0gbmV4dDtcbiAgICAgICAgICBpZiAobmV4dCkgbmV4dC5wID0gcHJldjtcbiAgICAgICAgICBpZiAodGhhdC5fZiA9PSBlbnRyeSkgdGhhdC5fZiA9IG5leHQ7XG4gICAgICAgICAgaWYgKHRoYXQuX2wgPT0gZW50cnkpIHRoYXQuX2wgPSBwcmV2O1xuICAgICAgICAgIHRoYXRbU0laRV0tLTtcbiAgICAgICAgfSByZXR1cm4gISFlbnRyeTtcbiAgICAgIH0sXG4gICAgICAvLyAyMy4yLjMuNiBTZXQucHJvdG90eXBlLmZvckVhY2goY2FsbGJhY2tmbiwgdGhpc0FyZyA9IHVuZGVmaW5lZClcbiAgICAgIC8vIDIzLjEuMy41IE1hcC5wcm90b3R5cGUuZm9yRWFjaChjYWxsYmFja2ZuLCB0aGlzQXJnID0gdW5kZWZpbmVkKVxuICAgICAgZm9yRWFjaDogZnVuY3Rpb24gZm9yRWFjaChjYWxsYmFja2ZuIC8qICwgdGhhdCA9IHVuZGVmaW5lZCAqLykge1xuICAgICAgICB2YWxpZGF0ZSh0aGlzLCBOQU1FKTtcbiAgICAgICAgdmFyIGYgPSBjdHgoY2FsbGJhY2tmbiwgYXJndW1lbnRzLmxlbmd0aCA+IDEgPyBhcmd1bWVudHNbMV0gOiB1bmRlZmluZWQsIDMpO1xuICAgICAgICB2YXIgZW50cnk7XG4gICAgICAgIHdoaWxlIChlbnRyeSA9IGVudHJ5ID8gZW50cnkubiA6IHRoaXMuX2YpIHtcbiAgICAgICAgICBmKGVudHJ5LnYsIGVudHJ5LmssIHRoaXMpO1xuICAgICAgICAgIC8vIHJldmVydCB0byB0aGUgbGFzdCBleGlzdGluZyBlbnRyeVxuICAgICAgICAgIHdoaWxlIChlbnRyeSAmJiBlbnRyeS5yKSBlbnRyeSA9IGVudHJ5LnA7XG4gICAgICAgIH1cbiAgICAgIH0sXG4gICAgICAvLyAyMy4xLjMuNyBNYXAucHJvdG90eXBlLmhhcyhrZXkpXG4gICAgICAvLyAyMy4yLjMuNyBTZXQucHJvdG90eXBlLmhhcyh2YWx1ZSlcbiAgICAgIGhhczogZnVuY3Rpb24gaGFzKGtleSkge1xuICAgICAgICByZXR1cm4gISFnZXRFbnRyeSh2YWxpZGF0ZSh0aGlzLCBOQU1FKSwga2V5KTtcbiAgICAgIH1cbiAgICB9KTtcbiAgICBpZiAoREVTQ1JJUFRPUlMpIGRQKEMucHJvdG90eXBlLCAnc2l6ZScsIHtcbiAgICAgIGdldDogZnVuY3Rpb24gKCkge1xuICAgICAgICByZXR1cm4gdmFsaWRhdGUodGhpcywgTkFNRSlbU0laRV07XG4gICAgICB9XG4gICAgfSk7XG4gICAgcmV0dXJuIEM7XG4gIH0sXG4gIGRlZjogZnVuY3Rpb24gKHRoYXQsIGtleSwgdmFsdWUpIHtcbiAgICB2YXIgZW50cnkgPSBnZXRFbnRyeSh0aGF0LCBrZXkpO1xuICAgIHZhciBwcmV2LCBpbmRleDtcbiAgICAvLyBjaGFuZ2UgZXhpc3RpbmcgZW50cnlcbiAgICBpZiAoZW50cnkpIHtcbiAgICAgIGVudHJ5LnYgPSB2YWx1ZTtcbiAgICAvLyBjcmVhdGUgbmV3IGVudHJ5XG4gICAgfSBlbHNlIHtcbiAgICAgIHRoYXQuX2wgPSBlbnRyeSA9IHtcbiAgICAgICAgaTogaW5kZXggPSBmYXN0S2V5KGtleSwgdHJ1ZSksIC8vIDwtIGluZGV4XG4gICAgICAgIGs6IGtleSwgICAgICAgICAgICAgICAgICAgICAgICAvLyA8LSBrZXlcbiAgICAgICAgdjogdmFsdWUsICAgICAgICAgICAgICAgICAgICAgIC8vIDwtIHZhbHVlXG4gICAgICAgIHA6IHByZXYgPSB0aGF0Ll9sLCAgICAgICAgICAgICAvLyA8LSBwcmV2aW91cyBlbnRyeVxuICAgICAgICBuOiB1bmRlZmluZWQsICAgICAgICAgICAgICAgICAgLy8gPC0gbmV4dCBlbnRyeVxuICAgICAgICByOiBmYWxzZSAgICAgICAgICAgICAgICAgICAgICAgLy8gPC0gcmVtb3ZlZFxuICAgICAgfTtcbiAgICAgIGlmICghdGhhdC5fZikgdGhhdC5fZiA9IGVudHJ5O1xuICAgICAgaWYgKHByZXYpIHByZXYubiA9IGVudHJ5O1xuICAgICAgdGhhdFtTSVpFXSsrO1xuICAgICAgLy8gYWRkIHRvIGluZGV4XG4gICAgICBpZiAoaW5kZXggIT09ICdGJykgdGhhdC5faVtpbmRleF0gPSBlbnRyeTtcbiAgICB9IHJldHVybiB0aGF0O1xuICB9LFxuICBnZXRFbnRyeTogZ2V0RW50cnksXG4gIHNldFN0cm9uZzogZnVuY3Rpb24gKEMsIE5BTUUsIElTX01BUCkge1xuICAgIC8vIGFkZCAua2V5cywgLnZhbHVlcywgLmVudHJpZXMsIFtAQGl0ZXJhdG9yXVxuICAgIC8vIDIzLjEuMy40LCAyMy4xLjMuOCwgMjMuMS4zLjExLCAyMy4xLjMuMTIsIDIzLjIuMy41LCAyMy4yLjMuOCwgMjMuMi4zLjEwLCAyMy4yLjMuMTFcbiAgICAkaXRlckRlZmluZShDLCBOQU1FLCBmdW5jdGlvbiAoaXRlcmF0ZWQsIGtpbmQpIHtcbiAgICAgIHRoaXMuX3QgPSB2YWxpZGF0ZShpdGVyYXRlZCwgTkFNRSk7IC8vIHRhcmdldFxuICAgICAgdGhpcy5fayA9IGtpbmQ7ICAgICAgICAgICAgICAgICAgICAgLy8ga2luZFxuICAgICAgdGhpcy5fbCA9IHVuZGVmaW5lZDsgICAgICAgICAgICAgICAgLy8gcHJldmlvdXNcbiAgICB9LCBmdW5jdGlvbiAoKSB7XG4gICAgICB2YXIgdGhhdCA9IHRoaXM7XG4gICAgICB2YXIga2luZCA9IHRoYXQuX2s7XG4gICAgICB2YXIgZW50cnkgPSB0aGF0Ll9sO1xuICAgICAgLy8gcmV2ZXJ0IHRvIHRoZSBsYXN0IGV4aXN0aW5nIGVudHJ5XG4gICAgICB3aGlsZSAoZW50cnkgJiYgZW50cnkucikgZW50cnkgPSBlbnRyeS5wO1xuICAgICAgLy8gZ2V0IG5leHQgZW50cnlcbiAgICAgIGlmICghdGhhdC5fdCB8fCAhKHRoYXQuX2wgPSBlbnRyeSA9IGVudHJ5ID8gZW50cnkubiA6IHRoYXQuX3QuX2YpKSB7XG4gICAgICAgIC8vIG9yIGZpbmlzaCB0aGUgaXRlcmF0aW9uXG4gICAgICAgIHRoYXQuX3QgPSB1bmRlZmluZWQ7XG4gICAgICAgIHJldHVybiBzdGVwKDEpO1xuICAgICAgfVxuICAgICAgLy8gcmV0dXJuIHN0ZXAgYnkga2luZFxuICAgICAgaWYgKGtpbmQgPT0gJ2tleXMnKSByZXR1cm4gc3RlcCgwLCBlbnRyeS5rKTtcbiAgICAgIGlmIChraW5kID09ICd2YWx1ZXMnKSByZXR1cm4gc3RlcCgwLCBlbnRyeS52KTtcbiAgICAgIHJldHVybiBzdGVwKDAsIFtlbnRyeS5rLCBlbnRyeS52XSk7XG4gICAgfSwgSVNfTUFQID8gJ2VudHJpZXMnIDogJ3ZhbHVlcycsICFJU19NQVAsIHRydWUpO1xuXG4gICAgLy8gYWRkIFtAQHNwZWNpZXNdLCAyMy4xLjIuMiwgMjMuMi4yLjJcbiAgICBzZXRTcGVjaWVzKE5BTUUpO1xuICB9XG59O1xuIiwiJ3VzZSBzdHJpY3QnO1xudmFyIHN0cm9uZyA9IHJlcXVpcmUoJy4vX2NvbGxlY3Rpb24tc3Ryb25nJyk7XG52YXIgdmFsaWRhdGUgPSByZXF1aXJlKCcuL192YWxpZGF0ZS1jb2xsZWN0aW9uJyk7XG52YXIgTUFQID0gJ01hcCc7XG5cbi8vIDIzLjEgTWFwIE9iamVjdHNcbm1vZHVsZS5leHBvcnRzID0gcmVxdWlyZSgnLi9fY29sbGVjdGlvbicpKE1BUCwgZnVuY3Rpb24gKGdldCkge1xuICByZXR1cm4gZnVuY3Rpb24gTWFwKCkgeyByZXR1cm4gZ2V0KHRoaXMsIGFyZ3VtZW50cy5sZW5ndGggPiAwID8gYXJndW1lbnRzWzBdIDogdW5kZWZpbmVkKTsgfTtcbn0sIHtcbiAgLy8gMjMuMS4zLjYgTWFwLnByb3RvdHlwZS5nZXQoa2V5KVxuICBnZXQ6IGZ1bmN0aW9uIGdldChrZXkpIHtcbiAgICB2YXIgZW50cnkgPSBzdHJvbmcuZ2V0RW50cnkodmFsaWRhdGUodGhpcywgTUFQKSwga2V5KTtcbiAgICByZXR1cm4gZW50cnkgJiYgZW50cnkudjtcbiAgfSxcbiAgLy8gMjMuMS4zLjkgTWFwLnByb3RvdHlwZS5zZXQoa2V5LCB2YWx1ZSlcbiAgc2V0OiBmdW5jdGlvbiBzZXQoa2V5LCB2YWx1ZSkge1xuICAgIHJldHVybiBzdHJvbmcuZGVmKHZhbGlkYXRlKHRoaXMsIE1BUCksIGtleSA9PT0gMCA/IDAgOiBrZXksIHZhbHVlKTtcbiAgfVxufSwgc3Ryb25nLCB0cnVlKTtcbiIsInZhciBhbk9iamVjdCA9IHJlcXVpcmUoJy4vX2FuLW9iamVjdCcpO1xudmFyIGlzT2JqZWN0ID0gcmVxdWlyZSgnLi9faXMtb2JqZWN0Jyk7XG52YXIgbmV3UHJvbWlzZUNhcGFiaWxpdHkgPSByZXF1aXJlKCcuL19uZXctcHJvbWlzZS1jYXBhYmlsaXR5Jyk7XG5cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKEMsIHgpIHtcbiAgYW5PYmplY3QoQyk7XG4gIGlmIChpc09iamVjdCh4KSAmJiB4LmNvbnN0cnVjdG9yID09PSBDKSByZXR1cm4geDtcbiAgdmFyIHByb21pc2VDYXBhYmlsaXR5ID0gbmV3UHJvbWlzZUNhcGFiaWxpdHkuZihDKTtcbiAgdmFyIHJlc29sdmUgPSBwcm9taXNlQ2FwYWJpbGl0eS5yZXNvbHZlO1xuICByZXNvbHZlKHgpO1xuICByZXR1cm4gcHJvbWlzZUNhcGFiaWxpdHkucHJvbWlzZTtcbn07XG4iLCJtb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChleGVjKSB7XG4gIHRyeSB7XG4gICAgcmV0dXJuIHsgZTogZmFsc2UsIHY6IGV4ZWMoKSB9O1xuICB9IGNhdGNoIChlKSB7XG4gICAgcmV0dXJuIHsgZTogdHJ1ZSwgdjogZSB9O1xuICB9XG59O1xuIiwiLy8gMjEuMi41LjMgZ2V0IFJlZ0V4cC5wcm90b3R5cGUuZmxhZ3MoKVxuaWYgKHJlcXVpcmUoJy4vX2Rlc2NyaXB0b3JzJykgJiYgLy4vZy5mbGFncyAhPSAnZycpIHJlcXVpcmUoJy4vX29iamVjdC1kcCcpLmYoUmVnRXhwLnByb3RvdHlwZSwgJ2ZsYWdzJywge1xuICBjb25maWd1cmFibGU6IHRydWUsXG4gIGdldDogcmVxdWlyZSgnLi9fZmxhZ3MnKVxufSk7XG4iLCJtb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChkb25lLCB2YWx1ZSkge1xuICByZXR1cm4geyB2YWx1ZTogdmFsdWUsIGRvbmU6ICEhZG9uZSB9O1xufTtcbiIsIi8vIDIyLjEuMy4zIEFycmF5LnByb3RvdHlwZS5jb3B5V2l0aGluKHRhcmdldCwgc3RhcnQsIGVuZCA9IHRoaXMubGVuZ3RoKVxuJ3VzZSBzdHJpY3QnO1xudmFyIHRvT2JqZWN0ID0gcmVxdWlyZSgnLi9fdG8tb2JqZWN0Jyk7XG52YXIgdG9BYnNvbHV0ZUluZGV4ID0gcmVxdWlyZSgnLi9fdG8tYWJzb2x1dGUtaW5kZXgnKTtcbnZhciB0b0xlbmd0aCA9IHJlcXVpcmUoJy4vX3RvLWxlbmd0aCcpO1xuXG5tb2R1bGUuZXhwb3J0cyA9IFtdLmNvcHlXaXRoaW4gfHwgZnVuY3Rpb24gY29weVdpdGhpbih0YXJnZXQgLyogPSAwICovLCBzdGFydCAvKiA9IDAsIGVuZCA9IEBsZW5ndGggKi8pIHtcbiAgdmFyIE8gPSB0b09iamVjdCh0aGlzKTtcbiAgdmFyIGxlbiA9IHRvTGVuZ3RoKE8ubGVuZ3RoKTtcbiAgdmFyIHRvID0gdG9BYnNvbHV0ZUluZGV4KHRhcmdldCwgbGVuKTtcbiAgdmFyIGZyb20gPSB0b0Fic29sdXRlSW5kZXgoc3RhcnQsIGxlbik7XG4gIHZhciBlbmQgPSBhcmd1bWVudHMubGVuZ3RoID4gMiA/IGFyZ3VtZW50c1syXSA6IHVuZGVmaW5lZDtcbiAgdmFyIGNvdW50ID0gTWF0aC5taW4oKGVuZCA9PT0gdW5kZWZpbmVkID8gbGVuIDogdG9BYnNvbHV0ZUluZGV4KGVuZCwgbGVuKSkgLSBmcm9tLCBsZW4gLSB0byk7XG4gIHZhciBpbmMgPSAxO1xuICBpZiAoZnJvbSA8IHRvICYmIHRvIDwgZnJvbSArIGNvdW50KSB7XG4gICAgaW5jID0gLTE7XG4gICAgZnJvbSArPSBjb3VudCAtIDE7XG4gICAgdG8gKz0gY291bnQgLSAxO1xuICB9XG4gIHdoaWxlIChjb3VudC0tID4gMCkge1xuICAgIGlmIChmcm9tIGluIE8pIE9bdG9dID0gT1tmcm9tXTtcbiAgICBlbHNlIGRlbGV0ZSBPW3RvXTtcbiAgICB0byArPSBpbmM7XG4gICAgZnJvbSArPSBpbmM7XG4gIH0gcmV0dXJuIE87XG59O1xuIiwidmFyIGFGdW5jdGlvbiA9IHJlcXVpcmUoJy4vX2EtZnVuY3Rpb24nKTtcbnZhciB0b09iamVjdCA9IHJlcXVpcmUoJy4vX3RvLW9iamVjdCcpO1xudmFyIElPYmplY3QgPSByZXF1aXJlKCcuL19pb2JqZWN0Jyk7XG52YXIgdG9MZW5ndGggPSByZXF1aXJlKCcuL190by1sZW5ndGgnKTtcblxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAodGhhdCwgY2FsbGJhY2tmbiwgYUxlbiwgbWVtbywgaXNSaWdodCkge1xuICBhRnVuY3Rpb24oY2FsbGJhY2tmbik7XG4gIHZhciBPID0gdG9PYmplY3QodGhhdCk7XG4gIHZhciBzZWxmID0gSU9iamVjdChPKTtcbiAgdmFyIGxlbmd0aCA9IHRvTGVuZ3RoKE8ubGVuZ3RoKTtcbiAgdmFyIGluZGV4ID0gaXNSaWdodCA/IGxlbmd0aCAtIDEgOiAwO1xuICB2YXIgaSA9IGlzUmlnaHQgPyAtMSA6IDE7XG4gIGlmIChhTGVuIDwgMikgZm9yICg7Oykge1xuICAgIGlmIChpbmRleCBpbiBzZWxmKSB7XG4gICAgICBtZW1vID0gc2VsZltpbmRleF07XG4gICAgICBpbmRleCArPSBpO1xuICAgICAgYnJlYWs7XG4gICAgfVxuICAgIGluZGV4ICs9IGk7XG4gICAgaWYgKGlzUmlnaHQgPyBpbmRleCA8IDAgOiBsZW5ndGggPD0gaW5kZXgpIHtcbiAgICAgIHRocm93IFR5cGVFcnJvcignUmVkdWNlIG9mIGVtcHR5IGFycmF5IHdpdGggbm8gaW5pdGlhbCB2YWx1ZScpO1xuICAgIH1cbiAgfVxuICBmb3IgKDtpc1JpZ2h0ID8gaW5kZXggPj0gMCA6IGxlbmd0aCA+IGluZGV4OyBpbmRleCArPSBpKSBpZiAoaW5kZXggaW4gc2VsZikge1xuICAgIG1lbW8gPSBjYWxsYmFja2ZuKG1lbW8sIHNlbGZbaW5kZXhdLCBpbmRleCwgTyk7XG4gIH1cbiAgcmV0dXJuIG1lbW87XG59O1xuIiwiLy8gY2FsbCBzb21ldGhpbmcgb24gaXRlcmF0b3Igc3RlcCB3aXRoIHNhZmUgY2xvc2luZyBvbiBlcnJvclxudmFyIGFuT2JqZWN0ID0gcmVxdWlyZSgnLi9fYW4tb2JqZWN0Jyk7XG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChpdGVyYXRvciwgZm4sIHZhbHVlLCBlbnRyaWVzKSB7XG4gIHRyeSB7XG4gICAgcmV0dXJuIGVudHJpZXMgPyBmbihhbk9iamVjdCh2YWx1ZSlbMF0sIHZhbHVlWzFdKSA6IGZuKHZhbHVlKTtcbiAgLy8gNy40LjYgSXRlcmF0b3JDbG9zZShpdGVyYXRvciwgY29tcGxldGlvbilcbiAgfSBjYXRjaCAoZSkge1xuICAgIHZhciByZXQgPSBpdGVyYXRvclsncmV0dXJuJ107XG4gICAgaWYgKHJldCAhPT0gdW5kZWZpbmVkKSBhbk9iamVjdChyZXQuY2FsbChpdGVyYXRvcikpO1xuICAgIHRocm93IGU7XG4gIH1cbn07XG4iLCIvLyAyMC4yLjIuMTYgTWF0aC5mcm91bmQoeClcbnZhciBzaWduID0gcmVxdWlyZSgnLi9fbWF0aC1zaWduJyk7XG52YXIgcG93ID0gTWF0aC5wb3c7XG52YXIgRVBTSUxPTiA9IHBvdygyLCAtNTIpO1xudmFyIEVQU0lMT04zMiA9IHBvdygyLCAtMjMpO1xudmFyIE1BWDMyID0gcG93KDIsIDEyNykgKiAoMiAtIEVQU0lMT04zMik7XG52YXIgTUlOMzIgPSBwb3coMiwgLTEyNik7XG5cbnZhciByb3VuZFRpZXNUb0V2ZW4gPSBmdW5jdGlvbiAobikge1xuICByZXR1cm4gbiArIDEgLyBFUFNJTE9OIC0gMSAvIEVQU0lMT047XG59O1xuXG5tb2R1bGUuZXhwb3J0cyA9IE1hdGguZnJvdW5kIHx8IGZ1bmN0aW9uIGZyb3VuZCh4KSB7XG4gIHZhciAkYWJzID0gTWF0aC5hYnMoeCk7XG4gIHZhciAkc2lnbiA9IHNpZ24oeCk7XG4gIHZhciBhLCByZXN1bHQ7XG4gIGlmICgkYWJzIDwgTUlOMzIpIHJldHVybiAkc2lnbiAqIHJvdW5kVGllc1RvRXZlbigkYWJzIC8gTUlOMzIgLyBFUFNJTE9OMzIpICogTUlOMzIgKiBFUFNJTE9OMzI7XG4gIGEgPSAoMSArIEVQU0lMT04zMiAvIEVQU0lMT04pICogJGFicztcbiAgcmVzdWx0ID0gYSAtIChhIC0gJGFicyk7XG4gIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBuby1zZWxmLWNvbXBhcmVcbiAgaWYgKHJlc3VsdCA+IE1BWDMyIHx8IHJlc3VsdCAhPSByZXN1bHQpIHJldHVybiAkc2lnbiAqIEluZmluaXR5O1xuICByZXR1cm4gJHNpZ24gKiByZXN1bHQ7XG59O1xuIiwiLy8gMjAuMi4yLjIwIE1hdGgubG9nMXAoeClcbm1vZHVsZS5leHBvcnRzID0gTWF0aC5sb2cxcCB8fCBmdW5jdGlvbiBsb2cxcCh4KSB7XG4gIHJldHVybiAoeCA9ICt4KSA+IC0xZS04ICYmIHggPCAxZS04ID8geCAtIHggKiB4IC8gMiA6IE1hdGgubG9nKDEgKyB4KTtcbn07XG4iLCIvLyAyMC4xLjIuMyBOdW1iZXIuaXNJbnRlZ2VyKG51bWJlcilcbnZhciBpc09iamVjdCA9IHJlcXVpcmUoJy4vX2lzLW9iamVjdCcpO1xudmFyIGZsb29yID0gTWF0aC5mbG9vcjtcbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gaXNJbnRlZ2VyKGl0KSB7XG4gIHJldHVybiAhaXNPYmplY3QoaXQpICYmIGlzRmluaXRlKGl0KSAmJiBmbG9vcihpdCkgPT09IGl0O1xufTtcbiIsInZhciBjb2YgPSByZXF1aXJlKCcuL19jb2YnKTtcbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKGl0LCBtc2cpIHtcbiAgaWYgKHR5cGVvZiBpdCAhPSAnbnVtYmVyJyAmJiBjb2YoaXQpICE9ICdOdW1iZXInKSB0aHJvdyBUeXBlRXJyb3IobXNnKTtcbiAgcmV0dXJuICtpdDtcbn07XG4iLCJ2YXIgJHBhcnNlRmxvYXQgPSByZXF1aXJlKCcuL19nbG9iYWwnKS5wYXJzZUZsb2F0O1xudmFyICR0cmltID0gcmVxdWlyZSgnLi9fc3RyaW5nLXRyaW0nKS50cmltO1xuXG5tb2R1bGUuZXhwb3J0cyA9IDEgLyAkcGFyc2VGbG9hdChyZXF1aXJlKCcuL19zdHJpbmctd3MnKSArICctMCcpICE9PSAtSW5maW5pdHkgPyBmdW5jdGlvbiBwYXJzZUZsb2F0KHN0cikge1xuICB2YXIgc3RyaW5nID0gJHRyaW0oU3RyaW5nKHN0ciksIDMpO1xuICB2YXIgcmVzdWx0ID0gJHBhcnNlRmxvYXQoc3RyaW5nKTtcbiAgcmV0dXJuIHJlc3VsdCA9PT0gMCAmJiBzdHJpbmcuY2hhckF0KDApID09ICctJyA/IC0wIDogcmVzdWx0O1xufSA6ICRwYXJzZUZsb2F0O1xuIiwidmFyICRwYXJzZUludCA9IHJlcXVpcmUoJy4vX2dsb2JhbCcpLnBhcnNlSW50O1xudmFyICR0cmltID0gcmVxdWlyZSgnLi9fc3RyaW5nLXRyaW0nKS50cmltO1xudmFyIHdzID0gcmVxdWlyZSgnLi9fc3RyaW5nLXdzJyk7XG52YXIgaGV4ID0gL15bLStdPzBbeFhdLztcblxubW9kdWxlLmV4cG9ydHMgPSAkcGFyc2VJbnQod3MgKyAnMDgnKSAhPT0gOCB8fCAkcGFyc2VJbnQod3MgKyAnMHgxNicpICE9PSAyMiA/IGZ1bmN0aW9uIHBhcnNlSW50KHN0ciwgcmFkaXgpIHtcbiAgdmFyIHN0cmluZyA9ICR0cmltKFN0cmluZyhzdHIpLCAzKTtcbiAgcmV0dXJuICRwYXJzZUludChzdHJpbmcsIChyYWRpeCA+Pj4gMCkgfHwgKGhleC50ZXN0KHN0cmluZykgPyAxNiA6IDEwKSk7XG59IDogJHBhcnNlSW50O1xuIiwiLy8gZmFzdCBhcHBseSwgaHR0cDovL2pzcGVyZi5sbmtpdC5jb20vZmFzdC1hcHBseS81XG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChmbiwgYXJncywgdGhhdCkge1xuICB2YXIgdW4gPSB0aGF0ID09PSB1bmRlZmluZWQ7XG4gIHN3aXRjaCAoYXJncy5sZW5ndGgpIHtcbiAgICBjYXNlIDA6IHJldHVybiB1biA/IGZuKClcbiAgICAgICAgICAgICAgICAgICAgICA6IGZuLmNhbGwodGhhdCk7XG4gICAgY2FzZSAxOiByZXR1cm4gdW4gPyBmbihhcmdzWzBdKVxuICAgICAgICAgICAgICAgICAgICAgIDogZm4uY2FsbCh0aGF0LCBhcmdzWzBdKTtcbiAgICBjYXNlIDI6IHJldHVybiB1biA/IGZuKGFyZ3NbMF0sIGFyZ3NbMV0pXG4gICAgICAgICAgICAgICAgICAgICAgOiBmbi5jYWxsKHRoYXQsIGFyZ3NbMF0sIGFyZ3NbMV0pO1xuICAgIGNhc2UgMzogcmV0dXJuIHVuID8gZm4oYXJnc1swXSwgYXJnc1sxXSwgYXJnc1syXSlcbiAgICAgICAgICAgICAgICAgICAgICA6IGZuLmNhbGwodGhhdCwgYXJnc1swXSwgYXJnc1sxXSwgYXJnc1syXSk7XG4gICAgY2FzZSA0OiByZXR1cm4gdW4gPyBmbihhcmdzWzBdLCBhcmdzWzFdLCBhcmdzWzJdLCBhcmdzWzNdKVxuICAgICAgICAgICAgICAgICAgICAgIDogZm4uY2FsbCh0aGF0LCBhcmdzWzBdLCBhcmdzWzFdLCBhcmdzWzJdLCBhcmdzWzNdKTtcbiAgfSByZXR1cm4gZm4uYXBwbHkodGhhdCwgYXJncyk7XG59O1xuIiwiJ3VzZSBzdHJpY3QnO1xudmFyIGFGdW5jdGlvbiA9IHJlcXVpcmUoJy4vX2EtZnVuY3Rpb24nKTtcbnZhciBpc09iamVjdCA9IHJlcXVpcmUoJy4vX2lzLW9iamVjdCcpO1xudmFyIGludm9rZSA9IHJlcXVpcmUoJy4vX2ludm9rZScpO1xudmFyIGFycmF5U2xpY2UgPSBbXS5zbGljZTtcbnZhciBmYWN0b3JpZXMgPSB7fTtcblxudmFyIGNvbnN0cnVjdCA9IGZ1bmN0aW9uIChGLCBsZW4sIGFyZ3MpIHtcbiAgaWYgKCEobGVuIGluIGZhY3RvcmllcykpIHtcbiAgICBmb3IgKHZhciBuID0gW10sIGkgPSAwOyBpIDwgbGVuOyBpKyspIG5baV0gPSAnYVsnICsgaSArICddJztcbiAgICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgbm8tbmV3LWZ1bmNcbiAgICBmYWN0b3JpZXNbbGVuXSA9IEZ1bmN0aW9uKCdGLGEnLCAncmV0dXJuIG5ldyBGKCcgKyBuLmpvaW4oJywnKSArICcpJyk7XG4gIH0gcmV0dXJuIGZhY3Rvcmllc1tsZW5dKEYsIGFyZ3MpO1xufTtcblxubW9kdWxlLmV4cG9ydHMgPSBGdW5jdGlvbi5iaW5kIHx8IGZ1bmN0aW9uIGJpbmQodGhhdCAvKiAsIC4uLmFyZ3MgKi8pIHtcbiAgdmFyIGZuID0gYUZ1bmN0aW9uKHRoaXMpO1xuICB2YXIgcGFydEFyZ3MgPSBhcnJheVNsaWNlLmNhbGwoYXJndW1lbnRzLCAxKTtcbiAgdmFyIGJvdW5kID0gZnVuY3Rpb24gKC8qIGFyZ3MuLi4gKi8pIHtcbiAgICB2YXIgYXJncyA9IHBhcnRBcmdzLmNvbmNhdChhcnJheVNsaWNlLmNhbGwoYXJndW1lbnRzKSk7XG4gICAgcmV0dXJuIHRoaXMgaW5zdGFuY2VvZiBib3VuZCA/IGNvbnN0cnVjdChmbiwgYXJncy5sZW5ndGgsIGFyZ3MpIDogaW52b2tlKGZuLCBhcmdzLCB0aGF0KTtcbiAgfTtcbiAgaWYgKGlzT2JqZWN0KGZuLnByb3RvdHlwZSkpIGJvdW5kLnByb3RvdHlwZSA9IGZuLnByb3RvdHlwZTtcbiAgcmV0dXJuIGJvdW5kO1xufTtcbiIsIid1c2Ugc3RyaWN0Jztcbi8vIDE5LjEuMi4xIE9iamVjdC5hc3NpZ24odGFyZ2V0LCBzb3VyY2UsIC4uLilcbnZhciBnZXRLZXlzID0gcmVxdWlyZSgnLi9fb2JqZWN0LWtleXMnKTtcbnZhciBnT1BTID0gcmVxdWlyZSgnLi9fb2JqZWN0LWdvcHMnKTtcbnZhciBwSUUgPSByZXF1aXJlKCcuL19vYmplY3QtcGllJyk7XG52YXIgdG9PYmplY3QgPSByZXF1aXJlKCcuL190by1vYmplY3QnKTtcbnZhciBJT2JqZWN0ID0gcmVxdWlyZSgnLi9faW9iamVjdCcpO1xudmFyICRhc3NpZ24gPSBPYmplY3QuYXNzaWduO1xuXG4vLyBzaG91bGQgd29yayB3aXRoIHN5bWJvbHMgYW5kIHNob3VsZCBoYXZlIGRldGVybWluaXN0aWMgcHJvcGVydHkgb3JkZXIgKFY4IGJ1Zylcbm1vZHVsZS5leHBvcnRzID0gISRhc3NpZ24gfHwgcmVxdWlyZSgnLi9fZmFpbHMnKShmdW5jdGlvbiAoKSB7XG4gIHZhciBBID0ge307XG4gIHZhciBCID0ge307XG4gIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBuby11bmRlZlxuICB2YXIgUyA9IFN5bWJvbCgpO1xuICB2YXIgSyA9ICdhYmNkZWZnaGlqa2xtbm9wcXJzdCc7XG4gIEFbU10gPSA3O1xuICBLLnNwbGl0KCcnKS5mb3JFYWNoKGZ1bmN0aW9uIChrKSB7IEJba10gPSBrOyB9KTtcbiAgcmV0dXJuICRhc3NpZ24oe30sIEEpW1NdICE9IDcgfHwgT2JqZWN0LmtleXMoJGFzc2lnbih7fSwgQikpLmpvaW4oJycpICE9IEs7XG59KSA/IGZ1bmN0aW9uIGFzc2lnbih0YXJnZXQsIHNvdXJjZSkgeyAvLyBlc2xpbnQtZGlzYWJsZS1saW5lIG5vLXVudXNlZC12YXJzXG4gIHZhciBUID0gdG9PYmplY3QodGFyZ2V0KTtcbiAgdmFyIGFMZW4gPSBhcmd1bWVudHMubGVuZ3RoO1xuICB2YXIgaW5kZXggPSAxO1xuICB2YXIgZ2V0U3ltYm9scyA9IGdPUFMuZjtcbiAgdmFyIGlzRW51bSA9IHBJRS5mO1xuICB3aGlsZSAoYUxlbiA+IGluZGV4KSB7XG4gICAgdmFyIFMgPSBJT2JqZWN0KGFyZ3VtZW50c1tpbmRleCsrXSk7XG4gICAgdmFyIGtleXMgPSBnZXRTeW1ib2xzID8gZ2V0S2V5cyhTKS5jb25jYXQoZ2V0U3ltYm9scyhTKSkgOiBnZXRLZXlzKFMpO1xuICAgIHZhciBsZW5ndGggPSBrZXlzLmxlbmd0aDtcbiAgICB2YXIgaiA9IDA7XG4gICAgdmFyIGtleTtcbiAgICB3aGlsZSAobGVuZ3RoID4gaikgaWYgKGlzRW51bS5jYWxsKFMsIGtleSA9IGtleXNbaisrXSkpIFRba2V5XSA9IFNba2V5XTtcbiAgfSByZXR1cm4gVDtcbn0gOiAkYXNzaWduO1xuIiwiLy8gZmFsbGJhY2sgZm9yIElFMTEgYnVnZ3kgT2JqZWN0LmdldE93blByb3BlcnR5TmFtZXMgd2l0aCBpZnJhbWUgYW5kIHdpbmRvd1xudmFyIHRvSU9iamVjdCA9IHJlcXVpcmUoJy4vX3RvLWlvYmplY3QnKTtcbnZhciBnT1BOID0gcmVxdWlyZSgnLi9fb2JqZWN0LWdvcG4nKS5mO1xudmFyIHRvU3RyaW5nID0ge30udG9TdHJpbmc7XG5cbnZhciB3aW5kb3dOYW1lcyA9IHR5cGVvZiB3aW5kb3cgPT0gJ29iamVjdCcgJiYgd2luZG93ICYmIE9iamVjdC5nZXRPd25Qcm9wZXJ0eU5hbWVzXG4gID8gT2JqZWN0LmdldE93blByb3BlcnR5TmFtZXMod2luZG93KSA6IFtdO1xuXG52YXIgZ2V0V2luZG93TmFtZXMgPSBmdW5jdGlvbiAoaXQpIHtcbiAgdHJ5IHtcbiAgICByZXR1cm4gZ09QTihpdCk7XG4gIH0gY2F0Y2ggKGUpIHtcbiAgICByZXR1cm4gd2luZG93TmFtZXMuc2xpY2UoKTtcbiAgfVxufTtcblxubW9kdWxlLmV4cG9ydHMuZiA9IGZ1bmN0aW9uIGdldE93blByb3BlcnR5TmFtZXMoaXQpIHtcbiAgcmV0dXJuIHdpbmRvd05hbWVzICYmIHRvU3RyaW5nLmNhbGwoaXQpID09ICdbb2JqZWN0IFdpbmRvd10nID8gZ2V0V2luZG93TmFtZXMoaXQpIDogZ09QTih0b0lPYmplY3QoaXQpKTtcbn07XG4iLCJ2YXIgZFAgPSByZXF1aXJlKCcuL19vYmplY3QtZHAnKTtcbnZhciBhbk9iamVjdCA9IHJlcXVpcmUoJy4vX2FuLW9iamVjdCcpO1xudmFyIGdldEtleXMgPSByZXF1aXJlKCcuL19vYmplY3Qta2V5cycpO1xuXG5tb2R1bGUuZXhwb3J0cyA9IHJlcXVpcmUoJy4vX2Rlc2NyaXB0b3JzJykgPyBPYmplY3QuZGVmaW5lUHJvcGVydGllcyA6IGZ1bmN0aW9uIGRlZmluZVByb3BlcnRpZXMoTywgUHJvcGVydGllcykge1xuICBhbk9iamVjdChPKTtcbiAgdmFyIGtleXMgPSBnZXRLZXlzKFByb3BlcnRpZXMpO1xuICB2YXIgbGVuZ3RoID0ga2V5cy5sZW5ndGg7XG4gIHZhciBpID0gMDtcbiAgdmFyIFA7XG4gIHdoaWxlIChsZW5ndGggPiBpKSBkUC5mKE8sIFAgPSBrZXlzW2krK10sIFByb3BlcnRpZXNbUF0pO1xuICByZXR1cm4gTztcbn07XG4iLCJ2YXIgaGFzID0gcmVxdWlyZSgnLi9faGFzJyk7XG52YXIgdG9JT2JqZWN0ID0gcmVxdWlyZSgnLi9fdG8taW9iamVjdCcpO1xudmFyIGFycmF5SW5kZXhPZiA9IHJlcXVpcmUoJy4vX2FycmF5LWluY2x1ZGVzJykoZmFsc2UpO1xudmFyIElFX1BST1RPID0gcmVxdWlyZSgnLi9fc2hhcmVkLWtleScpKCdJRV9QUk9UTycpO1xuXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChvYmplY3QsIG5hbWVzKSB7XG4gIHZhciBPID0gdG9JT2JqZWN0KG9iamVjdCk7XG4gIHZhciBpID0gMDtcbiAgdmFyIHJlc3VsdCA9IFtdO1xuICB2YXIga2V5O1xuICBmb3IgKGtleSBpbiBPKSBpZiAoa2V5ICE9IElFX1BST1RPKSBoYXMoTywga2V5KSAmJiByZXN1bHQucHVzaChrZXkpO1xuICAvLyBEb24ndCBlbnVtIGJ1ZyAmIGhpZGRlbiBrZXlzXG4gIHdoaWxlIChuYW1lcy5sZW5ndGggPiBpKSBpZiAoaGFzKE8sIGtleSA9IG5hbWVzW2krK10pKSB7XG4gICAgfmFycmF5SW5kZXhPZihyZXN1bHQsIGtleSkgfHwgcmVzdWx0LnB1c2goa2V5KTtcbiAgfVxuICByZXR1cm4gcmVzdWx0O1xufTtcbiIsImV4cG9ydHMuZiA9IHJlcXVpcmUoJy4vX3drcycpO1xuIiwibW9kdWxlLmV4cG9ydHMgPSAhcmVxdWlyZSgnLi9fZGVzY3JpcHRvcnMnKSAmJiAhcmVxdWlyZSgnLi9fZmFpbHMnKShmdW5jdGlvbiAoKSB7XG4gIHJldHVybiBPYmplY3QuZGVmaW5lUHJvcGVydHkocmVxdWlyZSgnLi9fZG9tLWNyZWF0ZScpKCdkaXYnKSwgJ2EnLCB7IGdldDogZnVuY3Rpb24gKCkgeyByZXR1cm4gNzsgfSB9KS5hICE9IDc7XG59KTtcbiIsImV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIHN5bWJvbE9ic2VydmFibGVQb255ZmlsbChyb290KSB7XG5cdHZhciByZXN1bHQ7XG5cdHZhciBTeW1ib2wgPSByb290LlN5bWJvbDtcblxuXHRpZiAodHlwZW9mIFN5bWJvbCA9PT0gJ2Z1bmN0aW9uJykge1xuXHRcdGlmIChTeW1ib2wub2JzZXJ2YWJsZSkge1xuXHRcdFx0cmVzdWx0ID0gU3ltYm9sLm9ic2VydmFibGU7XG5cdFx0fSBlbHNlIHtcblx0XHRcdHJlc3VsdCA9IFN5bWJvbCgnb2JzZXJ2YWJsZScpO1xuXHRcdFx0U3ltYm9sLm9ic2VydmFibGUgPSByZXN1bHQ7XG5cdFx0fVxuXHR9IGVsc2Uge1xuXHRcdHJlc3VsdCA9ICdAQG9ic2VydmFibGUnO1xuXHR9XG5cblx0cmV0dXJuIHJlc3VsdDtcbn07XG4iLCIvKipcbiAqIENvcHlyaWdodCAyMDE1LCBZYWhvbyEgSW5jLlxuICogQ29weXJpZ2h0cyBsaWNlbnNlZCB1bmRlciB0aGUgTmV3IEJTRCBMaWNlbnNlLiBTZWUgdGhlIGFjY29tcGFueWluZyBMSUNFTlNFIGZpbGUgZm9yIHRlcm1zLlxuICovXG4oZnVuY3Rpb24gKGdsb2JhbCwgZmFjdG9yeSkge1xuICAgIHR5cGVvZiBleHBvcnRzID09PSAnb2JqZWN0JyAmJiB0eXBlb2YgbW9kdWxlICE9PSAndW5kZWZpbmVkJyA/IG1vZHVsZS5leHBvcnRzID0gZmFjdG9yeSgpIDpcbiAgICB0eXBlb2YgZGVmaW5lID09PSAnZnVuY3Rpb24nICYmIGRlZmluZS5hbWQgPyBkZWZpbmUoZmFjdG9yeSkgOlxuICAgIChnbG9iYWwuaG9pc3ROb25SZWFjdFN0YXRpY3MgPSBmYWN0b3J5KCkpO1xufSh0aGlzLCAoZnVuY3Rpb24gKCkge1xuICAgICd1c2Ugc3RyaWN0JztcbiAgICBcbiAgICB2YXIgUkVBQ1RfU1RBVElDUyA9IHtcbiAgICAgICAgY2hpbGRDb250ZXh0VHlwZXM6IHRydWUsXG4gICAgICAgIGNvbnRleHRUeXBlczogdHJ1ZSxcbiAgICAgICAgZGVmYXVsdFByb3BzOiB0cnVlLFxuICAgICAgICBkaXNwbGF5TmFtZTogdHJ1ZSxcbiAgICAgICAgZ2V0RGVmYXVsdFByb3BzOiB0cnVlLFxuICAgICAgICBnZXREZXJpdmVkU3RhdGVGcm9tUHJvcHM6IHRydWUsXG4gICAgICAgIG1peGluczogdHJ1ZSxcbiAgICAgICAgcHJvcFR5cGVzOiB0cnVlLFxuICAgICAgICB0eXBlOiB0cnVlXG4gICAgfTtcbiAgICBcbiAgICB2YXIgS05PV05fU1RBVElDUyA9IHtcbiAgICAgICAgbmFtZTogdHJ1ZSxcbiAgICAgICAgbGVuZ3RoOiB0cnVlLFxuICAgICAgICBwcm90b3R5cGU6IHRydWUsXG4gICAgICAgIGNhbGxlcjogdHJ1ZSxcbiAgICAgICAgY2FsbGVlOiB0cnVlLFxuICAgICAgICBhcmd1bWVudHM6IHRydWUsXG4gICAgICAgIGFyaXR5OiB0cnVlXG4gICAgfTtcbiAgICBcbiAgICB2YXIgZGVmaW5lUHJvcGVydHkgPSBPYmplY3QuZGVmaW5lUHJvcGVydHk7XG4gICAgdmFyIGdldE93blByb3BlcnR5TmFtZXMgPSBPYmplY3QuZ2V0T3duUHJvcGVydHlOYW1lcztcbiAgICB2YXIgZ2V0T3duUHJvcGVydHlTeW1ib2xzID0gT2JqZWN0LmdldE93blByb3BlcnR5U3ltYm9scztcbiAgICB2YXIgZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yID0gT2JqZWN0LmdldE93blByb3BlcnR5RGVzY3JpcHRvcjtcbiAgICB2YXIgZ2V0UHJvdG90eXBlT2YgPSBPYmplY3QuZ2V0UHJvdG90eXBlT2Y7XG4gICAgdmFyIG9iamVjdFByb3RvdHlwZSA9IGdldFByb3RvdHlwZU9mICYmIGdldFByb3RvdHlwZU9mKE9iamVjdCk7XG4gICAgXG4gICAgcmV0dXJuIGZ1bmN0aW9uIGhvaXN0Tm9uUmVhY3RTdGF0aWNzKHRhcmdldENvbXBvbmVudCwgc291cmNlQ29tcG9uZW50LCBibGFja2xpc3QpIHtcbiAgICAgICAgaWYgKHR5cGVvZiBzb3VyY2VDb21wb25lbnQgIT09ICdzdHJpbmcnKSB7IC8vIGRvbid0IGhvaXN0IG92ZXIgc3RyaW5nIChodG1sKSBjb21wb25lbnRzXG4gICAgICAgICAgICBcbiAgICAgICAgICAgIGlmIChvYmplY3RQcm90b3R5cGUpIHtcbiAgICAgICAgICAgICAgICB2YXIgaW5oZXJpdGVkQ29tcG9uZW50ID0gZ2V0UHJvdG90eXBlT2Yoc291cmNlQ29tcG9uZW50KTtcbiAgICAgICAgICAgICAgICBpZiAoaW5oZXJpdGVkQ29tcG9uZW50ICYmIGluaGVyaXRlZENvbXBvbmVudCAhPT0gb2JqZWN0UHJvdG90eXBlKSB7XG4gICAgICAgICAgICAgICAgICAgIGhvaXN0Tm9uUmVhY3RTdGF0aWNzKHRhcmdldENvbXBvbmVudCwgaW5oZXJpdGVkQ29tcG9uZW50LCBibGFja2xpc3QpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIFxuICAgICAgICAgICAgdmFyIGtleXMgPSBnZXRPd25Qcm9wZXJ0eU5hbWVzKHNvdXJjZUNvbXBvbmVudCk7XG4gICAgICAgICAgICBcbiAgICAgICAgICAgIGlmIChnZXRPd25Qcm9wZXJ0eVN5bWJvbHMpIHtcbiAgICAgICAgICAgICAgICBrZXlzID0ga2V5cy5jb25jYXQoZ2V0T3duUHJvcGVydHlTeW1ib2xzKHNvdXJjZUNvbXBvbmVudCkpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgXG4gICAgICAgICAgICBmb3IgKHZhciBpID0gMDsgaSA8IGtleXMubGVuZ3RoOyArK2kpIHtcbiAgICAgICAgICAgICAgICB2YXIga2V5ID0ga2V5c1tpXTtcbiAgICAgICAgICAgICAgICBpZiAoIVJFQUNUX1NUQVRJQ1Nba2V5XSAmJiAhS05PV05fU1RBVElDU1trZXldICYmICghYmxhY2tsaXN0IHx8ICFibGFja2xpc3Rba2V5XSkpIHtcbiAgICAgICAgICAgICAgICAgICAgdmFyIGRlc2NyaXB0b3IgPSBnZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3Ioc291cmNlQ29tcG9uZW50LCBrZXkpO1xuICAgICAgICAgICAgICAgICAgICB0cnkgeyAvLyBBdm9pZCBmYWlsdXJlcyBmcm9tIHJlYWQtb25seSBwcm9wZXJ0aWVzXG4gICAgICAgICAgICAgICAgICAgICAgICBkZWZpbmVQcm9wZXJ0eSh0YXJnZXRDb21wb25lbnQsIGtleSwgZGVzY3JpcHRvcik7XG4gICAgICAgICAgICAgICAgICAgIH0gY2F0Y2ggKGUpIHt9XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICAgICAgXG4gICAgICAgICAgICByZXR1cm4gdGFyZ2V0Q29tcG9uZW50O1xuICAgICAgICB9XG4gICAgICAgIFxuICAgICAgICByZXR1cm4gdGFyZ2V0Q29tcG9uZW50O1xuICAgIH07XG59KSkpO1xuIiwiJ3VzZSBzdHJpY3QnO1xuXG5leHBvcnRzLl9fZXNNb2R1bGUgPSB0cnVlO1xuZnVuY3Rpb24gY3JlYXRlVGh1bmtNaWRkbGV3YXJlKGV4dHJhQXJndW1lbnQpIHtcbiAgcmV0dXJuIGZ1bmN0aW9uIChfcmVmKSB7XG4gICAgdmFyIGRpc3BhdGNoID0gX3JlZi5kaXNwYXRjaCxcbiAgICAgICAgZ2V0U3RhdGUgPSBfcmVmLmdldFN0YXRlO1xuICAgIHJldHVybiBmdW5jdGlvbiAobmV4dCkge1xuICAgICAgcmV0dXJuIGZ1bmN0aW9uIChhY3Rpb24pIHtcbiAgICAgICAgaWYgKHR5cGVvZiBhY3Rpb24gPT09ICdmdW5jdGlvbicpIHtcbiAgICAgICAgICByZXR1cm4gYWN0aW9uKGRpc3BhdGNoLCBnZXRTdGF0ZSwgZXh0cmFBcmd1bWVudCk7XG4gICAgICAgIH1cblxuICAgICAgICByZXR1cm4gbmV4dChhY3Rpb24pO1xuICAgICAgfTtcbiAgICB9O1xuICB9O1xufVxuXG52YXIgdGh1bmsgPSBjcmVhdGVUaHVua01pZGRsZXdhcmUoKTtcbnRodW5rLndpdGhFeHRyYUFyZ3VtZW50ID0gY3JlYXRlVGh1bmtNaWRkbGV3YXJlO1xuXG5leHBvcnRzWydkZWZhdWx0J10gPSB0aHVuazsiLCJpbXBvcnQgeyBjb21iaW5lUmVkdWNlcnMgfSBmcm9tICdyZWR1eCdcbmltcG9ydCB7XG4gIExJU1RfUkVRVUVTVCxcbiAgTElTVF9SRVFVRVNUX1NVQ0NFU1MsXG4gIExJU1RfUkVRVUVTVF9GQUlMRUQsXG4gIFBST1BFUlRZX0RBVEFfUkVRVUVTVCxcbiAgUFJPUEVSVFlfREFUQV9TVUNDRVNTLFxuICBQUk9QRVJUWV9EQVRBX0ZBSUxFRCxcbiAgU0hPV19QUk9QRVJUWV9QQU5FTCxcbiAgSElERV9QUk9QRVJUWV9QQU5FTFxufSBmcm9tICdBY3Rpb25zL2luZGV4J1xuXG5jb25zdCBpc1Byb3BlcnR5UGFuZWxPcGVuID0gKHN0YXRlID0gZmFsc2UsIGFjdGlvbikgPT4ge1xuICBzd2l0Y2goYWN0aW9uLnR5cGUpIHtcbiAgICBjYXNlIFNIT1dfUFJPUEVSVFlfUEFORUw6XG4gICAgICByZXR1cm4gdHJ1ZVxuICAgIGNhc2UgSElERV9QUk9QRVJUWV9QQU5FTDpcbiAgICAgIHJldHVybiBmYWxzZVxuICAgIGRlZmF1bHQ6XG4gICAgICByZXR1cm4gc3RhdGU7XG4gIH1cbn1cblxuY29uc3QgaXNSZXRyaWV2aW5nRGF0YSA9IChzdGF0ZSA9IGZhbHNlLCBhY3Rpb24pID0+IHtcbiAgc3dpdGNoKGFjdGlvbi50eXBlKSB7XG4gICAgY2FzZSBMSVNUX1JFUVVFU1Q6XG4gICAgICByZXR1cm4gdHJ1ZVxuICAgIGNhc2UgTElTVF9SRVFVRVNUX1NVQ0NFU1M6XG4gICAgY2FzZSBMSVNUX1JFUVVFU1RfRkFJTEVEOlxuICAgICAgcmV0dXJuIGZhbHNlXG4gICAgZGVmYXVsdDpcbiAgICAgIHJldHVybiBzdGF0ZTtcbiAgfVxufVxuXG5jb25zdCBpc1JldHJpZXZpbmdQcm9wZXJ0eURhdGEgPSAoc3RhdGUgPSBmYWxzZSwgYWN0aW9uKSA9PiB7XG4gIHN3aXRjaChhY3Rpb24udHlwZSkge1xuICAgIGNhc2UgUFJPUEVSVFlfREFUQV9SRVFVRVNUOlxuICAgICAgcmV0dXJuIHRydWVcbiAgICBjYXNlIFBST1BFUlRZX0RBVEFfU1VDQ0VTUzpcbiAgICBjYXNlIFBST1BFUlRZX0RBVEFfRkFJTEVEOlxuICAgICAgcmV0dXJuIGZhbHNlXG4gICAgZGVmYXVsdDpcbiAgICAgIHJldHVybiBzdGF0ZTtcbiAgfVxufVxuXG5jb25zdCBjdXJyZW50UHJvcGVydHlEYXRhID0gKHN0YXRlID0ge30sIGFjdGlvbikgPT4ge1xuICBzd2l0Y2goYWN0aW9uLnR5cGUpIHtcbiAgICBjYXNlIFBST1BFUlRZX0RBVEFfU1VDQ0VTUzpcbiAgICAgIHJldHVybiBhY3Rpb24uZGF0YVxuICAgIGRlZmF1bHQ6XG4gICAgICByZXR1cm4gc3RhdGU7XG4gIH1cbn1cblxuY29uc3QgbGlzdCA9IChzdGF0ZSA9IFtdLCBhY3Rpb24pID0+IHtcbiAgc3dpdGNoKGFjdGlvbi50eXBlKSB7XG4gICAgY2FzZSBMSVNUX1JFUVVFU1RfU1VDQ0VTUzpcbiAgICAgIHJldHVybiBhY3Rpb24ubGlzdFxuICAgIGRlZmF1bHQ6XG4gICAgICByZXR1cm4gc3RhdGVcbiAgfVxufVxuXG5leHBvcnQgZGVmYXVsdCBjb21iaW5lUmVkdWNlcnMoe1xuICBpc1JldHJpZXZpbmdEYXRhLFxuICBsaXN0LFxuICBpc1JldHJpZXZpbmdQcm9wZXJ0eURhdGEsXG4gIGN1cnJlbnRQcm9wZXJ0eURhdGEsXG4gIGlzUHJvcGVydHlQYW5lbE9wZW5cbn0pIiwibW9kdWxlLmV4cG9ydHMgPSBfX3dlYnBhY2tfcHVibGljX3BhdGhfXyArIFwiZGJjZTljM2JkMjA3ZTgzOWQ5YWM0MGFmMDQ4ZjYwMjAucG5nXCI7IiwiZXhwb3J0cyA9IG1vZHVsZS5leHBvcnRzID0gcmVxdWlyZShcIi4uLy4uLy4uL25vZGVfbW9kdWxlcy9jc3MtbG9hZGVyL2xpYi9jc3MtYmFzZS5qc1wiKShmYWxzZSk7XG4vLyBpbXBvcnRzXG5cblxuLy8gbW9kdWxlXG5leHBvcnRzLnB1c2goW21vZHVsZS5pZCwgXCIjc2hvdy1wcm9wZXJ0eS1jb250YWluZXIge1xcbiAgcG9zaXRpb246IGZpeGVkO1xcbiAgdG9wOiAwO1xcbiAgei1pbmRleDogNDI7XFxuICBiYWNrZ3JvdW5kLWNvbG9yOiByZ2JhKDAsIDAsIDAsIDAuNik7XFxuICB3aWR0aDogMTAwJTtcXG4gIGhlaWdodDogMTAwJTtcXG4gIGRpc3BsYXk6IGZsZXg7XFxuICBmbGV4LWRpcmVjdGlvbjogcm93O1xcbiAganVzdGlmeS1jb250ZW50OiBjZW50ZXI7XFxuICBhbGlnbi1pdGVtczogY2VudGVyOyB9XFxuICAjc2hvdy1wcm9wZXJ0eS1jb250YWluZXIgI3Nob3ctcHJvcGVydHktYm94IHtcXG4gICAgd2lkdGg6IDYwJTtcXG4gICAgaGVpZ2h0OiA3MCU7XFxuICAgIGJhY2tncm91bmQtY29sb3I6IHdoaXRlOyB9XFxuICAgICNzaG93LXByb3BlcnR5LWNvbnRhaW5lciAjc2hvdy1wcm9wZXJ0eS1ib3ggI2Nsb3NlLXByb3BlcnR5LWltZyB7XFxuICAgICAgd2lkdGg6IDM1cHg7XFxuICAgICAgY3Vyc29yOiBwb2ludGVyO1xcbiAgICAgIGZsb2F0OiByaWdodDtcXG4gICAgICBtYXJnaW4tdG9wOiAxMHB4O1xcbiAgICAgIG1hcmdpbi1yaWdodDogMTBweDsgfVxcblwiLCBcIlwiXSk7XG5cbi8vIGV4cG9ydHNcbiIsIlxudmFyIGNvbnRlbnQgPSByZXF1aXJlKFwiISEuLi8uLi8uLi9ub2RlX21vZHVsZXMvY3NzLWxvYWRlci9pbmRleC5qcyEuLi8uLi8uLi9ub2RlX21vZHVsZXMvc2Fzcy1sb2FkZXIvbGliL2xvYWRlci5qcyEuL1Nob3dQcm9wZXJ0eUNvbXBvbmVudC5zY3NzXCIpO1xuXG5pZih0eXBlb2YgY29udGVudCA9PT0gJ3N0cmluZycpIGNvbnRlbnQgPSBbW21vZHVsZS5pZCwgY29udGVudCwgJyddXTtcblxudmFyIHRyYW5zZm9ybTtcbnZhciBpbnNlcnRJbnRvO1xuXG5cblxudmFyIG9wdGlvbnMgPSB7XCJobXJcIjp0cnVlfVxuXG5vcHRpb25zLnRyYW5zZm9ybSA9IHRyYW5zZm9ybVxub3B0aW9ucy5pbnNlcnRJbnRvID0gdW5kZWZpbmVkO1xuXG52YXIgdXBkYXRlID0gcmVxdWlyZShcIiEuLi8uLi8uLi9ub2RlX21vZHVsZXMvc3R5bGUtbG9hZGVyL2xpYi9hZGRTdHlsZXMuanNcIikoY29udGVudCwgb3B0aW9ucyk7XG5cbmlmKGNvbnRlbnQubG9jYWxzKSBtb2R1bGUuZXhwb3J0cyA9IGNvbnRlbnQubG9jYWxzO1xuXG5pZihtb2R1bGUuaG90KSB7XG5cdG1vZHVsZS5ob3QuYWNjZXB0KFwiISEuLi8uLi8uLi9ub2RlX21vZHVsZXMvY3NzLWxvYWRlci9pbmRleC5qcyEuLi8uLi8uLi9ub2RlX21vZHVsZXMvc2Fzcy1sb2FkZXIvbGliL2xvYWRlci5qcyEuL1Nob3dQcm9wZXJ0eUNvbXBvbmVudC5zY3NzXCIsIGZ1bmN0aW9uKCkge1xuXHRcdHZhciBuZXdDb250ZW50ID0gcmVxdWlyZShcIiEhLi4vLi4vLi4vbm9kZV9tb2R1bGVzL2Nzcy1sb2FkZXIvaW5kZXguanMhLi4vLi4vLi4vbm9kZV9tb2R1bGVzL3Nhc3MtbG9hZGVyL2xpYi9sb2FkZXIuanMhLi9TaG93UHJvcGVydHlDb21wb25lbnQuc2Nzc1wiKTtcblxuXHRcdGlmKHR5cGVvZiBuZXdDb250ZW50ID09PSAnc3RyaW5nJykgbmV3Q29udGVudCA9IFtbbW9kdWxlLmlkLCBuZXdDb250ZW50LCAnJ11dO1xuXG5cdFx0dmFyIGxvY2FscyA9IChmdW5jdGlvbihhLCBiKSB7XG5cdFx0XHR2YXIga2V5LCBpZHggPSAwO1xuXG5cdFx0XHRmb3Ioa2V5IGluIGEpIHtcblx0XHRcdFx0aWYoIWIgfHwgYVtrZXldICE9PSBiW2tleV0pIHJldHVybiBmYWxzZTtcblx0XHRcdFx0aWR4Kys7XG5cdFx0XHR9XG5cblx0XHRcdGZvcihrZXkgaW4gYikgaWR4LS07XG5cblx0XHRcdHJldHVybiBpZHggPT09IDA7XG5cdFx0fShjb250ZW50LmxvY2FscywgbmV3Q29udGVudC5sb2NhbHMpKTtcblxuXHRcdGlmKCFsb2NhbHMpIHRocm93IG5ldyBFcnJvcignQWJvcnRpbmcgQ1NTIEhNUiBkdWUgdG8gY2hhbmdlZCBjc3MtbW9kdWxlcyBsb2NhbHMuJyk7XG5cblx0XHR1cGRhdGUobmV3Q29udGVudCk7XG5cdH0pO1xuXG5cdG1vZHVsZS5ob3QuZGlzcG9zZShmdW5jdGlvbigpIHsgdXBkYXRlKCk7IH0pO1xufSIsImltcG9ydCBSZWFjdCBmcm9tICdyZWFjdCc7XG5pbXBvcnQgeyBjb25uZWN0IH0gZnJvbSAncmVhY3QtcmVkdXgnO1xuaW1wb3J0ICcuL1Nob3dQcm9wZXJ0eUNvbXBvbmVudC5zY3NzJ1xuaW1wb3J0IGNsb3NlIGZyb20gJy4vY2xvc2UucG5nJ1xuaW1wb3J0IHsgSElERV9QUk9QRVJUWV9QQU5FTCB9IGZyb20gJ0FjdGlvbnMvaW5kZXgnXG5pbXBvcnQgSW1hZ2UgZnJvbSAnLi9JbWFnZSdcblxuY2xhc3MgU2hvd1Byb3BlcnR5Q29tcG9uZW50IGV4dGVuZHMgUmVhY3QuQ29tcG9uZW50IHtcbiAgY29uc3RydWN0b3IocHJvcHMpIHtcbiAgICBzdXBlcihwcm9wcylcbiAgfVxuXG4gIHJlbmRlcigpIHtcbiAgICBjb25zdCB7XG4gICAgICBpc1JldHJpZXZpbmdQcm9wZXJ0eURhdGEsXG4gICAgICBwcm9wZXJ0eURhdGEsXG4gICAgICBoaWRlUHJvcGVydHlQYW5lbFxuICAgIH0gPSB0aGlzLnByb3BzXG5cbiAgICBpZihpc1JldHJpZXZpbmdQcm9wZXJ0eURhdGEpIHtcbiAgICAgIHJldHVybihcbiAgICAgICAgPGRpdiBpZD0nc2hvdy1wcm9wZXJ0eS1jb250YWluZXInPlxuICAgICAgICAgIDxkaXYgaWQ9J3Nob3ctcHJvcGVydHktYm94Jz5cbiAgICAgICAgICAgIDxwPlJldHJpZXZpbmcgZGF0YTwvcD5cbiAgICAgICAgICA8L2Rpdj5cbiAgICAgICAgPC9kaXY+XG4gICAgICApXG4gICAgfVxuXG4gICAgY29uc3Qge1xuICAgICAgdGl0bGUsXG4gICAgICBvd25lcixcbiAgICAgIGRhdGUsXG4gICAgICBpbWdTcmMsXG4gICAgICBwcmljZSxcbiAgICAgIGFyZWFcbiAgICB9ID0gcHJvcGVydHlEYXRhXG5cbiAgICByZXR1cm4oXG4gICAgICA8ZGl2IGlkPSdzaG93LXByb3BlcnR5LWNvbnRhaW5lcic+XG4gICAgICAgIDxkaXYgaWQ9J3Nob3ctcHJvcGVydHktYm94Jz5cbiAgICAgICAgICA8aW1nIHNyYz17Y2xvc2V9IGlkPSdjbG9zZS1wcm9wZXJ0eS1pbWcnXG4gICAgICAgICAgICBvbkNsaWNrPXtoaWRlUHJvcGVydHlQYW5lbH0gLz5cbiAgICAgICAgICA8ZGl2IGlkPSdzaG93LXByb3BlcnR5LWltYWdlJz5cbiAgICAgICAgICAgIDxJbWFnZSBzcmM9e2ltZ1NyY30gLz5cbiAgICAgICAgICA8L2Rpdj5cbiAgICAgICAgICA8ZGl2IGlkPSdzaG93LXByb3BlcnR5LWRlc2NyaXB0aW9uJz5cbiAgICAgICAgICAgIHt0aXRsZX1cbiAgICAgICAgICA8L2Rpdj5cbiAgICAgICAgPC9kaXY+XG4gICAgICA8L2Rpdj5cbiAgICApXG4gIH1cbn1cblxuY29uc3QgbWFwU3RhdGVUb1Byb3BzID0gKHN0YXRlKSA9PiB7XG4gIHJldHVybiB7XG4gICAgaXNSZXRyaWV2aW5nUHJvcGVydHlEYXRhOiBzdGF0ZS5pc1JldHJpZXZpbmdQcm9wZXJ0eURhdGEsXG4gICAgcHJvcGVydHlEYXRhOiBzdGF0ZS5jdXJyZW50UHJvcGVydHlEYXRhXG4gIH1cbn1cblxuY29uc3QgbWFwRGlzcGF0Y2hUb1Byb3BzID0gKGRpc3BhdGNoKSA9PiB7XG4gIHJldHVybiB7XG4gICAgaGlkZVByb3BlcnR5UGFuZWw6ICgpID0+IGRpc3BhdGNoKHt0eXBlOiBISURFX1BST1BFUlRZX1BBTkVMfSlcbiAgfVxufVxuXG5leHBvcnQgZGVmYXVsdCBjb25uZWN0KFxuICBtYXBTdGF0ZVRvUHJvcHMsXG4gIG1hcERpc3BhdGNoVG9Qcm9wcylcbiAgKFNob3dQcm9wZXJ0eUNvbXBvbmVudCkiLCJtb2R1bGUuZXhwb3J0cyA9IF9fd2VicGFja19wdWJsaWNfcGF0aF9fICsgXCI0YWY5MjdlMmZjMTA0MTQ0NzI5NGRlN2U1Y2JjZDQ0Ni5wbmdcIjsiLCJleHBvcnRzID0gbW9kdWxlLmV4cG9ydHMgPSByZXF1aXJlKFwiLi4vLi4vLi4vbm9kZV9tb2R1bGVzL2Nzcy1sb2FkZXIvbGliL2Nzcy1iYXNlLmpzXCIpKGZhbHNlKTtcbi8vIGltcG9ydHNcblxuXG4vLyBtb2R1bGVcbmV4cG9ydHMucHVzaChbbW9kdWxlLmlkLCBcIioge1xcbiAgbWFyZ2luOiAwO1xcbiAgcGFkZGluZzogMDtcXG4gIGZvbnQtZmFtaWx5OiAnSGVsdmV0aWNhIE5ldWUnLCBIZWx2ZXRpY2EsIEFyaWFsLCBzYW5zLXNlcmlmOyB9XFxuXFxuI2FwcC1jb250YWluZXIge1xcbiAgb3ZlcmZsb3cteDogaGlkZGVuOyB9XFxuICAjYXBwLWNvbnRhaW5lciAjYmFubmVyIHtcXG4gICAgd2lkdGg6IDEwMCU7XFxuICAgIGJhY2tncm91bmQtY29sb3I6ICNlZmVmZTg7XFxuICAgIHBhZGRpbmc6IDE1cHg7XFxuICAgIHBhZGRpbmctbGVmdDogMzVweDtcXG4gICAgY29sb3I6ICM4ZDhkOGU7IH1cXG4gICAgI2FwcC1jb250YWluZXIgI2Jhbm5lciBpbWcge1xcbiAgICAgIHdpZHRoOiA3MHB4O1xcbiAgICAgIHZlcnRpY2FsLWFsaWduOiBtaWRkbGU7IH1cXG5cIiwgXCJcIl0pO1xuXG4vLyBleHBvcnRzXG4iLCJcbnZhciBjb250ZW50ID0gcmVxdWlyZShcIiEhLi4vLi4vLi4vbm9kZV9tb2R1bGVzL2Nzcy1sb2FkZXIvaW5kZXguanMhLi4vLi4vLi4vbm9kZV9tb2R1bGVzL3Nhc3MtbG9hZGVyL2xpYi9sb2FkZXIuanMhLi9BcHAuc2Nzc1wiKTtcblxuaWYodHlwZW9mIGNvbnRlbnQgPT09ICdzdHJpbmcnKSBjb250ZW50ID0gW1ttb2R1bGUuaWQsIGNvbnRlbnQsICcnXV07XG5cbnZhciB0cmFuc2Zvcm07XG52YXIgaW5zZXJ0SW50bztcblxuXG5cbnZhciBvcHRpb25zID0ge1wiaG1yXCI6dHJ1ZX1cblxub3B0aW9ucy50cmFuc2Zvcm0gPSB0cmFuc2Zvcm1cbm9wdGlvbnMuaW5zZXJ0SW50byA9IHVuZGVmaW5lZDtcblxudmFyIHVwZGF0ZSA9IHJlcXVpcmUoXCIhLi4vLi4vLi4vbm9kZV9tb2R1bGVzL3N0eWxlLWxvYWRlci9saWIvYWRkU3R5bGVzLmpzXCIpKGNvbnRlbnQsIG9wdGlvbnMpO1xuXG5pZihjb250ZW50LmxvY2FscykgbW9kdWxlLmV4cG9ydHMgPSBjb250ZW50LmxvY2FscztcblxuaWYobW9kdWxlLmhvdCkge1xuXHRtb2R1bGUuaG90LmFjY2VwdChcIiEhLi4vLi4vLi4vbm9kZV9tb2R1bGVzL2Nzcy1sb2FkZXIvaW5kZXguanMhLi4vLi4vLi4vbm9kZV9tb2R1bGVzL3Nhc3MtbG9hZGVyL2xpYi9sb2FkZXIuanMhLi9BcHAuc2Nzc1wiLCBmdW5jdGlvbigpIHtcblx0XHR2YXIgbmV3Q29udGVudCA9IHJlcXVpcmUoXCIhIS4uLy4uLy4uL25vZGVfbW9kdWxlcy9jc3MtbG9hZGVyL2luZGV4LmpzIS4uLy4uLy4uL25vZGVfbW9kdWxlcy9zYXNzLWxvYWRlci9saWIvbG9hZGVyLmpzIS4vQXBwLnNjc3NcIik7XG5cblx0XHRpZih0eXBlb2YgbmV3Q29udGVudCA9PT0gJ3N0cmluZycpIG5ld0NvbnRlbnQgPSBbW21vZHVsZS5pZCwgbmV3Q29udGVudCwgJyddXTtcblxuXHRcdHZhciBsb2NhbHMgPSAoZnVuY3Rpb24oYSwgYikge1xuXHRcdFx0dmFyIGtleSwgaWR4ID0gMDtcblxuXHRcdFx0Zm9yKGtleSBpbiBhKSB7XG5cdFx0XHRcdGlmKCFiIHx8IGFba2V5XSAhPT0gYltrZXldKSByZXR1cm4gZmFsc2U7XG5cdFx0XHRcdGlkeCsrO1xuXHRcdFx0fVxuXG5cdFx0XHRmb3Ioa2V5IGluIGIpIGlkeC0tO1xuXG5cdFx0XHRyZXR1cm4gaWR4ID09PSAwO1xuXHRcdH0oY29udGVudC5sb2NhbHMsIG5ld0NvbnRlbnQubG9jYWxzKSk7XG5cblx0XHRpZighbG9jYWxzKSB0aHJvdyBuZXcgRXJyb3IoJ0Fib3J0aW5nIENTUyBITVIgZHVlIHRvIGNoYW5nZWQgY3NzLW1vZHVsZXMgbG9jYWxzLicpO1xuXG5cdFx0dXBkYXRlKG5ld0NvbnRlbnQpO1xuXHR9KTtcblxuXHRtb2R1bGUuaG90LmRpc3Bvc2UoZnVuY3Rpb24oKSB7IHVwZGF0ZSgpOyB9KTtcbn0iLCIndXNlIHN0cmljdCc7XG5cbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwge1xuICB2YWx1ZTogdHJ1ZVxufSk7XG5leHBvcnRzLmRlZmF1bHQgPSAnLl9fcmVhY3RfY29tcG9uZW50X3Rvb2x0aXB7Ym9yZGVyLXJhZGl1czozcHg7ZGlzcGxheTppbmxpbmUtYmxvY2s7Zm9udC1zaXplOjEzcHg7bGVmdDotOTk5ZW07b3BhY2l0eTowO3BhZGRpbmc6OHB4IDIxcHg7cG9zaXRpb246Zml4ZWQ7cG9pbnRlci1ldmVudHM6bm9uZTt0cmFuc2l0aW9uOm9wYWNpdHkgMC4zcyBlYXNlLW91dDt0b3A6LTk5OWVtO3Zpc2liaWxpdHk6aGlkZGVuO3otaW5kZXg6OTk5fS5fX3JlYWN0X2NvbXBvbmVudF90b29sdGlwOmJlZm9yZSwuX19yZWFjdF9jb21wb25lbnRfdG9vbHRpcDphZnRlcntjb250ZW50OlwiXCI7d2lkdGg6MDtoZWlnaHQ6MDtwb3NpdGlvbjphYnNvbHV0ZX0uX19yZWFjdF9jb21wb25lbnRfdG9vbHRpcC5zaG93e29wYWNpdHk6MC45O21hcmdpbi10b3A6MHB4O21hcmdpbi1sZWZ0OjBweDt2aXNpYmlsaXR5OnZpc2libGV9Ll9fcmVhY3RfY29tcG9uZW50X3Rvb2x0aXAudHlwZS1kYXJre2NvbG9yOiNmZmY7YmFja2dyb3VuZC1jb2xvcjojMjIyfS5fX3JlYWN0X2NvbXBvbmVudF90b29sdGlwLnR5cGUtZGFyay5wbGFjZS10b3A6YWZ0ZXJ7Ym9yZGVyLXRvcC1jb2xvcjojMjIyO2JvcmRlci10b3Atc3R5bGU6c29saWQ7Ym9yZGVyLXRvcC13aWR0aDo2cHh9Ll9fcmVhY3RfY29tcG9uZW50X3Rvb2x0aXAudHlwZS1kYXJrLnBsYWNlLWJvdHRvbTphZnRlcntib3JkZXItYm90dG9tLWNvbG9yOiMyMjI7Ym9yZGVyLWJvdHRvbS1zdHlsZTpzb2xpZDtib3JkZXItYm90dG9tLXdpZHRoOjZweH0uX19yZWFjdF9jb21wb25lbnRfdG9vbHRpcC50eXBlLWRhcmsucGxhY2UtbGVmdDphZnRlcntib3JkZXItbGVmdC1jb2xvcjojMjIyO2JvcmRlci1sZWZ0LXN0eWxlOnNvbGlkO2JvcmRlci1sZWZ0LXdpZHRoOjZweH0uX19yZWFjdF9jb21wb25lbnRfdG9vbHRpcC50eXBlLWRhcmsucGxhY2UtcmlnaHQ6YWZ0ZXJ7Ym9yZGVyLXJpZ2h0LWNvbG9yOiMyMjI7Ym9yZGVyLXJpZ2h0LXN0eWxlOnNvbGlkO2JvcmRlci1yaWdodC13aWR0aDo2cHh9Ll9fcmVhY3RfY29tcG9uZW50X3Rvb2x0aXAudHlwZS1kYXJrLmJvcmRlcntib3JkZXI6MXB4IHNvbGlkICNmZmZ9Ll9fcmVhY3RfY29tcG9uZW50X3Rvb2x0aXAudHlwZS1kYXJrLmJvcmRlci5wbGFjZS10b3A6YmVmb3Jle2JvcmRlci10b3A6OHB4IHNvbGlkICNmZmZ9Ll9fcmVhY3RfY29tcG9uZW50X3Rvb2x0aXAudHlwZS1kYXJrLmJvcmRlci5wbGFjZS1ib3R0b206YmVmb3Jle2JvcmRlci1ib3R0b206OHB4IHNvbGlkICNmZmZ9Ll9fcmVhY3RfY29tcG9uZW50X3Rvb2x0aXAudHlwZS1kYXJrLmJvcmRlci5wbGFjZS1sZWZ0OmJlZm9yZXtib3JkZXItbGVmdDo4cHggc29saWQgI2ZmZn0uX19yZWFjdF9jb21wb25lbnRfdG9vbHRpcC50eXBlLWRhcmsuYm9yZGVyLnBsYWNlLXJpZ2h0OmJlZm9yZXtib3JkZXItcmlnaHQ6OHB4IHNvbGlkICNmZmZ9Ll9fcmVhY3RfY29tcG9uZW50X3Rvb2x0aXAudHlwZS1zdWNjZXNze2NvbG9yOiNmZmY7YmFja2dyb3VuZC1jb2xvcjojOERDNTcyfS5fX3JlYWN0X2NvbXBvbmVudF90b29sdGlwLnR5cGUtc3VjY2Vzcy5wbGFjZS10b3A6YWZ0ZXJ7Ym9yZGVyLXRvcC1jb2xvcjojOERDNTcyO2JvcmRlci10b3Atc3R5bGU6c29saWQ7Ym9yZGVyLXRvcC13aWR0aDo2cHh9Ll9fcmVhY3RfY29tcG9uZW50X3Rvb2x0aXAudHlwZS1zdWNjZXNzLnBsYWNlLWJvdHRvbTphZnRlcntib3JkZXItYm90dG9tLWNvbG9yOiM4REM1NzI7Ym9yZGVyLWJvdHRvbS1zdHlsZTpzb2xpZDtib3JkZXItYm90dG9tLXdpZHRoOjZweH0uX19yZWFjdF9jb21wb25lbnRfdG9vbHRpcC50eXBlLXN1Y2Nlc3MucGxhY2UtbGVmdDphZnRlcntib3JkZXItbGVmdC1jb2xvcjojOERDNTcyO2JvcmRlci1sZWZ0LXN0eWxlOnNvbGlkO2JvcmRlci1sZWZ0LXdpZHRoOjZweH0uX19yZWFjdF9jb21wb25lbnRfdG9vbHRpcC50eXBlLXN1Y2Nlc3MucGxhY2UtcmlnaHQ6YWZ0ZXJ7Ym9yZGVyLXJpZ2h0LWNvbG9yOiM4REM1NzI7Ym9yZGVyLXJpZ2h0LXN0eWxlOnNvbGlkO2JvcmRlci1yaWdodC13aWR0aDo2cHh9Ll9fcmVhY3RfY29tcG9uZW50X3Rvb2x0aXAudHlwZS1zdWNjZXNzLmJvcmRlcntib3JkZXI6MXB4IHNvbGlkICNmZmZ9Ll9fcmVhY3RfY29tcG9uZW50X3Rvb2x0aXAudHlwZS1zdWNjZXNzLmJvcmRlci5wbGFjZS10b3A6YmVmb3Jle2JvcmRlci10b3A6OHB4IHNvbGlkICNmZmZ9Ll9fcmVhY3RfY29tcG9uZW50X3Rvb2x0aXAudHlwZS1zdWNjZXNzLmJvcmRlci5wbGFjZS1ib3R0b206YmVmb3Jle2JvcmRlci1ib3R0b206OHB4IHNvbGlkICNmZmZ9Ll9fcmVhY3RfY29tcG9uZW50X3Rvb2x0aXAudHlwZS1zdWNjZXNzLmJvcmRlci5wbGFjZS1sZWZ0OmJlZm9yZXtib3JkZXItbGVmdDo4cHggc29saWQgI2ZmZn0uX19yZWFjdF9jb21wb25lbnRfdG9vbHRpcC50eXBlLXN1Y2Nlc3MuYm9yZGVyLnBsYWNlLXJpZ2h0OmJlZm9yZXtib3JkZXItcmlnaHQ6OHB4IHNvbGlkICNmZmZ9Ll9fcmVhY3RfY29tcG9uZW50X3Rvb2x0aXAudHlwZS13YXJuaW5ne2NvbG9yOiNmZmY7YmFja2dyb3VuZC1jb2xvcjojRjBBRDRFfS5fX3JlYWN0X2NvbXBvbmVudF90b29sdGlwLnR5cGUtd2FybmluZy5wbGFjZS10b3A6YWZ0ZXJ7Ym9yZGVyLXRvcC1jb2xvcjojRjBBRDRFO2JvcmRlci10b3Atc3R5bGU6c29saWQ7Ym9yZGVyLXRvcC13aWR0aDo2cHh9Ll9fcmVhY3RfY29tcG9uZW50X3Rvb2x0aXAudHlwZS13YXJuaW5nLnBsYWNlLWJvdHRvbTphZnRlcntib3JkZXItYm90dG9tLWNvbG9yOiNGMEFENEU7Ym9yZGVyLWJvdHRvbS1zdHlsZTpzb2xpZDtib3JkZXItYm90dG9tLXdpZHRoOjZweH0uX19yZWFjdF9jb21wb25lbnRfdG9vbHRpcC50eXBlLXdhcm5pbmcucGxhY2UtbGVmdDphZnRlcntib3JkZXItbGVmdC1jb2xvcjojRjBBRDRFO2JvcmRlci1sZWZ0LXN0eWxlOnNvbGlkO2JvcmRlci1sZWZ0LXdpZHRoOjZweH0uX19yZWFjdF9jb21wb25lbnRfdG9vbHRpcC50eXBlLXdhcm5pbmcucGxhY2UtcmlnaHQ6YWZ0ZXJ7Ym9yZGVyLXJpZ2h0LWNvbG9yOiNGMEFENEU7Ym9yZGVyLXJpZ2h0LXN0eWxlOnNvbGlkO2JvcmRlci1yaWdodC13aWR0aDo2cHh9Ll9fcmVhY3RfY29tcG9uZW50X3Rvb2x0aXAudHlwZS13YXJuaW5nLmJvcmRlcntib3JkZXI6MXB4IHNvbGlkICNmZmZ9Ll9fcmVhY3RfY29tcG9uZW50X3Rvb2x0aXAudHlwZS13YXJuaW5nLmJvcmRlci5wbGFjZS10b3A6YmVmb3Jle2JvcmRlci10b3A6OHB4IHNvbGlkICNmZmZ9Ll9fcmVhY3RfY29tcG9uZW50X3Rvb2x0aXAudHlwZS13YXJuaW5nLmJvcmRlci5wbGFjZS1ib3R0b206YmVmb3Jle2JvcmRlci1ib3R0b206OHB4IHNvbGlkICNmZmZ9Ll9fcmVhY3RfY29tcG9uZW50X3Rvb2x0aXAudHlwZS13YXJuaW5nLmJvcmRlci5wbGFjZS1sZWZ0OmJlZm9yZXtib3JkZXItbGVmdDo4cHggc29saWQgI2ZmZn0uX19yZWFjdF9jb21wb25lbnRfdG9vbHRpcC50eXBlLXdhcm5pbmcuYm9yZGVyLnBsYWNlLXJpZ2h0OmJlZm9yZXtib3JkZXItcmlnaHQ6OHB4IHNvbGlkICNmZmZ9Ll9fcmVhY3RfY29tcG9uZW50X3Rvb2x0aXAudHlwZS1lcnJvcntjb2xvcjojZmZmO2JhY2tncm91bmQtY29sb3I6I0JFNjQ2NH0uX19yZWFjdF9jb21wb25lbnRfdG9vbHRpcC50eXBlLWVycm9yLnBsYWNlLXRvcDphZnRlcntib3JkZXItdG9wLWNvbG9yOiNCRTY0NjQ7Ym9yZGVyLXRvcC1zdHlsZTpzb2xpZDtib3JkZXItdG9wLXdpZHRoOjZweH0uX19yZWFjdF9jb21wb25lbnRfdG9vbHRpcC50eXBlLWVycm9yLnBsYWNlLWJvdHRvbTphZnRlcntib3JkZXItYm90dG9tLWNvbG9yOiNCRTY0NjQ7Ym9yZGVyLWJvdHRvbS1zdHlsZTpzb2xpZDtib3JkZXItYm90dG9tLXdpZHRoOjZweH0uX19yZWFjdF9jb21wb25lbnRfdG9vbHRpcC50eXBlLWVycm9yLnBsYWNlLWxlZnQ6YWZ0ZXJ7Ym9yZGVyLWxlZnQtY29sb3I6I0JFNjQ2NDtib3JkZXItbGVmdC1zdHlsZTpzb2xpZDtib3JkZXItbGVmdC13aWR0aDo2cHh9Ll9fcmVhY3RfY29tcG9uZW50X3Rvb2x0aXAudHlwZS1lcnJvci5wbGFjZS1yaWdodDphZnRlcntib3JkZXItcmlnaHQtY29sb3I6I0JFNjQ2NDtib3JkZXItcmlnaHQtc3R5bGU6c29saWQ7Ym9yZGVyLXJpZ2h0LXdpZHRoOjZweH0uX19yZWFjdF9jb21wb25lbnRfdG9vbHRpcC50eXBlLWVycm9yLmJvcmRlcntib3JkZXI6MXB4IHNvbGlkICNmZmZ9Ll9fcmVhY3RfY29tcG9uZW50X3Rvb2x0aXAudHlwZS1lcnJvci5ib3JkZXIucGxhY2UtdG9wOmJlZm9yZXtib3JkZXItdG9wOjhweCBzb2xpZCAjZmZmfS5fX3JlYWN0X2NvbXBvbmVudF90b29sdGlwLnR5cGUtZXJyb3IuYm9yZGVyLnBsYWNlLWJvdHRvbTpiZWZvcmV7Ym9yZGVyLWJvdHRvbTo4cHggc29saWQgI2ZmZn0uX19yZWFjdF9jb21wb25lbnRfdG9vbHRpcC50eXBlLWVycm9yLmJvcmRlci5wbGFjZS1sZWZ0OmJlZm9yZXtib3JkZXItbGVmdDo4cHggc29saWQgI2ZmZn0uX19yZWFjdF9jb21wb25lbnRfdG9vbHRpcC50eXBlLWVycm9yLmJvcmRlci5wbGFjZS1yaWdodDpiZWZvcmV7Ym9yZGVyLXJpZ2h0OjhweCBzb2xpZCAjZmZmfS5fX3JlYWN0X2NvbXBvbmVudF90b29sdGlwLnR5cGUtaW5mb3tjb2xvcjojZmZmO2JhY2tncm91bmQtY29sb3I6IzMzN0FCN30uX19yZWFjdF9jb21wb25lbnRfdG9vbHRpcC50eXBlLWluZm8ucGxhY2UtdG9wOmFmdGVye2JvcmRlci10b3AtY29sb3I6IzMzN0FCNztib3JkZXItdG9wLXN0eWxlOnNvbGlkO2JvcmRlci10b3Atd2lkdGg6NnB4fS5fX3JlYWN0X2NvbXBvbmVudF90b29sdGlwLnR5cGUtaW5mby5wbGFjZS1ib3R0b206YWZ0ZXJ7Ym9yZGVyLWJvdHRvbS1jb2xvcjojMzM3QUI3O2JvcmRlci1ib3R0b20tc3R5bGU6c29saWQ7Ym9yZGVyLWJvdHRvbS13aWR0aDo2cHh9Ll9fcmVhY3RfY29tcG9uZW50X3Rvb2x0aXAudHlwZS1pbmZvLnBsYWNlLWxlZnQ6YWZ0ZXJ7Ym9yZGVyLWxlZnQtY29sb3I6IzMzN0FCNztib3JkZXItbGVmdC1zdHlsZTpzb2xpZDtib3JkZXItbGVmdC13aWR0aDo2cHh9Ll9fcmVhY3RfY29tcG9uZW50X3Rvb2x0aXAudHlwZS1pbmZvLnBsYWNlLXJpZ2h0OmFmdGVye2JvcmRlci1yaWdodC1jb2xvcjojMzM3QUI3O2JvcmRlci1yaWdodC1zdHlsZTpzb2xpZDtib3JkZXItcmlnaHQtd2lkdGg6NnB4fS5fX3JlYWN0X2NvbXBvbmVudF90b29sdGlwLnR5cGUtaW5mby5ib3JkZXJ7Ym9yZGVyOjFweCBzb2xpZCAjZmZmfS5fX3JlYWN0X2NvbXBvbmVudF90b29sdGlwLnR5cGUtaW5mby5ib3JkZXIucGxhY2UtdG9wOmJlZm9yZXtib3JkZXItdG9wOjhweCBzb2xpZCAjZmZmfS5fX3JlYWN0X2NvbXBvbmVudF90b29sdGlwLnR5cGUtaW5mby5ib3JkZXIucGxhY2UtYm90dG9tOmJlZm9yZXtib3JkZXItYm90dG9tOjhweCBzb2xpZCAjZmZmfS5fX3JlYWN0X2NvbXBvbmVudF90b29sdGlwLnR5cGUtaW5mby5ib3JkZXIucGxhY2UtbGVmdDpiZWZvcmV7Ym9yZGVyLWxlZnQ6OHB4IHNvbGlkICNmZmZ9Ll9fcmVhY3RfY29tcG9uZW50X3Rvb2x0aXAudHlwZS1pbmZvLmJvcmRlci5wbGFjZS1yaWdodDpiZWZvcmV7Ym9yZGVyLXJpZ2h0OjhweCBzb2xpZCAjZmZmfS5fX3JlYWN0X2NvbXBvbmVudF90b29sdGlwLnR5cGUtbGlnaHR7Y29sb3I6IzIyMjtiYWNrZ3JvdW5kLWNvbG9yOiNmZmZ9Ll9fcmVhY3RfY29tcG9uZW50X3Rvb2x0aXAudHlwZS1saWdodC5wbGFjZS10b3A6YWZ0ZXJ7Ym9yZGVyLXRvcC1jb2xvcjojZmZmO2JvcmRlci10b3Atc3R5bGU6c29saWQ7Ym9yZGVyLXRvcC13aWR0aDo2cHh9Ll9fcmVhY3RfY29tcG9uZW50X3Rvb2x0aXAudHlwZS1saWdodC5wbGFjZS1ib3R0b206YWZ0ZXJ7Ym9yZGVyLWJvdHRvbS1jb2xvcjojZmZmO2JvcmRlci1ib3R0b20tc3R5bGU6c29saWQ7Ym9yZGVyLWJvdHRvbS13aWR0aDo2cHh9Ll9fcmVhY3RfY29tcG9uZW50X3Rvb2x0aXAudHlwZS1saWdodC5wbGFjZS1sZWZ0OmFmdGVye2JvcmRlci1sZWZ0LWNvbG9yOiNmZmY7Ym9yZGVyLWxlZnQtc3R5bGU6c29saWQ7Ym9yZGVyLWxlZnQtd2lkdGg6NnB4fS5fX3JlYWN0X2NvbXBvbmVudF90b29sdGlwLnR5cGUtbGlnaHQucGxhY2UtcmlnaHQ6YWZ0ZXJ7Ym9yZGVyLXJpZ2h0LWNvbG9yOiNmZmY7Ym9yZGVyLXJpZ2h0LXN0eWxlOnNvbGlkO2JvcmRlci1yaWdodC13aWR0aDo2cHh9Ll9fcmVhY3RfY29tcG9uZW50X3Rvb2x0aXAudHlwZS1saWdodC5ib3JkZXJ7Ym9yZGVyOjFweCBzb2xpZCAjMjIyfS5fX3JlYWN0X2NvbXBvbmVudF90b29sdGlwLnR5cGUtbGlnaHQuYm9yZGVyLnBsYWNlLXRvcDpiZWZvcmV7Ym9yZGVyLXRvcDo4cHggc29saWQgIzIyMn0uX19yZWFjdF9jb21wb25lbnRfdG9vbHRpcC50eXBlLWxpZ2h0LmJvcmRlci5wbGFjZS1ib3R0b206YmVmb3Jle2JvcmRlci1ib3R0b206OHB4IHNvbGlkICMyMjJ9Ll9fcmVhY3RfY29tcG9uZW50X3Rvb2x0aXAudHlwZS1saWdodC5ib3JkZXIucGxhY2UtbGVmdDpiZWZvcmV7Ym9yZGVyLWxlZnQ6OHB4IHNvbGlkICMyMjJ9Ll9fcmVhY3RfY29tcG9uZW50X3Rvb2x0aXAudHlwZS1saWdodC5ib3JkZXIucGxhY2UtcmlnaHQ6YmVmb3Jle2JvcmRlci1yaWdodDo4cHggc29saWQgIzIyMn0uX19yZWFjdF9jb21wb25lbnRfdG9vbHRpcC5wbGFjZS10b3B7bWFyZ2luLXRvcDotMTBweH0uX19yZWFjdF9jb21wb25lbnRfdG9vbHRpcC5wbGFjZS10b3A6YmVmb3Jle2JvcmRlci1sZWZ0OjEwcHggc29saWQgdHJhbnNwYXJlbnQ7Ym9yZGVyLXJpZ2h0OjEwcHggc29saWQgdHJhbnNwYXJlbnQ7Ym90dG9tOi04cHg7bGVmdDo1MCU7bWFyZ2luLWxlZnQ6LTEwcHh9Ll9fcmVhY3RfY29tcG9uZW50X3Rvb2x0aXAucGxhY2UtdG9wOmFmdGVye2JvcmRlci1sZWZ0OjhweCBzb2xpZCB0cmFuc3BhcmVudDtib3JkZXItcmlnaHQ6OHB4IHNvbGlkIHRyYW5zcGFyZW50O2JvdHRvbTotNnB4O2xlZnQ6NTAlO21hcmdpbi1sZWZ0Oi04cHh9Ll9fcmVhY3RfY29tcG9uZW50X3Rvb2x0aXAucGxhY2UtYm90dG9te21hcmdpbi10b3A6MTBweH0uX19yZWFjdF9jb21wb25lbnRfdG9vbHRpcC5wbGFjZS1ib3R0b206YmVmb3Jle2JvcmRlci1sZWZ0OjEwcHggc29saWQgdHJhbnNwYXJlbnQ7Ym9yZGVyLXJpZ2h0OjEwcHggc29saWQgdHJhbnNwYXJlbnQ7dG9wOi04cHg7bGVmdDo1MCU7bWFyZ2luLWxlZnQ6LTEwcHh9Ll9fcmVhY3RfY29tcG9uZW50X3Rvb2x0aXAucGxhY2UtYm90dG9tOmFmdGVye2JvcmRlci1sZWZ0OjhweCBzb2xpZCB0cmFuc3BhcmVudDtib3JkZXItcmlnaHQ6OHB4IHNvbGlkIHRyYW5zcGFyZW50O3RvcDotNnB4O2xlZnQ6NTAlO21hcmdpbi1sZWZ0Oi04cHh9Ll9fcmVhY3RfY29tcG9uZW50X3Rvb2x0aXAucGxhY2UtbGVmdHttYXJnaW4tbGVmdDotMTBweH0uX19yZWFjdF9jb21wb25lbnRfdG9vbHRpcC5wbGFjZS1sZWZ0OmJlZm9yZXtib3JkZXItdG9wOjZweCBzb2xpZCB0cmFuc3BhcmVudDtib3JkZXItYm90dG9tOjZweCBzb2xpZCB0cmFuc3BhcmVudDtyaWdodDotOHB4O3RvcDo1MCU7bWFyZ2luLXRvcDotNXB4fS5fX3JlYWN0X2NvbXBvbmVudF90b29sdGlwLnBsYWNlLWxlZnQ6YWZ0ZXJ7Ym9yZGVyLXRvcDo1cHggc29saWQgdHJhbnNwYXJlbnQ7Ym9yZGVyLWJvdHRvbTo1cHggc29saWQgdHJhbnNwYXJlbnQ7cmlnaHQ6LTZweDt0b3A6NTAlO21hcmdpbi10b3A6LTRweH0uX19yZWFjdF9jb21wb25lbnRfdG9vbHRpcC5wbGFjZS1yaWdodHttYXJnaW4tbGVmdDoxMHB4fS5fX3JlYWN0X2NvbXBvbmVudF90b29sdGlwLnBsYWNlLXJpZ2h0OmJlZm9yZXtib3JkZXItdG9wOjZweCBzb2xpZCB0cmFuc3BhcmVudDtib3JkZXItYm90dG9tOjZweCBzb2xpZCB0cmFuc3BhcmVudDtsZWZ0Oi04cHg7dG9wOjUwJTttYXJnaW4tdG9wOi01cHh9Ll9fcmVhY3RfY29tcG9uZW50X3Rvb2x0aXAucGxhY2UtcmlnaHQ6YWZ0ZXJ7Ym9yZGVyLXRvcDo1cHggc29saWQgdHJhbnNwYXJlbnQ7Ym9yZGVyLWJvdHRvbTo1cHggc29saWQgdHJhbnNwYXJlbnQ7bGVmdDotNnB4O3RvcDo1MCU7bWFyZ2luLXRvcDotNHB4fS5fX3JlYWN0X2NvbXBvbmVudF90b29sdGlwIC5tdWx0aS1saW5le2Rpc3BsYXk6YmxvY2s7cGFkZGluZzoycHggMHB4O3RleHQtYWxpZ246Y2VudGVyfSc7IiwiXCJ1c2Ugc3RyaWN0XCI7XG5cbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwge1xuICB2YWx1ZTogdHJ1ZVxufSk7XG5cbmV4cG9ydHMuZGVmYXVsdCA9IGZ1bmN0aW9uIChub2RlTGlzdCkge1xuICB2YXIgbGVuZ3RoID0gbm9kZUxpc3QubGVuZ3RoO1xuICBpZiAobm9kZUxpc3QuaGFzT3duUHJvcGVydHkpIHtcbiAgICByZXR1cm4gQXJyYXkucHJvdG90eXBlLnNsaWNlLmNhbGwobm9kZUxpc3QpO1xuICB9XG4gIHJldHVybiBuZXcgQXJyYXkobGVuZ3RoKS5maWxsKCkubWFwKGZ1bmN0aW9uIChpbmRleCkge1xuICAgIHJldHVybiBub2RlTGlzdFtpbmRleF07XG4gIH0pO1xufTsiLCJcInVzZSBzdHJpY3RcIjtcblxuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7XG4gIHZhbHVlOiB0cnVlXG59KTtcbmV4cG9ydHMucGFyc2VBcmlhID0gcGFyc2VBcmlhO1xuLyoqXG4gKiBTdXBwb3J0IGFyaWEtIGFuZCByb2xlIGluIFJlYWN0VG9vbHRpcFxuICpcbiAqIEBwYXJhbXMgcHJvcHMge09iamVjdH1cbiAqIEByZXR1cm4ge09iamVjdH1cbiAqL1xuZnVuY3Rpb24gcGFyc2VBcmlhKHByb3BzKSB7XG4gIHZhciBhcmlhT2JqID0ge307XG4gIE9iamVjdC5rZXlzKHByb3BzKS5maWx0ZXIoZnVuY3Rpb24gKHByb3ApIHtcbiAgICAvLyBhcmlhLXh4eCBhbmQgcm9sZSBpcyBhY2NlcHRhYmxlXG4gICAgcmV0dXJuICgvKF5hcmlhLVxcdyskfF5yb2xlJCkvLnRlc3QocHJvcClcbiAgICApO1xuICB9KS5mb3JFYWNoKGZ1bmN0aW9uIChwcm9wKSB7XG4gICAgYXJpYU9ialtwcm9wXSA9IHByb3BzW3Byb3BdO1xuICB9KTtcblxuICByZXR1cm4gYXJpYU9iajtcbn0iLCIndXNlIHN0cmljdCc7XG5cbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwge1xuICB2YWx1ZTogdHJ1ZVxufSk7XG5cbmV4cG9ydHMuZGVmYXVsdCA9IGZ1bmN0aW9uICh0aXAsIGNoaWxkcmVuLCBnZXRDb250ZW50LCBtdWx0aWxpbmUpIHtcbiAgaWYgKGNoaWxkcmVuKSByZXR1cm4gY2hpbGRyZW47XG4gIGlmIChnZXRDb250ZW50ICE9PSB1bmRlZmluZWQgJiYgZ2V0Q29udGVudCAhPT0gbnVsbCkgcmV0dXJuIGdldENvbnRlbnQ7IC8vIGdldENvbnRlbnQgY2FuIGJlIDAsICcnLCBldGMuXG4gIGlmIChnZXRDb250ZW50ID09PSBudWxsKSByZXR1cm4gbnVsbDsgLy8gVGlwIG5vdCBleGlzdCBhbmQgY2hpbGRlcm4gaXMgbnVsbCBvciB1bmRlZmluZWRcblxuICB2YXIgcmVnZXhwID0gLzxiclxccypcXC8/Pi87XG4gIGlmICghbXVsdGlsaW5lIHx8IG11bHRpbGluZSA9PT0gJ2ZhbHNlJyB8fCAhcmVnZXhwLnRlc3QodGlwKSkge1xuICAgIC8vIE5vIHRyaW0oKSwgc28gdGhhdCB1c2VyIGNhbiBrZWVwIHRoZWlyIGlucHV0XG4gICAgcmV0dXJuIHRpcDtcbiAgfVxuXG4gIC8vIE11bHRpbGluZSB0b29sdGlwIGNvbnRlbnRcbiAgcmV0dXJuIHRpcC5zcGxpdChyZWdleHApLm1hcChmdW5jdGlvbiAoZCwgaSkge1xuICAgIHJldHVybiBfcmVhY3QyLmRlZmF1bHQuY3JlYXRlRWxlbWVudChcbiAgICAgICdzcGFuJyxcbiAgICAgIHsga2V5OiBpLCBjbGFzc05hbWU6ICdtdWx0aS1saW5lJyB9LFxuICAgICAgZFxuICAgICk7XG4gIH0pO1xufTtcblxudmFyIF9yZWFjdCA9IHJlcXVpcmUoJ3JlYWN0Jyk7XG5cbnZhciBfcmVhY3QyID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChfcmVhY3QpO1xuXG5mdW5jdGlvbiBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KG9iaikgeyByZXR1cm4gb2JqICYmIG9iai5fX2VzTW9kdWxlID8gb2JqIDogeyBkZWZhdWx0OiBvYmogfTsgfSIsIid1c2Ugc3RyaWN0JztcblxuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7XG4gIHZhbHVlOiB0cnVlXG59KTtcblxuZXhwb3J0cy5kZWZhdWx0ID0gZnVuY3Rpb24gKGUsIHRhcmdldCwgbm9kZSwgcGxhY2UsIGRlc2lyZWRQbGFjZSwgZWZmZWN0LCBvZmZzZXQpIHtcbiAgdmFyIF9nZXREaW1lbnNpb25zID0gZ2V0RGltZW5zaW9ucyhub2RlKSxcbiAgICAgIHRpcFdpZHRoID0gX2dldERpbWVuc2lvbnMud2lkdGgsXG4gICAgICB0aXBIZWlnaHQgPSBfZ2V0RGltZW5zaW9ucy5oZWlnaHQ7XG5cbiAgdmFyIF9nZXREaW1lbnNpb25zMiA9IGdldERpbWVuc2lvbnModGFyZ2V0KSxcbiAgICAgIHRhcmdldFdpZHRoID0gX2dldERpbWVuc2lvbnMyLndpZHRoLFxuICAgICAgdGFyZ2V0SGVpZ2h0ID0gX2dldERpbWVuc2lvbnMyLmhlaWdodDtcblxuICB2YXIgX2dldEN1cnJlbnRPZmZzZXQgPSBnZXRDdXJyZW50T2Zmc2V0KGUsIHRhcmdldCwgZWZmZWN0KSxcbiAgICAgIG1vdXNlWCA9IF9nZXRDdXJyZW50T2Zmc2V0Lm1vdXNlWCxcbiAgICAgIG1vdXNlWSA9IF9nZXRDdXJyZW50T2Zmc2V0Lm1vdXNlWTtcblxuICB2YXIgZGVmYXVsdE9mZnNldCA9IGdldERlZmF1bHRQb3NpdGlvbihlZmZlY3QsIHRhcmdldFdpZHRoLCB0YXJnZXRIZWlnaHQsIHRpcFdpZHRoLCB0aXBIZWlnaHQpO1xuXG4gIHZhciBfY2FsY3VsYXRlT2Zmc2V0ID0gY2FsY3VsYXRlT2Zmc2V0KG9mZnNldCksXG4gICAgICBleHRyYU9mZnNldF9YID0gX2NhbGN1bGF0ZU9mZnNldC5leHRyYU9mZnNldF9YLFxuICAgICAgZXh0cmFPZmZzZXRfWSA9IF9jYWxjdWxhdGVPZmZzZXQuZXh0cmFPZmZzZXRfWTtcblxuICB2YXIgd2luZG93V2lkdGggPSB3aW5kb3cuaW5uZXJXaWR0aDtcbiAgdmFyIHdpbmRvd0hlaWdodCA9IHdpbmRvdy5pbm5lckhlaWdodDtcblxuICB2YXIgX2dldFBhcmVudCA9IGdldFBhcmVudChub2RlKSxcbiAgICAgIHBhcmVudFRvcCA9IF9nZXRQYXJlbnQucGFyZW50VG9wLFxuICAgICAgcGFyZW50TGVmdCA9IF9nZXRQYXJlbnQucGFyZW50TGVmdDtcblxuICAvLyBHZXQgdGhlIGVkZ2Ugb2Zmc2V0IG9mIHRoZSB0b29sdGlwXG5cblxuICB2YXIgZ2V0VGlwT2Zmc2V0TGVmdCA9IGZ1bmN0aW9uIGdldFRpcE9mZnNldExlZnQocGxhY2UpIHtcbiAgICB2YXIgb2Zmc2V0X1ggPSBkZWZhdWx0T2Zmc2V0W3BsYWNlXS5sO1xuICAgIHJldHVybiBtb3VzZVggKyBvZmZzZXRfWCArIGV4dHJhT2Zmc2V0X1g7XG4gIH07XG4gIHZhciBnZXRUaXBPZmZzZXRSaWdodCA9IGZ1bmN0aW9uIGdldFRpcE9mZnNldFJpZ2h0KHBsYWNlKSB7XG4gICAgdmFyIG9mZnNldF9YID0gZGVmYXVsdE9mZnNldFtwbGFjZV0ucjtcbiAgICByZXR1cm4gbW91c2VYICsgb2Zmc2V0X1ggKyBleHRyYU9mZnNldF9YO1xuICB9O1xuICB2YXIgZ2V0VGlwT2Zmc2V0VG9wID0gZnVuY3Rpb24gZ2V0VGlwT2Zmc2V0VG9wKHBsYWNlKSB7XG4gICAgdmFyIG9mZnNldF9ZID0gZGVmYXVsdE9mZnNldFtwbGFjZV0udDtcbiAgICByZXR1cm4gbW91c2VZICsgb2Zmc2V0X1kgKyBleHRyYU9mZnNldF9ZO1xuICB9O1xuICB2YXIgZ2V0VGlwT2Zmc2V0Qm90dG9tID0gZnVuY3Rpb24gZ2V0VGlwT2Zmc2V0Qm90dG9tKHBsYWNlKSB7XG4gICAgdmFyIG9mZnNldF9ZID0gZGVmYXVsdE9mZnNldFtwbGFjZV0uYjtcbiAgICByZXR1cm4gbW91c2VZICsgb2Zmc2V0X1kgKyBleHRyYU9mZnNldF9ZO1xuICB9O1xuXG4gIC8vIEp1ZGdlIGlmIHRoZSB0b29sdGlwIGhhcyBvdmVyIHRoZSB3aW5kb3coc2NyZWVuKVxuICB2YXIgb3V0c2lkZVZlcnRpY2FsID0gZnVuY3Rpb24gb3V0c2lkZVZlcnRpY2FsKCkge1xuICAgIHZhciByZXN1bHQgPSBmYWxzZTtcbiAgICB2YXIgbmV3UGxhY2UgPSB2b2lkIDA7XG4gICAgaWYgKGdldFRpcE9mZnNldFRvcCgnbGVmdCcpIDwgMCAmJiBnZXRUaXBPZmZzZXRCb3R0b20oJ2xlZnQnKSA8PSB3aW5kb3dIZWlnaHQgJiYgZ2V0VGlwT2Zmc2V0Qm90dG9tKCdib3R0b20nKSA8PSB3aW5kb3dIZWlnaHQpIHtcbiAgICAgIHJlc3VsdCA9IHRydWU7XG4gICAgICBuZXdQbGFjZSA9ICdib3R0b20nO1xuICAgIH0gZWxzZSBpZiAoZ2V0VGlwT2Zmc2V0Qm90dG9tKCdsZWZ0JykgPiB3aW5kb3dIZWlnaHQgJiYgZ2V0VGlwT2Zmc2V0VG9wKCdsZWZ0JykgPj0gMCAmJiBnZXRUaXBPZmZzZXRUb3AoJ3RvcCcpID49IDApIHtcbiAgICAgIHJlc3VsdCA9IHRydWU7XG4gICAgICBuZXdQbGFjZSA9ICd0b3AnO1xuICAgIH1cbiAgICByZXR1cm4geyByZXN1bHQ6IHJlc3VsdCwgbmV3UGxhY2U6IG5ld1BsYWNlIH07XG4gIH07XG4gIHZhciBvdXRzaWRlTGVmdCA9IGZ1bmN0aW9uIG91dHNpZGVMZWZ0KCkge1xuICAgIHZhciBfb3V0c2lkZVZlcnRpY2FsID0gb3V0c2lkZVZlcnRpY2FsKCksXG4gICAgICAgIHJlc3VsdCA9IF9vdXRzaWRlVmVydGljYWwucmVzdWx0LFxuICAgICAgICBuZXdQbGFjZSA9IF9vdXRzaWRlVmVydGljYWwubmV3UGxhY2U7IC8vIERlYWwgd2l0aCB2ZXJ0aWNhbCBhcyBmaXJzdCBwcmlvcml0eVxuXG5cbiAgICBpZiAocmVzdWx0ICYmIG91dHNpZGVIb3Jpem9udGFsKCkucmVzdWx0KSB7XG4gICAgICByZXR1cm4geyByZXN1bHQ6IGZhbHNlIC8vIE5vIG5lZWQgdG8gY2hhbmdlLCBpZiBjaGFuZ2UgdG8gdmVydGljYWwgd2lsbCBvdXQgb2Ygc3BhY2VcbiAgICAgIH07XG4gICAgfVxuICAgIGlmICghcmVzdWx0ICYmIGdldFRpcE9mZnNldExlZnQoJ2xlZnQnKSA8IDAgJiYgZ2V0VGlwT2Zmc2V0UmlnaHQoJ3JpZ2h0JykgPD0gd2luZG93V2lkdGgpIHtcbiAgICAgIHJlc3VsdCA9IHRydWU7IC8vIElmIHZlcnRpY2FsIG9rLCBidXQgbGV0IG91dCBvZiBzaWRlIGFuZCByaWdodCB3b24ndCBvdXQgb2Ygc2lkZVxuICAgICAgbmV3UGxhY2UgPSAncmlnaHQnO1xuICAgIH1cbiAgICByZXR1cm4geyByZXN1bHQ6IHJlc3VsdCwgbmV3UGxhY2U6IG5ld1BsYWNlIH07XG4gIH07XG4gIHZhciBvdXRzaWRlUmlnaHQgPSBmdW5jdGlvbiBvdXRzaWRlUmlnaHQoKSB7XG4gICAgdmFyIF9vdXRzaWRlVmVydGljYWwyID0gb3V0c2lkZVZlcnRpY2FsKCksXG4gICAgICAgIHJlc3VsdCA9IF9vdXRzaWRlVmVydGljYWwyLnJlc3VsdCxcbiAgICAgICAgbmV3UGxhY2UgPSBfb3V0c2lkZVZlcnRpY2FsMi5uZXdQbGFjZTtcblxuICAgIGlmIChyZXN1bHQgJiYgb3V0c2lkZUhvcml6b250YWwoKS5yZXN1bHQpIHtcbiAgICAgIHJldHVybiB7IHJlc3VsdDogZmFsc2UgLy8gTm8gbmVlZCB0byBjaGFuZ2UsIGlmIGNoYW5nZSB0byB2ZXJ0aWNhbCB3aWxsIG91dCBvZiBzcGFjZVxuICAgICAgfTtcbiAgICB9XG4gICAgaWYgKCFyZXN1bHQgJiYgZ2V0VGlwT2Zmc2V0UmlnaHQoJ3JpZ2h0JykgPiB3aW5kb3dXaWR0aCAmJiBnZXRUaXBPZmZzZXRMZWZ0KCdsZWZ0JykgPj0gMCkge1xuICAgICAgcmVzdWx0ID0gdHJ1ZTtcbiAgICAgIG5ld1BsYWNlID0gJ2xlZnQnO1xuICAgIH1cbiAgICByZXR1cm4geyByZXN1bHQ6IHJlc3VsdCwgbmV3UGxhY2U6IG5ld1BsYWNlIH07XG4gIH07XG5cbiAgdmFyIG91dHNpZGVIb3Jpem9udGFsID0gZnVuY3Rpb24gb3V0c2lkZUhvcml6b250YWwoKSB7XG4gICAgdmFyIHJlc3VsdCA9IGZhbHNlO1xuICAgIHZhciBuZXdQbGFjZSA9IHZvaWQgMDtcbiAgICBpZiAoZ2V0VGlwT2Zmc2V0TGVmdCgndG9wJykgPCAwICYmIGdldFRpcE9mZnNldFJpZ2h0KCd0b3AnKSA8PSB3aW5kb3dXaWR0aCAmJiBnZXRUaXBPZmZzZXRSaWdodCgncmlnaHQnKSA8PSB3aW5kb3dXaWR0aCkge1xuICAgICAgcmVzdWx0ID0gdHJ1ZTtcbiAgICAgIG5ld1BsYWNlID0gJ3JpZ2h0JztcbiAgICB9IGVsc2UgaWYgKGdldFRpcE9mZnNldFJpZ2h0KCd0b3AnKSA+IHdpbmRvd1dpZHRoICYmIGdldFRpcE9mZnNldExlZnQoJ3RvcCcpID49IDAgJiYgZ2V0VGlwT2Zmc2V0TGVmdCgnbGVmdCcpID49IDApIHtcbiAgICAgIHJlc3VsdCA9IHRydWU7XG4gICAgICBuZXdQbGFjZSA9ICdsZWZ0JztcbiAgICB9XG4gICAgcmV0dXJuIHsgcmVzdWx0OiByZXN1bHQsIG5ld1BsYWNlOiBuZXdQbGFjZSB9O1xuICB9O1xuICB2YXIgb3V0c2lkZVRvcCA9IGZ1bmN0aW9uIG91dHNpZGVUb3AoKSB7XG4gICAgdmFyIF9vdXRzaWRlSG9yaXpvbnRhbCA9IG91dHNpZGVIb3Jpem9udGFsKCksXG4gICAgICAgIHJlc3VsdCA9IF9vdXRzaWRlSG9yaXpvbnRhbC5yZXN1bHQsXG4gICAgICAgIG5ld1BsYWNlID0gX291dHNpZGVIb3Jpem9udGFsLm5ld1BsYWNlO1xuXG4gICAgaWYgKHJlc3VsdCAmJiBvdXRzaWRlVmVydGljYWwoKS5yZXN1bHQpIHtcbiAgICAgIHJldHVybiB7IHJlc3VsdDogZmFsc2UgfTtcbiAgICB9XG4gICAgaWYgKCFyZXN1bHQgJiYgZ2V0VGlwT2Zmc2V0VG9wKCd0b3AnKSA8IDAgJiYgZ2V0VGlwT2Zmc2V0Qm90dG9tKCdib3R0b20nKSA8PSB3aW5kb3dIZWlnaHQpIHtcbiAgICAgIHJlc3VsdCA9IHRydWU7XG4gICAgICBuZXdQbGFjZSA9ICdib3R0b20nO1xuICAgIH1cbiAgICByZXR1cm4geyByZXN1bHQ6IHJlc3VsdCwgbmV3UGxhY2U6IG5ld1BsYWNlIH07XG4gIH07XG4gIHZhciBvdXRzaWRlQm90dG9tID0gZnVuY3Rpb24gb3V0c2lkZUJvdHRvbSgpIHtcbiAgICB2YXIgX291dHNpZGVIb3Jpem9udGFsMiA9IG91dHNpZGVIb3Jpem9udGFsKCksXG4gICAgICAgIHJlc3VsdCA9IF9vdXRzaWRlSG9yaXpvbnRhbDIucmVzdWx0LFxuICAgICAgICBuZXdQbGFjZSA9IF9vdXRzaWRlSG9yaXpvbnRhbDIubmV3UGxhY2U7XG5cbiAgICBpZiAocmVzdWx0ICYmIG91dHNpZGVWZXJ0aWNhbCgpLnJlc3VsdCkge1xuICAgICAgcmV0dXJuIHsgcmVzdWx0OiBmYWxzZSB9O1xuICAgIH1cbiAgICBpZiAoIXJlc3VsdCAmJiBnZXRUaXBPZmZzZXRCb3R0b20oJ2JvdHRvbScpID4gd2luZG93SGVpZ2h0ICYmIGdldFRpcE9mZnNldFRvcCgndG9wJykgPj0gMCkge1xuICAgICAgcmVzdWx0ID0gdHJ1ZTtcbiAgICAgIG5ld1BsYWNlID0gJ3RvcCc7XG4gICAgfVxuICAgIHJldHVybiB7IHJlc3VsdDogcmVzdWx0LCBuZXdQbGFjZTogbmV3UGxhY2UgfTtcbiAgfTtcblxuICAvLyBSZXR1cm4gbmV3IHN0YXRlIHRvIGNoYW5nZSB0aGUgcGxhY2VtZW50IHRvIHRoZSByZXZlcnNlIGlmIHBvc3NpYmxlXG4gIHZhciBvdXRzaWRlTGVmdFJlc3VsdCA9IG91dHNpZGVMZWZ0KCk7XG4gIHZhciBvdXRzaWRlUmlnaHRSZXN1bHQgPSBvdXRzaWRlUmlnaHQoKTtcbiAgdmFyIG91dHNpZGVUb3BSZXN1bHQgPSBvdXRzaWRlVG9wKCk7XG4gIHZhciBvdXRzaWRlQm90dG9tUmVzdWx0ID0gb3V0c2lkZUJvdHRvbSgpO1xuXG4gIGlmIChwbGFjZSA9PT0gJ2xlZnQnICYmIG91dHNpZGVMZWZ0UmVzdWx0LnJlc3VsdCkge1xuICAgIHJldHVybiB7XG4gICAgICBpc05ld1N0YXRlOiB0cnVlLFxuICAgICAgbmV3U3RhdGU6IHsgcGxhY2U6IG91dHNpZGVMZWZ0UmVzdWx0Lm5ld1BsYWNlIH1cbiAgICB9O1xuICB9IGVsc2UgaWYgKHBsYWNlID09PSAncmlnaHQnICYmIG91dHNpZGVSaWdodFJlc3VsdC5yZXN1bHQpIHtcbiAgICByZXR1cm4ge1xuICAgICAgaXNOZXdTdGF0ZTogdHJ1ZSxcbiAgICAgIG5ld1N0YXRlOiB7IHBsYWNlOiBvdXRzaWRlUmlnaHRSZXN1bHQubmV3UGxhY2UgfVxuICAgIH07XG4gIH0gZWxzZSBpZiAocGxhY2UgPT09ICd0b3AnICYmIG91dHNpZGVUb3BSZXN1bHQucmVzdWx0KSB7XG4gICAgcmV0dXJuIHtcbiAgICAgIGlzTmV3U3RhdGU6IHRydWUsXG4gICAgICBuZXdTdGF0ZTogeyBwbGFjZTogb3V0c2lkZVRvcFJlc3VsdC5uZXdQbGFjZSB9XG4gICAgfTtcbiAgfSBlbHNlIGlmIChwbGFjZSA9PT0gJ2JvdHRvbScgJiYgb3V0c2lkZUJvdHRvbVJlc3VsdC5yZXN1bHQpIHtcbiAgICByZXR1cm4ge1xuICAgICAgaXNOZXdTdGF0ZTogdHJ1ZSxcbiAgICAgIG5ld1N0YXRlOiB7IHBsYWNlOiBvdXRzaWRlQm90dG9tUmVzdWx0Lm5ld1BsYWNlIH1cbiAgICB9O1xuICB9XG5cbiAgLy8gQ2hhbmdlIGJhY2sgdG8gb3JpZ2luYWwgcGxhY2UgaWYgcG9zc2libGVcbiAgaWYgKHBsYWNlICE9PSBkZXNpcmVkUGxhY2UpIHtcbiAgICBpZiAoZGVzaXJlZFBsYWNlID09PSAndG9wJyAmJiAhb3V0c2lkZVRvcFJlc3VsdC5yZXN1bHQpIHtcbiAgICAgIHJldHVybiB7XG4gICAgICAgIGlzTmV3U3RhdGU6IHRydWUsXG4gICAgICAgIG5ld1N0YXRlOiB7IHBsYWNlOiAndG9wJyB9XG4gICAgICB9O1xuICAgIH0gZWxzZSBpZiAoZGVzaXJlZFBsYWNlID09PSAnbGVmdCcgJiYgIW91dHNpZGVMZWZ0UmVzdWx0LnJlc3VsdCkge1xuICAgICAgcmV0dXJuIHtcbiAgICAgICAgaXNOZXdTdGF0ZTogdHJ1ZSxcbiAgICAgICAgbmV3U3RhdGU6IHsgcGxhY2U6ICdsZWZ0JyB9XG4gICAgICB9O1xuICAgIH0gZWxzZSBpZiAoZGVzaXJlZFBsYWNlID09PSAncmlnaHQnICYmICFvdXRzaWRlUmlnaHRSZXN1bHQucmVzdWx0KSB7XG4gICAgICByZXR1cm4ge1xuICAgICAgICBpc05ld1N0YXRlOiB0cnVlLFxuICAgICAgICBuZXdTdGF0ZTogeyBwbGFjZTogJ3JpZ2h0JyB9XG4gICAgICB9O1xuICAgIH0gZWxzZSBpZiAoZGVzaXJlZFBsYWNlID09PSAnYm90dG9tJyAmJiAhb3V0c2lkZUJvdHRvbVJlc3VsdC5yZXN1bHQpIHtcbiAgICAgIHJldHVybiB7XG4gICAgICAgIGlzTmV3U3RhdGU6IHRydWUsXG4gICAgICAgIG5ld1N0YXRlOiB7IHBsYWNlOiAnYm90dG9tJyB9XG4gICAgICB9O1xuICAgIH1cbiAgfVxuXG4gIC8vIFJldHVybiB0b29sdGlwIG9mZnNldCBwb3NpdGlvblxuICByZXR1cm4ge1xuICAgIGlzTmV3U3RhdGU6IGZhbHNlLFxuICAgIHBvc2l0aW9uOiB7XG4gICAgICBsZWZ0OiBwYXJzZUludChnZXRUaXBPZmZzZXRMZWZ0KHBsYWNlKSAtIHBhcmVudExlZnQsIDEwKSxcbiAgICAgIHRvcDogcGFyc2VJbnQoZ2V0VGlwT2Zmc2V0VG9wKHBsYWNlKSAtIHBhcmVudFRvcCwgMTApXG4gICAgfVxuICB9O1xufTtcblxudmFyIGdldERpbWVuc2lvbnMgPSBmdW5jdGlvbiBnZXREaW1lbnNpb25zKG5vZGUpIHtcbiAgdmFyIF9ub2RlJGdldEJvdW5kaW5nQ2xpZSA9IG5vZGUuZ2V0Qm91bmRpbmdDbGllbnRSZWN0KCksXG4gICAgICBoZWlnaHQgPSBfbm9kZSRnZXRCb3VuZGluZ0NsaWUuaGVpZ2h0LFxuICAgICAgd2lkdGggPSBfbm9kZSRnZXRCb3VuZGluZ0NsaWUud2lkdGg7XG5cbiAgcmV0dXJuIHtcbiAgICBoZWlnaHQ6IHBhcnNlSW50KGhlaWdodCwgMTApLFxuICAgIHdpZHRoOiBwYXJzZUludCh3aWR0aCwgMTApXG4gIH07XG59O1xuXG4vLyBHZXQgY3VycmVudCBtb3VzZSBvZmZzZXRcbi8qKlxuICogQ2FsY3VsYXRlIHRoZSBwb3NpdGlvbiBvZiB0b29sdGlwXG4gKlxuICogQHBhcmFtc1xuICogLSBgZWAge0V2ZW50fSB0aGUgZXZlbnQgb2YgY3VycmVudCBtb3VzZVxuICogLSBgdGFyZ2V0YCB7RWxlbWVudH0gdGhlIGN1cnJlbnRUYXJnZXQgb2YgdGhlIGV2ZW50XG4gKiAtIGBub2RlYCB7RE9NfSB0aGUgcmVhY3QtdG9vbHRpcCBvYmplY3RcbiAqIC0gYHBsYWNlYCB7U3RyaW5nfSB0b3AgLyByaWdodCAvIGJvdHRvbSAvIGxlZnRcbiAqIC0gYGVmZmVjdGAge1N0cmluZ30gZmxvYXQgLyBzb2xpZFxuICogLSBgb2Zmc2V0YCB7T2JqZWN0fSB0aGUgb2Zmc2V0IHRvIGRlZmF1bHQgcG9zaXRpb25cbiAqXG4gKiBAcmV0dXJuIHtPYmplY3RcbiAqIC0gYGlzTmV3U3RhdGVgIHtCb29sfSByZXF1aXJlZFxuICogLSBgbmV3U3RhdGVgIHtPYmplY3R9XG4gKiAtIGBwb3NpdGlvbmAge09CamVjdH0ge2xlZnQ6IHtOdW1iZXJ9LCB0b3A6IHtOdW1iZXJ9fVxuICovXG52YXIgZ2V0Q3VycmVudE9mZnNldCA9IGZ1bmN0aW9uIGdldEN1cnJlbnRPZmZzZXQoZSwgY3VycmVudFRhcmdldCwgZWZmZWN0KSB7XG4gIHZhciBib3VuZGluZ0NsaWVudFJlY3QgPSBjdXJyZW50VGFyZ2V0LmdldEJvdW5kaW5nQ2xpZW50UmVjdCgpO1xuICB2YXIgdGFyZ2V0VG9wID0gYm91bmRpbmdDbGllbnRSZWN0LnRvcDtcbiAgdmFyIHRhcmdldExlZnQgPSBib3VuZGluZ0NsaWVudFJlY3QubGVmdDtcblxuICB2YXIgX2dldERpbWVuc2lvbnMzID0gZ2V0RGltZW5zaW9ucyhjdXJyZW50VGFyZ2V0KSxcbiAgICAgIHRhcmdldFdpZHRoID0gX2dldERpbWVuc2lvbnMzLndpZHRoLFxuICAgICAgdGFyZ2V0SGVpZ2h0ID0gX2dldERpbWVuc2lvbnMzLmhlaWdodDtcblxuICBpZiAoZWZmZWN0ID09PSAnZmxvYXQnKSB7XG4gICAgcmV0dXJuIHtcbiAgICAgIG1vdXNlWDogZS5jbGllbnRYLFxuICAgICAgbW91c2VZOiBlLmNsaWVudFlcbiAgICB9O1xuICB9XG4gIHJldHVybiB7XG4gICAgbW91c2VYOiB0YXJnZXRMZWZ0ICsgdGFyZ2V0V2lkdGggLyAyLFxuICAgIG1vdXNlWTogdGFyZ2V0VG9wICsgdGFyZ2V0SGVpZ2h0IC8gMlxuICB9O1xufTtcblxuLy8gTGlzdCBhbGwgcG9zc2liaWxpdHkgb2YgdG9vbHRpcCBmaW5hbCBvZmZzZXRcbi8vIFRoaXMgaXMgdXNlZnVsIGluIGp1ZGdpbmcgaWYgaXQgaXMgbmVjZXNzYXJ5IGZvciB0b29sdGlwIHRvIHN3aXRjaCBwb3NpdGlvbiB3aGVuIG91dCBvZiB3aW5kb3dcbnZhciBnZXREZWZhdWx0UG9zaXRpb24gPSBmdW5jdGlvbiBnZXREZWZhdWx0UG9zaXRpb24oZWZmZWN0LCB0YXJnZXRXaWR0aCwgdGFyZ2V0SGVpZ2h0LCB0aXBXaWR0aCwgdGlwSGVpZ2h0KSB7XG4gIHZhciB0b3AgPSB2b2lkIDA7XG4gIHZhciByaWdodCA9IHZvaWQgMDtcbiAgdmFyIGJvdHRvbSA9IHZvaWQgMDtcbiAgdmFyIGxlZnQgPSB2b2lkIDA7XG4gIHZhciBkaXNUb01vdXNlID0gMztcbiAgdmFyIHRyaWFuZ2xlSGVpZ2h0ID0gMjtcbiAgdmFyIGN1cnNvckhlaWdodCA9IDEyOyAvLyBPcHRpbWl6ZSBmb3IgZmxvYXQgYm90dG9tIG9ubHksIGNhdXNlIHRoZSBjdXJzb3Igd2lsbCBoaWRlIHRoZSB0b29sdGlwXG5cbiAgaWYgKGVmZmVjdCA9PT0gJ2Zsb2F0Jykge1xuICAgIHRvcCA9IHtcbiAgICAgIGw6IC0odGlwV2lkdGggLyAyKSxcbiAgICAgIHI6IHRpcFdpZHRoIC8gMixcbiAgICAgIHQ6IC0odGlwSGVpZ2h0ICsgZGlzVG9Nb3VzZSArIHRyaWFuZ2xlSGVpZ2h0KSxcbiAgICAgIGI6IC1kaXNUb01vdXNlXG4gICAgfTtcbiAgICBib3R0b20gPSB7XG4gICAgICBsOiAtKHRpcFdpZHRoIC8gMiksXG4gICAgICByOiB0aXBXaWR0aCAvIDIsXG4gICAgICB0OiBkaXNUb01vdXNlICsgY3Vyc29ySGVpZ2h0LFxuICAgICAgYjogdGlwSGVpZ2h0ICsgZGlzVG9Nb3VzZSArIHRyaWFuZ2xlSGVpZ2h0ICsgY3Vyc29ySGVpZ2h0XG4gICAgfTtcbiAgICBsZWZ0ID0ge1xuICAgICAgbDogLSh0aXBXaWR0aCArIGRpc1RvTW91c2UgKyB0cmlhbmdsZUhlaWdodCksXG4gICAgICByOiAtZGlzVG9Nb3VzZSxcbiAgICAgIHQ6IC0odGlwSGVpZ2h0IC8gMiksXG4gICAgICBiOiB0aXBIZWlnaHQgLyAyXG4gICAgfTtcbiAgICByaWdodCA9IHtcbiAgICAgIGw6IGRpc1RvTW91c2UsXG4gICAgICByOiB0aXBXaWR0aCArIGRpc1RvTW91c2UgKyB0cmlhbmdsZUhlaWdodCxcbiAgICAgIHQ6IC0odGlwSGVpZ2h0IC8gMiksXG4gICAgICBiOiB0aXBIZWlnaHQgLyAyXG4gICAgfTtcbiAgfSBlbHNlIGlmIChlZmZlY3QgPT09ICdzb2xpZCcpIHtcbiAgICB0b3AgPSB7XG4gICAgICBsOiAtKHRpcFdpZHRoIC8gMiksXG4gICAgICByOiB0aXBXaWR0aCAvIDIsXG4gICAgICB0OiAtKHRhcmdldEhlaWdodCAvIDIgKyB0aXBIZWlnaHQgKyB0cmlhbmdsZUhlaWdodCksXG4gICAgICBiOiAtKHRhcmdldEhlaWdodCAvIDIpXG4gICAgfTtcbiAgICBib3R0b20gPSB7XG4gICAgICBsOiAtKHRpcFdpZHRoIC8gMiksXG4gICAgICByOiB0aXBXaWR0aCAvIDIsXG4gICAgICB0OiB0YXJnZXRIZWlnaHQgLyAyLFxuICAgICAgYjogdGFyZ2V0SGVpZ2h0IC8gMiArIHRpcEhlaWdodCArIHRyaWFuZ2xlSGVpZ2h0XG4gICAgfTtcbiAgICBsZWZ0ID0ge1xuICAgICAgbDogLSh0aXBXaWR0aCArIHRhcmdldFdpZHRoIC8gMiArIHRyaWFuZ2xlSGVpZ2h0KSxcbiAgICAgIHI6IC0odGFyZ2V0V2lkdGggLyAyKSxcbiAgICAgIHQ6IC0odGlwSGVpZ2h0IC8gMiksXG4gICAgICBiOiB0aXBIZWlnaHQgLyAyXG4gICAgfTtcbiAgICByaWdodCA9IHtcbiAgICAgIGw6IHRhcmdldFdpZHRoIC8gMixcbiAgICAgIHI6IHRpcFdpZHRoICsgdGFyZ2V0V2lkdGggLyAyICsgdHJpYW5nbGVIZWlnaHQsXG4gICAgICB0OiAtKHRpcEhlaWdodCAvIDIpLFxuICAgICAgYjogdGlwSGVpZ2h0IC8gMlxuICAgIH07XG4gIH1cblxuICByZXR1cm4geyB0b3A6IHRvcCwgYm90dG9tOiBib3R0b20sIGxlZnQ6IGxlZnQsIHJpZ2h0OiByaWdodCB9O1xufTtcblxuLy8gQ29uc2lkZXIgYWRkaXRpb25hbCBvZmZzZXQgaW50byBwb3NpdGlvbiBjYWxjdWxhdGlvblxudmFyIGNhbGN1bGF0ZU9mZnNldCA9IGZ1bmN0aW9uIGNhbGN1bGF0ZU9mZnNldChvZmZzZXQpIHtcbiAgdmFyIGV4dHJhT2Zmc2V0X1ggPSAwO1xuICB2YXIgZXh0cmFPZmZzZXRfWSA9IDA7XG5cbiAgaWYgKE9iamVjdC5wcm90b3R5cGUudG9TdHJpbmcuYXBwbHkob2Zmc2V0KSA9PT0gJ1tvYmplY3QgU3RyaW5nXScpIHtcbiAgICBvZmZzZXQgPSBKU09OLnBhcnNlKG9mZnNldC50b1N0cmluZygpLnJlcGxhY2UoL1xcJy9nLCAnXFxcIicpKTtcbiAgfVxuICBmb3IgKHZhciBrZXkgaW4gb2Zmc2V0KSB7XG4gICAgaWYgKGtleSA9PT0gJ3RvcCcpIHtcbiAgICAgIGV4dHJhT2Zmc2V0X1kgLT0gcGFyc2VJbnQob2Zmc2V0W2tleV0sIDEwKTtcbiAgICB9IGVsc2UgaWYgKGtleSA9PT0gJ2JvdHRvbScpIHtcbiAgICAgIGV4dHJhT2Zmc2V0X1kgKz0gcGFyc2VJbnQob2Zmc2V0W2tleV0sIDEwKTtcbiAgICB9IGVsc2UgaWYgKGtleSA9PT0gJ2xlZnQnKSB7XG4gICAgICBleHRyYU9mZnNldF9YIC09IHBhcnNlSW50KG9mZnNldFtrZXldLCAxMCk7XG4gICAgfSBlbHNlIGlmIChrZXkgPT09ICdyaWdodCcpIHtcbiAgICAgIGV4dHJhT2Zmc2V0X1ggKz0gcGFyc2VJbnQob2Zmc2V0W2tleV0sIDEwKTtcbiAgICB9XG4gIH1cblxuICByZXR1cm4geyBleHRyYU9mZnNldF9YOiBleHRyYU9mZnNldF9YLCBleHRyYU9mZnNldF9ZOiBleHRyYU9mZnNldF9ZIH07XG59O1xuXG4vLyBHZXQgdGhlIG9mZnNldCBvZiB0aGUgcGFyZW50IGVsZW1lbnRzXG52YXIgZ2V0UGFyZW50ID0gZnVuY3Rpb24gZ2V0UGFyZW50KGN1cnJlbnRUYXJnZXQpIHtcbiAgdmFyIGN1cnJlbnRQYXJlbnQgPSBjdXJyZW50VGFyZ2V0O1xuICB3aGlsZSAoY3VycmVudFBhcmVudCkge1xuICAgIGlmICh3aW5kb3cuZ2V0Q29tcHV0ZWRTdHlsZShjdXJyZW50UGFyZW50KS5nZXRQcm9wZXJ0eVZhbHVlKCd0cmFuc2Zvcm0nKSAhPT0gJ25vbmUnKSBicmVhaztcbiAgICBjdXJyZW50UGFyZW50ID0gY3VycmVudFBhcmVudC5wYXJlbnRFbGVtZW50O1xuICB9XG5cbiAgdmFyIHBhcmVudFRvcCA9IGN1cnJlbnRQYXJlbnQgJiYgY3VycmVudFBhcmVudC5nZXRCb3VuZGluZ0NsaWVudFJlY3QoKS50b3AgfHwgMDtcbiAgdmFyIHBhcmVudExlZnQgPSBjdXJyZW50UGFyZW50ICYmIGN1cnJlbnRQYXJlbnQuZ2V0Qm91bmRpbmdDbGllbnRSZWN0KCkubGVmdCB8fCAwO1xuXG4gIHJldHVybiB7IHBhcmVudFRvcDogcGFyZW50VG9wLCBwYXJlbnRMZWZ0OiBwYXJlbnRMZWZ0IH07XG59OyIsIlwidXNlIHN0cmljdFwiO1xuXG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHtcbiAgdmFsdWU6IHRydWVcbn0pO1xuXG5leHBvcnRzLmRlZmF1bHQgPSBmdW5jdGlvbiAodGFyZ2V0KSB7XG4gIHRhcmdldC5wcm90b3R5cGUuYmluZFJlbW92YWxUcmFja2VyID0gZnVuY3Rpb24gKCkge1xuICAgIHZhciBfdGhpcyA9IHRoaXM7XG5cbiAgICB2YXIgTXV0YXRpb25PYnNlcnZlciA9IGdldE11dGF0aW9uT2JzZXJ2ZXJDbGFzcygpO1xuICAgIGlmIChNdXRhdGlvbk9ic2VydmVyID09IG51bGwpIHJldHVybjtcblxuICAgIHZhciBvYnNlcnZlciA9IG5ldyBNdXRhdGlvbk9ic2VydmVyKGZ1bmN0aW9uIChtdXRhdGlvbnMpIHtcbiAgICAgIGZvciAodmFyIG0xID0gMDsgbTEgPCBtdXRhdGlvbnMubGVuZ3RoOyBtMSsrKSB7XG4gICAgICAgIHZhciBtdXRhdGlvbiA9IG11dGF0aW9uc1ttMV07XG4gICAgICAgIGZvciAodmFyIG0yID0gMDsgbTIgPCBtdXRhdGlvbi5yZW1vdmVkTm9kZXMubGVuZ3RoOyBtMisrKSB7XG4gICAgICAgICAgdmFyIGVsZW1lbnQgPSBtdXRhdGlvbi5yZW1vdmVkTm9kZXNbbTJdO1xuICAgICAgICAgIGlmIChlbGVtZW50ID09PSBfdGhpcy5zdGF0ZS5jdXJyZW50VGFyZ2V0KSB7XG4gICAgICAgICAgICBfdGhpcy5oaWRlVG9vbHRpcCgpO1xuICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgfVxuICAgIH0pO1xuXG4gICAgb2JzZXJ2ZXIub2JzZXJ2ZSh3aW5kb3cuZG9jdW1lbnQsIHsgY2hpbGRMaXN0OiB0cnVlLCBzdWJ0cmVlOiB0cnVlIH0pO1xuXG4gICAgdGhpcy5yZW1vdmFsVHJhY2tlciA9IG9ic2VydmVyO1xuICB9O1xuXG4gIHRhcmdldC5wcm90b3R5cGUudW5iaW5kUmVtb3ZhbFRyYWNrZXIgPSBmdW5jdGlvbiAoKSB7XG4gICAgaWYgKHRoaXMucmVtb3ZhbFRyYWNrZXIpIHtcbiAgICAgIHRoaXMucmVtb3ZhbFRyYWNrZXIuZGlzY29ubmVjdCgpO1xuICAgICAgdGhpcy5yZW1vdmFsVHJhY2tlciA9IG51bGw7XG4gICAgfVxuICB9O1xufTtcblxuLyoqXG4gKiBUcmFja2luZyB0YXJnZXQgcmVtb3ZpbmcgZnJvbSBET00uXG4gKiBJdCdzIG5lc3Nlc2FyeSB0byBoaWRlIHRvb2x0aXAgd2hlbiBpdCdzIHRhcmdldCBkaXNhcHBlYXJzLlxuICogT3RoZXJ3aXNlLCB0aGUgdG9vbHRpcCB3b3VsZCBiZSBzaG93biBmb3JldmVyIHVudGlsIGFub3RoZXIgdGFyZ2V0XG4gKiBpcyB0cmlnZ2VyZWQuXG4gKlxuICogSWYgTXV0YXRpb25PYnNlcnZlciBpcyBub3QgYXZhaWxhYmxlLCB0aGlzIGZlYXR1cmUganVzdCBkb2Vzbid0IHdvcmsuXG4gKi9cblxuLy8gaHR0cHM6Ly9oYWNrcy5tb3ppbGxhLm9yZy8yMDEyLzA1L2RvbS1tdXRhdGlvbm9ic2VydmVyLXJlYWN0aW5nLXRvLWRvbS1jaGFuZ2VzLXdpdGhvdXQta2lsbGluZy1icm93c2VyLXBlcmZvcm1hbmNlL1xudmFyIGdldE11dGF0aW9uT2JzZXJ2ZXJDbGFzcyA9IGZ1bmN0aW9uIGdldE11dGF0aW9uT2JzZXJ2ZXJDbGFzcygpIHtcbiAgcmV0dXJuIHdpbmRvdy5NdXRhdGlvbk9ic2VydmVyIHx8IHdpbmRvdy5XZWJLaXRNdXRhdGlvbk9ic2VydmVyIHx8IHdpbmRvdy5Nb3pNdXRhdGlvbk9ic2VydmVyO1xufTsiLCIndXNlIHN0cmljdCc7XG5cbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwge1xuICB2YWx1ZTogdHJ1ZVxufSk7XG5cbmV4cG9ydHMuZGVmYXVsdCA9IGZ1bmN0aW9uICh0YXJnZXQpIHtcbiAgdGFyZ2V0LnByb3RvdHlwZS5nZXRFZmZlY3QgPSBmdW5jdGlvbiAoY3VycmVudFRhcmdldCkge1xuICAgIHZhciBkYXRhRWZmZWN0ID0gY3VycmVudFRhcmdldC5nZXRBdHRyaWJ1dGUoJ2RhdGEtZWZmZWN0Jyk7XG4gICAgcmV0dXJuIGRhdGFFZmZlY3QgfHwgdGhpcy5wcm9wcy5lZmZlY3QgfHwgJ2Zsb2F0JztcbiAgfTtcbn07IiwiJ3VzZSBzdHJpY3QnO1xuXG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHtcbiAgdmFsdWU6IHRydWVcbn0pO1xuXG5leHBvcnRzLmRlZmF1bHQgPSBmdW5jdGlvbiAodGFyZ2V0KSB7XG4gIHRhcmdldC5wcm90b3R5cGUuaXNDYXB0dXJlID0gZnVuY3Rpb24gKGN1cnJlbnRUYXJnZXQpIHtcbiAgICB2YXIgZGF0YUlzQ2FwdHVyZSA9IGN1cnJlbnRUYXJnZXQuZ2V0QXR0cmlidXRlKCdkYXRhLWlzY2FwdHVyZScpO1xuICAgIHJldHVybiBkYXRhSXNDYXB0dXJlICYmIGRhdGFJc0NhcHR1cmUgPT09ICd0cnVlJyB8fCB0aGlzLnByb3BzLmlzQ2FwdHVyZSB8fCBmYWxzZTtcbiAgfTtcbn07IiwiJ3VzZSBzdHJpY3QnO1xuXG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHtcbiAgdmFsdWU6IHRydWVcbn0pO1xuXG5leHBvcnRzLmRlZmF1bHQgPSBmdW5jdGlvbiAodGFyZ2V0KSB7XG4gIHRhcmdldC5wcm90b3R5cGUuaXNDdXN0b21FdmVudCA9IGZ1bmN0aW9uIChlbGUpIHtcbiAgICB2YXIgZXZlbnQgPSB0aGlzLnN0YXRlLmV2ZW50O1xuXG4gICAgcmV0dXJuIGV2ZW50IHx8ICEhZWxlLmdldEF0dHJpYnV0ZSgnZGF0YS1ldmVudCcpO1xuICB9O1xuXG4gIC8qIEJpbmQgbGlzdGVuZXIgZm9yIGN1c3RvbSBldmVudCAqL1xuICB0YXJnZXQucHJvdG90eXBlLmN1c3RvbUJpbmRMaXN0ZW5lciA9IGZ1bmN0aW9uIChlbGUpIHtcbiAgICB2YXIgX3RoaXMgPSB0aGlzO1xuXG4gICAgdmFyIF9zdGF0ZSA9IHRoaXMuc3RhdGUsXG4gICAgICAgIGV2ZW50ID0gX3N0YXRlLmV2ZW50LFxuICAgICAgICBldmVudE9mZiA9IF9zdGF0ZS5ldmVudE9mZjtcblxuICAgIHZhciBkYXRhRXZlbnQgPSBlbGUuZ2V0QXR0cmlidXRlKCdkYXRhLWV2ZW50JykgfHwgZXZlbnQ7XG4gICAgdmFyIGRhdGFFdmVudE9mZiA9IGVsZS5nZXRBdHRyaWJ1dGUoJ2RhdGEtZXZlbnQtb2ZmJykgfHwgZXZlbnRPZmY7XG5cbiAgICBkYXRhRXZlbnQuc3BsaXQoJyAnKS5mb3JFYWNoKGZ1bmN0aW9uIChldmVudCkge1xuICAgICAgZWxlLnJlbW92ZUV2ZW50TGlzdGVuZXIoZXZlbnQsIGN1c3RvbUxpc3RlbmVyKTtcbiAgICAgIGN1c3RvbUxpc3RlbmVyID0gY2hlY2tTdGF0dXMuYmluZChfdGhpcywgZGF0YUV2ZW50T2ZmKTtcbiAgICAgIGVsZS5hZGRFdmVudExpc3RlbmVyKGV2ZW50LCBjdXN0b21MaXN0ZW5lciwgZmFsc2UpO1xuICAgIH0pO1xuICAgIGlmIChkYXRhRXZlbnRPZmYpIHtcbiAgICAgIGRhdGFFdmVudE9mZi5zcGxpdCgnICcpLmZvckVhY2goZnVuY3Rpb24gKGV2ZW50KSB7XG4gICAgICAgIGVsZS5yZW1vdmVFdmVudExpc3RlbmVyKGV2ZW50LCBfdGhpcy5oaWRlVG9vbHRpcCk7XG4gICAgICAgIGVsZS5hZGRFdmVudExpc3RlbmVyKGV2ZW50LCBfdGhpcy5oaWRlVG9vbHRpcCwgZmFsc2UpO1xuICAgICAgfSk7XG4gICAgfVxuICB9O1xuXG4gIC8qIFVuYmluZCBsaXN0ZW5lciBmb3IgY3VzdG9tIGV2ZW50ICovXG4gIHRhcmdldC5wcm90b3R5cGUuY3VzdG9tVW5iaW5kTGlzdGVuZXIgPSBmdW5jdGlvbiAoZWxlKSB7XG4gICAgdmFyIF9zdGF0ZTIgPSB0aGlzLnN0YXRlLFxuICAgICAgICBldmVudCA9IF9zdGF0ZTIuZXZlbnQsXG4gICAgICAgIGV2ZW50T2ZmID0gX3N0YXRlMi5ldmVudE9mZjtcblxuICAgIHZhciBkYXRhRXZlbnQgPSBldmVudCB8fCBlbGUuZ2V0QXR0cmlidXRlKCdkYXRhLWV2ZW50Jyk7XG4gICAgdmFyIGRhdGFFdmVudE9mZiA9IGV2ZW50T2ZmIHx8IGVsZS5nZXRBdHRyaWJ1dGUoJ2RhdGEtZXZlbnQtb2ZmJyk7XG5cbiAgICBlbGUucmVtb3ZlRXZlbnRMaXN0ZW5lcihkYXRhRXZlbnQsIGN1c3RvbUxpc3RlbmVyKTtcbiAgICBpZiAoZGF0YUV2ZW50T2ZmKSBlbGUucmVtb3ZlRXZlbnRMaXN0ZW5lcihkYXRhRXZlbnRPZmYsIHRoaXMuaGlkZVRvb2x0aXApO1xuICB9O1xufTtcblxuLyoqXG4gKiBDdXN0b20gZXZlbnRzIHRvIGNvbnRyb2wgc2hvd2luZyBhbmQgaGlkaW5nIG9mIHRvb2x0aXBcbiAqXG4gKiBAYXR0cmlidXRlc1xuICogLSBgZXZlbnRgIHtTdHJpbmd9XG4gKiAtIGBldmVudE9mZmAge1N0cmluZ31cbiAqL1xuXG52YXIgY2hlY2tTdGF0dXMgPSBmdW5jdGlvbiBjaGVja1N0YXR1cyhkYXRhRXZlbnRPZmYsIGUpIHtcbiAgdmFyIHNob3cgPSB0aGlzLnN0YXRlLnNob3c7XG4gIHZhciBpZCA9IHRoaXMucHJvcHMuaWQ7XG5cbiAgdmFyIGRhdGFJc0NhcHR1cmUgPSBlLmN1cnJlbnRUYXJnZXQuZ2V0QXR0cmlidXRlKCdkYXRhLWlzY2FwdHVyZScpO1xuICB2YXIgaXNDYXB0dXJlID0gZGF0YUlzQ2FwdHVyZSAmJiBkYXRhSXNDYXB0dXJlID09PSAndHJ1ZScgfHwgdGhpcy5wcm9wcy5pc0NhcHR1cmU7XG4gIHZhciBjdXJyZW50SXRlbSA9IGUuY3VycmVudFRhcmdldC5nZXRBdHRyaWJ1dGUoJ2N1cnJlbnRJdGVtJyk7XG5cbiAgaWYgKCFpc0NhcHR1cmUpIGUuc3RvcFByb3BhZ2F0aW9uKCk7XG4gIGlmIChzaG93ICYmIGN1cnJlbnRJdGVtID09PSAndHJ1ZScpIHtcbiAgICBpZiAoIWRhdGFFdmVudE9mZikgdGhpcy5oaWRlVG9vbHRpcChlKTtcbiAgfSBlbHNlIHtcbiAgICBlLmN1cnJlbnRUYXJnZXQuc2V0QXR0cmlidXRlKCdjdXJyZW50SXRlbScsICd0cnVlJyk7XG4gICAgc2V0VW50YXJnZXRJdGVtcyhlLmN1cnJlbnRUYXJnZXQsIHRoaXMuZ2V0VGFyZ2V0QXJyYXkoaWQpKTtcbiAgICB0aGlzLnNob3dUb29sdGlwKGUpO1xuICB9XG59O1xuXG52YXIgc2V0VW50YXJnZXRJdGVtcyA9IGZ1bmN0aW9uIHNldFVudGFyZ2V0SXRlbXMoY3VycmVudFRhcmdldCwgdGFyZ2V0QXJyYXkpIHtcbiAgZm9yICh2YXIgaSA9IDA7IGkgPCB0YXJnZXRBcnJheS5sZW5ndGg7IGkrKykge1xuICAgIGlmIChjdXJyZW50VGFyZ2V0ICE9PSB0YXJnZXRBcnJheVtpXSkge1xuICAgICAgdGFyZ2V0QXJyYXlbaV0uc2V0QXR0cmlidXRlKCdjdXJyZW50SXRlbScsICdmYWxzZScpO1xuICAgIH0gZWxzZSB7XG4gICAgICB0YXJnZXRBcnJheVtpXS5zZXRBdHRyaWJ1dGUoJ2N1cnJlbnRJdGVtJywgJ3RydWUnKTtcbiAgICB9XG4gIH1cbn07XG5cbnZhciBjdXN0b21MaXN0ZW5lciA9IHZvaWQgMDsiLCIndXNlIHN0cmljdCc7XG5cbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwge1xuICB2YWx1ZTogdHJ1ZVxufSk7XG5cbmV4cG9ydHMuZGVmYXVsdCA9IGZ1bmN0aW9uICh0YXJnZXQpIHtcbiAgdGFyZ2V0LnByb3RvdHlwZS5iaW5kV2luZG93RXZlbnRzID0gZnVuY3Rpb24gKHJlc2l6ZUhpZGUpIHtcbiAgICAvLyBSZWFjdFRvb2x0aXAuaGlkZVxuICAgIHdpbmRvdy5yZW1vdmVFdmVudExpc3RlbmVyKF9jb25zdGFudDIuZGVmYXVsdC5HTE9CQUwuSElERSwgdGhpcy5nbG9iYWxIaWRlKTtcbiAgICB3aW5kb3cuYWRkRXZlbnRMaXN0ZW5lcihfY29uc3RhbnQyLmRlZmF1bHQuR0xPQkFMLkhJREUsIHRoaXMuZ2xvYmFsSGlkZSwgZmFsc2UpO1xuXG4gICAgLy8gUmVhY3RUb29sdGlwLnJlYnVpbGRcbiAgICB3aW5kb3cucmVtb3ZlRXZlbnRMaXN0ZW5lcihfY29uc3RhbnQyLmRlZmF1bHQuR0xPQkFMLlJFQlVJTEQsIHRoaXMuZ2xvYmFsUmVidWlsZCk7XG4gICAgd2luZG93LmFkZEV2ZW50TGlzdGVuZXIoX2NvbnN0YW50Mi5kZWZhdWx0LkdMT0JBTC5SRUJVSUxELCB0aGlzLmdsb2JhbFJlYnVpbGQsIGZhbHNlKTtcblxuICAgIC8vIFJlYWN0VG9vbHRpcC5zaG93XG4gICAgd2luZG93LnJlbW92ZUV2ZW50TGlzdGVuZXIoX2NvbnN0YW50Mi5kZWZhdWx0LkdMT0JBTC5TSE9XLCB0aGlzLmdsb2JhbFNob3cpO1xuICAgIHdpbmRvdy5hZGRFdmVudExpc3RlbmVyKF9jb25zdGFudDIuZGVmYXVsdC5HTE9CQUwuU0hPVywgdGhpcy5nbG9iYWxTaG93LCBmYWxzZSk7XG5cbiAgICAvLyBSZXNpemVcbiAgICBpZiAocmVzaXplSGlkZSkge1xuICAgICAgd2luZG93LnJlbW92ZUV2ZW50TGlzdGVuZXIoJ3Jlc2l6ZScsIHRoaXMub25XaW5kb3dSZXNpemUpO1xuICAgICAgd2luZG93LmFkZEV2ZW50TGlzdGVuZXIoJ3Jlc2l6ZScsIHRoaXMub25XaW5kb3dSZXNpemUsIGZhbHNlKTtcbiAgICB9XG4gIH07XG5cbiAgdGFyZ2V0LnByb3RvdHlwZS51bmJpbmRXaW5kb3dFdmVudHMgPSBmdW5jdGlvbiAoKSB7XG4gICAgd2luZG93LnJlbW92ZUV2ZW50TGlzdGVuZXIoX2NvbnN0YW50Mi5kZWZhdWx0LkdMT0JBTC5ISURFLCB0aGlzLmdsb2JhbEhpZGUpO1xuICAgIHdpbmRvdy5yZW1vdmVFdmVudExpc3RlbmVyKF9jb25zdGFudDIuZGVmYXVsdC5HTE9CQUwuUkVCVUlMRCwgdGhpcy5nbG9iYWxSZWJ1aWxkKTtcbiAgICB3aW5kb3cucmVtb3ZlRXZlbnRMaXN0ZW5lcihfY29uc3RhbnQyLmRlZmF1bHQuR0xPQkFMLlNIT1csIHRoaXMuZ2xvYmFsU2hvdyk7XG4gICAgd2luZG93LnJlbW92ZUV2ZW50TGlzdGVuZXIoJ3Jlc2l6ZScsIHRoaXMub25XaW5kb3dSZXNpemUpO1xuICB9O1xuXG4gIC8qKlxuICAgKiBpbnZva2VkIGJ5IHJlc2l6ZSBldmVudCBvZiB3aW5kb3dcbiAgICovXG4gIHRhcmdldC5wcm90b3R5cGUub25XaW5kb3dSZXNpemUgPSBmdW5jdGlvbiAoKSB7XG4gICAgaWYgKCF0aGlzLm1vdW50KSByZXR1cm47XG4gICAgdGhpcy5oaWRlVG9vbHRpcCgpO1xuICB9O1xufTtcblxudmFyIF9jb25zdGFudCA9IHJlcXVpcmUoJy4uL2NvbnN0YW50Jyk7XG5cbnZhciBfY29uc3RhbnQyID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChfY29uc3RhbnQpO1xuXG5mdW5jdGlvbiBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KG9iaikgeyByZXR1cm4gb2JqICYmIG9iai5fX2VzTW9kdWxlID8gb2JqIDogeyBkZWZhdWx0OiBvYmogfTsgfSIsIid1c2Ugc3RyaWN0JztcblxuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7XG4gIHZhbHVlOiB0cnVlXG59KTtcblxuZXhwb3J0cy5kZWZhdWx0ID0gZnVuY3Rpb24gKHRhcmdldCkge1xuICAvKipcbiAgICogSGlkZSBhbGwgdG9vbHRpcFxuICAgKiBAdHJpZ2dlciBSZWFjdFRvb2x0aXAuaGlkZSgpXG4gICAqL1xuICB0YXJnZXQuaGlkZSA9IGZ1bmN0aW9uICh0YXJnZXQpIHtcbiAgICBkaXNwYXRjaEdsb2JhbEV2ZW50KF9jb25zdGFudDIuZGVmYXVsdC5HTE9CQUwuSElERSwgeyB0YXJnZXQ6IHRhcmdldCB9KTtcbiAgfTtcblxuICAvKipcbiAgICogUmVidWlsZCBhbGwgdG9vbHRpcFxuICAgKiBAdHJpZ2dlciBSZWFjdFRvb2x0aXAucmVidWlsZCgpXG4gICAqL1xuICB0YXJnZXQucmVidWlsZCA9IGZ1bmN0aW9uICgpIHtcbiAgICBkaXNwYXRjaEdsb2JhbEV2ZW50KF9jb25zdGFudDIuZGVmYXVsdC5HTE9CQUwuUkVCVUlMRCk7XG4gIH07XG5cbiAgLyoqXG4gICAqIFNob3cgc3BlY2lmaWMgdG9vbHRpcFxuICAgKiBAdHJpZ2dlciBSZWFjdFRvb2x0aXAuc2hvdygpXG4gICAqL1xuICB0YXJnZXQuc2hvdyA9IGZ1bmN0aW9uICh0YXJnZXQpIHtcbiAgICBkaXNwYXRjaEdsb2JhbEV2ZW50KF9jb25zdGFudDIuZGVmYXVsdC5HTE9CQUwuU0hPVywgeyB0YXJnZXQ6IHRhcmdldCB9KTtcbiAgfTtcblxuICB0YXJnZXQucHJvdG90eXBlLmdsb2JhbFJlYnVpbGQgPSBmdW5jdGlvbiAoKSB7XG4gICAgaWYgKHRoaXMubW91bnQpIHtcbiAgICAgIHRoaXMudW5iaW5kTGlzdGVuZXIoKTtcbiAgICAgIHRoaXMuYmluZExpc3RlbmVyKCk7XG4gICAgfVxuICB9O1xuXG4gIHRhcmdldC5wcm90b3R5cGUuZ2xvYmFsU2hvdyA9IGZ1bmN0aW9uIChldmVudCkge1xuICAgIGlmICh0aGlzLm1vdW50KSB7XG4gICAgICAvLyBDcmVhdGUgYSBmYWtlIGV2ZW50LCBzcGVjaWZpYyBzaG93IHdpbGwgbGltaXQgdGhlIHR5cGUgdG8gYHNvbGlkYFxuICAgICAgLy8gb25seSBgZmxvYXRgIHR5cGUgY2FyZXMgZS5jbGllbnRYIGUuY2xpZW50WVxuICAgICAgdmFyIGUgPSB7IGN1cnJlbnRUYXJnZXQ6IGV2ZW50LmRldGFpbC50YXJnZXQgfTtcbiAgICAgIHRoaXMuc2hvd1Rvb2x0aXAoZSwgdHJ1ZSk7XG4gICAgfVxuICB9O1xuXG4gIHRhcmdldC5wcm90b3R5cGUuZ2xvYmFsSGlkZSA9IGZ1bmN0aW9uIChldmVudCkge1xuICAgIGlmICh0aGlzLm1vdW50KSB7XG4gICAgICB2YXIgaGFzVGFyZ2V0ID0gZXZlbnQgJiYgZXZlbnQuZGV0YWlsICYmIGV2ZW50LmRldGFpbC50YXJnZXQgJiYgdHJ1ZSB8fCBmYWxzZTtcbiAgICAgIHRoaXMuaGlkZVRvb2x0aXAoeyBjdXJyZW50VGFyZ2V0OiBoYXNUYXJnZXQgJiYgZXZlbnQuZGV0YWlsLnRhcmdldCB9LCBoYXNUYXJnZXQpO1xuICAgIH1cbiAgfTtcbn07XG5cbnZhciBfY29uc3RhbnQgPSByZXF1aXJlKCcuLi9jb25zdGFudCcpO1xuXG52YXIgX2NvbnN0YW50MiA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQoX2NvbnN0YW50KTtcblxuZnVuY3Rpb24gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChvYmopIHsgcmV0dXJuIG9iaiAmJiBvYmouX19lc01vZHVsZSA/IG9iaiA6IHsgZGVmYXVsdDogb2JqIH07IH1cblxudmFyIGRpc3BhdGNoR2xvYmFsRXZlbnQgPSBmdW5jdGlvbiBkaXNwYXRjaEdsb2JhbEV2ZW50KGV2ZW50TmFtZSwgb3B0cykge1xuICAvLyBDb21wYXRpYmFsZSB3aXRoIElFXG4gIC8vIEBzZWUgaHR0cDovL3N0YWNrb3ZlcmZsb3cuY29tL3F1ZXN0aW9ucy8yNjU5NjEyMy9pbnRlcm5ldC1leHBsb3Jlci05LTEwLTExLWV2ZW50LWNvbnN0cnVjdG9yLWRvZXNudC13b3JrXG4gIHZhciBldmVudCA9IHZvaWQgMDtcblxuICBpZiAodHlwZW9mIHdpbmRvdy5DdXN0b21FdmVudCA9PT0gJ2Z1bmN0aW9uJykge1xuICAgIGV2ZW50ID0gbmV3IHdpbmRvdy5DdXN0b21FdmVudChldmVudE5hbWUsIHsgZGV0YWlsOiBvcHRzIH0pO1xuICB9IGVsc2Uge1xuICAgIGV2ZW50ID0gZG9jdW1lbnQuY3JlYXRlRXZlbnQoJ0V2ZW50Jyk7XG4gICAgZXZlbnQuaW5pdEV2ZW50KGV2ZW50TmFtZSwgZmFsc2UsIHRydWUpO1xuICAgIGV2ZW50LmRldGFpbCA9IG9wdHM7XG4gIH1cblxuICB3aW5kb3cuZGlzcGF0Y2hFdmVudChldmVudCk7XG59OyAvKipcbiAgICAqIFN0YXRpYyBtZXRob2RzIGZvciByZWFjdC10b29sdGlwXG4gICAgKi8iLCIvKiFcbiAgQ29weXJpZ2h0IChjKSAyMDE2IEplZCBXYXRzb24uXG4gIExpY2Vuc2VkIHVuZGVyIHRoZSBNSVQgTGljZW5zZSAoTUlUKSwgc2VlXG4gIGh0dHA6Ly9qZWR3YXRzb24uZ2l0aHViLmlvL2NsYXNzbmFtZXNcbiovXG4vKiBnbG9iYWwgZGVmaW5lICovXG5cbihmdW5jdGlvbiAoKSB7XG5cdCd1c2Ugc3RyaWN0JztcblxuXHR2YXIgaGFzT3duID0ge30uaGFzT3duUHJvcGVydHk7XG5cblx0ZnVuY3Rpb24gY2xhc3NOYW1lcyAoKSB7XG5cdFx0dmFyIGNsYXNzZXMgPSBbXTtcblxuXHRcdGZvciAodmFyIGkgPSAwOyBpIDwgYXJndW1lbnRzLmxlbmd0aDsgaSsrKSB7XG5cdFx0XHR2YXIgYXJnID0gYXJndW1lbnRzW2ldO1xuXHRcdFx0aWYgKCFhcmcpIGNvbnRpbnVlO1xuXG5cdFx0XHR2YXIgYXJnVHlwZSA9IHR5cGVvZiBhcmc7XG5cblx0XHRcdGlmIChhcmdUeXBlID09PSAnc3RyaW5nJyB8fCBhcmdUeXBlID09PSAnbnVtYmVyJykge1xuXHRcdFx0XHRjbGFzc2VzLnB1c2goYXJnKTtcblx0XHRcdH0gZWxzZSBpZiAoQXJyYXkuaXNBcnJheShhcmcpKSB7XG5cdFx0XHRcdGNsYXNzZXMucHVzaChjbGFzc05hbWVzLmFwcGx5KG51bGwsIGFyZykpO1xuXHRcdFx0fSBlbHNlIGlmIChhcmdUeXBlID09PSAnb2JqZWN0Jykge1xuXHRcdFx0XHRmb3IgKHZhciBrZXkgaW4gYXJnKSB7XG5cdFx0XHRcdFx0aWYgKGhhc093bi5jYWxsKGFyZywga2V5KSAmJiBhcmdba2V5XSkge1xuXHRcdFx0XHRcdFx0Y2xhc3Nlcy5wdXNoKGtleSk7XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHR9XG5cdFx0XHR9XG5cdFx0fVxuXG5cdFx0cmV0dXJuIGNsYXNzZXMuam9pbignICcpO1xuXHR9XG5cblx0aWYgKHR5cGVvZiBtb2R1bGUgIT09ICd1bmRlZmluZWQnICYmIG1vZHVsZS5leHBvcnRzKSB7XG5cdFx0bW9kdWxlLmV4cG9ydHMgPSBjbGFzc05hbWVzO1xuXHR9IGVsc2UgaWYgKHR5cGVvZiBkZWZpbmUgPT09ICdmdW5jdGlvbicgJiYgdHlwZW9mIGRlZmluZS5hbWQgPT09ICdvYmplY3QnICYmIGRlZmluZS5hbWQpIHtcblx0XHQvLyByZWdpc3RlciBhcyAnY2xhc3NuYW1lcycsIGNvbnNpc3RlbnQgd2l0aCBucG0gcGFja2FnZSBuYW1lXG5cdFx0ZGVmaW5lKCdjbGFzc25hbWVzJywgW10sIGZ1bmN0aW9uICgpIHtcblx0XHRcdHJldHVybiBjbGFzc05hbWVzO1xuXHRcdH0pO1xuXHR9IGVsc2Uge1xuXHRcdHdpbmRvdy5jbGFzc05hbWVzID0gY2xhc3NOYW1lcztcblx0fVxufSgpKTtcbiIsIid1c2Ugc3RyaWN0JztcblxudmFyIF9leHRlbmRzID0gT2JqZWN0LmFzc2lnbiB8fCBmdW5jdGlvbiAodGFyZ2V0KSB7IGZvciAodmFyIGkgPSAxOyBpIDwgYXJndW1lbnRzLmxlbmd0aDsgaSsrKSB7IHZhciBzb3VyY2UgPSBhcmd1bWVudHNbaV07IGZvciAodmFyIGtleSBpbiBzb3VyY2UpIHsgaWYgKE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbChzb3VyY2UsIGtleSkpIHsgdGFyZ2V0W2tleV0gPSBzb3VyY2Vba2V5XTsgfSB9IH0gcmV0dXJuIHRhcmdldDsgfTtcblxudmFyIF9jcmVhdGVDbGFzcyA9IGZ1bmN0aW9uICgpIHsgZnVuY3Rpb24gZGVmaW5lUHJvcGVydGllcyh0YXJnZXQsIHByb3BzKSB7IGZvciAodmFyIGkgPSAwOyBpIDwgcHJvcHMubGVuZ3RoOyBpKyspIHsgdmFyIGRlc2NyaXB0b3IgPSBwcm9wc1tpXTsgZGVzY3JpcHRvci5lbnVtZXJhYmxlID0gZGVzY3JpcHRvci5lbnVtZXJhYmxlIHx8IGZhbHNlOyBkZXNjcmlwdG9yLmNvbmZpZ3VyYWJsZSA9IHRydWU7IGlmIChcInZhbHVlXCIgaW4gZGVzY3JpcHRvcikgZGVzY3JpcHRvci53cml0YWJsZSA9IHRydWU7IE9iamVjdC5kZWZpbmVQcm9wZXJ0eSh0YXJnZXQsIGRlc2NyaXB0b3Iua2V5LCBkZXNjcmlwdG9yKTsgfSB9IHJldHVybiBmdW5jdGlvbiAoQ29uc3RydWN0b3IsIHByb3RvUHJvcHMsIHN0YXRpY1Byb3BzKSB7IGlmIChwcm90b1Byb3BzKSBkZWZpbmVQcm9wZXJ0aWVzKENvbnN0cnVjdG9yLnByb3RvdHlwZSwgcHJvdG9Qcm9wcyk7IGlmIChzdGF0aWNQcm9wcykgZGVmaW5lUHJvcGVydGllcyhDb25zdHJ1Y3Rvciwgc3RhdGljUHJvcHMpOyByZXR1cm4gQ29uc3RydWN0b3I7IH07IH0oKTtcblxudmFyIF9jbGFzcywgX2NsYXNzMiwgX3RlbXA7XG5cbi8qIERlY29yYXRlcnMgKi9cblxuXG4vKiBVdGlscyAqL1xuXG5cbi8qIENTUyAqL1xuXG5cbnZhciBfcmVhY3QgPSByZXF1aXJlKCdyZWFjdCcpO1xuXG52YXIgX3JlYWN0MiA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQoX3JlYWN0KTtcblxudmFyIF9wcm9wVHlwZXMgPSByZXF1aXJlKCdwcm9wLXR5cGVzJyk7XG5cbnZhciBfcHJvcFR5cGVzMiA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQoX3Byb3BUeXBlcyk7XG5cbnZhciBfcmVhY3REb20gPSByZXF1aXJlKCdyZWFjdC1kb20nKTtcblxudmFyIF9yZWFjdERvbTIgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KF9yZWFjdERvbSk7XG5cbnZhciBfY2xhc3NuYW1lcyA9IHJlcXVpcmUoJ2NsYXNzbmFtZXMnKTtcblxudmFyIF9jbGFzc25hbWVzMiA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQoX2NsYXNzbmFtZXMpO1xuXG52YXIgX3N0YXRpY01ldGhvZHMgPSByZXF1aXJlKCcuL2RlY29yYXRvcnMvc3RhdGljTWV0aG9kcycpO1xuXG52YXIgX3N0YXRpY01ldGhvZHMyID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChfc3RhdGljTWV0aG9kcyk7XG5cbnZhciBfd2luZG93TGlzdGVuZXIgPSByZXF1aXJlKCcuL2RlY29yYXRvcnMvd2luZG93TGlzdGVuZXInKTtcblxudmFyIF93aW5kb3dMaXN0ZW5lcjIgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KF93aW5kb3dMaXN0ZW5lcik7XG5cbnZhciBfY3VzdG9tRXZlbnQgPSByZXF1aXJlKCcuL2RlY29yYXRvcnMvY3VzdG9tRXZlbnQnKTtcblxudmFyIF9jdXN0b21FdmVudDIgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KF9jdXN0b21FdmVudCk7XG5cbnZhciBfaXNDYXB0dXJlID0gcmVxdWlyZSgnLi9kZWNvcmF0b3JzL2lzQ2FwdHVyZScpO1xuXG52YXIgX2lzQ2FwdHVyZTIgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KF9pc0NhcHR1cmUpO1xuXG52YXIgX2dldEVmZmVjdCA9IHJlcXVpcmUoJy4vZGVjb3JhdG9ycy9nZXRFZmZlY3QnKTtcblxudmFyIF9nZXRFZmZlY3QyID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChfZ2V0RWZmZWN0KTtcblxudmFyIF90cmFja1JlbW92YWwgPSByZXF1aXJlKCcuL2RlY29yYXRvcnMvdHJhY2tSZW1vdmFsJyk7XG5cbnZhciBfdHJhY2tSZW1vdmFsMiA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQoX3RyYWNrUmVtb3ZhbCk7XG5cbnZhciBfZ2V0UG9zaXRpb24gPSByZXF1aXJlKCcuL3V0aWxzL2dldFBvc2l0aW9uJyk7XG5cbnZhciBfZ2V0UG9zaXRpb24yID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChfZ2V0UG9zaXRpb24pO1xuXG52YXIgX2dldFRpcENvbnRlbnQgPSByZXF1aXJlKCcuL3V0aWxzL2dldFRpcENvbnRlbnQnKTtcblxudmFyIF9nZXRUaXBDb250ZW50MiA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQoX2dldFRpcENvbnRlbnQpO1xuXG52YXIgX2FyaWEgPSByZXF1aXJlKCcuL3V0aWxzL2FyaWEnKTtcblxudmFyIF9ub2RlTGlzdFRvQXJyYXkgPSByZXF1aXJlKCcuL3V0aWxzL25vZGVMaXN0VG9BcnJheScpO1xuXG52YXIgX25vZGVMaXN0VG9BcnJheTIgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KF9ub2RlTGlzdFRvQXJyYXkpO1xuXG52YXIgX3N0eWxlID0gcmVxdWlyZSgnLi9zdHlsZScpO1xuXG52YXIgX3N0eWxlMiA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQoX3N0eWxlKTtcblxuZnVuY3Rpb24gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChvYmopIHsgcmV0dXJuIG9iaiAmJiBvYmouX19lc01vZHVsZSA/IG9iaiA6IHsgZGVmYXVsdDogb2JqIH07IH1cblxuZnVuY3Rpb24gX2NsYXNzQ2FsbENoZWNrKGluc3RhbmNlLCBDb25zdHJ1Y3RvcikgeyBpZiAoIShpbnN0YW5jZSBpbnN0YW5jZW9mIENvbnN0cnVjdG9yKSkgeyB0aHJvdyBuZXcgVHlwZUVycm9yKFwiQ2Fubm90IGNhbGwgYSBjbGFzcyBhcyBhIGZ1bmN0aW9uXCIpOyB9IH1cblxuZnVuY3Rpb24gX3Bvc3NpYmxlQ29uc3RydWN0b3JSZXR1cm4oc2VsZiwgY2FsbCkgeyBpZiAoIXNlbGYpIHsgdGhyb3cgbmV3IFJlZmVyZW5jZUVycm9yKFwidGhpcyBoYXNuJ3QgYmVlbiBpbml0aWFsaXNlZCAtIHN1cGVyKCkgaGFzbid0IGJlZW4gY2FsbGVkXCIpOyB9IHJldHVybiBjYWxsICYmICh0eXBlb2YgY2FsbCA9PT0gXCJvYmplY3RcIiB8fCB0eXBlb2YgY2FsbCA9PT0gXCJmdW5jdGlvblwiKSA/IGNhbGwgOiBzZWxmOyB9XG5cbmZ1bmN0aW9uIF9pbmhlcml0cyhzdWJDbGFzcywgc3VwZXJDbGFzcykgeyBpZiAodHlwZW9mIHN1cGVyQ2xhc3MgIT09IFwiZnVuY3Rpb25cIiAmJiBzdXBlckNsYXNzICE9PSBudWxsKSB7IHRocm93IG5ldyBUeXBlRXJyb3IoXCJTdXBlciBleHByZXNzaW9uIG11c3QgZWl0aGVyIGJlIG51bGwgb3IgYSBmdW5jdGlvbiwgbm90IFwiICsgdHlwZW9mIHN1cGVyQ2xhc3MpOyB9IHN1YkNsYXNzLnByb3RvdHlwZSA9IE9iamVjdC5jcmVhdGUoc3VwZXJDbGFzcyAmJiBzdXBlckNsYXNzLnByb3RvdHlwZSwgeyBjb25zdHJ1Y3RvcjogeyB2YWx1ZTogc3ViQ2xhc3MsIGVudW1lcmFibGU6IGZhbHNlLCB3cml0YWJsZTogdHJ1ZSwgY29uZmlndXJhYmxlOiB0cnVlIH0gfSk7IGlmIChzdXBlckNsYXNzKSBPYmplY3Quc2V0UHJvdG90eXBlT2YgPyBPYmplY3Quc2V0UHJvdG90eXBlT2Yoc3ViQ2xhc3MsIHN1cGVyQ2xhc3MpIDogc3ViQ2xhc3MuX19wcm90b19fID0gc3VwZXJDbGFzczsgfVxuXG52YXIgUmVhY3RUb29sdGlwID0gKDAsIF9zdGF0aWNNZXRob2RzMi5kZWZhdWx0KShfY2xhc3MgPSAoMCwgX3dpbmRvd0xpc3RlbmVyMi5kZWZhdWx0KShfY2xhc3MgPSAoMCwgX2N1c3RvbUV2ZW50Mi5kZWZhdWx0KShfY2xhc3MgPSAoMCwgX2lzQ2FwdHVyZTIuZGVmYXVsdCkoX2NsYXNzID0gKDAsIF9nZXRFZmZlY3QyLmRlZmF1bHQpKF9jbGFzcyA9ICgwLCBfdHJhY2tSZW1vdmFsMi5kZWZhdWx0KShfY2xhc3MgPSAoX3RlbXAgPSBfY2xhc3MyID0gZnVuY3Rpb24gKF9SZWFjdCRDb21wb25lbnQpIHtcbiAgX2luaGVyaXRzKFJlYWN0VG9vbHRpcCwgX1JlYWN0JENvbXBvbmVudCk7XG5cbiAgZnVuY3Rpb24gUmVhY3RUb29sdGlwKHByb3BzKSB7XG4gICAgX2NsYXNzQ2FsbENoZWNrKHRoaXMsIFJlYWN0VG9vbHRpcCk7XG5cbiAgICB2YXIgX3RoaXMgPSBfcG9zc2libGVDb25zdHJ1Y3RvclJldHVybih0aGlzLCAoUmVhY3RUb29sdGlwLl9fcHJvdG9fXyB8fCBPYmplY3QuZ2V0UHJvdG90eXBlT2YoUmVhY3RUb29sdGlwKSkuY2FsbCh0aGlzLCBwcm9wcykpO1xuXG4gICAgX3RoaXMuc3RhdGUgPSB7XG4gICAgICBwbGFjZTogJ3RvcCcsIC8vIERpcmVjdGlvbiBvZiB0b29sdGlwXG4gICAgICB0eXBlOiAnZGFyaycsIC8vIENvbG9yIHRoZW1lIG9mIHRvb2x0aXBcbiAgICAgIGVmZmVjdDogJ2Zsb2F0JywgLy8gZmxvYXQgb3IgZml4ZWRcbiAgICAgIHNob3c6IGZhbHNlLFxuICAgICAgYm9yZGVyOiBmYWxzZSxcbiAgICAgIG9mZnNldDoge30sXG4gICAgICBleHRyYUNsYXNzOiAnJyxcbiAgICAgIGh0bWw6IGZhbHNlLFxuICAgICAgZGVsYXlIaWRlOiAwLFxuICAgICAgZGVsYXlTaG93OiAwLFxuICAgICAgZXZlbnQ6IHByb3BzLmV2ZW50IHx8IG51bGwsXG4gICAgICBldmVudE9mZjogcHJvcHMuZXZlbnRPZmYgfHwgbnVsbCxcbiAgICAgIGN1cnJlbnRFdmVudDogbnVsbCwgLy8gQ3VycmVudCBtb3VzZSBldmVudFxuICAgICAgY3VycmVudFRhcmdldDogbnVsbCwgLy8gQ3VycmVudCB0YXJnZXQgb2YgbW91c2UgZXZlbnRcbiAgICAgIGFyaWFQcm9wczogKDAsIF9hcmlhLnBhcnNlQXJpYSkocHJvcHMpLCAvLyBhcmlhLSBhbmQgcm9sZSBhdHRyaWJ1dGVzXG4gICAgICBpc0VtcHR5VGlwOiBmYWxzZSxcbiAgICAgIGRpc2FibGU6IGZhbHNlLFxuICAgICAgb3JpZ2luVG9vbHRpcDogbnVsbCxcbiAgICAgIGlzTXVsdGlsaW5lOiBmYWxzZVxuICAgIH07XG5cbiAgICBfdGhpcy5iaW5kKFsnc2hvd1Rvb2x0aXAnLCAndXBkYXRlVG9vbHRpcCcsICdoaWRlVG9vbHRpcCcsICdnZXRUb29sdGlwQ29udGVudCcsICdnbG9iYWxSZWJ1aWxkJywgJ2dsb2JhbFNob3cnLCAnZ2xvYmFsSGlkZScsICdvbldpbmRvd1Jlc2l6ZSddKTtcblxuICAgIF90aGlzLm1vdW50ID0gdHJ1ZTtcbiAgICBfdGhpcy5kZWxheVNob3dMb29wID0gbnVsbDtcbiAgICBfdGhpcy5kZWxheUhpZGVMb29wID0gbnVsbDtcbiAgICBfdGhpcy5pbnRlcnZhbFVwZGF0ZUNvbnRlbnQgPSBudWxsO1xuICAgIHJldHVybiBfdGhpcztcbiAgfVxuXG4gIC8qKlxuICAgKiBGb3IgdW5pZnkgdGhlIGJpbmQgYW5kIHVuYmluZCBsaXN0ZW5lclxuICAgKi9cblxuXG4gIF9jcmVhdGVDbGFzcyhSZWFjdFRvb2x0aXAsIFt7XG4gICAga2V5OiAnYmluZCcsXG4gICAgdmFsdWU6IGZ1bmN0aW9uIGJpbmQobWV0aG9kQXJyYXkpIHtcbiAgICAgIHZhciBfdGhpczIgPSB0aGlzO1xuXG4gICAgICBtZXRob2RBcnJheS5mb3JFYWNoKGZ1bmN0aW9uIChtZXRob2QpIHtcbiAgICAgICAgX3RoaXMyW21ldGhvZF0gPSBfdGhpczJbbWV0aG9kXS5iaW5kKF90aGlzMik7XG4gICAgICB9KTtcbiAgICB9XG4gIH0sIHtcbiAgICBrZXk6ICdjb21wb25lbnREaWRNb3VudCcsXG4gICAgdmFsdWU6IGZ1bmN0aW9uIGNvbXBvbmVudERpZE1vdW50KCkge1xuICAgICAgdmFyIF9wcm9wcyA9IHRoaXMucHJvcHMsXG4gICAgICAgICAgaW5zZWN1cmUgPSBfcHJvcHMuaW5zZWN1cmUsXG4gICAgICAgICAgcmVzaXplSGlkZSA9IF9wcm9wcy5yZXNpemVIaWRlO1xuXG4gICAgICBpZiAoaW5zZWN1cmUpIHtcbiAgICAgICAgdGhpcy5zZXRTdHlsZUhlYWRlcigpOyAvLyBTZXQgdGhlIHN0eWxlIHRvIHRoZSA8bGluaz5cbiAgICAgIH1cbiAgICAgIHRoaXMuYmluZExpc3RlbmVyKCk7IC8vIEJpbmQgbGlzdGVuZXIgZm9yIHRvb2x0aXBcbiAgICAgIHRoaXMuYmluZFdpbmRvd0V2ZW50cyhyZXNpemVIaWRlKTsgLy8gQmluZCBnbG9iYWwgZXZlbnQgZm9yIHN0YXRpYyBtZXRob2RcbiAgICB9XG4gIH0sIHtcbiAgICBrZXk6ICdjb21wb25lbnRXaWxsUmVjZWl2ZVByb3BzJyxcbiAgICB2YWx1ZTogZnVuY3Rpb24gY29tcG9uZW50V2lsbFJlY2VpdmVQcm9wcyhwcm9wcykge1xuICAgICAgdmFyIGFyaWFQcm9wcyA9IHRoaXMuc3RhdGUuYXJpYVByb3BzO1xuXG4gICAgICB2YXIgbmV3QXJpYVByb3BzID0gKDAsIF9hcmlhLnBhcnNlQXJpYSkocHJvcHMpO1xuXG4gICAgICB2YXIgaXNDaGFuZ2VkID0gT2JqZWN0LmtleXMobmV3QXJpYVByb3BzKS5zb21lKGZ1bmN0aW9uIChwcm9wcykge1xuICAgICAgICByZXR1cm4gbmV3QXJpYVByb3BzW3Byb3BzXSAhPT0gYXJpYVByb3BzW3Byb3BzXTtcbiAgICAgIH0pO1xuICAgICAgaWYgKGlzQ2hhbmdlZCkge1xuICAgICAgICB0aGlzLnNldFN0YXRlKHsgYXJpYVByb3BzOiBuZXdBcmlhUHJvcHMgfSk7XG4gICAgICB9XG4gICAgfVxuICB9LCB7XG4gICAga2V5OiAnY29tcG9uZW50V2lsbFVubW91bnQnLFxuICAgIHZhbHVlOiBmdW5jdGlvbiBjb21wb25lbnRXaWxsVW5tb3VudCgpIHtcbiAgICAgIHRoaXMubW91bnQgPSBmYWxzZTtcblxuICAgICAgdGhpcy5jbGVhclRpbWVyKCk7XG5cbiAgICAgIHRoaXMudW5iaW5kTGlzdGVuZXIoKTtcbiAgICAgIHRoaXMucmVtb3ZlU2Nyb2xsTGlzdGVuZXIoKTtcbiAgICAgIHRoaXMudW5iaW5kV2luZG93RXZlbnRzKCk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogUGljayBvdXQgY29ycmVzcG9uZGVkIHRhcmdldCBlbGVtZW50c1xuICAgICAqL1xuXG4gIH0sIHtcbiAgICBrZXk6ICdnZXRUYXJnZXRBcnJheScsXG4gICAgdmFsdWU6IGZ1bmN0aW9uIGdldFRhcmdldEFycmF5KGlkKSB7XG4gICAgICB2YXIgdGFyZ2V0QXJyYXkgPSB2b2lkIDA7XG4gICAgICBpZiAoIWlkKSB7XG4gICAgICAgIHRhcmdldEFycmF5ID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvckFsbCgnW2RhdGEtdGlwXTpub3QoW2RhdGEtZm9yXSknKTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHZhciBlc2NhcGVkID0gaWQucmVwbGFjZSgvXFxcXC9nLCAnXFxcXFxcXFwnKS5yZXBsYWNlKC9cIi9nLCAnXFxcXFwiJyk7XG4gICAgICAgIHRhcmdldEFycmF5ID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvckFsbCgnW2RhdGEtdGlwXVtkYXRhLWZvcj1cIicgKyBlc2NhcGVkICsgJ1wiXScpO1xuICAgICAgfVxuICAgICAgLy8gdGFyZ2V0QXJyYXkgaXMgYSBOb2RlTGlzdCwgY29udmVydCBpdCB0byBhIHJlYWwgYXJyYXlcbiAgICAgIHJldHVybiAoMCwgX25vZGVMaXN0VG9BcnJheTIuZGVmYXVsdCkodGFyZ2V0QXJyYXkpO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIEJpbmQgbGlzdGVuZXIgdG8gdGhlIHRhcmdldCBlbGVtZW50c1xuICAgICAqIFRoZXNlIGxpc3RlbmVycyB1c2VkIHRvIHRyaWdnZXIgc2hvd2luZyBvciBoaWRpbmcgdGhlIHRvb2x0aXBcbiAgICAgKi9cblxuICB9LCB7XG4gICAga2V5OiAnYmluZExpc3RlbmVyJyxcbiAgICB2YWx1ZTogZnVuY3Rpb24gYmluZExpc3RlbmVyKCkge1xuICAgICAgdmFyIF90aGlzMyA9IHRoaXM7XG5cbiAgICAgIHZhciBfcHJvcHMyID0gdGhpcy5wcm9wcyxcbiAgICAgICAgICBpZCA9IF9wcm9wczIuaWQsXG4gICAgICAgICAgZ2xvYmFsRXZlbnRPZmYgPSBfcHJvcHMyLmdsb2JhbEV2ZW50T2ZmO1xuXG4gICAgICB2YXIgdGFyZ2V0QXJyYXkgPSB0aGlzLmdldFRhcmdldEFycmF5KGlkKTtcblxuICAgICAgdGFyZ2V0QXJyYXkuZm9yRWFjaChmdW5jdGlvbiAodGFyZ2V0KSB7XG4gICAgICAgIHZhciBpc0NhcHR1cmVNb2RlID0gX3RoaXMzLmlzQ2FwdHVyZSh0YXJnZXQpO1xuICAgICAgICB2YXIgZWZmZWN0ID0gX3RoaXMzLmdldEVmZmVjdCh0YXJnZXQpO1xuICAgICAgICBpZiAodGFyZ2V0LmdldEF0dHJpYnV0ZSgnY3VycmVudEl0ZW0nKSA9PT0gbnVsbCkge1xuICAgICAgICAgIHRhcmdldC5zZXRBdHRyaWJ1dGUoJ2N1cnJlbnRJdGVtJywgJ2ZhbHNlJyk7XG4gICAgICAgIH1cbiAgICAgICAgX3RoaXMzLnVuYmluZEJhc2ljTGlzdGVuZXIodGFyZ2V0KTtcblxuICAgICAgICBpZiAoX3RoaXMzLmlzQ3VzdG9tRXZlbnQodGFyZ2V0KSkge1xuICAgICAgICAgIF90aGlzMy5jdXN0b21CaW5kTGlzdGVuZXIodGFyZ2V0KTtcbiAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cblxuICAgICAgICB0YXJnZXQuYWRkRXZlbnRMaXN0ZW5lcignbW91c2VlbnRlcicsIF90aGlzMy5zaG93VG9vbHRpcCwgaXNDYXB0dXJlTW9kZSk7XG4gICAgICAgIGlmIChlZmZlY3QgPT09ICdmbG9hdCcpIHtcbiAgICAgICAgICB0YXJnZXQuYWRkRXZlbnRMaXN0ZW5lcignbW91c2Vtb3ZlJywgX3RoaXMzLnVwZGF0ZVRvb2x0aXAsIGlzQ2FwdHVyZU1vZGUpO1xuICAgICAgICB9XG4gICAgICAgIHRhcmdldC5hZGRFdmVudExpc3RlbmVyKCdtb3VzZWxlYXZlJywgX3RoaXMzLmhpZGVUb29sdGlwLCBpc0NhcHR1cmVNb2RlKTtcbiAgICAgIH0pO1xuXG4gICAgICAvLyBHbG9iYWwgZXZlbnQgdG8gaGlkZSB0b29sdGlwXG4gICAgICBpZiAoZ2xvYmFsRXZlbnRPZmYpIHtcbiAgICAgICAgd2luZG93LnJlbW92ZUV2ZW50TGlzdGVuZXIoZ2xvYmFsRXZlbnRPZmYsIHRoaXMuaGlkZVRvb2x0aXApO1xuICAgICAgICB3aW5kb3cuYWRkRXZlbnRMaXN0ZW5lcihnbG9iYWxFdmVudE9mZiwgdGhpcy5oaWRlVG9vbHRpcCwgZmFsc2UpO1xuICAgICAgfVxuXG4gICAgICAvLyBUcmFjayByZW1vdmFsIG9mIHRhcmdldEFycmF5IGVsZW1lbnRzIGZyb20gRE9NXG4gICAgICB0aGlzLmJpbmRSZW1vdmFsVHJhY2tlcigpO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIFVuYmluZCBsaXN0ZW5lcnMgb24gdGFyZ2V0IGVsZW1lbnRzXG4gICAgICovXG5cbiAgfSwge1xuICAgIGtleTogJ3VuYmluZExpc3RlbmVyJyxcbiAgICB2YWx1ZTogZnVuY3Rpb24gdW5iaW5kTGlzdGVuZXIoKSB7XG4gICAgICB2YXIgX3RoaXM0ID0gdGhpcztcblxuICAgICAgdmFyIF9wcm9wczMgPSB0aGlzLnByb3BzLFxuICAgICAgICAgIGlkID0gX3Byb3BzMy5pZCxcbiAgICAgICAgICBnbG9iYWxFdmVudE9mZiA9IF9wcm9wczMuZ2xvYmFsRXZlbnRPZmY7XG5cbiAgICAgIHZhciB0YXJnZXRBcnJheSA9IHRoaXMuZ2V0VGFyZ2V0QXJyYXkoaWQpO1xuICAgICAgdGFyZ2V0QXJyYXkuZm9yRWFjaChmdW5jdGlvbiAodGFyZ2V0KSB7XG4gICAgICAgIF90aGlzNC51bmJpbmRCYXNpY0xpc3RlbmVyKHRhcmdldCk7XG4gICAgICAgIGlmIChfdGhpczQuaXNDdXN0b21FdmVudCh0YXJnZXQpKSBfdGhpczQuY3VzdG9tVW5iaW5kTGlzdGVuZXIodGFyZ2V0KTtcbiAgICAgIH0pO1xuXG4gICAgICBpZiAoZ2xvYmFsRXZlbnRPZmYpIHdpbmRvdy5yZW1vdmVFdmVudExpc3RlbmVyKGdsb2JhbEV2ZW50T2ZmLCB0aGlzLmhpZGVUb29sdGlwKTtcbiAgICAgIHRoaXMudW5iaW5kUmVtb3ZhbFRyYWNrZXIoKTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBJbnZva2UgdGhpcyBiZWZvcmUgYmluZCBsaXN0ZW5lciBhbmQgdW1tb3VudCB0aGUgY29tcG9udFxuICAgICAqIGl0IGlzIG5lY2Vzc2FyeSB0byBpbnZsb2tlIHRoaXMgZXZlbiB3aGVuIGJpbmRpbmcgY3VzdG9tIGV2ZW50XG4gICAgICogc28gdGhhdCB0aGUgdG9vbHRpcCBjYW4gc3dpdGNoIGJldHdlZW4gY3VzdG9tIGFuZCBkZWZhdWx0IGxpc3RlbmVyXG4gICAgICovXG5cbiAgfSwge1xuICAgIGtleTogJ3VuYmluZEJhc2ljTGlzdGVuZXInLFxuICAgIHZhbHVlOiBmdW5jdGlvbiB1bmJpbmRCYXNpY0xpc3RlbmVyKHRhcmdldCkge1xuICAgICAgdmFyIGlzQ2FwdHVyZU1vZGUgPSB0aGlzLmlzQ2FwdHVyZSh0YXJnZXQpO1xuICAgICAgdGFyZ2V0LnJlbW92ZUV2ZW50TGlzdGVuZXIoJ21vdXNlZW50ZXInLCB0aGlzLnNob3dUb29sdGlwLCBpc0NhcHR1cmVNb2RlKTtcbiAgICAgIHRhcmdldC5yZW1vdmVFdmVudExpc3RlbmVyKCdtb3VzZW1vdmUnLCB0aGlzLnVwZGF0ZVRvb2x0aXAsIGlzQ2FwdHVyZU1vZGUpO1xuICAgICAgdGFyZ2V0LnJlbW92ZUV2ZW50TGlzdGVuZXIoJ21vdXNlbGVhdmUnLCB0aGlzLmhpZGVUb29sdGlwLCBpc0NhcHR1cmVNb2RlKTtcbiAgICB9XG4gIH0sIHtcbiAgICBrZXk6ICdnZXRUb29sdGlwQ29udGVudCcsXG4gICAgdmFsdWU6IGZ1bmN0aW9uIGdldFRvb2x0aXBDb250ZW50KCkge1xuICAgICAgdmFyIF9wcm9wczQgPSB0aGlzLnByb3BzLFxuICAgICAgICAgIGdldENvbnRlbnQgPSBfcHJvcHM0LmdldENvbnRlbnQsXG4gICAgICAgICAgY2hpbGRyZW4gPSBfcHJvcHM0LmNoaWxkcmVuO1xuXG4gICAgICAvLyBHZW5lcmF0ZSB0b29sdGlwIGNvbnRlbnRcblxuICAgICAgdmFyIGNvbnRlbnQgPSB2b2lkIDA7XG4gICAgICBpZiAoZ2V0Q29udGVudCkge1xuICAgICAgICBpZiAoQXJyYXkuaXNBcnJheShnZXRDb250ZW50KSkge1xuICAgICAgICAgIGNvbnRlbnQgPSBnZXRDb250ZW50WzBdICYmIGdldENvbnRlbnRbMF0odGhpcy5zdGF0ZS5vcmlnaW5Ub29sdGlwKTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICBjb250ZW50ID0gZ2V0Q29udGVudCh0aGlzLnN0YXRlLm9yaWdpblRvb2x0aXApO1xuICAgICAgICB9XG4gICAgICB9XG5cbiAgICAgIHJldHVybiAoMCwgX2dldFRpcENvbnRlbnQyLmRlZmF1bHQpKHRoaXMuc3RhdGUub3JpZ2luVG9vbHRpcCwgY2hpbGRyZW4sIGNvbnRlbnQsIHRoaXMuc3RhdGUuaXNNdWx0aWxpbmUpO1xuICAgIH1cbiAgfSwge1xuICAgIGtleTogJ2lzRW1wdHlUaXAnLFxuICAgIHZhbHVlOiBmdW5jdGlvbiBpc0VtcHR5VGlwKHBsYWNlaG9sZGVyKSB7XG4gICAgICByZXR1cm4gdHlwZW9mIHBsYWNlaG9sZGVyID09PSAnc3RyaW5nJyAmJiBwbGFjZWhvbGRlciA9PT0gJycgfHwgcGxhY2Vob2xkZXIgPT09IG51bGw7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogV2hlbiBtb3VzZSBlbnRlciwgc2hvdyB0aGUgdG9vbHRpcFxuICAgICAqL1xuXG4gIH0sIHtcbiAgICBrZXk6ICdzaG93VG9vbHRpcCcsXG4gICAgdmFsdWU6IGZ1bmN0aW9uIHNob3dUb29sdGlwKGUsIGlzR2xvYmFsQ2FsbCkge1xuICAgICAgdmFyIF90aGlzNSA9IHRoaXM7XG5cbiAgICAgIGlmIChpc0dsb2JhbENhbGwpIHtcbiAgICAgICAgLy8gRG9uJ3QgdHJpZ2dlciBvdGhlciBlbGVtZW50cyBiZWxvbmdzIHRvIG90aGVyIFJlYWN0VG9vbHRpcFxuICAgICAgICB2YXIgdGFyZ2V0QXJyYXkgPSB0aGlzLmdldFRhcmdldEFycmF5KHRoaXMucHJvcHMuaWQpO1xuICAgICAgICB2YXIgaXNNeUVsZW1lbnQgPSB0YXJnZXRBcnJheS5zb21lKGZ1bmN0aW9uIChlbGUpIHtcbiAgICAgICAgICByZXR1cm4gZWxlID09PSBlLmN1cnJlbnRUYXJnZXQ7XG4gICAgICAgIH0pO1xuICAgICAgICBpZiAoIWlzTXlFbGVtZW50KSByZXR1cm47XG4gICAgICB9XG4gICAgICAvLyBHZXQgdGhlIHRvb2x0aXAgY29udGVudFxuICAgICAgLy8gY2FsY3VsYXRlIGluIHRoaXMgcGhyYXNlIHNvIHRoYXQgdGlwIHdpZHRoIGhlaWdodCBjYW4gYmUgZGV0ZWN0ZWRcbiAgICAgIHZhciBfcHJvcHM1ID0gdGhpcy5wcm9wcyxcbiAgICAgICAgICBtdWx0aWxpbmUgPSBfcHJvcHM1Lm11bHRpbGluZSxcbiAgICAgICAgICBnZXRDb250ZW50ID0gX3Byb3BzNS5nZXRDb250ZW50O1xuXG4gICAgICB2YXIgb3JpZ2luVG9vbHRpcCA9IGUuY3VycmVudFRhcmdldC5nZXRBdHRyaWJ1dGUoJ2RhdGEtdGlwJyk7XG4gICAgICB2YXIgaXNNdWx0aWxpbmUgPSBlLmN1cnJlbnRUYXJnZXQuZ2V0QXR0cmlidXRlKCdkYXRhLW11bHRpbGluZScpIHx8IG11bHRpbGluZSB8fCBmYWxzZTtcblxuICAgICAgLy8gSWYgaXQgaXMgZm9jdXMgZXZlbnQgb3IgY2FsbGVkIGJ5IFJlYWN0VG9vbHRpcC5zaG93LCBzd2l0Y2ggdG8gYHNvbGlkYCBlZmZlY3RcbiAgICAgIHZhciBzd2l0Y2hUb1NvbGlkID0gZSBpbnN0YW5jZW9mIHdpbmRvdy5Gb2N1c0V2ZW50IHx8IGlzR2xvYmFsQ2FsbDtcblxuICAgICAgLy8gaWYgaXQgbmVlZHMgdG8gc2tpcCBhZGRpbmcgaGlkZSBsaXN0ZW5lciB0byBzY3JvbGxcbiAgICAgIHZhciBzY3JvbGxIaWRlID0gdHJ1ZTtcbiAgICAgIGlmIChlLmN1cnJlbnRUYXJnZXQuZ2V0QXR0cmlidXRlKCdkYXRhLXNjcm9sbC1oaWRlJykpIHtcbiAgICAgICAgc2Nyb2xsSGlkZSA9IGUuY3VycmVudFRhcmdldC5nZXRBdHRyaWJ1dGUoJ2RhdGEtc2Nyb2xsLWhpZGUnKSA9PT0gJ3RydWUnO1xuICAgICAgfSBlbHNlIGlmICh0aGlzLnByb3BzLnNjcm9sbEhpZGUgIT0gbnVsbCkge1xuICAgICAgICBzY3JvbGxIaWRlID0gdGhpcy5wcm9wcy5zY3JvbGxIaWRlO1xuICAgICAgfVxuXG4gICAgICAvLyBUbyBwcmV2ZW50IHByZXZpb3VzbHkgY3JlYXRlZCB0aW1lcnMgZnJvbSB0cmlnZ2VyaW5nXG4gICAgICB0aGlzLmNsZWFyVGltZXIoKTtcblxuICAgICAgdGhpcy5zZXRTdGF0ZSh7XG4gICAgICAgIG9yaWdpblRvb2x0aXA6IG9yaWdpblRvb2x0aXAsXG4gICAgICAgIGlzTXVsdGlsaW5lOiBpc011bHRpbGluZSxcbiAgICAgICAgZGVzaXJlZFBsYWNlOiBlLmN1cnJlbnRUYXJnZXQuZ2V0QXR0cmlidXRlKCdkYXRhLXBsYWNlJykgfHwgdGhpcy5wcm9wcy5wbGFjZSB8fCAndG9wJyxcbiAgICAgICAgcGxhY2U6IGUuY3VycmVudFRhcmdldC5nZXRBdHRyaWJ1dGUoJ2RhdGEtcGxhY2UnKSB8fCB0aGlzLnByb3BzLnBsYWNlIHx8ICd0b3AnLFxuICAgICAgICB0eXBlOiBlLmN1cnJlbnRUYXJnZXQuZ2V0QXR0cmlidXRlKCdkYXRhLXR5cGUnKSB8fCB0aGlzLnByb3BzLnR5cGUgfHwgJ2RhcmsnLFxuICAgICAgICBlZmZlY3Q6IHN3aXRjaFRvU29saWQgJiYgJ3NvbGlkJyB8fCB0aGlzLmdldEVmZmVjdChlLmN1cnJlbnRUYXJnZXQpLFxuICAgICAgICBvZmZzZXQ6IGUuY3VycmVudFRhcmdldC5nZXRBdHRyaWJ1dGUoJ2RhdGEtb2Zmc2V0JykgfHwgdGhpcy5wcm9wcy5vZmZzZXQgfHwge30sXG4gICAgICAgIGh0bWw6IGUuY3VycmVudFRhcmdldC5nZXRBdHRyaWJ1dGUoJ2RhdGEtaHRtbCcpID8gZS5jdXJyZW50VGFyZ2V0LmdldEF0dHJpYnV0ZSgnZGF0YS1odG1sJykgPT09ICd0cnVlJyA6IHRoaXMucHJvcHMuaHRtbCB8fCBmYWxzZSxcbiAgICAgICAgZGVsYXlTaG93OiBlLmN1cnJlbnRUYXJnZXQuZ2V0QXR0cmlidXRlKCdkYXRhLWRlbGF5LXNob3cnKSB8fCB0aGlzLnByb3BzLmRlbGF5U2hvdyB8fCAwLFxuICAgICAgICBkZWxheUhpZGU6IGUuY3VycmVudFRhcmdldC5nZXRBdHRyaWJ1dGUoJ2RhdGEtZGVsYXktaGlkZScpIHx8IHRoaXMucHJvcHMuZGVsYXlIaWRlIHx8IDAsXG4gICAgICAgIGJvcmRlcjogZS5jdXJyZW50VGFyZ2V0LmdldEF0dHJpYnV0ZSgnZGF0YS1ib3JkZXInKSA/IGUuY3VycmVudFRhcmdldC5nZXRBdHRyaWJ1dGUoJ2RhdGEtYm9yZGVyJykgPT09ICd0cnVlJyA6IHRoaXMucHJvcHMuYm9yZGVyIHx8IGZhbHNlLFxuICAgICAgICBleHRyYUNsYXNzOiBlLmN1cnJlbnRUYXJnZXQuZ2V0QXR0cmlidXRlKCdkYXRhLWNsYXNzJykgfHwgdGhpcy5wcm9wcy5jbGFzcyB8fCB0aGlzLnByb3BzLmNsYXNzTmFtZSB8fCAnJyxcbiAgICAgICAgZGlzYWJsZTogZS5jdXJyZW50VGFyZ2V0LmdldEF0dHJpYnV0ZSgnZGF0YS10aXAtZGlzYWJsZScpID8gZS5jdXJyZW50VGFyZ2V0LmdldEF0dHJpYnV0ZSgnZGF0YS10aXAtZGlzYWJsZScpID09PSAndHJ1ZScgOiB0aGlzLnByb3BzLmRpc2FibGUgfHwgZmFsc2VcbiAgICAgIH0sIGZ1bmN0aW9uICgpIHtcbiAgICAgICAgaWYgKHNjcm9sbEhpZGUpIF90aGlzNS5hZGRTY3JvbGxMaXN0ZW5lcihlKTtcbiAgICAgICAgX3RoaXM1LnVwZGF0ZVRvb2x0aXAoZSk7XG5cbiAgICAgICAgaWYgKGdldENvbnRlbnQgJiYgQXJyYXkuaXNBcnJheShnZXRDb250ZW50KSkge1xuICAgICAgICAgIF90aGlzNS5pbnRlcnZhbFVwZGF0ZUNvbnRlbnQgPSBzZXRJbnRlcnZhbChmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICBpZiAoX3RoaXM1Lm1vdW50KSB7XG4gICAgICAgICAgICAgIHZhciBfZ2V0Q29udGVudCA9IF90aGlzNS5wcm9wcy5nZXRDb250ZW50O1xuXG4gICAgICAgICAgICAgIHZhciBwbGFjZWhvbGRlciA9ICgwLCBfZ2V0VGlwQ29udGVudDIuZGVmYXVsdCkob3JpZ2luVG9vbHRpcCwgJycsIF9nZXRDb250ZW50WzBdKCksIGlzTXVsdGlsaW5lKTtcbiAgICAgICAgICAgICAgdmFyIGlzRW1wdHlUaXAgPSBfdGhpczUuaXNFbXB0eVRpcChwbGFjZWhvbGRlcik7XG4gICAgICAgICAgICAgIF90aGlzNS5zZXRTdGF0ZSh7XG4gICAgICAgICAgICAgICAgaXNFbXB0eVRpcDogaXNFbXB0eVRpcFxuICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgICAgX3RoaXM1LnVwZGF0ZVBvc2l0aW9uKCk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgfSwgZ2V0Q29udGVudFsxXSk7XG4gICAgICAgIH1cbiAgICAgIH0pO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIFdoZW4gbW91c2UgaG92ZXIsIHVwZGF0ZXRvb2x0aXBcbiAgICAgKi9cblxuICB9LCB7XG4gICAga2V5OiAndXBkYXRlVG9vbHRpcCcsXG4gICAgdmFsdWU6IGZ1bmN0aW9uIHVwZGF0ZVRvb2x0aXAoZSkge1xuICAgICAgdmFyIF90aGlzNiA9IHRoaXM7XG5cbiAgICAgIHZhciBfc3RhdGUgPSB0aGlzLnN0YXRlLFxuICAgICAgICAgIGRlbGF5U2hvdyA9IF9zdGF0ZS5kZWxheVNob3csXG4gICAgICAgICAgc2hvdyA9IF9zdGF0ZS5zaG93LFxuICAgICAgICAgIGRpc2FibGUgPSBfc3RhdGUuZGlzYWJsZTtcbiAgICAgIHZhciBhZnRlclNob3cgPSB0aGlzLnByb3BzLmFmdGVyU2hvdztcblxuICAgICAgdmFyIHBsYWNlaG9sZGVyID0gdGhpcy5nZXRUb29sdGlwQ29udGVudCgpO1xuICAgICAgdmFyIGRlbGF5VGltZSA9IHNob3cgPyAwIDogcGFyc2VJbnQoZGVsYXlTaG93LCAxMCk7XG4gICAgICB2YXIgZXZlbnRUYXJnZXQgPSBlLmN1cnJlbnRUYXJnZXQ7XG5cbiAgICAgIGlmICh0aGlzLmlzRW1wdHlUaXAocGxhY2Vob2xkZXIpIHx8IGRpc2FibGUpIHJldHVybjsgLy8gaWYgdGhlIHRvb2x0aXAgaXMgZW1wdHksIGRpc2FibGUgdGhlIHRvb2x0aXBcbiAgICAgIHZhciB1cGRhdGVTdGF0ZSA9IGZ1bmN0aW9uIHVwZGF0ZVN0YXRlKCkge1xuICAgICAgICBpZiAoQXJyYXkuaXNBcnJheShwbGFjZWhvbGRlcikgJiYgcGxhY2Vob2xkZXIubGVuZ3RoID4gMCB8fCBwbGFjZWhvbGRlcikge1xuICAgICAgICAgIHZhciBpc0ludmlzaWJsZSA9ICFfdGhpczYuc3RhdGUuc2hvdztcbiAgICAgICAgICBfdGhpczYuc2V0U3RhdGUoe1xuICAgICAgICAgICAgY3VycmVudEV2ZW50OiBlLFxuICAgICAgICAgICAgY3VycmVudFRhcmdldDogZXZlbnRUYXJnZXQsXG4gICAgICAgICAgICBzaG93OiB0cnVlXG4gICAgICAgICAgfSwgZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgX3RoaXM2LnVwZGF0ZVBvc2l0aW9uKCk7XG4gICAgICAgICAgICBpZiAoaXNJbnZpc2libGUgJiYgYWZ0ZXJTaG93KSBhZnRlclNob3coKTtcbiAgICAgICAgICB9KTtcbiAgICAgICAgfVxuICAgICAgfTtcblxuICAgICAgY2xlYXJUaW1lb3V0KHRoaXMuZGVsYXlTaG93TG9vcCk7XG4gICAgICBpZiAoZGVsYXlTaG93KSB7XG4gICAgICAgIHRoaXMuZGVsYXlTaG93TG9vcCA9IHNldFRpbWVvdXQodXBkYXRlU3RhdGUsIGRlbGF5VGltZSk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICB1cGRhdGVTdGF0ZSgpO1xuICAgICAgfVxuICAgIH1cblxuICAgIC8qKlxuICAgICAqIFdoZW4gbW91c2UgbGVhdmUsIGhpZGUgdG9vbHRpcFxuICAgICAqL1xuXG4gIH0sIHtcbiAgICBrZXk6ICdoaWRlVG9vbHRpcCcsXG4gICAgdmFsdWU6IGZ1bmN0aW9uIGhpZGVUb29sdGlwKGUsIGhhc1RhcmdldCkge1xuICAgICAgdmFyIF90aGlzNyA9IHRoaXM7XG5cbiAgICAgIHZhciBfc3RhdGUyID0gdGhpcy5zdGF0ZSxcbiAgICAgICAgICBkZWxheUhpZGUgPSBfc3RhdGUyLmRlbGF5SGlkZSxcbiAgICAgICAgICBkaXNhYmxlID0gX3N0YXRlMi5kaXNhYmxlO1xuICAgICAgdmFyIGFmdGVySGlkZSA9IHRoaXMucHJvcHMuYWZ0ZXJIaWRlO1xuXG4gICAgICB2YXIgcGxhY2Vob2xkZXIgPSB0aGlzLmdldFRvb2x0aXBDb250ZW50KCk7XG4gICAgICBpZiAoIXRoaXMubW91bnQpIHJldHVybjtcbiAgICAgIGlmICh0aGlzLmlzRW1wdHlUaXAocGxhY2Vob2xkZXIpIHx8IGRpc2FibGUpIHJldHVybjsgLy8gaWYgdGhlIHRvb2x0aXAgaXMgZW1wdHksIGRpc2FibGUgdGhlIHRvb2x0aXBcbiAgICAgIGlmIChoYXNUYXJnZXQpIHtcbiAgICAgICAgLy8gRG9uJ3QgdHJpZ2dlciBvdGhlciBlbGVtZW50cyBiZWxvbmdzIHRvIG90aGVyIFJlYWN0VG9vbHRpcFxuICAgICAgICB2YXIgdGFyZ2V0QXJyYXkgPSB0aGlzLmdldFRhcmdldEFycmF5KHRoaXMucHJvcHMuaWQpO1xuICAgICAgICB2YXIgaXNNeUVsZW1lbnQgPSB0YXJnZXRBcnJheS5zb21lKGZ1bmN0aW9uIChlbGUpIHtcbiAgICAgICAgICByZXR1cm4gZWxlID09PSBlLmN1cnJlbnRUYXJnZXQ7XG4gICAgICAgIH0pO1xuICAgICAgICBpZiAoIWlzTXlFbGVtZW50IHx8ICF0aGlzLnN0YXRlLnNob3cpIHJldHVybjtcbiAgICAgIH1cbiAgICAgIHZhciByZXNldFN0YXRlID0gZnVuY3Rpb24gcmVzZXRTdGF0ZSgpIHtcbiAgICAgICAgdmFyIGlzVmlzaWJsZSA9IF90aGlzNy5zdGF0ZS5zaG93O1xuICAgICAgICBfdGhpczcuc2V0U3RhdGUoe1xuICAgICAgICAgIHNob3c6IGZhbHNlXG4gICAgICAgIH0sIGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICBfdGhpczcucmVtb3ZlU2Nyb2xsTGlzdGVuZXIoKTtcbiAgICAgICAgICBpZiAoaXNWaXNpYmxlICYmIGFmdGVySGlkZSkgYWZ0ZXJIaWRlKCk7XG4gICAgICAgIH0pO1xuICAgICAgfTtcblxuICAgICAgdGhpcy5jbGVhclRpbWVyKCk7XG4gICAgICBpZiAoZGVsYXlIaWRlKSB7XG4gICAgICAgIHRoaXMuZGVsYXlIaWRlTG9vcCA9IHNldFRpbWVvdXQocmVzZXRTdGF0ZSwgcGFyc2VJbnQoZGVsYXlIaWRlLCAxMCkpO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgcmVzZXRTdGF0ZSgpO1xuICAgICAgfVxuICAgIH1cblxuICAgIC8qKlxuICAgICAqIEFkZCBzY3JvbGwgZXZlbnRsaXN0ZW5lciB3aGVuIHRvb2x0aXAgc2hvd1xuICAgICAqIGF1dG9tYXRpY2FsbHkgaGlkZSB0aGUgdG9vbHRpcCB3aGVuIHNjcm9sbGluZ1xuICAgICAqL1xuXG4gIH0sIHtcbiAgICBrZXk6ICdhZGRTY3JvbGxMaXN0ZW5lcicsXG4gICAgdmFsdWU6IGZ1bmN0aW9uIGFkZFNjcm9sbExpc3RlbmVyKGUpIHtcbiAgICAgIHZhciBpc0NhcHR1cmVNb2RlID0gdGhpcy5pc0NhcHR1cmUoZS5jdXJyZW50VGFyZ2V0KTtcbiAgICAgIHdpbmRvdy5hZGRFdmVudExpc3RlbmVyKCdzY3JvbGwnLCB0aGlzLmhpZGVUb29sdGlwLCBpc0NhcHR1cmVNb2RlKTtcbiAgICB9XG4gIH0sIHtcbiAgICBrZXk6ICdyZW1vdmVTY3JvbGxMaXN0ZW5lcicsXG4gICAgdmFsdWU6IGZ1bmN0aW9uIHJlbW92ZVNjcm9sbExpc3RlbmVyKCkge1xuICAgICAgd2luZG93LnJlbW92ZUV2ZW50TGlzdGVuZXIoJ3Njcm9sbCcsIHRoaXMuaGlkZVRvb2x0aXApO1xuICAgIH1cblxuICAgIC8vIENhbGN1bGF0aW9uIHRoZSBwb3NpdGlvblxuXG4gIH0sIHtcbiAgICBrZXk6ICd1cGRhdGVQb3NpdGlvbicsXG4gICAgdmFsdWU6IGZ1bmN0aW9uIHVwZGF0ZVBvc2l0aW9uKCkge1xuICAgICAgdmFyIF90aGlzOCA9IHRoaXM7XG5cbiAgICAgIHZhciBfc3RhdGUzID0gdGhpcy5zdGF0ZSxcbiAgICAgICAgICBjdXJyZW50RXZlbnQgPSBfc3RhdGUzLmN1cnJlbnRFdmVudCxcbiAgICAgICAgICBjdXJyZW50VGFyZ2V0ID0gX3N0YXRlMy5jdXJyZW50VGFyZ2V0LFxuICAgICAgICAgIHBsYWNlID0gX3N0YXRlMy5wbGFjZSxcbiAgICAgICAgICBkZXNpcmVkUGxhY2UgPSBfc3RhdGUzLmRlc2lyZWRQbGFjZSxcbiAgICAgICAgICBlZmZlY3QgPSBfc3RhdGUzLmVmZmVjdCxcbiAgICAgICAgICBvZmZzZXQgPSBfc3RhdGUzLm9mZnNldDtcblxuICAgICAgdmFyIG5vZGUgPSBfcmVhY3REb20yLmRlZmF1bHQuZmluZERPTU5vZGUodGhpcyk7XG4gICAgICB2YXIgcmVzdWx0ID0gKDAsIF9nZXRQb3NpdGlvbjIuZGVmYXVsdCkoY3VycmVudEV2ZW50LCBjdXJyZW50VGFyZ2V0LCBub2RlLCBwbGFjZSwgZGVzaXJlZFBsYWNlLCBlZmZlY3QsIG9mZnNldCk7XG5cbiAgICAgIGlmIChyZXN1bHQuaXNOZXdTdGF0ZSkge1xuICAgICAgICAvLyBTd2l0Y2ggdG8gcmV2ZXJzZSBwbGFjZW1lbnRcbiAgICAgICAgcmV0dXJuIHRoaXMuc2V0U3RhdGUocmVzdWx0Lm5ld1N0YXRlLCBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgX3RoaXM4LnVwZGF0ZVBvc2l0aW9uKCk7XG4gICAgICAgIH0pO1xuICAgICAgfVxuICAgICAgLy8gU2V0IHRvb2x0aXAgcG9zaXRpb25cbiAgICAgIG5vZGUuc3R5bGUubGVmdCA9IHJlc3VsdC5wb3NpdGlvbi5sZWZ0ICsgJ3B4JztcbiAgICAgIG5vZGUuc3R5bGUudG9wID0gcmVzdWx0LnBvc2l0aW9uLnRvcCArICdweCc7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogU2V0IHN0eWxlIHRhZyBpbiBoZWFkZXJcbiAgICAgKiBpbiB0aGlzIHdheSB3ZSBjYW4gaW5zZXJ0IGRlZmF1bHQgY3NzXG4gICAgICovXG5cbiAgfSwge1xuICAgIGtleTogJ3NldFN0eWxlSGVhZGVyJyxcbiAgICB2YWx1ZTogZnVuY3Rpb24gc2V0U3R5bGVIZWFkZXIoKSB7XG4gICAgICB2YXIgaGVhZCA9IGRvY3VtZW50LmdldEVsZW1lbnRzQnlUYWdOYW1lKCdoZWFkJylbMF07XG4gICAgICBpZiAoIWhlYWQucXVlcnlTZWxlY3Rvcignc3R5bGVbaWQ9XCJyZWFjdC10b29sdGlwXCJdJykpIHtcbiAgICAgICAgdmFyIHRhZyA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ3N0eWxlJyk7XG4gICAgICAgIHRhZy5pZCA9ICdyZWFjdC10b29sdGlwJztcbiAgICAgICAgdGFnLmlubmVySFRNTCA9IF9zdHlsZTIuZGVmYXVsdDtcbiAgICAgICAgaGVhZC5pbnNlcnRCZWZvcmUodGFnLCBoZWFkLmZpcnN0Q2hpbGQpO1xuICAgICAgfVxuICAgIH1cblxuICAgIC8qKlxuICAgICAqIENMZWFyIGFsbCBraW5kcyBvZiB0aW1lb3V0IG9mIGludGVydmFsXG4gICAgICovXG5cbiAgfSwge1xuICAgIGtleTogJ2NsZWFyVGltZXInLFxuICAgIHZhbHVlOiBmdW5jdGlvbiBjbGVhclRpbWVyKCkge1xuICAgICAgY2xlYXJUaW1lb3V0KHRoaXMuZGVsYXlTaG93TG9vcCk7XG4gICAgICBjbGVhclRpbWVvdXQodGhpcy5kZWxheUhpZGVMb29wKTtcbiAgICAgIGNsZWFySW50ZXJ2YWwodGhpcy5pbnRlcnZhbFVwZGF0ZUNvbnRlbnQpO1xuICAgIH1cbiAgfSwge1xuICAgIGtleTogJ3JlbmRlcicsXG4gICAgdmFsdWU6IGZ1bmN0aW9uIHJlbmRlcigpIHtcbiAgICAgIHZhciBfc3RhdGU0ID0gdGhpcy5zdGF0ZSxcbiAgICAgICAgICBleHRyYUNsYXNzID0gX3N0YXRlNC5leHRyYUNsYXNzLFxuICAgICAgICAgIGh0bWwgPSBfc3RhdGU0Lmh0bWwsXG4gICAgICAgICAgYXJpYVByb3BzID0gX3N0YXRlNC5hcmlhUHJvcHMsXG4gICAgICAgICAgZGlzYWJsZSA9IF9zdGF0ZTQuZGlzYWJsZTtcblxuICAgICAgdmFyIHBsYWNlaG9sZGVyID0gdGhpcy5nZXRUb29sdGlwQ29udGVudCgpO1xuICAgICAgdmFyIGlzRW1wdHlUaXAgPSB0aGlzLmlzRW1wdHlUaXAocGxhY2Vob2xkZXIpO1xuICAgICAgdmFyIHRvb2x0aXBDbGFzcyA9ICgwLCBfY2xhc3NuYW1lczIuZGVmYXVsdCkoJ19fcmVhY3RfY29tcG9uZW50X3Rvb2x0aXAnLCB7ICdzaG93JzogdGhpcy5zdGF0ZS5zaG93ICYmICFkaXNhYmxlICYmICFpc0VtcHR5VGlwIH0sIHsgJ2JvcmRlcic6IHRoaXMuc3RhdGUuYm9yZGVyIH0sIHsgJ3BsYWNlLXRvcCc6IHRoaXMuc3RhdGUucGxhY2UgPT09ICd0b3AnIH0sIHsgJ3BsYWNlLWJvdHRvbSc6IHRoaXMuc3RhdGUucGxhY2UgPT09ICdib3R0b20nIH0sIHsgJ3BsYWNlLWxlZnQnOiB0aGlzLnN0YXRlLnBsYWNlID09PSAnbGVmdCcgfSwgeyAncGxhY2UtcmlnaHQnOiB0aGlzLnN0YXRlLnBsYWNlID09PSAncmlnaHQnIH0sIHsgJ3R5cGUtZGFyayc6IHRoaXMuc3RhdGUudHlwZSA9PT0gJ2RhcmsnIH0sIHsgJ3R5cGUtc3VjY2Vzcyc6IHRoaXMuc3RhdGUudHlwZSA9PT0gJ3N1Y2Nlc3MnIH0sIHsgJ3R5cGUtd2FybmluZyc6IHRoaXMuc3RhdGUudHlwZSA9PT0gJ3dhcm5pbmcnIH0sIHsgJ3R5cGUtZXJyb3InOiB0aGlzLnN0YXRlLnR5cGUgPT09ICdlcnJvcicgfSwgeyAndHlwZS1pbmZvJzogdGhpcy5zdGF0ZS50eXBlID09PSAnaW5mbycgfSwgeyAndHlwZS1saWdodCc6IHRoaXMuc3RhdGUudHlwZSA9PT0gJ2xpZ2h0JyB9KTtcblxuICAgICAgdmFyIFdyYXBwZXIgPSB0aGlzLnByb3BzLndyYXBwZXI7XG4gICAgICBpZiAoUmVhY3RUb29sdGlwLnN1cHBvcnRlZFdyYXBwZXJzLmluZGV4T2YoV3JhcHBlcikgPCAwKSB7XG4gICAgICAgIFdyYXBwZXIgPSBSZWFjdFRvb2x0aXAuZGVmYXVsdFByb3BzLndyYXBwZXI7XG4gICAgICB9XG5cbiAgICAgIGlmIChodG1sKSB7XG4gICAgICAgIHJldHVybiBfcmVhY3QyLmRlZmF1bHQuY3JlYXRlRWxlbWVudChXcmFwcGVyLCBfZXh0ZW5kcyh7IGNsYXNzTmFtZTogdG9vbHRpcENsYXNzICsgJyAnICsgZXh0cmFDbGFzcyxcbiAgICAgICAgICBpZDogdGhpcy5wcm9wcy5pZFxuICAgICAgICB9LCBhcmlhUHJvcHMsIHtcbiAgICAgICAgICAnZGF0YS1pZCc6ICd0b29sdGlwJyxcbiAgICAgICAgICBkYW5nZXJvdXNseVNldElubmVySFRNTDogeyBfX2h0bWw6IHBsYWNlaG9sZGVyIH0gfSkpO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgcmV0dXJuIF9yZWFjdDIuZGVmYXVsdC5jcmVhdGVFbGVtZW50KFxuICAgICAgICAgIFdyYXBwZXIsXG4gICAgICAgICAgX2V4dGVuZHMoeyBjbGFzc05hbWU6IHRvb2x0aXBDbGFzcyArICcgJyArIGV4dHJhQ2xhc3MsXG4gICAgICAgICAgICBpZDogdGhpcy5wcm9wcy5pZFxuICAgICAgICAgIH0sIGFyaWFQcm9wcywge1xuICAgICAgICAgICAgJ2RhdGEtaWQnOiAndG9vbHRpcCcgfSksXG4gICAgICAgICAgcGxhY2Vob2xkZXJcbiAgICAgICAgKTtcbiAgICAgIH1cbiAgICB9XG4gIH1dKTtcblxuICByZXR1cm4gUmVhY3RUb29sdGlwO1xufShfcmVhY3QyLmRlZmF1bHQuQ29tcG9uZW50KSwgX2NsYXNzMi5wcm9wVHlwZXMgPSB7XG4gIGNoaWxkcmVuOiBfcHJvcFR5cGVzMi5kZWZhdWx0LmFueSxcbiAgcGxhY2U6IF9wcm9wVHlwZXMyLmRlZmF1bHQuc3RyaW5nLFxuICB0eXBlOiBfcHJvcFR5cGVzMi5kZWZhdWx0LnN0cmluZyxcbiAgZWZmZWN0OiBfcHJvcFR5cGVzMi5kZWZhdWx0LnN0cmluZyxcbiAgb2Zmc2V0OiBfcHJvcFR5cGVzMi5kZWZhdWx0Lm9iamVjdCxcbiAgbXVsdGlsaW5lOiBfcHJvcFR5cGVzMi5kZWZhdWx0LmJvb2wsXG4gIGJvcmRlcjogX3Byb3BUeXBlczIuZGVmYXVsdC5ib29sLFxuICBpbnNlY3VyZTogX3Byb3BUeXBlczIuZGVmYXVsdC5ib29sLFxuICBjbGFzczogX3Byb3BUeXBlczIuZGVmYXVsdC5zdHJpbmcsXG4gIGNsYXNzTmFtZTogX3Byb3BUeXBlczIuZGVmYXVsdC5zdHJpbmcsXG4gIGlkOiBfcHJvcFR5cGVzMi5kZWZhdWx0LnN0cmluZyxcbiAgaHRtbDogX3Byb3BUeXBlczIuZGVmYXVsdC5ib29sLFxuICBkZWxheUhpZGU6IF9wcm9wVHlwZXMyLmRlZmF1bHQubnVtYmVyLFxuICBkZWxheVNob3c6IF9wcm9wVHlwZXMyLmRlZmF1bHQubnVtYmVyLFxuICBldmVudDogX3Byb3BUeXBlczIuZGVmYXVsdC5zdHJpbmcsXG4gIGV2ZW50T2ZmOiBfcHJvcFR5cGVzMi5kZWZhdWx0LnN0cmluZyxcbiAgd2F0Y2hXaW5kb3c6IF9wcm9wVHlwZXMyLmRlZmF1bHQuYm9vbCxcbiAgaXNDYXB0dXJlOiBfcHJvcFR5cGVzMi5kZWZhdWx0LmJvb2wsXG4gIGdsb2JhbEV2ZW50T2ZmOiBfcHJvcFR5cGVzMi5kZWZhdWx0LnN0cmluZyxcbiAgZ2V0Q29udGVudDogX3Byb3BUeXBlczIuZGVmYXVsdC5hbnksXG4gIGFmdGVyU2hvdzogX3Byb3BUeXBlczIuZGVmYXVsdC5mdW5jLFxuICBhZnRlckhpZGU6IF9wcm9wVHlwZXMyLmRlZmF1bHQuZnVuYyxcbiAgZGlzYWJsZTogX3Byb3BUeXBlczIuZGVmYXVsdC5ib29sLFxuICBzY3JvbGxIaWRlOiBfcHJvcFR5cGVzMi5kZWZhdWx0LmJvb2wsXG4gIHJlc2l6ZUhpZGU6IF9wcm9wVHlwZXMyLmRlZmF1bHQuYm9vbCxcbiAgd3JhcHBlcjogX3Byb3BUeXBlczIuZGVmYXVsdC5zdHJpbmdcbn0sIF9jbGFzczIuZGVmYXVsdFByb3BzID0ge1xuICBpbnNlY3VyZTogdHJ1ZSxcbiAgcmVzaXplSGlkZTogdHJ1ZSxcbiAgd3JhcHBlcjogJ2Rpdidcbn0sIF9jbGFzczIuc3VwcG9ydGVkV3JhcHBlcnMgPSBbJ2RpdicsICdzcGFuJ10sIF9jbGFzczIuZGlzcGxheU5hbWUgPSAnUmVhY3RUb29sdGlwJywgX3RlbXApKSB8fCBfY2xhc3MpIHx8IF9jbGFzcykgfHwgX2NsYXNzKSB8fCBfY2xhc3MpIHx8IF9jbGFzcykgfHwgX2NsYXNzO1xuXG4vKiBleHBvcnQgZGVmYXVsdCBub3QgZml0IGZvciBzdGFuZGFsb25lLCBpdCB3aWxsIGV4cG9ydHMge2RlZmF1bHQ6Li4ufSAqL1xuXG5cbm1vZHVsZS5leHBvcnRzID0gUmVhY3RUb29sdGlwOyIsImltcG9ydCBSZWFjdCBmcm9tICdyZWFjdCdcbmltcG9ydCBSZWFjdFRvb2x0aXAgZnJvbSAncmVhY3QtdG9vbHRpcCdcbmltcG9ydCB7IGNvbm5lY3QgfSBmcm9tICdyZWFjdC1yZWR1eCdcbmltcG9ydCB7IHJlcXVlc3RMaXN0IH0gZnJvbSAnQWN0aW9ucy9pbmRleCdcblxuY2xhc3MgSW5wdXRDb21wb25lbnQgZXh0ZW5kcyBSZWFjdC5Db21wb25lbnQge1xuICBjb25zdHJ1Y3Rvcihwcm9wcykge1xuICAgIHN1cGVyKHByb3BzKVxuXG4gICAgdGhpcy5zdGF0ZSA9IHtcbiAgICAgIHByaWNlRnJvbTogJycsXG4gICAgICBwcmljZVRvOiAnJyxcbiAgICAgIHR5cGU6ICdhbGwnXG4gICAgfVxuICB9XG5cbiAgaGFuZGxlQ2hhbmdlID0gKGV2ZW50KSA9PiB7XG4gICAgdGhpcy5zZXRTdGF0ZSh7XG4gICAgICBbZXZlbnQudGFyZ2V0Lm5hbWVdOiBldmVudC50YXJnZXQudmFsdWVcbiAgICB9KVxuICB9XG5cbiAgaGFuZGxlU3VibWl0ID0gKGV2ZW50KSA9PiB7XG4gICAgZXZlbnQucHJldmVudERlZmF1bHQoKVxuXG4gICAgY29uc3Qge1xuICAgICAgcHJpY2VGcm9tLFxuICAgICAgcHJpY2VUbyxcbiAgICAgIHR5cGVcbiAgICB9ID0gdGhpcy5zdGF0ZVxuXG4gICAgaWYoaXNOYU4ocHJpY2VGcm9tKVxuICAgIHx8IGlzTmFOKHByaWNlVG8pXG4gICAgfHwgIXByaWNlVG9cbiAgICB8fCAhcHJpY2VGcm9tKVxuICAgICAgcmV0dXJuXG5cbiAgICBjb25zb2xlLmxvZyh7XG4gICAgICBwcmljZToge3RvOiBwcmljZVRvLCBmcm9tOiBwcmljZUZyb219LFxuICAgICAgdHlwZVxuICAgIH0pXG5cbiAgICB0aGlzLnByb3BzLnJlcXVlc3RMaXN0KHt0bzogcGFyc2VJbnQocHJpY2VUbyksIGZyb206IHBhcnNlSW50KHByaWNlRnJvbSl9LCB0eXBlKTtcbiAgfVxuXG4gIHJlbmRlcigpIHtcbiAgICBjb25zdCB7XG4gICAgICBwcmljZUZyb20sXG4gICAgICBwcmljZVRvLFxuICAgICAgdHlwZVxuICAgIH0gPSB0aGlzLnN0YXRlXG5cbiAgICBjb25zdCB7IGlzUmV0cmlldmluZ0RhdGEgfSA9IHRoaXMucHJvcHNcblxuICAgIHJldHVybihcbiAgICAgIDxkaXYgaWQ9J2lucHV0LWNvbnRhaW5lcicgY2xhc3M9J2Zvcm0tZ3JvdXAnPlxuICAgICAgICA8UmVhY3RUb29sdGlwIGVmZmVjdD0nc29saWQnIC8+XG4gICAgICAgIDxwPmlucHV0LWNvbnRhaW5lcjwvcD5cbiAgICAgICAgPGZvcm0gb25TdWJtaXQ9e3RoaXMuaGFuZGxlU3VibWl0fSA+XG4gICAgICAgICAgPGlucHV0IHR5cGU9J3RleHQnIG5hbWU9J3ByaWNlRnJvbScgcGxhY2Vob2xkZXI9J0Zyb20nXG4gICAgICAgICAgICB2YWx1ZT17cHJpY2VGcm9tfSBvbkNoYW5nZT17dGhpcy5oYW5kbGVDaGFuZ2V9XG4gICAgICAgICAgICBjbGFzcz0nZm9ybS1jb250cm9sLXBsYWludGV4dCcgLz5cbiAgICAgICAgICA8aW5wdXQgdHlwZT0ndGV4dCcgbmFtZT0ncHJpY2VUbycgcGxhY2Vob2xkZXI9J1RvJ1xuICAgICAgICAgICAgdmFsdWU9e3ByaWNlVG99IG9uQ2hhbmdlPXt0aGlzLmhhbmRsZUNoYW5nZX0gLz5cbiAgICAgICAgICA8c2VsZWN0IG5hbWU9J3R5cGUnIG9uQ2hhbmdlPXt0aGlzLmhhbmRsZUNoYW5nZX1cbiAgICAgICAgICAgIHZhbHVlPXt0eXBlfSA+XG4gICAgICAgICAgICA8b3B0aW9uIHZhbHVlPSdhbGwnPkFsbDwvb3B0aW9uPlxuICAgICAgICAgICAgPG9wdGlvbiB2YWx1ZT0nYXBwYXJ0bWVudCc+QXBwYXJ0bWVudDwvb3B0aW9uPlxuICAgICAgICAgICAgPG9wdGlvbiB2YWx1ZT0naG91c2UnPkhvdXNlPC9vcHRpb24+XG4gICAgICAgICAgPC9zZWxlY3Q+XG4gICAgICAgICAgPGJ1dHRvbiBkaXNhYmxlZD17aXNSZXRyaWV2aW5nRGF0YX1cbiAgICAgICAgICAgIGNsYXNzPSdidG4gYnRuLXByaW1hcnkgbWItMidcbiAgICAgICAgICAgIGRhdGEtdGlwPSdSZWR1eCcgPlNlYXJjaDwvYnV0dG9uPlxuICAgICAgICA8L2Zvcm0+XG4gICAgICA8L2Rpdj5cbiAgICApXG4gIH1cbn1cblxuY29uc3QgbWFwU3RhdGVUb1Byb3BzID0gc3RhdGUgPT4ge1xuICByZXR1cm4ge1xuICAgIGlzUmV0cmlldmluZ0RhdGE6IHN0YXRlLmlzUmV0cmlldmluZ0RhdGFcbiAgfVxufVxuXG5jb25zdCBtYXBEaXNwYXRjaFRvUHJvcHMgPSBkaXNwYXRjaCA9PiB7XG4gIHJldHVybiB7XG4gICAgcmVxdWVzdExpc3Q6IChwcmljZSwgdHlwZSkgPT4gZGlzcGF0Y2gocmVxdWVzdExpc3QocHJpY2UsIHR5cGUpKVxuICB9XG59XG5cbmV4cG9ydCBkZWZhdWx0IGNvbm5lY3QobWFwU3RhdGVUb1Byb3BzLCBtYXBEaXNwYXRjaFRvUHJvcHMpKElucHV0Q29tcG9uZW50KSIsImltcG9ydCBSZWFjdCBmcm9tICdyZWFjdCdcbmltcG9ydCB7IGNvbm5lY3QgfSBmcm9tICdyZWFjdC1yZWR1eCdcbmltcG9ydCB7IHRpbWVTaW5jZSB9IGZyb20gJ1V0aWxzL2luZGV4J1xuaW1wb3J0IEltYWdlIGZyb20gJy4vSW1hZ2UnXG5pbXBvcnQge1xuICByZXF1ZXN0UHJvcGVydHlEYXRhLFxuICBTSE9XX1BST1BFUlRZX1BBTkVMXG59IGZyb20gJ0FjdGlvbnMvaW5kZXgnXG5cbmNsYXNzIExpc3RJdGVtIGV4dGVuZHMgUmVhY3QuQ29tcG9uZW50IHtcbiAgY29uc3RydWN0b3IocHJvcHMpIHtcbiAgICBzdXBlcihwcm9wcylcbiAgfVxuXG4gIGhhbmRsZUNsaWNrID0gKCkgPT4ge1xuICAgIGNvbnN0IHtcbiAgICAgIGlkLFxuICAgICAgc2hvd1Byb3BlcnR5UGFuZWwsXG4gICAgICByZXF1ZXN0UHJvcGVydHlEYXRhXG4gICAgfSA9IHRoaXMucHJvcHNcblxuICAgIHJlcXVlc3RQcm9wZXJ0eURhdGEoaWQpXG4gICAgc2hvd1Byb3BlcnR5UGFuZWwoKVxuICB9XG5cbiAgcmVuZGVyKCkge1xuICAgIGNvbnN0IHtcbiAgICAgIGlkLFxuICAgICAgaW1nU3JjLFxuICAgICAgb3duZXIsXG4gICAgICB0aXRsZSxcbiAgICAgIHByaWNlLFxuICAgICAgZGF0ZSxcbiAgICAgIGFyZWEsXG4gICAgICBkZXNjcmlwdGlvblxuICAgIH0gPSB0aGlzLnByb3BzXG5cbiAgICByZXR1cm4oXG4gICAgICA8ZGl2IGNsYXNzPSdsaXN0LWl0ZW0nIG9uQ2xpY2s9e3RoaXMuaGFuZGxlQ2xpY2t9ID5cbiAgICAgICAgPGRpdiBjbGFzcz0nbGlzdC1pdGVtLWltYWdlJz5cbiAgICAgICAgICA8SW1hZ2Ugc3JjPXtpbWdTcmMgKyAnJmlkPScgKyBpZH0gYWx0PXtuYW1lfSAvPlxuICAgICAgICA8L2Rpdj5cbiAgICAgICAgPGRpdiBjbGFzcz0nbGlzdC1pdGVtLWRlc2NyaXB0aW9uJz5cbiAgICAgICAgICA8aDM+e3RpdGxlfTwvaDM+XG4gICAgICAgICAgPGg1PntwcmljZX0g4oKsIGZvciB7YXJlYX0gbcKyIDxzcGFuIGNsYXNzTmFtZT0nbGlzdC1pdGVtLWRhdGUnPnt0aW1lU2luY2UoZGF0ZSoxMDAwKX08L3NwYW4+PC9oNT5cbiAgICAgICAgICA8cD57ZGVzY3JpcHRpb259PC9wPlxuICAgICAgICA8L2Rpdj5cbiAgICAgIDwvZGl2PlxuICAgIClcbiAgfVxufVxuXG5jb25zdCBtYXBTdGF0ZVRvUHJvcHMgPSAoc3RhdGUpID0+IHt9XG5cbmNvbnN0IG1hcERpc3BhdGNoVG9Qcm9wcyA9IChkaXNwYXRjaCkgPT4ge1xuICByZXR1cm4ge1xuICAgIHJlcXVlc3RQcm9wZXJ0eURhdGE6IChpZCkgPT4gZGlzcGF0Y2gocmVxdWVzdFByb3BlcnR5RGF0YShpZCkpLFxuICAgIHNob3dQcm9wZXJ0eVBhbmVsOiAoKSA9PiBkaXNwYXRjaCh7dHlwZTogU0hPV19QUk9QRVJUWV9QQU5FTH0pXG4gIH1cbn1cblxuZXhwb3J0IGRlZmF1bHQgY29ubmVjdChcbiAgbWFwU3RhdGVUb1Byb3BzLFxuICBtYXBEaXNwYXRjaFRvUHJvcHMpXG4gIChMaXN0SXRlbSkiLCJcbi8qKlxuICogV2hlbiBzb3VyY2UgbWFwcyBhcmUgZW5hYmxlZCwgYHN0eWxlLWxvYWRlcmAgdXNlcyBhIGxpbmsgZWxlbWVudCB3aXRoIGEgZGF0YS11cmkgdG9cbiAqIGVtYmVkIHRoZSBjc3Mgb24gdGhlIHBhZ2UuIFRoaXMgYnJlYWtzIGFsbCByZWxhdGl2ZSB1cmxzIGJlY2F1c2Ugbm93IHRoZXkgYXJlIHJlbGF0aXZlIHRvIGFcbiAqIGJ1bmRsZSBpbnN0ZWFkIG9mIHRoZSBjdXJyZW50IHBhZ2UuXG4gKlxuICogT25lIHNvbHV0aW9uIGlzIHRvIG9ubHkgdXNlIGZ1bGwgdXJscywgYnV0IHRoYXQgbWF5IGJlIGltcG9zc2libGUuXG4gKlxuICogSW5zdGVhZCwgdGhpcyBmdW5jdGlvbiBcImZpeGVzXCIgdGhlIHJlbGF0aXZlIHVybHMgdG8gYmUgYWJzb2x1dGUgYWNjb3JkaW5nIHRvIHRoZSBjdXJyZW50IHBhZ2UgbG9jYXRpb24uXG4gKlxuICogQSBydWRpbWVudGFyeSB0ZXN0IHN1aXRlIGlzIGxvY2F0ZWQgYXQgYHRlc3QvZml4VXJscy5qc2AgYW5kIGNhbiBiZSBydW4gdmlhIHRoZSBgbnBtIHRlc3RgIGNvbW1hbmQuXG4gKlxuICovXG5cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKGNzcykge1xuICAvLyBnZXQgY3VycmVudCBsb2NhdGlvblxuICB2YXIgbG9jYXRpb24gPSB0eXBlb2Ygd2luZG93ICE9PSBcInVuZGVmaW5lZFwiICYmIHdpbmRvdy5sb2NhdGlvbjtcblxuICBpZiAoIWxvY2F0aW9uKSB7XG4gICAgdGhyb3cgbmV3IEVycm9yKFwiZml4VXJscyByZXF1aXJlcyB3aW5kb3cubG9jYXRpb25cIik7XG4gIH1cblxuXHQvLyBibGFuayBvciBudWxsP1xuXHRpZiAoIWNzcyB8fCB0eXBlb2YgY3NzICE9PSBcInN0cmluZ1wiKSB7XG5cdCAgcmV0dXJuIGNzcztcbiAgfVxuXG4gIHZhciBiYXNlVXJsID0gbG9jYXRpb24ucHJvdG9jb2wgKyBcIi8vXCIgKyBsb2NhdGlvbi5ob3N0O1xuICB2YXIgY3VycmVudERpciA9IGJhc2VVcmwgKyBsb2NhdGlvbi5wYXRobmFtZS5yZXBsYWNlKC9cXC9bXlxcL10qJC8sIFwiL1wiKTtcblxuXHQvLyBjb252ZXJ0IGVhY2ggdXJsKC4uLilcblx0Lypcblx0VGhpcyByZWd1bGFyIGV4cHJlc3Npb24gaXMganVzdCBhIHdheSB0byByZWN1cnNpdmVseSBtYXRjaCBicmFja2V0cyB3aXRoaW5cblx0YSBzdHJpbmcuXG5cblx0IC91cmxcXHMqXFwoICA9IE1hdGNoIG9uIHRoZSB3b3JkIFwidXJsXCIgd2l0aCBhbnkgd2hpdGVzcGFjZSBhZnRlciBpdCBhbmQgdGhlbiBhIHBhcmVuc1xuXHQgICAoICA9IFN0YXJ0IGEgY2FwdHVyaW5nIGdyb3VwXG5cdCAgICAgKD86ICA9IFN0YXJ0IGEgbm9uLWNhcHR1cmluZyBncm91cFxuXHQgICAgICAgICBbXikoXSAgPSBNYXRjaCBhbnl0aGluZyB0aGF0IGlzbid0IGEgcGFyZW50aGVzZXNcblx0ICAgICAgICAgfCAgPSBPUlxuXHQgICAgICAgICBcXCggID0gTWF0Y2ggYSBzdGFydCBwYXJlbnRoZXNlc1xuXHQgICAgICAgICAgICAgKD86ICA9IFN0YXJ0IGFub3RoZXIgbm9uLWNhcHR1cmluZyBncm91cHNcblx0ICAgICAgICAgICAgICAgICBbXikoXSsgID0gTWF0Y2ggYW55dGhpbmcgdGhhdCBpc24ndCBhIHBhcmVudGhlc2VzXG5cdCAgICAgICAgICAgICAgICAgfCAgPSBPUlxuXHQgICAgICAgICAgICAgICAgIFxcKCAgPSBNYXRjaCBhIHN0YXJ0IHBhcmVudGhlc2VzXG5cdCAgICAgICAgICAgICAgICAgICAgIFteKShdKiAgPSBNYXRjaCBhbnl0aGluZyB0aGF0IGlzbid0IGEgcGFyZW50aGVzZXNcblx0ICAgICAgICAgICAgICAgICBcXCkgID0gTWF0Y2ggYSBlbmQgcGFyZW50aGVzZXNcblx0ICAgICAgICAgICAgICkgID0gRW5kIEdyb3VwXG4gICAgICAgICAgICAgICpcXCkgPSBNYXRjaCBhbnl0aGluZyBhbmQgdGhlbiBhIGNsb3NlIHBhcmVuc1xuICAgICAgICAgICkgID0gQ2xvc2Ugbm9uLWNhcHR1cmluZyBncm91cFxuICAgICAgICAgICogID0gTWF0Y2ggYW55dGhpbmdcbiAgICAgICApICA9IENsb3NlIGNhcHR1cmluZyBncm91cFxuXHQgXFwpICA9IE1hdGNoIGEgY2xvc2UgcGFyZW5zXG5cblx0IC9naSAgPSBHZXQgYWxsIG1hdGNoZXMsIG5vdCB0aGUgZmlyc3QuICBCZSBjYXNlIGluc2Vuc2l0aXZlLlxuXHQgKi9cblx0dmFyIGZpeGVkQ3NzID0gY3NzLnJlcGxhY2UoL3VybFxccypcXCgoKD86W14pKF18XFwoKD86W14pKF0rfFxcKFteKShdKlxcKSkqXFwpKSopXFwpL2dpLCBmdW5jdGlvbihmdWxsTWF0Y2gsIG9yaWdVcmwpIHtcblx0XHQvLyBzdHJpcCBxdW90ZXMgKGlmIHRoZXkgZXhpc3QpXG5cdFx0dmFyIHVucXVvdGVkT3JpZ1VybCA9IG9yaWdVcmxcblx0XHRcdC50cmltKClcblx0XHRcdC5yZXBsYWNlKC9eXCIoLiopXCIkLywgZnVuY3Rpb24obywgJDEpeyByZXR1cm4gJDE7IH0pXG5cdFx0XHQucmVwbGFjZSgvXicoLiopJyQvLCBmdW5jdGlvbihvLCAkMSl7IHJldHVybiAkMTsgfSk7XG5cblx0XHQvLyBhbHJlYWR5IGEgZnVsbCB1cmw/IG5vIGNoYW5nZVxuXHRcdGlmICgvXigjfGRhdGE6fGh0dHA6XFwvXFwvfGh0dHBzOlxcL1xcL3xmaWxlOlxcL1xcL1xcL3xcXHMqJCkvaS50ZXN0KHVucXVvdGVkT3JpZ1VybCkpIHtcblx0XHQgIHJldHVybiBmdWxsTWF0Y2g7XG5cdFx0fVxuXG5cdFx0Ly8gY29udmVydCB0aGUgdXJsIHRvIGEgZnVsbCB1cmxcblx0XHR2YXIgbmV3VXJsO1xuXG5cdFx0aWYgKHVucXVvdGVkT3JpZ1VybC5pbmRleE9mKFwiLy9cIikgPT09IDApIHtcblx0XHQgIFx0Ly9UT0RPOiBzaG91bGQgd2UgYWRkIHByb3RvY29sP1xuXHRcdFx0bmV3VXJsID0gdW5xdW90ZWRPcmlnVXJsO1xuXHRcdH0gZWxzZSBpZiAodW5xdW90ZWRPcmlnVXJsLmluZGV4T2YoXCIvXCIpID09PSAwKSB7XG5cdFx0XHQvLyBwYXRoIHNob3VsZCBiZSByZWxhdGl2ZSB0byB0aGUgYmFzZSB1cmxcblx0XHRcdG5ld1VybCA9IGJhc2VVcmwgKyB1bnF1b3RlZE9yaWdVcmw7IC8vIGFscmVhZHkgc3RhcnRzIHdpdGggJy8nXG5cdFx0fSBlbHNlIHtcblx0XHRcdC8vIHBhdGggc2hvdWxkIGJlIHJlbGF0aXZlIHRvIGN1cnJlbnQgZGlyZWN0b3J5XG5cdFx0XHRuZXdVcmwgPSBjdXJyZW50RGlyICsgdW5xdW90ZWRPcmlnVXJsLnJlcGxhY2UoL15cXC5cXC8vLCBcIlwiKTsgLy8gU3RyaXAgbGVhZGluZyAnLi8nXG5cdFx0fVxuXG5cdFx0Ly8gc2VuZCBiYWNrIHRoZSBmaXhlZCB1cmwoLi4uKVxuXHRcdHJldHVybiBcInVybChcIiArIEpTT04uc3RyaW5naWZ5KG5ld1VybCkgKyBcIilcIjtcblx0fSk7XG5cblx0Ly8gc2VuZCBiYWNrIHRoZSBmaXhlZCBjc3Ncblx0cmV0dXJuIGZpeGVkQ3NzO1xufTtcbiIsImV4cG9ydHMgPSBtb2R1bGUuZXhwb3J0cyA9IHJlcXVpcmUoXCIuLi8uLi8uLi9ub2RlX21vZHVsZXMvY3NzLWxvYWRlci9saWIvY3NzLWJhc2UuanNcIikoZmFsc2UpO1xuLy8gaW1wb3J0c1xuXG5cbi8vIG1vZHVsZVxuZXhwb3J0cy5wdXNoKFttb2R1bGUuaWQsIFwiQGtleWZyYW1lcyByb3RhdGlvbiB7XFxuICBmcm9tIHtcXG4gICAgdHJhbnNmb3JtOiByb3RhdGUoMGRlZyk7IH1cXG4gIHRvIHtcXG4gICAgdHJhbnNmb3JtOiByb3RhdGUoMzU5ZGVnKTsgfSB9XFxuXFxuQGtleWZyYW1lcyBzaGltbWVyIHtcXG4gIGZyb20ge1xcbiAgICBiYWNrZ3JvdW5kLXBvc2l0aW9uOiAtMjAwcHggMDsgfVxcbiAgdG8ge1xcbiAgICBiYWNrZ3JvdW5kLXBvc2l0aW9uOiA4MDBweCAwOyB9IH1cXG5cXG4jbGlzdC1jb250YWluZXIge1xcbiAgZGlzcGxheTogZmxleDtcXG4gIGZsZXgtZGlyZWN0aW9uOiByb3c7XFxuICBqdXN0aWZ5LWNvbnRlbnQ6IGNlbnRlcjtcXG4gIGZsZXgtd3JhcDogd3JhcDtcXG4gIHdpZHRoOiAxMDAlOyB9XFxuICAjbGlzdC1jb250YWluZXIgLmxpc3QtaXRlbSB7XFxuICAgIGJvcmRlcjogMXB4IHNvbGlkICNlZmVmZTg7XFxuICAgIGJveC1zaGFkb3c6IDBweCAwcHggNXB4ICNlZmVmZTg7XFxuICAgIHdpZHRoOiAzNTBweDtcXG4gICAgaGVpZ2h0OiA0MDBweDtcXG4gICAgbWFyZ2luOiAxNXB4O1xcbiAgICBkaXNwbGF5OiBibG9jaztcXG4gICAgY3Vyc29yOiBwb2ludGVyOyB9XFxuICAgICNsaXN0LWNvbnRhaW5lciAubGlzdC1pdGVtIC5saXN0LWl0ZW0taW1hZ2Uge1xcbiAgICAgIHdpZHRoOiAzNTBweDtcXG4gICAgICBoZWlnaHQ6IDIwMHB4O1xcbiAgICAgIHBvc2l0aW9uOiByZWxhdGl2ZTtcXG4gICAgICBkaXNwbGF5OiBmbGV4O1xcbiAgICAgIGZsZXgtZGlyZWN0aW9uOiBjb2x1bW47XFxuICAgICAganVzdGlmeS1jb250ZW50OiBjZW50ZXI7XFxuICAgICAgYWxpZ24taXRlbXM6IGNlbnRlcjsgfVxcbiAgICAgICNsaXN0LWNvbnRhaW5lciAubGlzdC1pdGVtIC5saXN0LWl0ZW0taW1hZ2UgaW1nIHtcXG4gICAgICAgIHBvc2l0aW9uOiBhYnNvbHV0ZTsgfVxcbiAgICAgICNsaXN0LWNvbnRhaW5lciAubGlzdC1pdGVtIC5saXN0LWl0ZW0taW1hZ2UgaW1nOmZpcnN0LWNoaWxkIHtcXG4gICAgICAgIGFuaW1hdGlvbjogMXMgcm90YXRpb24gaW5maW5pdGUgbGluZWFyOyB9XFxuICAgICNsaXN0LWNvbnRhaW5lciAubGlzdC1pdGVtIC5saXN0LWl0ZW0tZGVzY3JpcHRpb24ge1xcbiAgICAgIGNvbG9yOiAjOGQ4ZDhlO1xcbiAgICAgIHBhZGRpbmc6IDEwcHg7IH1cXG4gICAgICAjbGlzdC1jb250YWluZXIgLmxpc3QtaXRlbSAubGlzdC1pdGVtLWRlc2NyaXB0aW9uIGgzIHtcXG4gICAgICAgIG1hcmdpbi1ib3R0b206IDEwcHg7IH1cXG4gICAgICAjbGlzdC1jb250YWluZXIgLmxpc3QtaXRlbSAubGlzdC1pdGVtLWRlc2NyaXB0aW9uIC5saXN0LWl0ZW0tZGF0ZSB7XFxuICAgICAgICBmbG9hdDogcmlnaHQ7IH1cXG5cXG4ucGxhY2VIb2xkZXIge1xcbiAgYmFja2dyb3VuZDogI2VmZWZlODtcXG4gIGJhY2tncm91bmQ6IGxpbmVhci1ncmFkaWVudCh0byByaWdodCwgI2VmZWZlOCAwcHgsICNEMUQxQkQgNTBweCwgI2VmZWZlOCAyMDBweCk7XFxuICBhbmltYXRpb246IDFzIHNoaW1tZXIgbGluZWFyIGluZmluaXRlOyB9XFxuXCIsIFwiXCJdKTtcblxuLy8gZXhwb3J0c1xuIiwiXG52YXIgY29udGVudCA9IHJlcXVpcmUoXCIhIS4uLy4uLy4uL25vZGVfbW9kdWxlcy9jc3MtbG9hZGVyL2luZGV4LmpzIS4uLy4uLy4uL25vZGVfbW9kdWxlcy9zYXNzLWxvYWRlci9saWIvbG9hZGVyLmpzIS4vTGlzdENvbXBvbmVudC5zY3NzXCIpO1xuXG5pZih0eXBlb2YgY29udGVudCA9PT0gJ3N0cmluZycpIGNvbnRlbnQgPSBbW21vZHVsZS5pZCwgY29udGVudCwgJyddXTtcblxudmFyIHRyYW5zZm9ybTtcbnZhciBpbnNlcnRJbnRvO1xuXG5cblxudmFyIG9wdGlvbnMgPSB7XCJobXJcIjp0cnVlfVxuXG5vcHRpb25zLnRyYW5zZm9ybSA9IHRyYW5zZm9ybVxub3B0aW9ucy5pbnNlcnRJbnRvID0gdW5kZWZpbmVkO1xuXG52YXIgdXBkYXRlID0gcmVxdWlyZShcIiEuLi8uLi8uLi9ub2RlX21vZHVsZXMvc3R5bGUtbG9hZGVyL2xpYi9hZGRTdHlsZXMuanNcIikoY29udGVudCwgb3B0aW9ucyk7XG5cbmlmKGNvbnRlbnQubG9jYWxzKSBtb2R1bGUuZXhwb3J0cyA9IGNvbnRlbnQubG9jYWxzO1xuXG5pZihtb2R1bGUuaG90KSB7XG5cdG1vZHVsZS5ob3QuYWNjZXB0KFwiISEuLi8uLi8uLi9ub2RlX21vZHVsZXMvY3NzLWxvYWRlci9pbmRleC5qcyEuLi8uLi8uLi9ub2RlX21vZHVsZXMvc2Fzcy1sb2FkZXIvbGliL2xvYWRlci5qcyEuL0xpc3RDb21wb25lbnQuc2Nzc1wiLCBmdW5jdGlvbigpIHtcblx0XHR2YXIgbmV3Q29udGVudCA9IHJlcXVpcmUoXCIhIS4uLy4uLy4uL25vZGVfbW9kdWxlcy9jc3MtbG9hZGVyL2luZGV4LmpzIS4uLy4uLy4uL25vZGVfbW9kdWxlcy9zYXNzLWxvYWRlci9saWIvbG9hZGVyLmpzIS4vTGlzdENvbXBvbmVudC5zY3NzXCIpO1xuXG5cdFx0aWYodHlwZW9mIG5ld0NvbnRlbnQgPT09ICdzdHJpbmcnKSBuZXdDb250ZW50ID0gW1ttb2R1bGUuaWQsIG5ld0NvbnRlbnQsICcnXV07XG5cblx0XHR2YXIgbG9jYWxzID0gKGZ1bmN0aW9uKGEsIGIpIHtcblx0XHRcdHZhciBrZXksIGlkeCA9IDA7XG5cblx0XHRcdGZvcihrZXkgaW4gYSkge1xuXHRcdFx0XHRpZighYiB8fCBhW2tleV0gIT09IGJba2V5XSkgcmV0dXJuIGZhbHNlO1xuXHRcdFx0XHRpZHgrKztcblx0XHRcdH1cblxuXHRcdFx0Zm9yKGtleSBpbiBiKSBpZHgtLTtcblxuXHRcdFx0cmV0dXJuIGlkeCA9PT0gMDtcblx0XHR9KGNvbnRlbnQubG9jYWxzLCBuZXdDb250ZW50LmxvY2FscykpO1xuXG5cdFx0aWYoIWxvY2FscykgdGhyb3cgbmV3IEVycm9yKCdBYm9ydGluZyBDU1MgSE1SIGR1ZSB0byBjaGFuZ2VkIGNzcy1tb2R1bGVzIGxvY2Fscy4nKTtcblxuXHRcdHVwZGF0ZShuZXdDb250ZW50KTtcblx0fSk7XG5cblx0bW9kdWxlLmhvdC5kaXNwb3NlKGZ1bmN0aW9uKCkgeyB1cGRhdGUoKTsgfSk7XG59IiwibW9kdWxlLmV4cG9ydHMgPSBfX3dlYnBhY2tfcHVibGljX3BhdGhfXyArIFwiY2NlNzU3ZWI4NGRjNDk3YjBmNWEzYTZmMjk4YzNmOWUucG5nXCI7IiwiaW1wb3J0IFJlYWN0IGZyb20gJ3JlYWN0JztcbmltcG9ydCB7IGNvbm5lY3QgfSBmcm9tICdyZWFjdC1yZWR1eCc7XG5pbXBvcnQgeyByZXF1ZXN0TGlzdCB9IGZyb20gJ0FjdGlvbnMvaW5kZXgnXG5pbXBvcnQgSW1hZ2UgZnJvbSAnLi9JbWFnZSdcbmltcG9ydCAnLi9MaXN0Q29tcG9uZW50LnNjc3MnXG5pbXBvcnQgTGlzdEl0ZW0gZnJvbSAnLi9MaXN0SXRlbSdcblxuY2xhc3MgTGlzdENvbXBvbmVudCBleHRlbmRzIFJlYWN0LkNvbXBvbmVudCB7XG4gIGNvbnN0cnVjdG9yKHByb3BzKSB7XG4gICAgc3VwZXIocHJvcHMpXG4gIH1cblxuICByZW5kZXIoKSB7XG4gICAgY29uc3Qge1xuICAgICAgcmVxdWVzdExpc3QsXG4gICAgICBpc1JldHJpZXZpbmdEYXRhLFxuICAgICAgbGlzdFxuICAgIH0gPSB0aGlzLnByb3BzXG5cbiAgICBpZighbGlzdC5sZW5ndGgpIHtcbiAgICAgIHJldHVybiAoXG4gICAgICAgIDxkaXYgaWQ9J2xpc3QtY29udGFpbmVyJz5cbiAgICAgICAgICA8cD5ObyByZXN1bHRzIHlldCwgdGltZSB0byBoaXQgdGhlIGZvcm0gITwvcD5cbiAgICAgICAgPC9kaXY+XG4gICAgICApXG4gICAgfVxuXG4gICAgaWYoaXNSZXRyaWV2aW5nRGF0YSkge1xuICAgICAgcmV0dXJuKFxuICAgICAgICA8ZGl2IGlkPSdsaXN0LWNvbnRhaW5lcic+XG4gICAgICAgICAgPHA+UmV0cmlldmluZyBkYXRhIGZyb20gQVBJLi4uPC9wPlxuICAgICAgICA8L2Rpdj5cbiAgICAgIClcbiAgICB9XG5cbiAgICByZXR1cm4oXG4gICAgICA8ZGl2IGlkPSdsaXN0LWNvbnRhaW5lcic+XG4gICAgICAgIHtsaXN0Lm1hcChpdGVtID0+IDxMaXN0SXRlbSBrZXk9e2l0ZW0uaWR9IHsuLi5pdGVtfSAvPil9XG4gICAgICA8L2Rpdj5cbiAgICApXG4gIH1cblxuICBjb21wb25lbnREaWRNb3VudCgpIHtcbiAgICB0aGlzLnByb3BzLnJlcXVlc3RMaXN0KHtmcm9tOiAwLCB0bzogMTAwMDAwfSwgJ2hvdXNlJylcbiAgfVxufVxuXG5jb25zdCBtYXBTdGF0ZVRvUHJvcHMgPSBzdGF0ZSA9PiB7XG4gIHJldHVybiB7XG4gICAgaXNSZXRyaWV2aW5nRGF0YTogc3RhdGUuaXNSZXRyaWV2aW5nRGF0YSxcbiAgICBsaXN0OiBzdGF0ZS5saXN0XG4gIH1cbn1cblxuY29uc3QgbWFwRGlzcGF0Y2hUb1Byb3BzID0gZGlzcGF0Y2ggPT4ge1xuICByZXR1cm4ge1xuICAgIHJlcXVlc3RMaXN0OiAocHJpY2UsIHR5cGUpID0+IGRpc3BhdGNoKHJlcXVlc3RMaXN0KHByaWNlLCB0eXBlKSlcbiAgfVxufVxuXG5leHBvcnQgZGVmYXVsdCBjb25uZWN0KFxuICBtYXBTdGF0ZVRvUHJvcHMsXG4gIG1hcERpc3BhdGNoVG9Qcm9wcylcbiAgKExpc3RDb21wb25lbnQpIiwibW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbihvcmlnaW5hbE1vZHVsZSkge1xyXG5cdGlmICghb3JpZ2luYWxNb2R1bGUud2VicGFja1BvbHlmaWxsKSB7XHJcblx0XHR2YXIgbW9kdWxlID0gT2JqZWN0LmNyZWF0ZShvcmlnaW5hbE1vZHVsZSk7XHJcblx0XHQvLyBtb2R1bGUucGFyZW50ID0gdW5kZWZpbmVkIGJ5IGRlZmF1bHRcclxuXHRcdGlmICghbW9kdWxlLmNoaWxkcmVuKSBtb2R1bGUuY2hpbGRyZW4gPSBbXTtcclxuXHRcdE9iamVjdC5kZWZpbmVQcm9wZXJ0eShtb2R1bGUsIFwibG9hZGVkXCIsIHtcclxuXHRcdFx0ZW51bWVyYWJsZTogdHJ1ZSxcclxuXHRcdFx0Z2V0OiBmdW5jdGlvbigpIHtcclxuXHRcdFx0XHRyZXR1cm4gbW9kdWxlLmw7XHJcblx0XHRcdH1cclxuXHRcdH0pO1xyXG5cdFx0T2JqZWN0LmRlZmluZVByb3BlcnR5KG1vZHVsZSwgXCJpZFwiLCB7XHJcblx0XHRcdGVudW1lcmFibGU6IHRydWUsXHJcblx0XHRcdGdldDogZnVuY3Rpb24oKSB7XHJcblx0XHRcdFx0cmV0dXJuIG1vZHVsZS5pO1xyXG5cdFx0XHR9XHJcblx0XHR9KTtcclxuXHRcdE9iamVjdC5kZWZpbmVQcm9wZXJ0eShtb2R1bGUsIFwiZXhwb3J0c1wiLCB7XHJcblx0XHRcdGVudW1lcmFibGU6IHRydWVcclxuXHRcdH0pO1xyXG5cdFx0bW9kdWxlLndlYnBhY2tQb2x5ZmlsbCA9IDE7XHJcblx0fVxyXG5cdHJldHVybiBtb2R1bGU7XHJcbn07XHJcbiIsIi8qKlxuICogQ29weXJpZ2h0IChjKSAyMDEzLXByZXNlbnQsIEZhY2Vib29rLCBJbmMuXG4gKlxuICogVGhpcyBzb3VyY2UgY29kZSBpcyBsaWNlbnNlZCB1bmRlciB0aGUgTUlUIGxpY2Vuc2UgZm91bmQgaW4gdGhlXG4gKiBMSUNFTlNFIGZpbGUgaW4gdGhlIHJvb3QgZGlyZWN0b3J5IG9mIHRoaXMgc291cmNlIHRyZWUuXG4gKi9cblxuJ3VzZSBzdHJpY3QnO1xuXG52YXIgUmVhY3RQcm9wVHlwZXNTZWNyZXQgPSAnU0VDUkVUX0RPX05PVF9QQVNTX1RISVNfT1JfWU9VX1dJTExfQkVfRklSRUQnO1xuXG5tb2R1bGUuZXhwb3J0cyA9IFJlYWN0UHJvcFR5cGVzU2VjcmV0O1xuIiwiLyoqXG4gKiBDb3B5cmlnaHQgKGMpIDIwMTMtcHJlc2VudCwgRmFjZWJvb2ssIEluYy5cbiAqXG4gKiBUaGlzIHNvdXJjZSBjb2RlIGlzIGxpY2Vuc2VkIHVuZGVyIHRoZSBNSVQgbGljZW5zZSBmb3VuZCBpbiB0aGVcbiAqIExJQ0VOU0UgZmlsZSBpbiB0aGUgcm9vdCBkaXJlY3Rvcnkgb2YgdGhpcyBzb3VyY2UgdHJlZS5cbiAqL1xuXG4ndXNlIHN0cmljdCc7XG5cbnZhciBlbXB0eUZ1bmN0aW9uID0gcmVxdWlyZSgnZmJqcy9saWIvZW1wdHlGdW5jdGlvbicpO1xudmFyIGludmFyaWFudCA9IHJlcXVpcmUoJ2ZianMvbGliL2ludmFyaWFudCcpO1xudmFyIFJlYWN0UHJvcFR5cGVzU2VjcmV0ID0gcmVxdWlyZSgnLi9saWIvUmVhY3RQcm9wVHlwZXNTZWNyZXQnKTtcblxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbigpIHtcbiAgZnVuY3Rpb24gc2hpbShwcm9wcywgcHJvcE5hbWUsIGNvbXBvbmVudE5hbWUsIGxvY2F0aW9uLCBwcm9wRnVsbE5hbWUsIHNlY3JldCkge1xuICAgIGlmIChzZWNyZXQgPT09IFJlYWN0UHJvcFR5cGVzU2VjcmV0KSB7XG4gICAgICAvLyBJdCBpcyBzdGlsbCBzYWZlIHdoZW4gY2FsbGVkIGZyb20gUmVhY3QuXG4gICAgICByZXR1cm47XG4gICAgfVxuICAgIGludmFyaWFudChcbiAgICAgIGZhbHNlLFxuICAgICAgJ0NhbGxpbmcgUHJvcFR5cGVzIHZhbGlkYXRvcnMgZGlyZWN0bHkgaXMgbm90IHN1cHBvcnRlZCBieSB0aGUgYHByb3AtdHlwZXNgIHBhY2thZ2UuICcgK1xuICAgICAgJ1VzZSBQcm9wVHlwZXMuY2hlY2tQcm9wVHlwZXMoKSB0byBjYWxsIHRoZW0uICcgK1xuICAgICAgJ1JlYWQgbW9yZSBhdCBodHRwOi8vZmIubWUvdXNlLWNoZWNrLXByb3AtdHlwZXMnXG4gICAgKTtcbiAgfTtcbiAgc2hpbS5pc1JlcXVpcmVkID0gc2hpbTtcbiAgZnVuY3Rpb24gZ2V0U2hpbSgpIHtcbiAgICByZXR1cm4gc2hpbTtcbiAgfTtcbiAgLy8gSW1wb3J0YW50IVxuICAvLyBLZWVwIHRoaXMgbGlzdCBpbiBzeW5jIHdpdGggcHJvZHVjdGlvbiB2ZXJzaW9uIGluIGAuL2ZhY3RvcnlXaXRoVHlwZUNoZWNrZXJzLmpzYC5cbiAgdmFyIFJlYWN0UHJvcFR5cGVzID0ge1xuICAgIGFycmF5OiBzaGltLFxuICAgIGJvb2w6IHNoaW0sXG4gICAgZnVuYzogc2hpbSxcbiAgICBudW1iZXI6IHNoaW0sXG4gICAgb2JqZWN0OiBzaGltLFxuICAgIHN0cmluZzogc2hpbSxcbiAgICBzeW1ib2w6IHNoaW0sXG5cbiAgICBhbnk6IHNoaW0sXG4gICAgYXJyYXlPZjogZ2V0U2hpbSxcbiAgICBlbGVtZW50OiBzaGltLFxuICAgIGluc3RhbmNlT2Y6IGdldFNoaW0sXG4gICAgbm9kZTogc2hpbSxcbiAgICBvYmplY3RPZjogZ2V0U2hpbSxcbiAgICBvbmVPZjogZ2V0U2hpbSxcbiAgICBvbmVPZlR5cGU6IGdldFNoaW0sXG4gICAgc2hhcGU6IGdldFNoaW0sXG4gICAgZXhhY3Q6IGdldFNoaW1cbiAgfTtcblxuICBSZWFjdFByb3BUeXBlcy5jaGVja1Byb3BUeXBlcyA9IGVtcHR5RnVuY3Rpb247XG4gIFJlYWN0UHJvcFR5cGVzLlByb3BUeXBlcyA9IFJlYWN0UHJvcFR5cGVzO1xuXG4gIHJldHVybiBSZWFjdFByb3BUeXBlcztcbn07XG4iLCJpbXBvcnQgUmVhY3QgZnJvbSAncmVhY3QnXG5pbXBvcnQgeyBjb25uZWN0IH0gZnJvbSAncmVhY3QtcmVkdXgnXG5pbXBvcnQgTGlzdENvbXBvbmVudCBmcm9tICcuL0xpc3RDb21wb25lbnQnXG5pbXBvcnQgSW5wdXRDb21wb25lbnQgZnJvbSAnLi9JbnB1dENvbXBvbmVudCdcbmltcG9ydCAnLi9BcHAuc2NzcydcbmltcG9ydCByZWFjdEljb24gZnJvbSAnLi9yZWFjdEljb24ucG5nJ1xuaW1wb3J0IFNob3dQcm9wZXJ0eUNvbXBvbmVudCBmcm9tICcuL1Nob3dQcm9wZXJ0eUNvbXBvbmVudCdcblxuY2xhc3MgQXBwIGV4dGVuZHMgUmVhY3QuQ29tcG9uZW50IHtcbiAgY29uc3RydWN0b3IocHJvcHMpIHtcbiAgICBzdXBlcihwcm9wcylcbiAgfVxuXG4gIHJlbmRlcigpIHtcbiAgICBjb25zdCB7IGlzUHJvcGVydHlQYW5lbE9wZW4gfSA9IHRoaXMucHJvcHNcbiAgICByZXR1cm4oXG4gICAgICA8ZGl2IGlkPSdhcHAtY29udGFpbmVyJz5cbiAgICAgICAge2lzUHJvcGVydHlQYW5lbE9wZW4gPyA8U2hvd1Byb3BlcnR5Q29tcG9uZW50IC8+IDogbnVsbH1cbiAgICAgICAgPGgxIGlkPSdiYW5uZXInID48aW1nIHNyYz17cmVhY3RJY29ufSAvPkltbW8tQXBwPC9oMT5cbiAgICAgICAgPElucHV0Q29tcG9uZW50IC8+XG4gICAgICAgIDxMaXN0Q29tcG9uZW50IC8+XG4gICAgICA8L2Rpdj5cbiAgICApXG4gIH1cbn1cblxuY29uc3QgbWFwU3RhdGVUb1Byb3BzID0gc3RhdGUgPT4ge1xuICByZXR1cm4ge1xuICAgIGlzUHJvcGVydHlQYW5lbE9wZW46IHN0YXRlLmlzUHJvcGVydHlQYW5lbE9wZW5cbiAgfVxufVxuXG5leHBvcnQgZGVmYXVsdCBjb25uZWN0KG1hcFN0YXRlVG9Qcm9wcykoQXBwKTsiLCIndXNlIHN0cmljdCc7XG5cbi8qKlxuICogQ29weXJpZ2h0IChjKSAyMDEzLXByZXNlbnQsIEZhY2Vib29rLCBJbmMuXG4gKlxuICogVGhpcyBzb3VyY2UgY29kZSBpcyBsaWNlbnNlZCB1bmRlciB0aGUgTUlUIGxpY2Vuc2UgZm91bmQgaW4gdGhlXG4gKiBMSUNFTlNFIGZpbGUgaW4gdGhlIHJvb3QgZGlyZWN0b3J5IG9mIHRoaXMgc291cmNlIHRyZWUuXG4gKlxuICogQHR5cGVjaGVja3NcbiAqL1xuXG4vKipcbiAqIEBwYXJhbSB7Kn0gb2JqZWN0IFRoZSBvYmplY3QgdG8gY2hlY2suXG4gKiBAcmV0dXJuIHtib29sZWFufSBXaGV0aGVyIG9yIG5vdCB0aGUgb2JqZWN0IGlzIGEgRE9NIG5vZGUuXG4gKi9cbmZ1bmN0aW9uIGlzTm9kZShvYmplY3QpIHtcbiAgdmFyIGRvYyA9IG9iamVjdCA/IG9iamVjdC5vd25lckRvY3VtZW50IHx8IG9iamVjdCA6IGRvY3VtZW50O1xuICB2YXIgZGVmYXVsdFZpZXcgPSBkb2MuZGVmYXVsdFZpZXcgfHwgd2luZG93O1xuICByZXR1cm4gISEob2JqZWN0ICYmICh0eXBlb2YgZGVmYXVsdFZpZXcuTm9kZSA9PT0gJ2Z1bmN0aW9uJyA/IG9iamVjdCBpbnN0YW5jZW9mIGRlZmF1bHRWaWV3Lk5vZGUgOiB0eXBlb2Ygb2JqZWN0ID09PSAnb2JqZWN0JyAmJiB0eXBlb2Ygb2JqZWN0Lm5vZGVUeXBlID09PSAnbnVtYmVyJyAmJiB0eXBlb2Ygb2JqZWN0Lm5vZGVOYW1lID09PSAnc3RyaW5nJykpO1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IGlzTm9kZTsiLCIndXNlIHN0cmljdCc7XG5cbi8qKlxuICogQ29weXJpZ2h0IChjKSAyMDEzLXByZXNlbnQsIEZhY2Vib29rLCBJbmMuXG4gKlxuICogVGhpcyBzb3VyY2UgY29kZSBpcyBsaWNlbnNlZCB1bmRlciB0aGUgTUlUIGxpY2Vuc2UgZm91bmQgaW4gdGhlXG4gKiBMSUNFTlNFIGZpbGUgaW4gdGhlIHJvb3QgZGlyZWN0b3J5IG9mIHRoaXMgc291cmNlIHRyZWUuXG4gKlxuICogQHR5cGVjaGVja3NcbiAqL1xuXG52YXIgaXNOb2RlID0gcmVxdWlyZSgnLi9pc05vZGUnKTtcblxuLyoqXG4gKiBAcGFyYW0geyp9IG9iamVjdCBUaGUgb2JqZWN0IHRvIGNoZWNrLlxuICogQHJldHVybiB7Ym9vbGVhbn0gV2hldGhlciBvciBub3QgdGhlIG9iamVjdCBpcyBhIERPTSB0ZXh0IG5vZGUuXG4gKi9cbmZ1bmN0aW9uIGlzVGV4dE5vZGUob2JqZWN0KSB7XG4gIHJldHVybiBpc05vZGUob2JqZWN0KSAmJiBvYmplY3Qubm9kZVR5cGUgPT0gMztcbn1cblxubW9kdWxlLmV4cG9ydHMgPSBpc1RleHROb2RlOyIsIid1c2Ugc3RyaWN0JztcblxuLyoqXG4gKiBDb3B5cmlnaHQgKGMpIDIwMTMtcHJlc2VudCwgRmFjZWJvb2ssIEluYy5cbiAqXG4gKiBUaGlzIHNvdXJjZSBjb2RlIGlzIGxpY2Vuc2VkIHVuZGVyIHRoZSBNSVQgbGljZW5zZSBmb3VuZCBpbiB0aGVcbiAqIExJQ0VOU0UgZmlsZSBpbiB0aGUgcm9vdCBkaXJlY3Rvcnkgb2YgdGhpcyBzb3VyY2UgdHJlZS5cbiAqXG4gKiBcbiAqL1xuXG52YXIgaXNUZXh0Tm9kZSA9IHJlcXVpcmUoJy4vaXNUZXh0Tm9kZScpO1xuXG4vKmVzbGludC1kaXNhYmxlIG5vLWJpdHdpc2UgKi9cblxuLyoqXG4gKiBDaGVja3MgaWYgYSBnaXZlbiBET00gbm9kZSBjb250YWlucyBvciBpcyBhbm90aGVyIERPTSBub2RlLlxuICovXG5mdW5jdGlvbiBjb250YWluc05vZGUob3V0ZXJOb2RlLCBpbm5lck5vZGUpIHtcbiAgaWYgKCFvdXRlck5vZGUgfHwgIWlubmVyTm9kZSkge1xuICAgIHJldHVybiBmYWxzZTtcbiAgfSBlbHNlIGlmIChvdXRlck5vZGUgPT09IGlubmVyTm9kZSkge1xuICAgIHJldHVybiB0cnVlO1xuICB9IGVsc2UgaWYgKGlzVGV4dE5vZGUob3V0ZXJOb2RlKSkge1xuICAgIHJldHVybiBmYWxzZTtcbiAgfSBlbHNlIGlmIChpc1RleHROb2RlKGlubmVyTm9kZSkpIHtcbiAgICByZXR1cm4gY29udGFpbnNOb2RlKG91dGVyTm9kZSwgaW5uZXJOb2RlLnBhcmVudE5vZGUpO1xuICB9IGVsc2UgaWYgKCdjb250YWlucycgaW4gb3V0ZXJOb2RlKSB7XG4gICAgcmV0dXJuIG91dGVyTm9kZS5jb250YWlucyhpbm5lck5vZGUpO1xuICB9IGVsc2UgaWYgKG91dGVyTm9kZS5jb21wYXJlRG9jdW1lbnRQb3NpdGlvbikge1xuICAgIHJldHVybiAhIShvdXRlck5vZGUuY29tcGFyZURvY3VtZW50UG9zaXRpb24oaW5uZXJOb2RlKSAmIDE2KTtcbiAgfSBlbHNlIHtcbiAgICByZXR1cm4gZmFsc2U7XG4gIH1cbn1cblxubW9kdWxlLmV4cG9ydHMgPSBjb250YWluc05vZGU7IiwiLyoqXG4gKiBDb3B5cmlnaHQgKGMpIDIwMTMtcHJlc2VudCwgRmFjZWJvb2ssIEluYy5cbiAqXG4gKiBUaGlzIHNvdXJjZSBjb2RlIGlzIGxpY2Vuc2VkIHVuZGVyIHRoZSBNSVQgbGljZW5zZSBmb3VuZCBpbiB0aGVcbiAqIExJQ0VOU0UgZmlsZSBpbiB0aGUgcm9vdCBkaXJlY3Rvcnkgb2YgdGhpcyBzb3VyY2UgdHJlZS5cbiAqXG4gKiBAdHlwZWNoZWNrc1xuICogXG4gKi9cblxuLyplc2xpbnQtZGlzYWJsZSBuby1zZWxmLWNvbXBhcmUgKi9cblxuJ3VzZSBzdHJpY3QnO1xuXG52YXIgaGFzT3duUHJvcGVydHkgPSBPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5O1xuXG4vKipcbiAqIGlubGluZWQgT2JqZWN0LmlzIHBvbHlmaWxsIHRvIGF2b2lkIHJlcXVpcmluZyBjb25zdW1lcnMgc2hpcCB0aGVpciBvd25cbiAqIGh0dHBzOi8vZGV2ZWxvcGVyLm1vemlsbGEub3JnL2VuLVVTL2RvY3MvV2ViL0phdmFTY3JpcHQvUmVmZXJlbmNlL0dsb2JhbF9PYmplY3RzL09iamVjdC9pc1xuICovXG5mdW5jdGlvbiBpcyh4LCB5KSB7XG4gIC8vIFNhbWVWYWx1ZSBhbGdvcml0aG1cbiAgaWYgKHggPT09IHkpIHtcbiAgICAvLyBTdGVwcyAxLTUsIDctMTBcbiAgICAvLyBTdGVwcyA2LmItNi5lOiArMCAhPSAtMFxuICAgIC8vIEFkZGVkIHRoZSBub256ZXJvIHkgY2hlY2sgdG8gbWFrZSBGbG93IGhhcHB5LCBidXQgaXQgaXMgcmVkdW5kYW50XG4gICAgcmV0dXJuIHggIT09IDAgfHwgeSAhPT0gMCB8fCAxIC8geCA9PT0gMSAvIHk7XG4gIH0gZWxzZSB7XG4gICAgLy8gU3RlcCA2LmE6IE5hTiA9PSBOYU5cbiAgICByZXR1cm4geCAhPT0geCAmJiB5ICE9PSB5O1xuICB9XG59XG5cbi8qKlxuICogUGVyZm9ybXMgZXF1YWxpdHkgYnkgaXRlcmF0aW5nIHRocm91Z2gga2V5cyBvbiBhbiBvYmplY3QgYW5kIHJldHVybmluZyBmYWxzZVxuICogd2hlbiBhbnkga2V5IGhhcyB2YWx1ZXMgd2hpY2ggYXJlIG5vdCBzdHJpY3RseSBlcXVhbCBiZXR3ZWVuIHRoZSBhcmd1bWVudHMuXG4gKiBSZXR1cm5zIHRydWUgd2hlbiB0aGUgdmFsdWVzIG9mIGFsbCBrZXlzIGFyZSBzdHJpY3RseSBlcXVhbC5cbiAqL1xuZnVuY3Rpb24gc2hhbGxvd0VxdWFsKG9iakEsIG9iakIpIHtcbiAgaWYgKGlzKG9iakEsIG9iakIpKSB7XG4gICAgcmV0dXJuIHRydWU7XG4gIH1cblxuICBpZiAodHlwZW9mIG9iakEgIT09ICdvYmplY3QnIHx8IG9iakEgPT09IG51bGwgfHwgdHlwZW9mIG9iakIgIT09ICdvYmplY3QnIHx8IG9iakIgPT09IG51bGwpIHtcbiAgICByZXR1cm4gZmFsc2U7XG4gIH1cblxuICB2YXIga2V5c0EgPSBPYmplY3Qua2V5cyhvYmpBKTtcbiAgdmFyIGtleXNCID0gT2JqZWN0LmtleXMob2JqQik7XG5cbiAgaWYgKGtleXNBLmxlbmd0aCAhPT0ga2V5c0IubGVuZ3RoKSB7XG4gICAgcmV0dXJuIGZhbHNlO1xuICB9XG5cbiAgLy8gVGVzdCBmb3IgQSdzIGtleXMgZGlmZmVyZW50IGZyb20gQi5cbiAgZm9yICh2YXIgaSA9IDA7IGkgPCBrZXlzQS5sZW5ndGg7IGkrKykge1xuICAgIGlmICghaGFzT3duUHJvcGVydHkuY2FsbChvYmpCLCBrZXlzQVtpXSkgfHwgIWlzKG9iakFba2V5c0FbaV1dLCBvYmpCW2tleXNBW2ldXSkpIHtcbiAgICAgIHJldHVybiBmYWxzZTtcbiAgICB9XG4gIH1cblxuICByZXR1cm4gdHJ1ZTtcbn1cblxubW9kdWxlLmV4cG9ydHMgPSBzaGFsbG93RXF1YWw7IiwiJ3VzZSBzdHJpY3QnO1xuXG4vKipcbiAqIENvcHlyaWdodCAoYykgMjAxMy1wcmVzZW50LCBGYWNlYm9vaywgSW5jLlxuICpcbiAqIFRoaXMgc291cmNlIGNvZGUgaXMgbGljZW5zZWQgdW5kZXIgdGhlIE1JVCBsaWNlbnNlIGZvdW5kIGluIHRoZVxuICogTElDRU5TRSBmaWxlIGluIHRoZSByb290IGRpcmVjdG9yeSBvZiB0aGlzIHNvdXJjZSB0cmVlLlxuICpcbiAqIEB0eXBlY2hlY2tzXG4gKi9cblxuLyogZXNsaW50LWRpc2FibGUgZmItd3d3L3R5cGVvZi11bmRlZmluZWQgKi9cblxuLyoqXG4gKiBTYW1lIGFzIGRvY3VtZW50LmFjdGl2ZUVsZW1lbnQgYnV0IHdyYXBzIGluIGEgdHJ5LWNhdGNoIGJsb2NrLiBJbiBJRSBpdCBpc1xuICogbm90IHNhZmUgdG8gY2FsbCBkb2N1bWVudC5hY3RpdmVFbGVtZW50IGlmIHRoZXJlIGlzIG5vdGhpbmcgZm9jdXNlZC5cbiAqXG4gKiBUaGUgYWN0aXZlRWxlbWVudCB3aWxsIGJlIG51bGwgb25seSBpZiB0aGUgZG9jdW1lbnQgb3IgZG9jdW1lbnQgYm9keSBpcyBub3RcbiAqIHlldCBkZWZpbmVkLlxuICpcbiAqIEBwYXJhbSB7P0RPTURvY3VtZW50fSBkb2MgRGVmYXVsdHMgdG8gY3VycmVudCBkb2N1bWVudC5cbiAqIEByZXR1cm4gez9ET01FbGVtZW50fVxuICovXG5mdW5jdGlvbiBnZXRBY3RpdmVFbGVtZW50KGRvYykgLyo/RE9NRWxlbWVudCove1xuICBkb2MgPSBkb2MgfHwgKHR5cGVvZiBkb2N1bWVudCAhPT0gJ3VuZGVmaW5lZCcgPyBkb2N1bWVudCA6IHVuZGVmaW5lZCk7XG4gIGlmICh0eXBlb2YgZG9jID09PSAndW5kZWZpbmVkJykge1xuICAgIHJldHVybiBudWxsO1xuICB9XG4gIHRyeSB7XG4gICAgcmV0dXJuIGRvYy5hY3RpdmVFbGVtZW50IHx8IGRvYy5ib2R5O1xuICB9IGNhdGNoIChlKSB7XG4gICAgcmV0dXJuIGRvYy5ib2R5O1xuICB9XG59XG5cbm1vZHVsZS5leHBvcnRzID0gZ2V0QWN0aXZlRWxlbWVudDsiLCIvKipcbiAqIENvcHlyaWdodCAoYykgMjAxMy1wcmVzZW50LCBGYWNlYm9vaywgSW5jLlxuICpcbiAqIFRoaXMgc291cmNlIGNvZGUgaXMgbGljZW5zZWQgdW5kZXIgdGhlIE1JVCBsaWNlbnNlIGZvdW5kIGluIHRoZVxuICogTElDRU5TRSBmaWxlIGluIHRoZSByb290IGRpcmVjdG9yeSBvZiB0aGlzIHNvdXJjZSB0cmVlLlxuICpcbiAqL1xuXG4ndXNlIHN0cmljdCc7XG5cbnZhciBjYW5Vc2VET00gPSAhISh0eXBlb2Ygd2luZG93ICE9PSAndW5kZWZpbmVkJyAmJiB3aW5kb3cuZG9jdW1lbnQgJiYgd2luZG93LmRvY3VtZW50LmNyZWF0ZUVsZW1lbnQpO1xuXG4vKipcbiAqIFNpbXBsZSwgbGlnaHR3ZWlnaHQgbW9kdWxlIGFzc2lzdGluZyB3aXRoIHRoZSBkZXRlY3Rpb24gYW5kIGNvbnRleHQgb2ZcbiAqIFdvcmtlci4gSGVscHMgYXZvaWQgY2lyY3VsYXIgZGVwZW5kZW5jaWVzIGFuZCBhbGxvd3MgY29kZSB0byByZWFzb24gYWJvdXRcbiAqIHdoZXRoZXIgb3Igbm90IHRoZXkgYXJlIGluIGEgV29ya2VyLCBldmVuIGlmIHRoZXkgbmV2ZXIgaW5jbHVkZSB0aGUgbWFpblxuICogYFJlYWN0V29ya2VyYCBkZXBlbmRlbmN5LlxuICovXG52YXIgRXhlY3V0aW9uRW52aXJvbm1lbnQgPSB7XG5cbiAgY2FuVXNlRE9NOiBjYW5Vc2VET00sXG5cbiAgY2FuVXNlV29ya2VyczogdHlwZW9mIFdvcmtlciAhPT0gJ3VuZGVmaW5lZCcsXG5cbiAgY2FuVXNlRXZlbnRMaXN0ZW5lcnM6IGNhblVzZURPTSAmJiAhISh3aW5kb3cuYWRkRXZlbnRMaXN0ZW5lciB8fCB3aW5kb3cuYXR0YWNoRXZlbnQpLFxuXG4gIGNhblVzZVZpZXdwb3J0OiBjYW5Vc2VET00gJiYgISF3aW5kb3cuc2NyZWVuLFxuXG4gIGlzSW5Xb3JrZXI6ICFjYW5Vc2VET00gLy8gRm9yIG5vdywgdGhpcyBpcyB0cnVlIC0gbWlnaHQgY2hhbmdlIGluIHRoZSBmdXR1cmUuXG5cbn07XG5cbm1vZHVsZS5leHBvcnRzID0gRXhlY3V0aW9uRW52aXJvbm1lbnQ7IiwiLyoqIEBsaWNlbnNlIFJlYWN0IHYxNi40LjBcbiAqIHJlYWN0LWRvbS5wcm9kdWN0aW9uLm1pbi5qc1xuICpcbiAqIENvcHlyaWdodCAoYykgMjAxMy1wcmVzZW50LCBGYWNlYm9vaywgSW5jLlxuICpcbiAqIFRoaXMgc291cmNlIGNvZGUgaXMgbGljZW5zZWQgdW5kZXIgdGhlIE1JVCBsaWNlbnNlIGZvdW5kIGluIHRoZVxuICogTElDRU5TRSBmaWxlIGluIHRoZSByb290IGRpcmVjdG9yeSBvZiB0aGlzIHNvdXJjZSB0cmVlLlxuICovXG5cbi8qXG4gTW9kZXJuaXpyIDMuMC4wcHJlIChDdXN0b20gQnVpbGQpIHwgTUlUXG4qL1xuJ3VzZSBzdHJpY3QnO3ZhciBhYT1yZXF1aXJlKFwiZmJqcy9saWIvaW52YXJpYW50XCIpLGNhPXJlcXVpcmUoXCJyZWFjdFwiKSxtPXJlcXVpcmUoXCJmYmpzL2xpYi9FeGVjdXRpb25FbnZpcm9ubWVudFwiKSxwPXJlcXVpcmUoXCJvYmplY3QtYXNzaWduXCIpLHY9cmVxdWlyZShcImZianMvbGliL2VtcHR5RnVuY3Rpb25cIiksZGE9cmVxdWlyZShcImZianMvbGliL2dldEFjdGl2ZUVsZW1lbnRcIiksZWE9cmVxdWlyZShcImZianMvbGliL3NoYWxsb3dFcXVhbFwiKSxmYT1yZXF1aXJlKFwiZmJqcy9saWIvY29udGFpbnNOb2RlXCIpLGhhPXJlcXVpcmUoXCJmYmpzL2xpYi9lbXB0eU9iamVjdFwiKTtcbmZ1bmN0aW9uIEEoYSl7Zm9yKHZhciBiPWFyZ3VtZW50cy5sZW5ndGgtMSxjPVwiaHR0cHM6Ly9yZWFjdGpzLm9yZy9kb2NzL2Vycm9yLWRlY29kZXIuaHRtbD9pbnZhcmlhbnQ9XCIrYSxkPTA7ZDxiO2QrKyljKz1cIiZhcmdzW109XCIrZW5jb2RlVVJJQ29tcG9uZW50KGFyZ3VtZW50c1tkKzFdKTthYSghMSxcIk1pbmlmaWVkIFJlYWN0IGVycm9yICNcIithK1wiOyB2aXNpdCAlcyBmb3IgdGhlIGZ1bGwgbWVzc2FnZSBvciB1c2UgdGhlIG5vbi1taW5pZmllZCBkZXYgZW52aXJvbm1lbnQgZm9yIGZ1bGwgZXJyb3JzIGFuZCBhZGRpdGlvbmFsIGhlbHBmdWwgd2FybmluZ3MuIFwiLGMpfWNhP3ZvaWQgMDpBKFwiMjI3XCIpO1xuZnVuY3Rpb24gaWEoYSxiLGMsZCxlLGYsZyxoLGspe3RoaXMuX2hhc0NhdWdodEVycm9yPSExO3RoaXMuX2NhdWdodEVycm9yPW51bGw7dmFyIG49QXJyYXkucHJvdG90eXBlLnNsaWNlLmNhbGwoYXJndW1lbnRzLDMpO3RyeXtiLmFwcGx5KGMsbil9Y2F0Y2gocil7dGhpcy5fY2F1Z2h0RXJyb3I9cix0aGlzLl9oYXNDYXVnaHRFcnJvcj0hMH19XG52YXIgQj17X2NhdWdodEVycm9yOm51bGwsX2hhc0NhdWdodEVycm9yOiExLF9yZXRocm93RXJyb3I6bnVsbCxfaGFzUmV0aHJvd0Vycm9yOiExLGludm9rZUd1YXJkZWRDYWxsYmFjazpmdW5jdGlvbihhLGIsYyxkLGUsZixnLGgsayl7aWEuYXBwbHkoQixhcmd1bWVudHMpfSxpbnZva2VHdWFyZGVkQ2FsbGJhY2tBbmRDYXRjaEZpcnN0RXJyb3I6ZnVuY3Rpb24oYSxiLGMsZCxlLGYsZyxoLGspe0IuaW52b2tlR3VhcmRlZENhbGxiYWNrLmFwcGx5KHRoaXMsYXJndW1lbnRzKTtpZihCLmhhc0NhdWdodEVycm9yKCkpe3ZhciBuPUIuY2xlYXJDYXVnaHRFcnJvcigpO0IuX2hhc1JldGhyb3dFcnJvcnx8KEIuX2hhc1JldGhyb3dFcnJvcj0hMCxCLl9yZXRocm93RXJyb3I9bil9fSxyZXRocm93Q2F1Z2h0RXJyb3I6ZnVuY3Rpb24oKXtyZXR1cm4ga2EuYXBwbHkoQixhcmd1bWVudHMpfSxoYXNDYXVnaHRFcnJvcjpmdW5jdGlvbigpe3JldHVybiBCLl9oYXNDYXVnaHRFcnJvcn0sY2xlYXJDYXVnaHRFcnJvcjpmdW5jdGlvbigpe2lmKEIuX2hhc0NhdWdodEVycm9yKXt2YXIgYT1cbkIuX2NhdWdodEVycm9yO0IuX2NhdWdodEVycm9yPW51bGw7Qi5faGFzQ2F1Z2h0RXJyb3I9ITE7cmV0dXJuIGF9QShcIjE5OFwiKX19O2Z1bmN0aW9uIGthKCl7aWYoQi5faGFzUmV0aHJvd0Vycm9yKXt2YXIgYT1CLl9yZXRocm93RXJyb3I7Qi5fcmV0aHJvd0Vycm9yPW51bGw7Qi5faGFzUmV0aHJvd0Vycm9yPSExO3Rocm93IGE7fX12YXIgbGE9bnVsbCxtYT17fTtcbmZ1bmN0aW9uIG5hKCl7aWYobGEpZm9yKHZhciBhIGluIG1hKXt2YXIgYj1tYVthXSxjPWxhLmluZGV4T2YoYSk7LTE8Yz92b2lkIDA6QShcIjk2XCIsYSk7aWYoIW9hW2NdKXtiLmV4dHJhY3RFdmVudHM/dm9pZCAwOkEoXCI5N1wiLGEpO29hW2NdPWI7Yz1iLmV2ZW50VHlwZXM7Zm9yKHZhciBkIGluIGMpe3ZhciBlPXZvaWQgMDt2YXIgZj1jW2RdLGc9YixoPWQ7cGEuaGFzT3duUHJvcGVydHkoaCk/QShcIjk5XCIsaCk6dm9pZCAwO3BhW2hdPWY7dmFyIGs9Zi5waGFzZWRSZWdpc3RyYXRpb25OYW1lcztpZihrKXtmb3IoZSBpbiBrKWsuaGFzT3duUHJvcGVydHkoZSkmJnFhKGtbZV0sZyxoKTtlPSEwfWVsc2UgZi5yZWdpc3RyYXRpb25OYW1lPyhxYShmLnJlZ2lzdHJhdGlvbk5hbWUsZyxoKSxlPSEwKTplPSExO2U/dm9pZCAwOkEoXCI5OFwiLGQsYSl9fX19XG5mdW5jdGlvbiBxYShhLGIsYyl7cmFbYV0/QShcIjEwMFwiLGEpOnZvaWQgMDtyYVthXT1iO3NhW2FdPWIuZXZlbnRUeXBlc1tjXS5kZXBlbmRlbmNpZXN9dmFyIG9hPVtdLHBhPXt9LHJhPXt9LHNhPXt9O2Z1bmN0aW9uIHRhKGEpe2xhP0EoXCIxMDFcIik6dm9pZCAwO2xhPUFycmF5LnByb3RvdHlwZS5zbGljZS5jYWxsKGEpO25hKCl9ZnVuY3Rpb24gdWEoYSl7dmFyIGI9ITEsYztmb3IoYyBpbiBhKWlmKGEuaGFzT3duUHJvcGVydHkoYykpe3ZhciBkPWFbY107bWEuaGFzT3duUHJvcGVydHkoYykmJm1hW2NdPT09ZHx8KG1hW2NdP0EoXCIxMDJcIixjKTp2b2lkIDAsbWFbY109ZCxiPSEwKX1iJiZuYSgpfVxudmFyIHZhPXtwbHVnaW5zOm9hLGV2ZW50TmFtZURpc3BhdGNoQ29uZmlnczpwYSxyZWdpc3RyYXRpb25OYW1lTW9kdWxlczpyYSxyZWdpc3RyYXRpb25OYW1lRGVwZW5kZW5jaWVzOnNhLHBvc3NpYmxlUmVnaXN0cmF0aW9uTmFtZXM6bnVsbCxpbmplY3RFdmVudFBsdWdpbk9yZGVyOnRhLGluamVjdEV2ZW50UGx1Z2luc0J5TmFtZTp1YX0sd2E9bnVsbCx4YT1udWxsLHlhPW51bGw7ZnVuY3Rpb24gemEoYSxiLGMsZCl7Yj1hLnR5cGV8fFwidW5rbm93bi1ldmVudFwiO2EuY3VycmVudFRhcmdldD15YShkKTtCLmludm9rZUd1YXJkZWRDYWxsYmFja0FuZENhdGNoRmlyc3RFcnJvcihiLGMsdm9pZCAwLGEpO2EuY3VycmVudFRhcmdldD1udWxsfVxuZnVuY3Rpb24gQWEoYSxiKXtudWxsPT1iP0EoXCIzMFwiKTp2b2lkIDA7aWYobnVsbD09YSlyZXR1cm4gYjtpZihBcnJheS5pc0FycmF5KGEpKXtpZihBcnJheS5pc0FycmF5KGIpKXJldHVybiBhLnB1c2guYXBwbHkoYSxiKSxhO2EucHVzaChiKTtyZXR1cm4gYX1yZXR1cm4gQXJyYXkuaXNBcnJheShiKT9bYV0uY29uY2F0KGIpOlthLGJdfWZ1bmN0aW9uIEJhKGEsYixjKXtBcnJheS5pc0FycmF5KGEpP2EuZm9yRWFjaChiLGMpOmEmJmIuY2FsbChjLGEpfXZhciBDYT1udWxsO1xuZnVuY3Rpb24gRGEoYSxiKXtpZihhKXt2YXIgYz1hLl9kaXNwYXRjaExpc3RlbmVycyxkPWEuX2Rpc3BhdGNoSW5zdGFuY2VzO2lmKEFycmF5LmlzQXJyYXkoYykpZm9yKHZhciBlPTA7ZTxjLmxlbmd0aCYmIWEuaXNQcm9wYWdhdGlvblN0b3BwZWQoKTtlKyspemEoYSxiLGNbZV0sZFtlXSk7ZWxzZSBjJiZ6YShhLGIsYyxkKTthLl9kaXNwYXRjaExpc3RlbmVycz1udWxsO2EuX2Rpc3BhdGNoSW5zdGFuY2VzPW51bGw7YS5pc1BlcnNpc3RlbnQoKXx8YS5jb25zdHJ1Y3Rvci5yZWxlYXNlKGEpfX1mdW5jdGlvbiBFYShhKXtyZXR1cm4gRGEoYSwhMCl9ZnVuY3Rpb24gRmEoYSl7cmV0dXJuIERhKGEsITEpfXZhciBHYT17aW5qZWN0RXZlbnRQbHVnaW5PcmRlcjp0YSxpbmplY3RFdmVudFBsdWdpbnNCeU5hbWU6dWF9O1xuZnVuY3Rpb24gSGEoYSxiKXt2YXIgYz1hLnN0YXRlTm9kZTtpZighYylyZXR1cm4gbnVsbDt2YXIgZD13YShjKTtpZighZClyZXR1cm4gbnVsbDtjPWRbYl07YTpzd2l0Y2goYil7Y2FzZSBcIm9uQ2xpY2tcIjpjYXNlIFwib25DbGlja0NhcHR1cmVcIjpjYXNlIFwib25Eb3VibGVDbGlja1wiOmNhc2UgXCJvbkRvdWJsZUNsaWNrQ2FwdHVyZVwiOmNhc2UgXCJvbk1vdXNlRG93blwiOmNhc2UgXCJvbk1vdXNlRG93bkNhcHR1cmVcIjpjYXNlIFwib25Nb3VzZU1vdmVcIjpjYXNlIFwib25Nb3VzZU1vdmVDYXB0dXJlXCI6Y2FzZSBcIm9uTW91c2VVcFwiOmNhc2UgXCJvbk1vdXNlVXBDYXB0dXJlXCI6KGQ9IWQuZGlzYWJsZWQpfHwoYT1hLnR5cGUsZD0hKFwiYnV0dG9uXCI9PT1hfHxcImlucHV0XCI9PT1hfHxcInNlbGVjdFwiPT09YXx8XCJ0ZXh0YXJlYVwiPT09YSkpO2E9IWQ7YnJlYWsgYTtkZWZhdWx0OmE9ITF9aWYoYSlyZXR1cm4gbnVsbDtjJiZcImZ1bmN0aW9uXCIhPT10eXBlb2YgYz9BKFwiMjMxXCIsYix0eXBlb2YgYyk6dm9pZCAwO1xucmV0dXJuIGN9ZnVuY3Rpb24gSWEoYSxiKXtudWxsIT09YSYmKENhPUFhKENhLGEpKTthPUNhO0NhPW51bGw7YSYmKGI/QmEoYSxFYSk6QmEoYSxGYSksQ2E/QShcIjk1XCIpOnZvaWQgMCxCLnJldGhyb3dDYXVnaHRFcnJvcigpKX1mdW5jdGlvbiBKYShhLGIsYyxkKXtmb3IodmFyIGU9bnVsbCxmPTA7ZjxvYS5sZW5ndGg7ZisrKXt2YXIgZz1vYVtmXTtnJiYoZz1nLmV4dHJhY3RFdmVudHMoYSxiLGMsZCkpJiYoZT1BYShlLGcpKX1JYShlLCExKX12YXIgS2E9e2luamVjdGlvbjpHYSxnZXRMaXN0ZW5lcjpIYSxydW5FdmVudHNJbkJhdGNoOklhLHJ1bkV4dHJhY3RlZEV2ZW50c0luQmF0Y2g6SmF9LExhPU1hdGgucmFuZG9tKCkudG9TdHJpbmcoMzYpLnNsaWNlKDIpLEM9XCJfX3JlYWN0SW50ZXJuYWxJbnN0YW5jZSRcIitMYSxNYT1cIl9fcmVhY3RFdmVudEhhbmRsZXJzJFwiK0xhO1xuZnVuY3Rpb24gTmEoYSl7aWYoYVtDXSlyZXR1cm4gYVtDXTtmb3IoOyFhW0NdOylpZihhLnBhcmVudE5vZGUpYT1hLnBhcmVudE5vZGU7ZWxzZSByZXR1cm4gbnVsbDthPWFbQ107cmV0dXJuIDU9PT1hLnRhZ3x8Nj09PWEudGFnP2E6bnVsbH1mdW5jdGlvbiBPYShhKXtpZig1PT09YS50YWd8fDY9PT1hLnRhZylyZXR1cm4gYS5zdGF0ZU5vZGU7QShcIjMzXCIpfWZ1bmN0aW9uIFBhKGEpe3JldHVybiBhW01hXXx8bnVsbH12YXIgUWE9e3ByZWNhY2hlRmliZXJOb2RlOmZ1bmN0aW9uKGEsYil7YltDXT1hfSxnZXRDbG9zZXN0SW5zdGFuY2VGcm9tTm9kZTpOYSxnZXRJbnN0YW5jZUZyb21Ob2RlOmZ1bmN0aW9uKGEpe2E9YVtDXTtyZXR1cm4hYXx8NSE9PWEudGFnJiY2IT09YS50YWc/bnVsbDphfSxnZXROb2RlRnJvbUluc3RhbmNlOk9hLGdldEZpYmVyQ3VycmVudFByb3BzRnJvbU5vZGU6UGEsdXBkYXRlRmliZXJQcm9wczpmdW5jdGlvbihhLGIpe2FbTWFdPWJ9fTtcbmZ1bmN0aW9uIEYoYSl7ZG8gYT1hLnJldHVybjt3aGlsZShhJiY1IT09YS50YWcpO3JldHVybiBhP2E6bnVsbH1mdW5jdGlvbiBSYShhLGIsYyl7Zm9yKHZhciBkPVtdO2E7KWQucHVzaChhKSxhPUYoYSk7Zm9yKGE9ZC5sZW5ndGg7MDxhLS07KWIoZFthXSxcImNhcHR1cmVkXCIsYyk7Zm9yKGE9MDthPGQubGVuZ3RoO2ErKyliKGRbYV0sXCJidWJibGVkXCIsYyl9ZnVuY3Rpb24gU2EoYSxiLGMpe2lmKGI9SGEoYSxjLmRpc3BhdGNoQ29uZmlnLnBoYXNlZFJlZ2lzdHJhdGlvbk5hbWVzW2JdKSljLl9kaXNwYXRjaExpc3RlbmVycz1BYShjLl9kaXNwYXRjaExpc3RlbmVycyxiKSxjLl9kaXNwYXRjaEluc3RhbmNlcz1BYShjLl9kaXNwYXRjaEluc3RhbmNlcyxhKX1mdW5jdGlvbiBUYShhKXthJiZhLmRpc3BhdGNoQ29uZmlnLnBoYXNlZFJlZ2lzdHJhdGlvbk5hbWVzJiZSYShhLl90YXJnZXRJbnN0LFNhLGEpfVxuZnVuY3Rpb24gVWEoYSl7aWYoYSYmYS5kaXNwYXRjaENvbmZpZy5waGFzZWRSZWdpc3RyYXRpb25OYW1lcyl7dmFyIGI9YS5fdGFyZ2V0SW5zdDtiPWI/RihiKTpudWxsO1JhKGIsU2EsYSl9fWZ1bmN0aW9uIFZhKGEsYixjKXthJiZjJiZjLmRpc3BhdGNoQ29uZmlnLnJlZ2lzdHJhdGlvbk5hbWUmJihiPUhhKGEsYy5kaXNwYXRjaENvbmZpZy5yZWdpc3RyYXRpb25OYW1lKSkmJihjLl9kaXNwYXRjaExpc3RlbmVycz1BYShjLl9kaXNwYXRjaExpc3RlbmVycyxiKSxjLl9kaXNwYXRjaEluc3RhbmNlcz1BYShjLl9kaXNwYXRjaEluc3RhbmNlcyxhKSl9ZnVuY3Rpb24gWGEoYSl7YSYmYS5kaXNwYXRjaENvbmZpZy5yZWdpc3RyYXRpb25OYW1lJiZWYShhLl90YXJnZXRJbnN0LG51bGwsYSl9ZnVuY3Rpb24gWWEoYSl7QmEoYSxUYSl9XG5mdW5jdGlvbiBaYShhLGIsYyxkKXtpZihjJiZkKWE6e3ZhciBlPWM7Zm9yKHZhciBmPWQsZz0wLGg9ZTtoO2g9RihoKSlnKys7aD0wO2Zvcih2YXIgaz1mO2s7az1GKGspKWgrKztmb3IoOzA8Zy1oOyllPUYoZSksZy0tO2Zvcig7MDxoLWc7KWY9RihmKSxoLS07Zm9yKDtnLS07KXtpZihlPT09Znx8ZT09PWYuYWx0ZXJuYXRlKWJyZWFrIGE7ZT1GKGUpO2Y9RihmKX1lPW51bGx9ZWxzZSBlPW51bGw7Zj1lO2ZvcihlPVtdO2MmJmMhPT1mOyl7Zz1jLmFsdGVybmF0ZTtpZihudWxsIT09ZyYmZz09PWYpYnJlYWs7ZS5wdXNoKGMpO2M9RihjKX1mb3IoYz1bXTtkJiZkIT09Zjspe2c9ZC5hbHRlcm5hdGU7aWYobnVsbCE9PWcmJmc9PT1mKWJyZWFrO2MucHVzaChkKTtkPUYoZCl9Zm9yKGQ9MDtkPGUubGVuZ3RoO2QrKylWYShlW2RdLFwiYnViYmxlZFwiLGEpO2ZvcihhPWMubGVuZ3RoOzA8YS0tOylWYShjW2FdLFwiY2FwdHVyZWRcIixiKX1cbnZhciAkYT17YWNjdW11bGF0ZVR3b1BoYXNlRGlzcGF0Y2hlczpZYSxhY2N1bXVsYXRlVHdvUGhhc2VEaXNwYXRjaGVzU2tpcFRhcmdldDpmdW5jdGlvbihhKXtCYShhLFVhKX0sYWNjdW11bGF0ZUVudGVyTGVhdmVEaXNwYXRjaGVzOlphLGFjY3VtdWxhdGVEaXJlY3REaXNwYXRjaGVzOmZ1bmN0aW9uKGEpe0JhKGEsWGEpfX07ZnVuY3Rpb24gYWIoYSxiKXt2YXIgYz17fTtjW2EudG9Mb3dlckNhc2UoKV09Yi50b0xvd2VyQ2FzZSgpO2NbXCJXZWJraXRcIithXT1cIndlYmtpdFwiK2I7Y1tcIk1velwiK2FdPVwibW96XCIrYjtjW1wibXNcIithXT1cIk1TXCIrYjtjW1wiT1wiK2FdPVwib1wiK2IudG9Mb3dlckNhc2UoKTtyZXR1cm4gY31cbnZhciBiYj17YW5pbWF0aW9uZW5kOmFiKFwiQW5pbWF0aW9uXCIsXCJBbmltYXRpb25FbmRcIiksYW5pbWF0aW9uaXRlcmF0aW9uOmFiKFwiQW5pbWF0aW9uXCIsXCJBbmltYXRpb25JdGVyYXRpb25cIiksYW5pbWF0aW9uc3RhcnQ6YWIoXCJBbmltYXRpb25cIixcIkFuaW1hdGlvblN0YXJ0XCIpLHRyYW5zaXRpb25lbmQ6YWIoXCJUcmFuc2l0aW9uXCIsXCJUcmFuc2l0aW9uRW5kXCIpfSxjYj17fSxkYj17fTttLmNhblVzZURPTSYmKGRiPWRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoXCJkaXZcIikuc3R5bGUsXCJBbmltYXRpb25FdmVudFwiaW4gd2luZG93fHwoZGVsZXRlIGJiLmFuaW1hdGlvbmVuZC5hbmltYXRpb24sZGVsZXRlIGJiLmFuaW1hdGlvbml0ZXJhdGlvbi5hbmltYXRpb24sZGVsZXRlIGJiLmFuaW1hdGlvbnN0YXJ0LmFuaW1hdGlvbiksXCJUcmFuc2l0aW9uRXZlbnRcImluIHdpbmRvd3x8ZGVsZXRlIGJiLnRyYW5zaXRpb25lbmQudHJhbnNpdGlvbik7XG5mdW5jdGlvbiBlYihhKXtpZihjYlthXSlyZXR1cm4gY2JbYV07aWYoIWJiW2FdKXJldHVybiBhO3ZhciBiPWJiW2FdLGM7Zm9yKGMgaW4gYilpZihiLmhhc093blByb3BlcnR5KGMpJiZjIGluIGRiKXJldHVybiBjYlthXT1iW2NdO3JldHVybiBhfXZhciBmYj1lYihcImFuaW1hdGlvbmVuZFwiKSxnYj1lYihcImFuaW1hdGlvbml0ZXJhdGlvblwiKSxoYj1lYihcImFuaW1hdGlvbnN0YXJ0XCIpLGliPWViKFwidHJhbnNpdGlvbmVuZFwiKSxqYj1cImFib3J0IGNhbnBsYXkgY2FucGxheXRocm91Z2ggZHVyYXRpb25jaGFuZ2UgZW1wdGllZCBlbmNyeXB0ZWQgZW5kZWQgZXJyb3IgbG9hZGVkZGF0YSBsb2FkZWRtZXRhZGF0YSBsb2Fkc3RhcnQgcGF1c2UgcGxheSBwbGF5aW5nIHByb2dyZXNzIHJhdGVjaGFuZ2Ugc2Vla2VkIHNlZWtpbmcgc3RhbGxlZCBzdXNwZW5kIHRpbWV1cGRhdGUgdm9sdW1lY2hhbmdlIHdhaXRpbmdcIi5zcGxpdChcIiBcIiksa2I9bnVsbDtcbmZ1bmN0aW9uIGxiKCl7IWtiJiZtLmNhblVzZURPTSYmKGtiPVwidGV4dENvbnRlbnRcImluIGRvY3VtZW50LmRvY3VtZW50RWxlbWVudD9cInRleHRDb250ZW50XCI6XCJpbm5lclRleHRcIik7cmV0dXJuIGtifXZhciBHPXtfcm9vdDpudWxsLF9zdGFydFRleHQ6bnVsbCxfZmFsbGJhY2tUZXh0Om51bGx9O2Z1bmN0aW9uIG1iKCl7aWYoRy5fZmFsbGJhY2tUZXh0KXJldHVybiBHLl9mYWxsYmFja1RleHQ7dmFyIGEsYj1HLl9zdGFydFRleHQsYz1iLmxlbmd0aCxkLGU9bmIoKSxmPWUubGVuZ3RoO2ZvcihhPTA7YTxjJiZiW2FdPT09ZVthXTthKyspO3ZhciBnPWMtYTtmb3IoZD0xO2Q8PWcmJmJbYy1kXT09PWVbZi1kXTtkKyspO0cuX2ZhbGxiYWNrVGV4dD1lLnNsaWNlKGEsMTxkPzEtZDp2b2lkIDApO3JldHVybiBHLl9mYWxsYmFja1RleHR9ZnVuY3Rpb24gbmIoKXtyZXR1cm5cInZhbHVlXCJpbiBHLl9yb290P0cuX3Jvb3QudmFsdWU6Ry5fcm9vdFtsYigpXX1cbnZhciBvYj1cImRpc3BhdGNoQ29uZmlnIF90YXJnZXRJbnN0IG5hdGl2ZUV2ZW50IGlzRGVmYXVsdFByZXZlbnRlZCBpc1Byb3BhZ2F0aW9uU3RvcHBlZCBfZGlzcGF0Y2hMaXN0ZW5lcnMgX2Rpc3BhdGNoSW5zdGFuY2VzXCIuc3BsaXQoXCIgXCIpLHBiPXt0eXBlOm51bGwsdGFyZ2V0Om51bGwsY3VycmVudFRhcmdldDp2LnRoYXRSZXR1cm5zTnVsbCxldmVudFBoYXNlOm51bGwsYnViYmxlczpudWxsLGNhbmNlbGFibGU6bnVsbCx0aW1lU3RhbXA6ZnVuY3Rpb24oYSl7cmV0dXJuIGEudGltZVN0YW1wfHxEYXRlLm5vdygpfSxkZWZhdWx0UHJldmVudGVkOm51bGwsaXNUcnVzdGVkOm51bGx9O1xuZnVuY3Rpb24gSChhLGIsYyxkKXt0aGlzLmRpc3BhdGNoQ29uZmlnPWE7dGhpcy5fdGFyZ2V0SW5zdD1iO3RoaXMubmF0aXZlRXZlbnQ9YzthPXRoaXMuY29uc3RydWN0b3IuSW50ZXJmYWNlO2Zvcih2YXIgZSBpbiBhKWEuaGFzT3duUHJvcGVydHkoZSkmJigoYj1hW2VdKT90aGlzW2VdPWIoYyk6XCJ0YXJnZXRcIj09PWU/dGhpcy50YXJnZXQ9ZDp0aGlzW2VdPWNbZV0pO3RoaXMuaXNEZWZhdWx0UHJldmVudGVkPShudWxsIT1jLmRlZmF1bHRQcmV2ZW50ZWQ/Yy5kZWZhdWx0UHJldmVudGVkOiExPT09Yy5yZXR1cm5WYWx1ZSk/di50aGF0UmV0dXJuc1RydWU6di50aGF0UmV0dXJuc0ZhbHNlO3RoaXMuaXNQcm9wYWdhdGlvblN0b3BwZWQ9di50aGF0UmV0dXJuc0ZhbHNlO3JldHVybiB0aGlzfVxucChILnByb3RvdHlwZSx7cHJldmVudERlZmF1bHQ6ZnVuY3Rpb24oKXt0aGlzLmRlZmF1bHRQcmV2ZW50ZWQ9ITA7dmFyIGE9dGhpcy5uYXRpdmVFdmVudDthJiYoYS5wcmV2ZW50RGVmYXVsdD9hLnByZXZlbnREZWZhdWx0KCk6XCJ1bmtub3duXCIhPT10eXBlb2YgYS5yZXR1cm5WYWx1ZSYmKGEucmV0dXJuVmFsdWU9ITEpLHRoaXMuaXNEZWZhdWx0UHJldmVudGVkPXYudGhhdFJldHVybnNUcnVlKX0sc3RvcFByb3BhZ2F0aW9uOmZ1bmN0aW9uKCl7dmFyIGE9dGhpcy5uYXRpdmVFdmVudDthJiYoYS5zdG9wUHJvcGFnYXRpb24/YS5zdG9wUHJvcGFnYXRpb24oKTpcInVua25vd25cIiE9PXR5cGVvZiBhLmNhbmNlbEJ1YmJsZSYmKGEuY2FuY2VsQnViYmxlPSEwKSx0aGlzLmlzUHJvcGFnYXRpb25TdG9wcGVkPXYudGhhdFJldHVybnNUcnVlKX0scGVyc2lzdDpmdW5jdGlvbigpe3RoaXMuaXNQZXJzaXN0ZW50PXYudGhhdFJldHVybnNUcnVlfSxpc1BlcnNpc3RlbnQ6di50aGF0UmV0dXJuc0ZhbHNlLFxuZGVzdHJ1Y3RvcjpmdW5jdGlvbigpe3ZhciBhPXRoaXMuY29uc3RydWN0b3IuSW50ZXJmYWNlLGI7Zm9yKGIgaW4gYSl0aGlzW2JdPW51bGw7Zm9yKGE9MDthPG9iLmxlbmd0aDthKyspdGhpc1tvYlthXV09bnVsbH19KTtILkludGVyZmFjZT1wYjtILmV4dGVuZD1mdW5jdGlvbihhKXtmdW5jdGlvbiBiKCl7fWZ1bmN0aW9uIGMoKXtyZXR1cm4gZC5hcHBseSh0aGlzLGFyZ3VtZW50cyl9dmFyIGQ9dGhpcztiLnByb3RvdHlwZT1kLnByb3RvdHlwZTt2YXIgZT1uZXcgYjtwKGUsYy5wcm90b3R5cGUpO2MucHJvdG90eXBlPWU7Yy5wcm90b3R5cGUuY29uc3RydWN0b3I9YztjLkludGVyZmFjZT1wKHt9LGQuSW50ZXJmYWNlLGEpO2MuZXh0ZW5kPWQuZXh0ZW5kO3FiKGMpO3JldHVybiBjfTtxYihIKTtcbmZ1bmN0aW9uIHJiKGEsYixjLGQpe2lmKHRoaXMuZXZlbnRQb29sLmxlbmd0aCl7dmFyIGU9dGhpcy5ldmVudFBvb2wucG9wKCk7dGhpcy5jYWxsKGUsYSxiLGMsZCk7cmV0dXJuIGV9cmV0dXJuIG5ldyB0aGlzKGEsYixjLGQpfWZ1bmN0aW9uIHNiKGEpe2EgaW5zdGFuY2VvZiB0aGlzP3ZvaWQgMDpBKFwiMjIzXCIpO2EuZGVzdHJ1Y3RvcigpOzEwPnRoaXMuZXZlbnRQb29sLmxlbmd0aCYmdGhpcy5ldmVudFBvb2wucHVzaChhKX1mdW5jdGlvbiBxYihhKXthLmV2ZW50UG9vbD1bXTthLmdldFBvb2xlZD1yYjthLnJlbGVhc2U9c2J9dmFyIHRiPUguZXh0ZW5kKHtkYXRhOm51bGx9KSx1Yj1ILmV4dGVuZCh7ZGF0YTpudWxsfSksdmI9WzksMTMsMjcsMzJdLHdiPW0uY2FuVXNlRE9NJiZcIkNvbXBvc2l0aW9uRXZlbnRcImluIHdpbmRvdyx4Yj1udWxsO20uY2FuVXNlRE9NJiZcImRvY3VtZW50TW9kZVwiaW4gZG9jdW1lbnQmJih4Yj1kb2N1bWVudC5kb2N1bWVudE1vZGUpO1xudmFyIHliPW0uY2FuVXNlRE9NJiZcIlRleHRFdmVudFwiaW4gd2luZG93JiYheGIsemI9bS5jYW5Vc2VET00mJighd2J8fHhiJiY4PHhiJiYxMT49eGIpLEFiPVN0cmluZy5mcm9tQ2hhckNvZGUoMzIpLEJiPXtiZWZvcmVJbnB1dDp7cGhhc2VkUmVnaXN0cmF0aW9uTmFtZXM6e2J1YmJsZWQ6XCJvbkJlZm9yZUlucHV0XCIsY2FwdHVyZWQ6XCJvbkJlZm9yZUlucHV0Q2FwdHVyZVwifSxkZXBlbmRlbmNpZXM6W1wiY29tcG9zaXRpb25lbmRcIixcImtleXByZXNzXCIsXCJ0ZXh0SW5wdXRcIixcInBhc3RlXCJdfSxjb21wb3NpdGlvbkVuZDp7cGhhc2VkUmVnaXN0cmF0aW9uTmFtZXM6e2J1YmJsZWQ6XCJvbkNvbXBvc2l0aW9uRW5kXCIsY2FwdHVyZWQ6XCJvbkNvbXBvc2l0aW9uRW5kQ2FwdHVyZVwifSxkZXBlbmRlbmNpZXM6XCJibHVyIGNvbXBvc2l0aW9uZW5kIGtleWRvd24ga2V5cHJlc3Mga2V5dXAgbW91c2Vkb3duXCIuc3BsaXQoXCIgXCIpfSxjb21wb3NpdGlvblN0YXJ0OntwaGFzZWRSZWdpc3RyYXRpb25OYW1lczp7YnViYmxlZDpcIm9uQ29tcG9zaXRpb25TdGFydFwiLFxuY2FwdHVyZWQ6XCJvbkNvbXBvc2l0aW9uU3RhcnRDYXB0dXJlXCJ9LGRlcGVuZGVuY2llczpcImJsdXIgY29tcG9zaXRpb25zdGFydCBrZXlkb3duIGtleXByZXNzIGtleXVwIG1vdXNlZG93blwiLnNwbGl0KFwiIFwiKX0sY29tcG9zaXRpb25VcGRhdGU6e3BoYXNlZFJlZ2lzdHJhdGlvbk5hbWVzOntidWJibGVkOlwib25Db21wb3NpdGlvblVwZGF0ZVwiLGNhcHR1cmVkOlwib25Db21wb3NpdGlvblVwZGF0ZUNhcHR1cmVcIn0sZGVwZW5kZW5jaWVzOlwiYmx1ciBjb21wb3NpdGlvbnVwZGF0ZSBrZXlkb3duIGtleXByZXNzIGtleXVwIG1vdXNlZG93blwiLnNwbGl0KFwiIFwiKX19LENiPSExO1xuZnVuY3Rpb24gRGIoYSxiKXtzd2l0Y2goYSl7Y2FzZSBcImtleXVwXCI6cmV0dXJuLTEhPT12Yi5pbmRleE9mKGIua2V5Q29kZSk7Y2FzZSBcImtleWRvd25cIjpyZXR1cm4gMjI5IT09Yi5rZXlDb2RlO2Nhc2UgXCJrZXlwcmVzc1wiOmNhc2UgXCJtb3VzZWRvd25cIjpjYXNlIFwiYmx1clwiOnJldHVybiEwO2RlZmF1bHQ6cmV0dXJuITF9fWZ1bmN0aW9uIEViKGEpe2E9YS5kZXRhaWw7cmV0dXJuXCJvYmplY3RcIj09PXR5cGVvZiBhJiZcImRhdGFcImluIGE/YS5kYXRhOm51bGx9dmFyIEZiPSExO2Z1bmN0aW9uIEdiKGEsYil7c3dpdGNoKGEpe2Nhc2UgXCJjb21wb3NpdGlvbmVuZFwiOnJldHVybiBFYihiKTtjYXNlIFwia2V5cHJlc3NcIjppZigzMiE9PWIud2hpY2gpcmV0dXJuIG51bGw7Q2I9ITA7cmV0dXJuIEFiO2Nhc2UgXCJ0ZXh0SW5wdXRcIjpyZXR1cm4gYT1iLmRhdGEsYT09PUFiJiZDYj9udWxsOmE7ZGVmYXVsdDpyZXR1cm4gbnVsbH19XG5mdW5jdGlvbiBIYihhLGIpe2lmKEZiKXJldHVyblwiY29tcG9zaXRpb25lbmRcIj09PWF8fCF3YiYmRGIoYSxiKT8oYT1tYigpLEcuX3Jvb3Q9bnVsbCxHLl9zdGFydFRleHQ9bnVsbCxHLl9mYWxsYmFja1RleHQ9bnVsbCxGYj0hMSxhKTpudWxsO3N3aXRjaChhKXtjYXNlIFwicGFzdGVcIjpyZXR1cm4gbnVsbDtjYXNlIFwia2V5cHJlc3NcIjppZighKGIuY3RybEtleXx8Yi5hbHRLZXl8fGIubWV0YUtleSl8fGIuY3RybEtleSYmYi5hbHRLZXkpe2lmKGIuY2hhciYmMTxiLmNoYXIubGVuZ3RoKXJldHVybiBiLmNoYXI7aWYoYi53aGljaClyZXR1cm4gU3RyaW5nLmZyb21DaGFyQ29kZShiLndoaWNoKX1yZXR1cm4gbnVsbDtjYXNlIFwiY29tcG9zaXRpb25lbmRcIjpyZXR1cm4gemI/bnVsbDpiLmRhdGE7ZGVmYXVsdDpyZXR1cm4gbnVsbH19XG52YXIgSWI9e2V2ZW50VHlwZXM6QmIsZXh0cmFjdEV2ZW50czpmdW5jdGlvbihhLGIsYyxkKXt2YXIgZT12b2lkIDA7dmFyIGY9dm9pZCAwO2lmKHdiKWI6e3N3aXRjaChhKXtjYXNlIFwiY29tcG9zaXRpb25zdGFydFwiOmU9QmIuY29tcG9zaXRpb25TdGFydDticmVhayBiO2Nhc2UgXCJjb21wb3NpdGlvbmVuZFwiOmU9QmIuY29tcG9zaXRpb25FbmQ7YnJlYWsgYjtjYXNlIFwiY29tcG9zaXRpb251cGRhdGVcIjplPUJiLmNvbXBvc2l0aW9uVXBkYXRlO2JyZWFrIGJ9ZT12b2lkIDB9ZWxzZSBGYj9EYihhLGMpJiYoZT1CYi5jb21wb3NpdGlvbkVuZCk6XCJrZXlkb3duXCI9PT1hJiYyMjk9PT1jLmtleUNvZGUmJihlPUJiLmNvbXBvc2l0aW9uU3RhcnQpO2U/KHpiJiYoRmJ8fGUhPT1CYi5jb21wb3NpdGlvblN0YXJ0P2U9PT1CYi5jb21wb3NpdGlvbkVuZCYmRmImJihmPW1iKCkpOihHLl9yb290PWQsRy5fc3RhcnRUZXh0PW5iKCksRmI9ITApKSxlPXRiLmdldFBvb2xlZChlLGIsYyxkKSxmP2UuZGF0YT1cbmY6KGY9RWIoYyksbnVsbCE9PWYmJihlLmRhdGE9ZikpLFlhKGUpLGY9ZSk6Zj1udWxsOyhhPXliP0diKGEsYyk6SGIoYSxjKSk/KGI9dWIuZ2V0UG9vbGVkKEJiLmJlZm9yZUlucHV0LGIsYyxkKSxiLmRhdGE9YSxZYShiKSk6Yj1udWxsO3JldHVybiBudWxsPT09Zj9iOm51bGw9PT1iP2Y6W2YsYl19fSxKYj1udWxsLEtiPXtpbmplY3RGaWJlckNvbnRyb2xsZWRIb3N0Q29tcG9uZW50OmZ1bmN0aW9uKGEpe0piPWF9fSxMYj1udWxsLE1iPW51bGw7ZnVuY3Rpb24gTmIoYSl7aWYoYT14YShhKSl7SmImJlwiZnVuY3Rpb25cIj09PXR5cGVvZiBKYi5yZXN0b3JlQ29udHJvbGxlZFN0YXRlP3ZvaWQgMDpBKFwiMTk0XCIpO3ZhciBiPXdhKGEuc3RhdGVOb2RlKTtKYi5yZXN0b3JlQ29udHJvbGxlZFN0YXRlKGEuc3RhdGVOb2RlLGEudHlwZSxiKX19ZnVuY3Rpb24gT2IoYSl7TGI/TWI/TWIucHVzaChhKTpNYj1bYV06TGI9YX1cbmZ1bmN0aW9uIFBiKCl7cmV0dXJuIG51bGwhPT1MYnx8bnVsbCE9PU1ifWZ1bmN0aW9uIFFiKCl7aWYoTGIpe3ZhciBhPUxiLGI9TWI7TWI9TGI9bnVsbDtOYihhKTtpZihiKWZvcihhPTA7YTxiLmxlbmd0aDthKyspTmIoYlthXSl9fXZhciBSYj17aW5qZWN0aW9uOktiLGVucXVldWVTdGF0ZVJlc3RvcmU6T2IsbmVlZHNTdGF0ZVJlc3RvcmU6UGIscmVzdG9yZVN0YXRlSWZOZWVkZWQ6UWJ9O2Z1bmN0aW9uIFNiKGEsYil7cmV0dXJuIGEoYil9ZnVuY3Rpb24gVGIoYSxiLGMpe3JldHVybiBhKGIsYyl9ZnVuY3Rpb24gVWIoKXt9dmFyIFZiPSExO2Z1bmN0aW9uIFdiKGEsYil7aWYoVmIpcmV0dXJuIGEoYik7VmI9ITA7dHJ5e3JldHVybiBTYihhLGIpfWZpbmFsbHl7VmI9ITEsUGIoKSYmKFViKCksUWIoKSl9fVxudmFyIFhiPXtjb2xvcjohMCxkYXRlOiEwLGRhdGV0aW1lOiEwLFwiZGF0ZXRpbWUtbG9jYWxcIjohMCxlbWFpbDohMCxtb250aDohMCxudW1iZXI6ITAscGFzc3dvcmQ6ITAscmFuZ2U6ITAsc2VhcmNoOiEwLHRlbDohMCx0ZXh0OiEwLHRpbWU6ITAsdXJsOiEwLHdlZWs6ITB9O2Z1bmN0aW9uIFliKGEpe3ZhciBiPWEmJmEubm9kZU5hbWUmJmEubm9kZU5hbWUudG9Mb3dlckNhc2UoKTtyZXR1cm5cImlucHV0XCI9PT1iPyEhWGJbYS50eXBlXTpcInRleHRhcmVhXCI9PT1iPyEwOiExfWZ1bmN0aW9uIFpiKGEpe2E9YS50YXJnZXR8fHdpbmRvdzthLmNvcnJlc3BvbmRpbmdVc2VFbGVtZW50JiYoYT1hLmNvcnJlc3BvbmRpbmdVc2VFbGVtZW50KTtyZXR1cm4gMz09PWEubm9kZVR5cGU/YS5wYXJlbnROb2RlOmF9XG5mdW5jdGlvbiAkYihhLGIpe2lmKCFtLmNhblVzZURPTXx8YiYmIShcImFkZEV2ZW50TGlzdGVuZXJcImluIGRvY3VtZW50KSlyZXR1cm4hMTthPVwib25cIithO2I9YSBpbiBkb2N1bWVudDtifHwoYj1kb2N1bWVudC5jcmVhdGVFbGVtZW50KFwiZGl2XCIpLGIuc2V0QXR0cmlidXRlKGEsXCJyZXR1cm47XCIpLGI9XCJmdW5jdGlvblwiPT09dHlwZW9mIGJbYV0pO3JldHVybiBifWZ1bmN0aW9uIGFjKGEpe3ZhciBiPWEudHlwZTtyZXR1cm4oYT1hLm5vZGVOYW1lKSYmXCJpbnB1dFwiPT09YS50b0xvd2VyQ2FzZSgpJiYoXCJjaGVja2JveFwiPT09Ynx8XCJyYWRpb1wiPT09Yil9XG5mdW5jdGlvbiBiYyhhKXt2YXIgYj1hYyhhKT9cImNoZWNrZWRcIjpcInZhbHVlXCIsYz1PYmplY3QuZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yKGEuY29uc3RydWN0b3IucHJvdG90eXBlLGIpLGQ9XCJcIithW2JdO2lmKCFhLmhhc093blByb3BlcnR5KGIpJiZcInVuZGVmaW5lZFwiIT09dHlwZW9mIGMmJlwiZnVuY3Rpb25cIj09PXR5cGVvZiBjLmdldCYmXCJmdW5jdGlvblwiPT09dHlwZW9mIGMuc2V0KXt2YXIgZT1jLmdldCxmPWMuc2V0O09iamVjdC5kZWZpbmVQcm9wZXJ0eShhLGIse2NvbmZpZ3VyYWJsZTohMCxnZXQ6ZnVuY3Rpb24oKXtyZXR1cm4gZS5jYWxsKHRoaXMpfSxzZXQ6ZnVuY3Rpb24oYSl7ZD1cIlwiK2E7Zi5jYWxsKHRoaXMsYSl9fSk7T2JqZWN0LmRlZmluZVByb3BlcnR5KGEsYix7ZW51bWVyYWJsZTpjLmVudW1lcmFibGV9KTtyZXR1cm57Z2V0VmFsdWU6ZnVuY3Rpb24oKXtyZXR1cm4gZH0sc2V0VmFsdWU6ZnVuY3Rpb24oYSl7ZD1cIlwiK2F9LHN0b3BUcmFja2luZzpmdW5jdGlvbigpe2EuX3ZhbHVlVHJhY2tlcj1cbm51bGw7ZGVsZXRlIGFbYl19fX19ZnVuY3Rpb24gY2MoYSl7YS5fdmFsdWVUcmFja2VyfHwoYS5fdmFsdWVUcmFja2VyPWJjKGEpKX1mdW5jdGlvbiBkYyhhKXtpZighYSlyZXR1cm4hMTt2YXIgYj1hLl92YWx1ZVRyYWNrZXI7aWYoIWIpcmV0dXJuITA7dmFyIGM9Yi5nZXRWYWx1ZSgpO3ZhciBkPVwiXCI7YSYmKGQ9YWMoYSk/YS5jaGVja2VkP1widHJ1ZVwiOlwiZmFsc2VcIjphLnZhbHVlKTthPWQ7cmV0dXJuIGEhPT1jPyhiLnNldFZhbHVlKGEpLCEwKTohMX1cbnZhciBlYz1jYS5fX1NFQ1JFVF9JTlRFUk5BTFNfRE9fTk9UX1VTRV9PUl9ZT1VfV0lMTF9CRV9GSVJFRC5SZWFjdEN1cnJlbnRPd25lcixJPVwiZnVuY3Rpb25cIj09PXR5cGVvZiBTeW1ib2wmJlN5bWJvbC5mb3IsZmM9ST9TeW1ib2wuZm9yKFwicmVhY3QuZWxlbWVudFwiKTo2MDEwMyxnYz1JP1N5bWJvbC5mb3IoXCJyZWFjdC5wb3J0YWxcIik6NjAxMDYsaGM9ST9TeW1ib2wuZm9yKFwicmVhY3QuZnJhZ21lbnRcIik6NjAxMDcsaWM9ST9TeW1ib2wuZm9yKFwicmVhY3Quc3RyaWN0X21vZGVcIik6NjAxMDgsamM9ST9TeW1ib2wuZm9yKFwicmVhY3QucHJvZmlsZXJcIik6NjAxMTQsbWM9ST9TeW1ib2wuZm9yKFwicmVhY3QucHJvdmlkZXJcIik6NjAxMDksbmM9ST9TeW1ib2wuZm9yKFwicmVhY3QuY29udGV4dFwiKTo2MDExMCxvYz1JP1N5bWJvbC5mb3IoXCJyZWFjdC5hc3luY19tb2RlXCIpOjYwMTExLHBjPUk/U3ltYm9sLmZvcihcInJlYWN0LmZvcndhcmRfcmVmXCIpOjYwMTEyLHFjPUk/U3ltYm9sLmZvcihcInJlYWN0LnRpbWVvdXRcIik6XG42MDExMyxyYz1cImZ1bmN0aW9uXCI9PT10eXBlb2YgU3ltYm9sJiZTeW1ib2wuaXRlcmF0b3I7ZnVuY3Rpb24gc2MoYSl7aWYobnVsbD09PWF8fFwidW5kZWZpbmVkXCI9PT10eXBlb2YgYSlyZXR1cm4gbnVsbDthPXJjJiZhW3JjXXx8YVtcIkBAaXRlcmF0b3JcIl07cmV0dXJuXCJmdW5jdGlvblwiPT09dHlwZW9mIGE/YTpudWxsfVxuZnVuY3Rpb24gdGMoYSl7dmFyIGI9YS50eXBlO2lmKFwiZnVuY3Rpb25cIj09PXR5cGVvZiBiKXJldHVybiBiLmRpc3BsYXlOYW1lfHxiLm5hbWU7aWYoXCJzdHJpbmdcIj09PXR5cGVvZiBiKXJldHVybiBiO3N3aXRjaChiKXtjYXNlIG9jOnJldHVyblwiQXN5bmNNb2RlXCI7Y2FzZSBuYzpyZXR1cm5cIkNvbnRleHQuQ29uc3VtZXJcIjtjYXNlIGhjOnJldHVyblwiUmVhY3RGcmFnbWVudFwiO2Nhc2UgZ2M6cmV0dXJuXCJSZWFjdFBvcnRhbFwiO2Nhc2UgamM6cmV0dXJuXCJQcm9maWxlcihcIithLnBlbmRpbmdQcm9wcy5pZCtcIilcIjtjYXNlIG1jOnJldHVyblwiQ29udGV4dC5Qcm92aWRlclwiO2Nhc2UgaWM6cmV0dXJuXCJTdHJpY3RNb2RlXCI7Y2FzZSBxYzpyZXR1cm5cIlRpbWVvdXRcIn1pZihcIm9iamVjdFwiPT09dHlwZW9mIGImJm51bGwhPT1iKXN3aXRjaChiLiQkdHlwZW9mKXtjYXNlIHBjOnJldHVybiBhPWIucmVuZGVyLmRpc3BsYXlOYW1lfHxiLnJlbmRlci5uYW1lfHxcIlwiLFwiXCIhPT1hP1wiRm9yd2FyZFJlZihcIitcbmErXCIpXCI6XCJGb3J3YXJkUmVmXCJ9cmV0dXJuIG51bGx9ZnVuY3Rpb24gdmMoYSl7dmFyIGI9XCJcIjtkb3thOnN3aXRjaChhLnRhZyl7Y2FzZSAwOmNhc2UgMTpjYXNlIDI6Y2FzZSA1OnZhciBjPWEuX2RlYnVnT3duZXIsZD1hLl9kZWJ1Z1NvdXJjZTt2YXIgZT10YyhhKTt2YXIgZj1udWxsO2MmJihmPXRjKGMpKTtjPWQ7ZT1cIlxcbiAgICBpbiBcIisoZXx8XCJVbmtub3duXCIpKyhjP1wiIChhdCBcIitjLmZpbGVOYW1lLnJlcGxhY2UoL14uKltcXFxcXFwvXS8sXCJcIikrXCI6XCIrYy5saW5lTnVtYmVyK1wiKVwiOmY/XCIgKGNyZWF0ZWQgYnkgXCIrZitcIilcIjpcIlwiKTticmVhayBhO2RlZmF1bHQ6ZT1cIlwifWIrPWU7YT1hLnJldHVybn13aGlsZShhKTtyZXR1cm4gYn1cbnZhciB3Yz0vXls6QS1aX2EtelxcdTAwQzAtXFx1MDBENlxcdTAwRDgtXFx1MDBGNlxcdTAwRjgtXFx1MDJGRlxcdTAzNzAtXFx1MDM3RFxcdTAzN0YtXFx1MUZGRlxcdTIwMEMtXFx1MjAwRFxcdTIwNzAtXFx1MjE4RlxcdTJDMDAtXFx1MkZFRlxcdTMwMDEtXFx1RDdGRlxcdUY5MDAtXFx1RkRDRlxcdUZERjAtXFx1RkZGRF1bOkEtWl9hLXpcXHUwMEMwLVxcdTAwRDZcXHUwMEQ4LVxcdTAwRjZcXHUwMEY4LVxcdTAyRkZcXHUwMzcwLVxcdTAzN0RcXHUwMzdGLVxcdTFGRkZcXHUyMDBDLVxcdTIwMERcXHUyMDcwLVxcdTIxOEZcXHUyQzAwLVxcdTJGRUZcXHUzMDAxLVxcdUQ3RkZcXHVGOTAwLVxcdUZEQ0ZcXHVGREYwLVxcdUZGRkRcXC0uMC05XFx1MDBCN1xcdTAzMDAtXFx1MDM2RlxcdTIwM0YtXFx1MjA0MF0qJC8seGM9e30seWM9e307ZnVuY3Rpb24gemMoYSl7aWYoeWMuaGFzT3duUHJvcGVydHkoYSkpcmV0dXJuITA7aWYoeGMuaGFzT3duUHJvcGVydHkoYSkpcmV0dXJuITE7aWYod2MudGVzdChhKSlyZXR1cm4geWNbYV09ITA7eGNbYV09ITA7cmV0dXJuITF9XG5mdW5jdGlvbiBBYyhhLGIsYyxkKXtpZihudWxsIT09YyYmMD09PWMudHlwZSlyZXR1cm4hMTtzd2l0Y2godHlwZW9mIGIpe2Nhc2UgXCJmdW5jdGlvblwiOmNhc2UgXCJzeW1ib2xcIjpyZXR1cm4hMDtjYXNlIFwiYm9vbGVhblwiOmlmKGQpcmV0dXJuITE7aWYobnVsbCE9PWMpcmV0dXJuIWMuYWNjZXB0c0Jvb2xlYW5zO2E9YS50b0xvd2VyQ2FzZSgpLnNsaWNlKDAsNSk7cmV0dXJuXCJkYXRhLVwiIT09YSYmXCJhcmlhLVwiIT09YTtkZWZhdWx0OnJldHVybiExfX1mdW5jdGlvbiBCYyhhLGIsYyxkKXtpZihudWxsPT09Ynx8XCJ1bmRlZmluZWRcIj09PXR5cGVvZiBifHxBYyhhLGIsYyxkKSlyZXR1cm4hMDtpZihkKXJldHVybiExO2lmKG51bGwhPT1jKXN3aXRjaChjLnR5cGUpe2Nhc2UgMzpyZXR1cm4hYjtjYXNlIDQ6cmV0dXJuITE9PT1iO2Nhc2UgNTpyZXR1cm4gaXNOYU4oYik7Y2FzZSA2OnJldHVybiBpc05hTihiKXx8MT5ifXJldHVybiExfVxuZnVuY3Rpb24gSihhLGIsYyxkLGUpe3RoaXMuYWNjZXB0c0Jvb2xlYW5zPTI9PT1ifHwzPT09Ynx8ND09PWI7dGhpcy5hdHRyaWJ1dGVOYW1lPWQ7dGhpcy5hdHRyaWJ1dGVOYW1lc3BhY2U9ZTt0aGlzLm11c3RVc2VQcm9wZXJ0eT1jO3RoaXMucHJvcGVydHlOYW1lPWE7dGhpcy50eXBlPWJ9dmFyIEs9e307XCJjaGlsZHJlbiBkYW5nZXJvdXNseVNldElubmVySFRNTCBkZWZhdWx0VmFsdWUgZGVmYXVsdENoZWNrZWQgaW5uZXJIVE1MIHN1cHByZXNzQ29udGVudEVkaXRhYmxlV2FybmluZyBzdXBwcmVzc0h5ZHJhdGlvbldhcm5pbmcgc3R5bGVcIi5zcGxpdChcIiBcIikuZm9yRWFjaChmdW5jdGlvbihhKXtLW2FdPW5ldyBKKGEsMCwhMSxhLG51bGwpfSk7XG5bW1wiYWNjZXB0Q2hhcnNldFwiLFwiYWNjZXB0LWNoYXJzZXRcIl0sW1wiY2xhc3NOYW1lXCIsXCJjbGFzc1wiXSxbXCJodG1sRm9yXCIsXCJmb3JcIl0sW1wiaHR0cEVxdWl2XCIsXCJodHRwLWVxdWl2XCJdXS5mb3JFYWNoKGZ1bmN0aW9uKGEpe3ZhciBiPWFbMF07S1tiXT1uZXcgSihiLDEsITEsYVsxXSxudWxsKX0pO1tcImNvbnRlbnRFZGl0YWJsZVwiLFwiZHJhZ2dhYmxlXCIsXCJzcGVsbENoZWNrXCIsXCJ2YWx1ZVwiXS5mb3JFYWNoKGZ1bmN0aW9uKGEpe0tbYV09bmV3IEooYSwyLCExLGEudG9Mb3dlckNhc2UoKSxudWxsKX0pO1tcImF1dG9SZXZlcnNlXCIsXCJleHRlcm5hbFJlc291cmNlc1JlcXVpcmVkXCIsXCJwcmVzZXJ2ZUFscGhhXCJdLmZvckVhY2goZnVuY3Rpb24oYSl7S1thXT1uZXcgSihhLDIsITEsYSxudWxsKX0pO1xuXCJhbGxvd0Z1bGxTY3JlZW4gYXN5bmMgYXV0b0ZvY3VzIGF1dG9QbGF5IGNvbnRyb2xzIGRlZmF1bHQgZGVmZXIgZGlzYWJsZWQgZm9ybU5vVmFsaWRhdGUgaGlkZGVuIGxvb3Agbm9Nb2R1bGUgbm9WYWxpZGF0ZSBvcGVuIHBsYXlzSW5saW5lIHJlYWRPbmx5IHJlcXVpcmVkIHJldmVyc2VkIHNjb3BlZCBzZWFtbGVzcyBpdGVtU2NvcGVcIi5zcGxpdChcIiBcIikuZm9yRWFjaChmdW5jdGlvbihhKXtLW2FdPW5ldyBKKGEsMywhMSxhLnRvTG93ZXJDYXNlKCksbnVsbCl9KTtbXCJjaGVja2VkXCIsXCJtdWx0aXBsZVwiLFwibXV0ZWRcIixcInNlbGVjdGVkXCJdLmZvckVhY2goZnVuY3Rpb24oYSl7S1thXT1uZXcgSihhLDMsITAsYS50b0xvd2VyQ2FzZSgpLG51bGwpfSk7W1wiY2FwdHVyZVwiLFwiZG93bmxvYWRcIl0uZm9yRWFjaChmdW5jdGlvbihhKXtLW2FdPW5ldyBKKGEsNCwhMSxhLnRvTG93ZXJDYXNlKCksbnVsbCl9KTtcbltcImNvbHNcIixcInJvd3NcIixcInNpemVcIixcInNwYW5cIl0uZm9yRWFjaChmdW5jdGlvbihhKXtLW2FdPW5ldyBKKGEsNiwhMSxhLnRvTG93ZXJDYXNlKCksbnVsbCl9KTtbXCJyb3dTcGFuXCIsXCJzdGFydFwiXS5mb3JFYWNoKGZ1bmN0aW9uKGEpe0tbYV09bmV3IEooYSw1LCExLGEudG9Mb3dlckNhc2UoKSxudWxsKX0pO3ZhciBDYz0vW1xcLTpdKFthLXpdKS9nO2Z1bmN0aW9uIERjKGEpe3JldHVybiBhWzFdLnRvVXBwZXJDYXNlKCl9XG5cImFjY2VudC1oZWlnaHQgYWxpZ25tZW50LWJhc2VsaW5lIGFyYWJpYy1mb3JtIGJhc2VsaW5lLXNoaWZ0IGNhcC1oZWlnaHQgY2xpcC1wYXRoIGNsaXAtcnVsZSBjb2xvci1pbnRlcnBvbGF0aW9uIGNvbG9yLWludGVycG9sYXRpb24tZmlsdGVycyBjb2xvci1wcm9maWxlIGNvbG9yLXJlbmRlcmluZyBkb21pbmFudC1iYXNlbGluZSBlbmFibGUtYmFja2dyb3VuZCBmaWxsLW9wYWNpdHkgZmlsbC1ydWxlIGZsb29kLWNvbG9yIGZsb29kLW9wYWNpdHkgZm9udC1mYW1pbHkgZm9udC1zaXplIGZvbnQtc2l6ZS1hZGp1c3QgZm9udC1zdHJldGNoIGZvbnQtc3R5bGUgZm9udC12YXJpYW50IGZvbnQtd2VpZ2h0IGdseXBoLW5hbWUgZ2x5cGgtb3JpZW50YXRpb24taG9yaXpvbnRhbCBnbHlwaC1vcmllbnRhdGlvbi12ZXJ0aWNhbCBob3Jpei1hZHYteCBob3Jpei1vcmlnaW4teCBpbWFnZS1yZW5kZXJpbmcgbGV0dGVyLXNwYWNpbmcgbGlnaHRpbmctY29sb3IgbWFya2VyLWVuZCBtYXJrZXItbWlkIG1hcmtlci1zdGFydCBvdmVybGluZS1wb3NpdGlvbiBvdmVybGluZS10aGlja25lc3MgcGFpbnQtb3JkZXIgcGFub3NlLTEgcG9pbnRlci1ldmVudHMgcmVuZGVyaW5nLWludGVudCBzaGFwZS1yZW5kZXJpbmcgc3RvcC1jb2xvciBzdG9wLW9wYWNpdHkgc3RyaWtldGhyb3VnaC1wb3NpdGlvbiBzdHJpa2V0aHJvdWdoLXRoaWNrbmVzcyBzdHJva2UtZGFzaGFycmF5IHN0cm9rZS1kYXNob2Zmc2V0IHN0cm9rZS1saW5lY2FwIHN0cm9rZS1saW5lam9pbiBzdHJva2UtbWl0ZXJsaW1pdCBzdHJva2Utb3BhY2l0eSBzdHJva2Utd2lkdGggdGV4dC1hbmNob3IgdGV4dC1kZWNvcmF0aW9uIHRleHQtcmVuZGVyaW5nIHVuZGVybGluZS1wb3NpdGlvbiB1bmRlcmxpbmUtdGhpY2tuZXNzIHVuaWNvZGUtYmlkaSB1bmljb2RlLXJhbmdlIHVuaXRzLXBlci1lbSB2LWFscGhhYmV0aWMgdi1oYW5naW5nIHYtaWRlb2dyYXBoaWMgdi1tYXRoZW1hdGljYWwgdmVjdG9yLWVmZmVjdCB2ZXJ0LWFkdi15IHZlcnQtb3JpZ2luLXggdmVydC1vcmlnaW4teSB3b3JkLXNwYWNpbmcgd3JpdGluZy1tb2RlIHhtbG5zOnhsaW5rIHgtaGVpZ2h0XCIuc3BsaXQoXCIgXCIpLmZvckVhY2goZnVuY3Rpb24oYSl7dmFyIGI9YS5yZXBsYWNlKENjLFxuRGMpO0tbYl09bmV3IEooYiwxLCExLGEsbnVsbCl9KTtcInhsaW5rOmFjdHVhdGUgeGxpbms6YXJjcm9sZSB4bGluazpocmVmIHhsaW5rOnJvbGUgeGxpbms6c2hvdyB4bGluazp0aXRsZSB4bGluazp0eXBlXCIuc3BsaXQoXCIgXCIpLmZvckVhY2goZnVuY3Rpb24oYSl7dmFyIGI9YS5yZXBsYWNlKENjLERjKTtLW2JdPW5ldyBKKGIsMSwhMSxhLFwiaHR0cDovL3d3dy53My5vcmcvMTk5OS94bGlua1wiKX0pO1tcInhtbDpiYXNlXCIsXCJ4bWw6bGFuZ1wiLFwieG1sOnNwYWNlXCJdLmZvckVhY2goZnVuY3Rpb24oYSl7dmFyIGI9YS5yZXBsYWNlKENjLERjKTtLW2JdPW5ldyBKKGIsMSwhMSxhLFwiaHR0cDovL3d3dy53My5vcmcvWE1MLzE5OTgvbmFtZXNwYWNlXCIpfSk7Sy50YWJJbmRleD1uZXcgSihcInRhYkluZGV4XCIsMSwhMSxcInRhYmluZGV4XCIsbnVsbCk7XG5mdW5jdGlvbiBFYyhhLGIsYyxkKXt2YXIgZT1LLmhhc093blByb3BlcnR5KGIpP0tbYl06bnVsbDt2YXIgZj1udWxsIT09ZT8wPT09ZS50eXBlOmQ/ITE6ISgyPGIubGVuZ3RoKXx8XCJvXCIhPT1iWzBdJiZcIk9cIiE9PWJbMF18fFwiblwiIT09YlsxXSYmXCJOXCIhPT1iWzFdPyExOiEwO2Z8fChCYyhiLGMsZSxkKSYmKGM9bnVsbCksZHx8bnVsbD09PWU/emMoYikmJihudWxsPT09Yz9hLnJlbW92ZUF0dHJpYnV0ZShiKTphLnNldEF0dHJpYnV0ZShiLFwiXCIrYykpOmUubXVzdFVzZVByb3BlcnR5P2FbZS5wcm9wZXJ0eU5hbWVdPW51bGw9PT1jPzM9PT1lLnR5cGU/ITE6XCJcIjpjOihiPWUuYXR0cmlidXRlTmFtZSxkPWUuYXR0cmlidXRlTmFtZXNwYWNlLG51bGw9PT1jP2EucmVtb3ZlQXR0cmlidXRlKGIpOihlPWUudHlwZSxjPTM9PT1lfHw0PT09ZSYmITA9PT1jP1wiXCI6XCJcIitjLGQ/YS5zZXRBdHRyaWJ1dGVOUyhkLGIsYyk6YS5zZXRBdHRyaWJ1dGUoYixjKSkpKX1cbmZ1bmN0aW9uIEZjKGEsYil7dmFyIGM9Yi5jaGVja2VkO3JldHVybiBwKHt9LGIse2RlZmF1bHRDaGVja2VkOnZvaWQgMCxkZWZhdWx0VmFsdWU6dm9pZCAwLHZhbHVlOnZvaWQgMCxjaGVja2VkOm51bGwhPWM/YzphLl93cmFwcGVyU3RhdGUuaW5pdGlhbENoZWNrZWR9KX1mdW5jdGlvbiBHYyhhLGIpe3ZhciBjPW51bGw9PWIuZGVmYXVsdFZhbHVlP1wiXCI6Yi5kZWZhdWx0VmFsdWUsZD1udWxsIT1iLmNoZWNrZWQ/Yi5jaGVja2VkOmIuZGVmYXVsdENoZWNrZWQ7Yz1IYyhudWxsIT1iLnZhbHVlP2IudmFsdWU6Yyk7YS5fd3JhcHBlclN0YXRlPXtpbml0aWFsQ2hlY2tlZDpkLGluaXRpYWxWYWx1ZTpjLGNvbnRyb2xsZWQ6XCJjaGVja2JveFwiPT09Yi50eXBlfHxcInJhZGlvXCI9PT1iLnR5cGU/bnVsbCE9Yi5jaGVja2VkOm51bGwhPWIudmFsdWV9fWZ1bmN0aW9uIEljKGEsYil7Yj1iLmNoZWNrZWQ7bnVsbCE9YiYmRWMoYSxcImNoZWNrZWRcIixiLCExKX1cbmZ1bmN0aW9uIEpjKGEsYil7SWMoYSxiKTt2YXIgYz1IYyhiLnZhbHVlKTtpZihudWxsIT1jKWlmKFwibnVtYmVyXCI9PT1iLnR5cGUpe2lmKDA9PT1jJiZcIlwiPT09YS52YWx1ZXx8YS52YWx1ZSE9YylhLnZhbHVlPVwiXCIrY31lbHNlIGEudmFsdWUhPT1cIlwiK2MmJihhLnZhbHVlPVwiXCIrYyk7Yi5oYXNPd25Qcm9wZXJ0eShcInZhbHVlXCIpP0tjKGEsYi50eXBlLGMpOmIuaGFzT3duUHJvcGVydHkoXCJkZWZhdWx0VmFsdWVcIikmJktjKGEsYi50eXBlLEhjKGIuZGVmYXVsdFZhbHVlKSk7bnVsbD09Yi5jaGVja2VkJiZudWxsIT1iLmRlZmF1bHRDaGVja2VkJiYoYS5kZWZhdWx0Q2hlY2tlZD0hIWIuZGVmYXVsdENoZWNrZWQpfVxuZnVuY3Rpb24gTGMoYSxiKXtpZihiLmhhc093blByb3BlcnR5KFwidmFsdWVcIil8fGIuaGFzT3duUHJvcGVydHkoXCJkZWZhdWx0VmFsdWVcIikpXCJcIj09PWEudmFsdWUmJihhLnZhbHVlPVwiXCIrYS5fd3JhcHBlclN0YXRlLmluaXRpYWxWYWx1ZSksYS5kZWZhdWx0VmFsdWU9XCJcIithLl93cmFwcGVyU3RhdGUuaW5pdGlhbFZhbHVlO2I9YS5uYW1lO1wiXCIhPT1iJiYoYS5uYW1lPVwiXCIpO2EuZGVmYXVsdENoZWNrZWQ9IWEuZGVmYXVsdENoZWNrZWQ7YS5kZWZhdWx0Q2hlY2tlZD0hYS5kZWZhdWx0Q2hlY2tlZDtcIlwiIT09YiYmKGEubmFtZT1iKX1mdW5jdGlvbiBLYyhhLGIsYyl7aWYoXCJudW1iZXJcIiE9PWJ8fGEub3duZXJEb2N1bWVudC5hY3RpdmVFbGVtZW50IT09YSludWxsPT1jP2EuZGVmYXVsdFZhbHVlPVwiXCIrYS5fd3JhcHBlclN0YXRlLmluaXRpYWxWYWx1ZTphLmRlZmF1bHRWYWx1ZSE9PVwiXCIrYyYmKGEuZGVmYXVsdFZhbHVlPVwiXCIrYyl9XG5mdW5jdGlvbiBIYyhhKXtzd2l0Y2godHlwZW9mIGEpe2Nhc2UgXCJib29sZWFuXCI6Y2FzZSBcIm51bWJlclwiOmNhc2UgXCJvYmplY3RcIjpjYXNlIFwic3RyaW5nXCI6Y2FzZSBcInVuZGVmaW5lZFwiOnJldHVybiBhO2RlZmF1bHQ6cmV0dXJuXCJcIn19dmFyIE1jPXtjaGFuZ2U6e3BoYXNlZFJlZ2lzdHJhdGlvbk5hbWVzOntidWJibGVkOlwib25DaGFuZ2VcIixjYXB0dXJlZDpcIm9uQ2hhbmdlQ2FwdHVyZVwifSxkZXBlbmRlbmNpZXM6XCJibHVyIGNoYW5nZSBjbGljayBmb2N1cyBpbnB1dCBrZXlkb3duIGtleXVwIHNlbGVjdGlvbmNoYW5nZVwiLnNwbGl0KFwiIFwiKX19O2Z1bmN0aW9uIE5jKGEsYixjKXthPUguZ2V0UG9vbGVkKE1jLmNoYW5nZSxhLGIsYyk7YS50eXBlPVwiY2hhbmdlXCI7T2IoYyk7WWEoYSk7cmV0dXJuIGF9dmFyIE9jPW51bGwsUGM9bnVsbDtmdW5jdGlvbiBRYyhhKXtJYShhLCExKX1mdW5jdGlvbiBSYyhhKXt2YXIgYj1PYShhKTtpZihkYyhiKSlyZXR1cm4gYX1cbmZ1bmN0aW9uIFNjKGEsYil7aWYoXCJjaGFuZ2VcIj09PWEpcmV0dXJuIGJ9dmFyIFRjPSExO20uY2FuVXNlRE9NJiYoVGM9JGIoXCJpbnB1dFwiKSYmKCFkb2N1bWVudC5kb2N1bWVudE1vZGV8fDk8ZG9jdW1lbnQuZG9jdW1lbnRNb2RlKSk7ZnVuY3Rpb24gVWMoKXtPYyYmKE9jLmRldGFjaEV2ZW50KFwib25wcm9wZXJ0eWNoYW5nZVwiLFZjKSxQYz1PYz1udWxsKX1mdW5jdGlvbiBWYyhhKXtcInZhbHVlXCI9PT1hLnByb3BlcnR5TmFtZSYmUmMoUGMpJiYoYT1OYyhQYyxhLFpiKGEpKSxXYihRYyxhKSl9ZnVuY3Rpb24gV2MoYSxiLGMpe1wiZm9jdXNcIj09PWE/KFVjKCksT2M9YixQYz1jLE9jLmF0dGFjaEV2ZW50KFwib25wcm9wZXJ0eWNoYW5nZVwiLFZjKSk6XCJibHVyXCI9PT1hJiZVYygpfWZ1bmN0aW9uIFhjKGEpe2lmKFwic2VsZWN0aW9uY2hhbmdlXCI9PT1hfHxcImtleXVwXCI9PT1hfHxcImtleWRvd25cIj09PWEpcmV0dXJuIFJjKFBjKX1cbmZ1bmN0aW9uIFljKGEsYil7aWYoXCJjbGlja1wiPT09YSlyZXR1cm4gUmMoYil9ZnVuY3Rpb24gWmMoYSxiKXtpZihcImlucHV0XCI9PT1hfHxcImNoYW5nZVwiPT09YSlyZXR1cm4gUmMoYil9XG52YXIgJGM9e2V2ZW50VHlwZXM6TWMsX2lzSW5wdXRFdmVudFN1cHBvcnRlZDpUYyxleHRyYWN0RXZlbnRzOmZ1bmN0aW9uKGEsYixjLGQpe3ZhciBlPWI/T2EoYik6d2luZG93LGY9dm9pZCAwLGc9dm9pZCAwLGg9ZS5ub2RlTmFtZSYmZS5ub2RlTmFtZS50b0xvd2VyQ2FzZSgpO1wic2VsZWN0XCI9PT1ofHxcImlucHV0XCI9PT1oJiZcImZpbGVcIj09PWUudHlwZT9mPVNjOlliKGUpP1RjP2Y9WmM6KGY9WGMsZz1XYyk6KGg9ZS5ub2RlTmFtZSkmJlwiaW5wdXRcIj09PWgudG9Mb3dlckNhc2UoKSYmKFwiY2hlY2tib3hcIj09PWUudHlwZXx8XCJyYWRpb1wiPT09ZS50eXBlKSYmKGY9WWMpO2lmKGYmJihmPWYoYSxiKSkpcmV0dXJuIE5jKGYsYyxkKTtnJiZnKGEsZSxiKTtcImJsdXJcIj09PWEmJm51bGwhPWImJihhPWIuX3dyYXBwZXJTdGF0ZXx8ZS5fd3JhcHBlclN0YXRlKSYmYS5jb250cm9sbGVkJiZcIm51bWJlclwiPT09ZS50eXBlJiZLYyhlLFwibnVtYmVyXCIsZS52YWx1ZSl9fSxhZD1ILmV4dGVuZCh7dmlldzpudWxsLFxuZGV0YWlsOm51bGx9KSxiZD17QWx0OlwiYWx0S2V5XCIsQ29udHJvbDpcImN0cmxLZXlcIixNZXRhOlwibWV0YUtleVwiLFNoaWZ0Olwic2hpZnRLZXlcIn07ZnVuY3Rpb24gY2QoYSl7dmFyIGI9dGhpcy5uYXRpdmVFdmVudDtyZXR1cm4gYi5nZXRNb2RpZmllclN0YXRlP2IuZ2V0TW9kaWZpZXJTdGF0ZShhKTooYT1iZFthXSk/ISFiW2FdOiExfWZ1bmN0aW9uIGRkKCl7cmV0dXJuIGNkfVxudmFyIGVkPWFkLmV4dGVuZCh7c2NyZWVuWDpudWxsLHNjcmVlblk6bnVsbCxjbGllbnRYOm51bGwsY2xpZW50WTpudWxsLHBhZ2VYOm51bGwscGFnZVk6bnVsbCxjdHJsS2V5Om51bGwsc2hpZnRLZXk6bnVsbCxhbHRLZXk6bnVsbCxtZXRhS2V5Om51bGwsZ2V0TW9kaWZpZXJTdGF0ZTpkZCxidXR0b246bnVsbCxidXR0b25zOm51bGwscmVsYXRlZFRhcmdldDpmdW5jdGlvbihhKXtyZXR1cm4gYS5yZWxhdGVkVGFyZ2V0fHwoYS5mcm9tRWxlbWVudD09PWEuc3JjRWxlbWVudD9hLnRvRWxlbWVudDphLmZyb21FbGVtZW50KX19KSxmZD1lZC5leHRlbmQoe3BvaW50ZXJJZDpudWxsLHdpZHRoOm51bGwsaGVpZ2h0Om51bGwscHJlc3N1cmU6bnVsbCx0aWx0WDpudWxsLHRpbHRZOm51bGwscG9pbnRlclR5cGU6bnVsbCxpc1ByaW1hcnk6bnVsbH0pLGdkPXttb3VzZUVudGVyOntyZWdpc3RyYXRpb25OYW1lOlwib25Nb3VzZUVudGVyXCIsZGVwZW5kZW5jaWVzOltcIm1vdXNlb3V0XCIsXCJtb3VzZW92ZXJcIl19LFxubW91c2VMZWF2ZTp7cmVnaXN0cmF0aW9uTmFtZTpcIm9uTW91c2VMZWF2ZVwiLGRlcGVuZGVuY2llczpbXCJtb3VzZW91dFwiLFwibW91c2VvdmVyXCJdfSxwb2ludGVyRW50ZXI6e3JlZ2lzdHJhdGlvbk5hbWU6XCJvblBvaW50ZXJFbnRlclwiLGRlcGVuZGVuY2llczpbXCJwb2ludGVyb3V0XCIsXCJwb2ludGVyb3ZlclwiXX0scG9pbnRlckxlYXZlOntyZWdpc3RyYXRpb25OYW1lOlwib25Qb2ludGVyTGVhdmVcIixkZXBlbmRlbmNpZXM6W1wicG9pbnRlcm91dFwiLFwicG9pbnRlcm92ZXJcIl19fSxoZD17ZXZlbnRUeXBlczpnZCxleHRyYWN0RXZlbnRzOmZ1bmN0aW9uKGEsYixjLGQpe3ZhciBlPVwibW91c2VvdmVyXCI9PT1hfHxcInBvaW50ZXJvdmVyXCI9PT1hLGY9XCJtb3VzZW91dFwiPT09YXx8XCJwb2ludGVyb3V0XCI9PT1hO2lmKGUmJihjLnJlbGF0ZWRUYXJnZXR8fGMuZnJvbUVsZW1lbnQpfHwhZiYmIWUpcmV0dXJuIG51bGw7ZT1kLndpbmRvdz09PWQ/ZDooZT1kLm93bmVyRG9jdW1lbnQpP2UuZGVmYXVsdFZpZXd8fFxuZS5wYXJlbnRXaW5kb3c6d2luZG93O2Y/KGY9YixiPShiPWMucmVsYXRlZFRhcmdldHx8Yy50b0VsZW1lbnQpP05hKGIpOm51bGwpOmY9bnVsbDtpZihmPT09YilyZXR1cm4gbnVsbDt2YXIgZz12b2lkIDAsaD12b2lkIDAsaz12b2lkIDAsbj12b2lkIDA7aWYoXCJtb3VzZW91dFwiPT09YXx8XCJtb3VzZW92ZXJcIj09PWEpZz1lZCxoPWdkLm1vdXNlTGVhdmUsaz1nZC5tb3VzZUVudGVyLG49XCJtb3VzZVwiO2Vsc2UgaWYoXCJwb2ludGVyb3V0XCI9PT1hfHxcInBvaW50ZXJvdmVyXCI9PT1hKWc9ZmQsaD1nZC5wb2ludGVyTGVhdmUsaz1nZC5wb2ludGVyRW50ZXIsbj1cInBvaW50ZXJcIjthPW51bGw9PWY/ZTpPYShmKTtlPW51bGw9PWI/ZTpPYShiKTtoPWcuZ2V0UG9vbGVkKGgsZixjLGQpO2gudHlwZT1uK1wibGVhdmVcIjtoLnRhcmdldD1hO2gucmVsYXRlZFRhcmdldD1lO2M9Zy5nZXRQb29sZWQoayxiLGMsZCk7Yy50eXBlPW4rXCJlbnRlclwiO2MudGFyZ2V0PWU7Yy5yZWxhdGVkVGFyZ2V0PWE7WmEoaCxcbmMsZixiKTtyZXR1cm5baCxjXX19O2Z1bmN0aW9uIGlkKGEpe3ZhciBiPWE7aWYoYS5hbHRlcm5hdGUpZm9yKDtiLnJldHVybjspYj1iLnJldHVybjtlbHNle2lmKDAhPT0oYi5lZmZlY3RUYWcmMikpcmV0dXJuIDE7Zm9yKDtiLnJldHVybjspaWYoYj1iLnJldHVybiwwIT09KGIuZWZmZWN0VGFnJjIpKXJldHVybiAxfXJldHVybiAzPT09Yi50YWc/MjozfWZ1bmN0aW9uIGpkKGEpezIhPT1pZChhKT9BKFwiMTg4XCIpOnZvaWQgMH1cbmZ1bmN0aW9uIGtkKGEpe3ZhciBiPWEuYWx0ZXJuYXRlO2lmKCFiKXJldHVybiBiPWlkKGEpLDM9PT1iP0EoXCIxODhcIik6dm9pZCAwLDE9PT1iP251bGw6YTtmb3IodmFyIGM9YSxkPWI7Oyl7dmFyIGU9Yy5yZXR1cm4sZj1lP2UuYWx0ZXJuYXRlOm51bGw7aWYoIWV8fCFmKWJyZWFrO2lmKGUuY2hpbGQ9PT1mLmNoaWxkKXtmb3IodmFyIGc9ZS5jaGlsZDtnOyl7aWYoZz09PWMpcmV0dXJuIGpkKGUpLGE7aWYoZz09PWQpcmV0dXJuIGpkKGUpLGI7Zz1nLnNpYmxpbmd9QShcIjE4OFwiKX1pZihjLnJldHVybiE9PWQucmV0dXJuKWM9ZSxkPWY7ZWxzZXtnPSExO2Zvcih2YXIgaD1lLmNoaWxkO2g7KXtpZihoPT09Yyl7Zz0hMDtjPWU7ZD1mO2JyZWFrfWlmKGg9PT1kKXtnPSEwO2Q9ZTtjPWY7YnJlYWt9aD1oLnNpYmxpbmd9aWYoIWcpe2ZvcihoPWYuY2hpbGQ7aDspe2lmKGg9PT1jKXtnPSEwO2M9ZjtkPWU7YnJlYWt9aWYoaD09PWQpe2c9ITA7ZD1mO2M9ZTticmVha31oPWguc2libGluZ31nP1xudm9pZCAwOkEoXCIxODlcIil9fWMuYWx0ZXJuYXRlIT09ZD9BKFwiMTkwXCIpOnZvaWQgMH0zIT09Yy50YWc/QShcIjE4OFwiKTp2b2lkIDA7cmV0dXJuIGMuc3RhdGVOb2RlLmN1cnJlbnQ9PT1jP2E6Yn1mdW5jdGlvbiBsZChhKXthPWtkKGEpO2lmKCFhKXJldHVybiBudWxsO2Zvcih2YXIgYj1hOzspe2lmKDU9PT1iLnRhZ3x8Nj09PWIudGFnKXJldHVybiBiO2lmKGIuY2hpbGQpYi5jaGlsZC5yZXR1cm49YixiPWIuY2hpbGQ7ZWxzZXtpZihiPT09YSlicmVhaztmb3IoOyFiLnNpYmxpbmc7KXtpZighYi5yZXR1cm58fGIucmV0dXJuPT09YSlyZXR1cm4gbnVsbDtiPWIucmV0dXJufWIuc2libGluZy5yZXR1cm49Yi5yZXR1cm47Yj1iLnNpYmxpbmd9fXJldHVybiBudWxsfVxuZnVuY3Rpb24gbWQoYSl7YT1rZChhKTtpZighYSlyZXR1cm4gbnVsbDtmb3IodmFyIGI9YTs7KXtpZig1PT09Yi50YWd8fDY9PT1iLnRhZylyZXR1cm4gYjtpZihiLmNoaWxkJiY0IT09Yi50YWcpYi5jaGlsZC5yZXR1cm49YixiPWIuY2hpbGQ7ZWxzZXtpZihiPT09YSlicmVhaztmb3IoOyFiLnNpYmxpbmc7KXtpZighYi5yZXR1cm58fGIucmV0dXJuPT09YSlyZXR1cm4gbnVsbDtiPWIucmV0dXJufWIuc2libGluZy5yZXR1cm49Yi5yZXR1cm47Yj1iLnNpYmxpbmd9fXJldHVybiBudWxsfXZhciBuZD1ILmV4dGVuZCh7YW5pbWF0aW9uTmFtZTpudWxsLGVsYXBzZWRUaW1lOm51bGwscHNldWRvRWxlbWVudDpudWxsfSksb2Q9SC5leHRlbmQoe2NsaXBib2FyZERhdGE6ZnVuY3Rpb24oYSl7cmV0dXJuXCJjbGlwYm9hcmREYXRhXCJpbiBhP2EuY2xpcGJvYXJkRGF0YTp3aW5kb3cuY2xpcGJvYXJkRGF0YX19KSxwZD1hZC5leHRlbmQoe3JlbGF0ZWRUYXJnZXQ6bnVsbH0pO1xuZnVuY3Rpb24gcWQoYSl7dmFyIGI9YS5rZXlDb2RlO1wiY2hhckNvZGVcImluIGE/KGE9YS5jaGFyQ29kZSwwPT09YSYmMTM9PT1iJiYoYT0xMykpOmE9YjsxMD09PWEmJihhPTEzKTtyZXR1cm4gMzI8PWF8fDEzPT09YT9hOjB9XG52YXIgcmQ9e0VzYzpcIkVzY2FwZVwiLFNwYWNlYmFyOlwiIFwiLExlZnQ6XCJBcnJvd0xlZnRcIixVcDpcIkFycm93VXBcIixSaWdodDpcIkFycm93UmlnaHRcIixEb3duOlwiQXJyb3dEb3duXCIsRGVsOlwiRGVsZXRlXCIsV2luOlwiT1NcIixNZW51OlwiQ29udGV4dE1lbnVcIixBcHBzOlwiQ29udGV4dE1lbnVcIixTY3JvbGw6XCJTY3JvbGxMb2NrXCIsTW96UHJpbnRhYmxlS2V5OlwiVW5pZGVudGlmaWVkXCJ9LHNkPXs4OlwiQmFja3NwYWNlXCIsOTpcIlRhYlwiLDEyOlwiQ2xlYXJcIiwxMzpcIkVudGVyXCIsMTY6XCJTaGlmdFwiLDE3OlwiQ29udHJvbFwiLDE4OlwiQWx0XCIsMTk6XCJQYXVzZVwiLDIwOlwiQ2Fwc0xvY2tcIiwyNzpcIkVzY2FwZVwiLDMyOlwiIFwiLDMzOlwiUGFnZVVwXCIsMzQ6XCJQYWdlRG93blwiLDM1OlwiRW5kXCIsMzY6XCJIb21lXCIsMzc6XCJBcnJvd0xlZnRcIiwzODpcIkFycm93VXBcIiwzOTpcIkFycm93UmlnaHRcIiw0MDpcIkFycm93RG93blwiLDQ1OlwiSW5zZXJ0XCIsNDY6XCJEZWxldGVcIiwxMTI6XCJGMVwiLDExMzpcIkYyXCIsMTE0OlwiRjNcIiwxMTU6XCJGNFwiLFxuMTE2OlwiRjVcIiwxMTc6XCJGNlwiLDExODpcIkY3XCIsMTE5OlwiRjhcIiwxMjA6XCJGOVwiLDEyMTpcIkYxMFwiLDEyMjpcIkYxMVwiLDEyMzpcIkYxMlwiLDE0NDpcIk51bUxvY2tcIiwxNDU6XCJTY3JvbGxMb2NrXCIsMjI0OlwiTWV0YVwifSx0ZD1hZC5leHRlbmQoe2tleTpmdW5jdGlvbihhKXtpZihhLmtleSl7dmFyIGI9cmRbYS5rZXldfHxhLmtleTtpZihcIlVuaWRlbnRpZmllZFwiIT09YilyZXR1cm4gYn1yZXR1cm5cImtleXByZXNzXCI9PT1hLnR5cGU/KGE9cWQoYSksMTM9PT1hP1wiRW50ZXJcIjpTdHJpbmcuZnJvbUNoYXJDb2RlKGEpKTpcImtleWRvd25cIj09PWEudHlwZXx8XCJrZXl1cFwiPT09YS50eXBlP3NkW2Eua2V5Q29kZV18fFwiVW5pZGVudGlmaWVkXCI6XCJcIn0sbG9jYXRpb246bnVsbCxjdHJsS2V5Om51bGwsc2hpZnRLZXk6bnVsbCxhbHRLZXk6bnVsbCxtZXRhS2V5Om51bGwscmVwZWF0Om51bGwsbG9jYWxlOm51bGwsZ2V0TW9kaWZpZXJTdGF0ZTpkZCxjaGFyQ29kZTpmdW5jdGlvbihhKXtyZXR1cm5cImtleXByZXNzXCI9PT1cbmEudHlwZT9xZChhKTowfSxrZXlDb2RlOmZ1bmN0aW9uKGEpe3JldHVyblwia2V5ZG93blwiPT09YS50eXBlfHxcImtleXVwXCI9PT1hLnR5cGU/YS5rZXlDb2RlOjB9LHdoaWNoOmZ1bmN0aW9uKGEpe3JldHVyblwia2V5cHJlc3NcIj09PWEudHlwZT9xZChhKTpcImtleWRvd25cIj09PWEudHlwZXx8XCJrZXl1cFwiPT09YS50eXBlP2Eua2V5Q29kZTowfX0pLHVkPWVkLmV4dGVuZCh7ZGF0YVRyYW5zZmVyOm51bGx9KSx2ZD1hZC5leHRlbmQoe3RvdWNoZXM6bnVsbCx0YXJnZXRUb3VjaGVzOm51bGwsY2hhbmdlZFRvdWNoZXM6bnVsbCxhbHRLZXk6bnVsbCxtZXRhS2V5Om51bGwsY3RybEtleTpudWxsLHNoaWZ0S2V5Om51bGwsZ2V0TW9kaWZpZXJTdGF0ZTpkZH0pLHdkPUguZXh0ZW5kKHtwcm9wZXJ0eU5hbWU6bnVsbCxlbGFwc2VkVGltZTpudWxsLHBzZXVkb0VsZW1lbnQ6bnVsbH0pLHhkPWVkLmV4dGVuZCh7ZGVsdGFYOmZ1bmN0aW9uKGEpe3JldHVyblwiZGVsdGFYXCJpbiBhP2EuZGVsdGFYOlwid2hlZWxEZWx0YVhcImluXG5hPy1hLndoZWVsRGVsdGFYOjB9LGRlbHRhWTpmdW5jdGlvbihhKXtyZXR1cm5cImRlbHRhWVwiaW4gYT9hLmRlbHRhWTpcIndoZWVsRGVsdGFZXCJpbiBhPy1hLndoZWVsRGVsdGFZOlwid2hlZWxEZWx0YVwiaW4gYT8tYS53aGVlbERlbHRhOjB9LGRlbHRhWjpudWxsLGRlbHRhTW9kZTpudWxsfSkseWQ9W1tcImFib3J0XCIsXCJhYm9ydFwiXSxbZmIsXCJhbmltYXRpb25FbmRcIl0sW2diLFwiYW5pbWF0aW9uSXRlcmF0aW9uXCJdLFtoYixcImFuaW1hdGlvblN0YXJ0XCJdLFtcImNhbnBsYXlcIixcImNhblBsYXlcIl0sW1wiY2FucGxheXRocm91Z2hcIixcImNhblBsYXlUaHJvdWdoXCJdLFtcImRyYWdcIixcImRyYWdcIl0sW1wiZHJhZ2VudGVyXCIsXCJkcmFnRW50ZXJcIl0sW1wiZHJhZ2V4aXRcIixcImRyYWdFeGl0XCJdLFtcImRyYWdsZWF2ZVwiLFwiZHJhZ0xlYXZlXCJdLFtcImRyYWdvdmVyXCIsXCJkcmFnT3ZlclwiXSxbXCJkdXJhdGlvbmNoYW5nZVwiLFwiZHVyYXRpb25DaGFuZ2VcIl0sW1wiZW1wdGllZFwiLFwiZW1wdGllZFwiXSxbXCJlbmNyeXB0ZWRcIixcImVuY3J5cHRlZFwiXSxcbltcImVuZGVkXCIsXCJlbmRlZFwiXSxbXCJlcnJvclwiLFwiZXJyb3JcIl0sW1wiZ290cG9pbnRlcmNhcHR1cmVcIixcImdvdFBvaW50ZXJDYXB0dXJlXCJdLFtcImxvYWRcIixcImxvYWRcIl0sW1wibG9hZGVkZGF0YVwiLFwibG9hZGVkRGF0YVwiXSxbXCJsb2FkZWRtZXRhZGF0YVwiLFwibG9hZGVkTWV0YWRhdGFcIl0sW1wibG9hZHN0YXJ0XCIsXCJsb2FkU3RhcnRcIl0sW1wibG9zdHBvaW50ZXJjYXB0dXJlXCIsXCJsb3N0UG9pbnRlckNhcHR1cmVcIl0sW1wibW91c2Vtb3ZlXCIsXCJtb3VzZU1vdmVcIl0sW1wibW91c2VvdXRcIixcIm1vdXNlT3V0XCJdLFtcIm1vdXNlb3ZlclwiLFwibW91c2VPdmVyXCJdLFtcInBsYXlpbmdcIixcInBsYXlpbmdcIl0sW1wicG9pbnRlcm1vdmVcIixcInBvaW50ZXJNb3ZlXCJdLFtcInBvaW50ZXJvdXRcIixcInBvaW50ZXJPdXRcIl0sW1wicG9pbnRlcm92ZXJcIixcInBvaW50ZXJPdmVyXCJdLFtcInByb2dyZXNzXCIsXCJwcm9ncmVzc1wiXSxbXCJzY3JvbGxcIixcInNjcm9sbFwiXSxbXCJzZWVraW5nXCIsXCJzZWVraW5nXCJdLFtcInN0YWxsZWRcIixcInN0YWxsZWRcIl0sXG5bXCJzdXNwZW5kXCIsXCJzdXNwZW5kXCJdLFtcInRpbWV1cGRhdGVcIixcInRpbWVVcGRhdGVcIl0sW1widG9nZ2xlXCIsXCJ0b2dnbGVcIl0sW1widG91Y2htb3ZlXCIsXCJ0b3VjaE1vdmVcIl0sW2liLFwidHJhbnNpdGlvbkVuZFwiXSxbXCJ3YWl0aW5nXCIsXCJ3YWl0aW5nXCJdLFtcIndoZWVsXCIsXCJ3aGVlbFwiXV0semQ9e30sQWQ9e307ZnVuY3Rpb24gQmQoYSxiKXt2YXIgYz1hWzBdO2E9YVsxXTt2YXIgZD1cIm9uXCIrKGFbMF0udG9VcHBlckNhc2UoKSthLnNsaWNlKDEpKTtiPXtwaGFzZWRSZWdpc3RyYXRpb25OYW1lczp7YnViYmxlZDpkLGNhcHR1cmVkOmQrXCJDYXB0dXJlXCJ9LGRlcGVuZGVuY2llczpbY10saXNJbnRlcmFjdGl2ZTpifTt6ZFthXT1iO0FkW2NdPWJ9XG5bW1wiYmx1clwiLFwiYmx1clwiXSxbXCJjYW5jZWxcIixcImNhbmNlbFwiXSxbXCJjbGlja1wiLFwiY2xpY2tcIl0sW1wiY2xvc2VcIixcImNsb3NlXCJdLFtcImNvbnRleHRtZW51XCIsXCJjb250ZXh0TWVudVwiXSxbXCJjb3B5XCIsXCJjb3B5XCJdLFtcImN1dFwiLFwiY3V0XCJdLFtcImRibGNsaWNrXCIsXCJkb3VibGVDbGlja1wiXSxbXCJkcmFnZW5kXCIsXCJkcmFnRW5kXCJdLFtcImRyYWdzdGFydFwiLFwiZHJhZ1N0YXJ0XCJdLFtcImRyb3BcIixcImRyb3BcIl0sW1wiZm9jdXNcIixcImZvY3VzXCJdLFtcImlucHV0XCIsXCJpbnB1dFwiXSxbXCJpbnZhbGlkXCIsXCJpbnZhbGlkXCJdLFtcImtleWRvd25cIixcImtleURvd25cIl0sW1wia2V5cHJlc3NcIixcImtleVByZXNzXCJdLFtcImtleXVwXCIsXCJrZXlVcFwiXSxbXCJtb3VzZWRvd25cIixcIm1vdXNlRG93blwiXSxbXCJtb3VzZXVwXCIsXCJtb3VzZVVwXCJdLFtcInBhc3RlXCIsXCJwYXN0ZVwiXSxbXCJwYXVzZVwiLFwicGF1c2VcIl0sW1wicGxheVwiLFwicGxheVwiXSxbXCJwb2ludGVyY2FuY2VsXCIsXCJwb2ludGVyQ2FuY2VsXCJdLFtcInBvaW50ZXJkb3duXCIsXCJwb2ludGVyRG93blwiXSxcbltcInBvaW50ZXJ1cFwiLFwicG9pbnRlclVwXCJdLFtcInJhdGVjaGFuZ2VcIixcInJhdGVDaGFuZ2VcIl0sW1wicmVzZXRcIixcInJlc2V0XCJdLFtcInNlZWtlZFwiLFwic2Vla2VkXCJdLFtcInN1Ym1pdFwiLFwic3VibWl0XCJdLFtcInRvdWNoY2FuY2VsXCIsXCJ0b3VjaENhbmNlbFwiXSxbXCJ0b3VjaGVuZFwiLFwidG91Y2hFbmRcIl0sW1widG91Y2hzdGFydFwiLFwidG91Y2hTdGFydFwiXSxbXCJ2b2x1bWVjaGFuZ2VcIixcInZvbHVtZUNoYW5nZVwiXV0uZm9yRWFjaChmdW5jdGlvbihhKXtCZChhLCEwKX0pO3lkLmZvckVhY2goZnVuY3Rpb24oYSl7QmQoYSwhMSl9KTtcbnZhciBDZD17ZXZlbnRUeXBlczp6ZCxpc0ludGVyYWN0aXZlVG9wTGV2ZWxFdmVudFR5cGU6ZnVuY3Rpb24oYSl7YT1BZFthXTtyZXR1cm4gdm9pZCAwIT09YSYmITA9PT1hLmlzSW50ZXJhY3RpdmV9LGV4dHJhY3RFdmVudHM6ZnVuY3Rpb24oYSxiLGMsZCl7dmFyIGU9QWRbYV07aWYoIWUpcmV0dXJuIG51bGw7c3dpdGNoKGEpe2Nhc2UgXCJrZXlwcmVzc1wiOmlmKDA9PT1xZChjKSlyZXR1cm4gbnVsbDtjYXNlIFwia2V5ZG93blwiOmNhc2UgXCJrZXl1cFwiOmE9dGQ7YnJlYWs7Y2FzZSBcImJsdXJcIjpjYXNlIFwiZm9jdXNcIjphPXBkO2JyZWFrO2Nhc2UgXCJjbGlja1wiOmlmKDI9PT1jLmJ1dHRvbilyZXR1cm4gbnVsbDtjYXNlIFwiZGJsY2xpY2tcIjpjYXNlIFwibW91c2Vkb3duXCI6Y2FzZSBcIm1vdXNlbW92ZVwiOmNhc2UgXCJtb3VzZXVwXCI6Y2FzZSBcIm1vdXNlb3V0XCI6Y2FzZSBcIm1vdXNlb3ZlclwiOmNhc2UgXCJjb250ZXh0bWVudVwiOmE9ZWQ7YnJlYWs7Y2FzZSBcImRyYWdcIjpjYXNlIFwiZHJhZ2VuZFwiOmNhc2UgXCJkcmFnZW50ZXJcIjpjYXNlIFwiZHJhZ2V4aXRcIjpjYXNlIFwiZHJhZ2xlYXZlXCI6Y2FzZSBcImRyYWdvdmVyXCI6Y2FzZSBcImRyYWdzdGFydFwiOmNhc2UgXCJkcm9wXCI6YT1cbnVkO2JyZWFrO2Nhc2UgXCJ0b3VjaGNhbmNlbFwiOmNhc2UgXCJ0b3VjaGVuZFwiOmNhc2UgXCJ0b3VjaG1vdmVcIjpjYXNlIFwidG91Y2hzdGFydFwiOmE9dmQ7YnJlYWs7Y2FzZSBmYjpjYXNlIGdiOmNhc2UgaGI6YT1uZDticmVhaztjYXNlIGliOmE9d2Q7YnJlYWs7Y2FzZSBcInNjcm9sbFwiOmE9YWQ7YnJlYWs7Y2FzZSBcIndoZWVsXCI6YT14ZDticmVhaztjYXNlIFwiY29weVwiOmNhc2UgXCJjdXRcIjpjYXNlIFwicGFzdGVcIjphPW9kO2JyZWFrO2Nhc2UgXCJnb3Rwb2ludGVyY2FwdHVyZVwiOmNhc2UgXCJsb3N0cG9pbnRlcmNhcHR1cmVcIjpjYXNlIFwicG9pbnRlcmNhbmNlbFwiOmNhc2UgXCJwb2ludGVyZG93blwiOmNhc2UgXCJwb2ludGVybW92ZVwiOmNhc2UgXCJwb2ludGVyb3V0XCI6Y2FzZSBcInBvaW50ZXJvdmVyXCI6Y2FzZSBcInBvaW50ZXJ1cFwiOmE9ZmQ7YnJlYWs7ZGVmYXVsdDphPUh9Yj1hLmdldFBvb2xlZChlLGIsYyxkKTtZYShiKTtyZXR1cm4gYn19LERkPUNkLmlzSW50ZXJhY3RpdmVUb3BMZXZlbEV2ZW50VHlwZSxcbkVkPVtdO2Z1bmN0aW9uIEZkKGEpe3ZhciBiPWEudGFyZ2V0SW5zdDtkb3tpZighYil7YS5hbmNlc3RvcnMucHVzaChiKTticmVha312YXIgYztmb3IoYz1iO2MucmV0dXJuOyljPWMucmV0dXJuO2M9MyE9PWMudGFnP251bGw6Yy5zdGF0ZU5vZGUuY29udGFpbmVySW5mbztpZighYylicmVhazthLmFuY2VzdG9ycy5wdXNoKGIpO2I9TmEoYyl9d2hpbGUoYik7Zm9yKGM9MDtjPGEuYW5jZXN0b3JzLmxlbmd0aDtjKyspYj1hLmFuY2VzdG9yc1tjXSxKYShhLnRvcExldmVsVHlwZSxiLGEubmF0aXZlRXZlbnQsWmIoYS5uYXRpdmVFdmVudCkpfXZhciBHZD0hMDtmdW5jdGlvbiBJZChhKXtHZD0hIWF9ZnVuY3Rpb24gTChhLGIpe2lmKCFiKXJldHVybiBudWxsO3ZhciBjPShEZChhKT9KZDpLZCkuYmluZChudWxsLGEpO2IuYWRkRXZlbnRMaXN0ZW5lcihhLGMsITEpfVxuZnVuY3Rpb24gTGQoYSxiKXtpZighYilyZXR1cm4gbnVsbDt2YXIgYz0oRGQoYSk/SmQ6S2QpLmJpbmQobnVsbCxhKTtiLmFkZEV2ZW50TGlzdGVuZXIoYSxjLCEwKX1mdW5jdGlvbiBKZChhLGIpe1RiKEtkLGEsYil9ZnVuY3Rpb24gS2QoYSxiKXtpZihHZCl7dmFyIGM9WmIoYik7Yz1OYShjKTtudWxsPT09Y3x8XCJudW1iZXJcIiE9PXR5cGVvZiBjLnRhZ3x8Mj09PWlkKGMpfHwoYz1udWxsKTtpZihFZC5sZW5ndGgpe3ZhciBkPUVkLnBvcCgpO2QudG9wTGV2ZWxUeXBlPWE7ZC5uYXRpdmVFdmVudD1iO2QudGFyZ2V0SW5zdD1jO2E9ZH1lbHNlIGE9e3RvcExldmVsVHlwZTphLG5hdGl2ZUV2ZW50OmIsdGFyZ2V0SW5zdDpjLGFuY2VzdG9yczpbXX07dHJ5e1diKEZkLGEpfWZpbmFsbHl7YS50b3BMZXZlbFR5cGU9bnVsbCxhLm5hdGl2ZUV2ZW50PW51bGwsYS50YXJnZXRJbnN0PW51bGwsYS5hbmNlc3RvcnMubGVuZ3RoPTAsMTA+RWQubGVuZ3RoJiZFZC5wdXNoKGEpfX19XG52YXIgTWQ9e2dldCBfZW5hYmxlZCgpe3JldHVybiBHZH0sc2V0RW5hYmxlZDpJZCxpc0VuYWJsZWQ6ZnVuY3Rpb24oKXtyZXR1cm4gR2R9LHRyYXBCdWJibGVkRXZlbnQ6TCx0cmFwQ2FwdHVyZWRFdmVudDpMZCxkaXNwYXRjaEV2ZW50OktkfSxOZD17fSxPZD0wLFBkPVwiX3JlYWN0TGlzdGVuZXJzSURcIisoXCJcIitNYXRoLnJhbmRvbSgpKS5zbGljZSgyKTtmdW5jdGlvbiBRZChhKXtPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGwoYSxQZCl8fChhW1BkXT1PZCsrLE5kW2FbUGRdXT17fSk7cmV0dXJuIE5kW2FbUGRdXX1mdW5jdGlvbiBSZChhKXtmb3IoO2EmJmEuZmlyc3RDaGlsZDspYT1hLmZpcnN0Q2hpbGQ7cmV0dXJuIGF9XG5mdW5jdGlvbiBTZChhLGIpe3ZhciBjPVJkKGEpO2E9MDtmb3IodmFyIGQ7Yzspe2lmKDM9PT1jLm5vZGVUeXBlKXtkPWErYy50ZXh0Q29udGVudC5sZW5ndGg7aWYoYTw9YiYmZD49YilyZXR1cm57bm9kZTpjLG9mZnNldDpiLWF9O2E9ZH1hOntmb3IoO2M7KXtpZihjLm5leHRTaWJsaW5nKXtjPWMubmV4dFNpYmxpbmc7YnJlYWsgYX1jPWMucGFyZW50Tm9kZX1jPXZvaWQgMH1jPVJkKGMpfX1mdW5jdGlvbiBUZChhKXt2YXIgYj1hJiZhLm5vZGVOYW1lJiZhLm5vZGVOYW1lLnRvTG93ZXJDYXNlKCk7cmV0dXJuIGImJihcImlucHV0XCI9PT1iJiZcInRleHRcIj09PWEudHlwZXx8XCJ0ZXh0YXJlYVwiPT09Ynx8XCJ0cnVlXCI9PT1hLmNvbnRlbnRFZGl0YWJsZSl9XG52YXIgVWQ9bS5jYW5Vc2VET00mJlwiZG9jdW1lbnRNb2RlXCJpbiBkb2N1bWVudCYmMTE+PWRvY3VtZW50LmRvY3VtZW50TW9kZSxWZD17c2VsZWN0OntwaGFzZWRSZWdpc3RyYXRpb25OYW1lczp7YnViYmxlZDpcIm9uU2VsZWN0XCIsY2FwdHVyZWQ6XCJvblNlbGVjdENhcHR1cmVcIn0sZGVwZW5kZW5jaWVzOlwiYmx1ciBjb250ZXh0bWVudSBmb2N1cyBrZXlkb3duIGtleXVwIG1vdXNlZG93biBtb3VzZXVwIHNlbGVjdGlvbmNoYW5nZVwiLnNwbGl0KFwiIFwiKX19LFdkPW51bGwsWGQ9bnVsbCxZZD1udWxsLFpkPSExO1xuZnVuY3Rpb24gJGQoYSxiKXtpZihaZHx8bnVsbD09V2R8fFdkIT09ZGEoKSlyZXR1cm4gbnVsbDt2YXIgYz1XZDtcInNlbGVjdGlvblN0YXJ0XCJpbiBjJiZUZChjKT9jPXtzdGFydDpjLnNlbGVjdGlvblN0YXJ0LGVuZDpjLnNlbGVjdGlvbkVuZH06d2luZG93LmdldFNlbGVjdGlvbj8oYz13aW5kb3cuZ2V0U2VsZWN0aW9uKCksYz17YW5jaG9yTm9kZTpjLmFuY2hvck5vZGUsYW5jaG9yT2Zmc2V0OmMuYW5jaG9yT2Zmc2V0LGZvY3VzTm9kZTpjLmZvY3VzTm9kZSxmb2N1c09mZnNldDpjLmZvY3VzT2Zmc2V0fSk6Yz12b2lkIDA7cmV0dXJuIFlkJiZlYShZZCxjKT9udWxsOihZZD1jLGE9SC5nZXRQb29sZWQoVmQuc2VsZWN0LFhkLGEsYiksYS50eXBlPVwic2VsZWN0XCIsYS50YXJnZXQ9V2QsWWEoYSksYSl9XG52YXIgYWU9e2V2ZW50VHlwZXM6VmQsZXh0cmFjdEV2ZW50czpmdW5jdGlvbihhLGIsYyxkKXt2YXIgZT1kLndpbmRvdz09PWQ/ZC5kb2N1bWVudDo5PT09ZC5ub2RlVHlwZT9kOmQub3duZXJEb2N1bWVudCxmO2lmKCEoZj0hZSkpe2E6e2U9UWQoZSk7Zj1zYS5vblNlbGVjdDtmb3IodmFyIGc9MDtnPGYubGVuZ3RoO2crKyl7dmFyIGg9ZltnXTtpZighZS5oYXNPd25Qcm9wZXJ0eShoKXx8IWVbaF0pe2U9ITE7YnJlYWsgYX19ZT0hMH1mPSFlfWlmKGYpcmV0dXJuIG51bGw7ZT1iP09hKGIpOndpbmRvdztzd2l0Y2goYSl7Y2FzZSBcImZvY3VzXCI6aWYoWWIoZSl8fFwidHJ1ZVwiPT09ZS5jb250ZW50RWRpdGFibGUpV2Q9ZSxYZD1iLFlkPW51bGw7YnJlYWs7Y2FzZSBcImJsdXJcIjpZZD1YZD1XZD1udWxsO2JyZWFrO2Nhc2UgXCJtb3VzZWRvd25cIjpaZD0hMDticmVhaztjYXNlIFwiY29udGV4dG1lbnVcIjpjYXNlIFwibW91c2V1cFwiOnJldHVybiBaZD0hMSwkZChjLGQpO2Nhc2UgXCJzZWxlY3Rpb25jaGFuZ2VcIjppZihVZClicmVhaztcbmNhc2UgXCJrZXlkb3duXCI6Y2FzZSBcImtleXVwXCI6cmV0dXJuICRkKGMsZCl9cmV0dXJuIG51bGx9fTtHYS5pbmplY3RFdmVudFBsdWdpbk9yZGVyKFwiUmVzcG9uZGVyRXZlbnRQbHVnaW4gU2ltcGxlRXZlbnRQbHVnaW4gVGFwRXZlbnRQbHVnaW4gRW50ZXJMZWF2ZUV2ZW50UGx1Z2luIENoYW5nZUV2ZW50UGx1Z2luIFNlbGVjdEV2ZW50UGx1Z2luIEJlZm9yZUlucHV0RXZlbnRQbHVnaW5cIi5zcGxpdChcIiBcIikpO3dhPVFhLmdldEZpYmVyQ3VycmVudFByb3BzRnJvbU5vZGU7eGE9UWEuZ2V0SW5zdGFuY2VGcm9tTm9kZTt5YT1RYS5nZXROb2RlRnJvbUluc3RhbmNlO0dhLmluamVjdEV2ZW50UGx1Z2luc0J5TmFtZSh7U2ltcGxlRXZlbnRQbHVnaW46Q2QsRW50ZXJMZWF2ZUV2ZW50UGx1Z2luOmhkLENoYW5nZUV2ZW50UGx1Z2luOiRjLFNlbGVjdEV2ZW50UGx1Z2luOmFlLEJlZm9yZUlucHV0RXZlbnRQbHVnaW46SWJ9KTt2YXIgYmU9dm9pZCAwO1xuYmU9XCJvYmplY3RcIj09PXR5cGVvZiBwZXJmb3JtYW5jZSYmXCJmdW5jdGlvblwiPT09dHlwZW9mIHBlcmZvcm1hbmNlLm5vdz9mdW5jdGlvbigpe3JldHVybiBwZXJmb3JtYW5jZS5ub3coKX06ZnVuY3Rpb24oKXtyZXR1cm4gRGF0ZS5ub3coKX07dmFyIGNlPXZvaWQgMCxkZT12b2lkIDA7XG5pZihtLmNhblVzZURPTSl7dmFyIGVlPVtdLGZlPTAsZ2U9e30saGU9LTEsaWU9ITEsamU9ITEsa2U9MCxsZT0zMyxtZT0zMyxuZT17ZGlkVGltZW91dDohMSx0aW1lUmVtYWluaW5nOmZ1bmN0aW9uKCl7dmFyIGE9a2UtYmUoKTtyZXR1cm4gMDxhP2E6MH19LG9lPWZ1bmN0aW9uKGEsYil7aWYoZ2VbYl0pdHJ5e2EobmUpfWZpbmFsbHl7ZGVsZXRlIGdlW2JdfX0scGU9XCJfX3JlYWN0SWRsZUNhbGxiYWNrJFwiK01hdGgucmFuZG9tKCkudG9TdHJpbmcoMzYpLnNsaWNlKDIpO3dpbmRvdy5hZGRFdmVudExpc3RlbmVyKFwibWVzc2FnZVwiLGZ1bmN0aW9uKGEpe2lmKGEuc291cmNlPT09d2luZG93JiZhLmRhdGE9PT1wZSYmKGllPSExLDAhPT1lZS5sZW5ndGgpKXtpZigwIT09ZWUubGVuZ3RoJiYoYT1iZSgpLCEoLTE9PT1oZXx8aGU+YSkpKXtoZT0tMTtuZS5kaWRUaW1lb3V0PSEwO2Zvcih2YXIgYj0wLGM9ZWUubGVuZ3RoO2I8YztiKyspe3ZhciBkPWVlW2JdLGU9ZC50aW1lb3V0VGltZTstMSE9PVxuZSYmZTw9YT9vZShkLnNjaGVkdWxlZENhbGxiYWNrLGQuY2FsbGJhY2tJZCk6LTEhPT1lJiYoLTE9PT1oZXx8ZTxoZSkmJihoZT1lKX19Zm9yKGE9YmUoKTswPGtlLWEmJjA8ZWUubGVuZ3RoOylhPWVlLnNoaWZ0KCksbmUuZGlkVGltZW91dD0hMSxvZShhLnNjaGVkdWxlZENhbGxiYWNrLGEuY2FsbGJhY2tJZCksYT1iZSgpOzA8ZWUubGVuZ3RoJiYhamUmJihqZT0hMCxyZXF1ZXN0QW5pbWF0aW9uRnJhbWUocWUpKX19LCExKTt2YXIgcWU9ZnVuY3Rpb24oYSl7amU9ITE7dmFyIGI9YS1rZSttZTtiPG1lJiZsZTxtZT8oOD5iJiYoYj04KSxtZT1iPGxlP2xlOmIpOmxlPWI7a2U9YSttZTtpZXx8KGllPSEwLHdpbmRvdy5wb3N0TWVzc2FnZShwZSxcIipcIikpfTtjZT1mdW5jdGlvbihhLGIpe3ZhciBjPS0xO251bGwhPWImJlwibnVtYmVyXCI9PT10eXBlb2YgYi50aW1lb3V0JiYoYz1iZSgpK2IudGltZW91dCk7aWYoLTE9PT1oZXx8LTEhPT1jJiZjPGhlKWhlPWM7ZmUrKztiPWZlO2VlLnB1c2goe3NjaGVkdWxlZENhbGxiYWNrOmEsXG5jYWxsYmFja0lkOmIsdGltZW91dFRpbWU6Y30pO2dlW2JdPSEwO2plfHwoamU9ITAscmVxdWVzdEFuaW1hdGlvbkZyYW1lKHFlKSk7cmV0dXJuIGJ9O2RlPWZ1bmN0aW9uKGEpe2RlbGV0ZSBnZVthXX19ZWxzZXt2YXIgcmU9MCxzZT17fTtjZT1mdW5jdGlvbihhKXt2YXIgYj1yZSsrLGM9c2V0VGltZW91dChmdW5jdGlvbigpe2Eoe3RpbWVSZW1haW5pbmc6ZnVuY3Rpb24oKXtyZXR1cm4gSW5maW5pdHl9LGRpZFRpbWVvdXQ6ITF9KX0pO3NlW2JdPWM7cmV0dXJuIGJ9O2RlPWZ1bmN0aW9uKGEpe3ZhciBiPXNlW2FdO2RlbGV0ZSBzZVthXTtjbGVhclRpbWVvdXQoYil9fWZ1bmN0aW9uIHRlKGEpe3ZhciBiPVwiXCI7Y2EuQ2hpbGRyZW4uZm9yRWFjaChhLGZ1bmN0aW9uKGEpe251bGw9PWF8fFwic3RyaW5nXCIhPT10eXBlb2YgYSYmXCJudW1iZXJcIiE9PXR5cGVvZiBhfHwoYis9YSl9KTtyZXR1cm4gYn1cbmZ1bmN0aW9uIHVlKGEsYil7YT1wKHtjaGlsZHJlbjp2b2lkIDB9LGIpO2lmKGI9dGUoYi5jaGlsZHJlbikpYS5jaGlsZHJlbj1iO3JldHVybiBhfWZ1bmN0aW9uIHZlKGEsYixjLGQpe2E9YS5vcHRpb25zO2lmKGIpe2I9e307Zm9yKHZhciBlPTA7ZTxjLmxlbmd0aDtlKyspYltcIiRcIitjW2VdXT0hMDtmb3IoYz0wO2M8YS5sZW5ndGg7YysrKWU9Yi5oYXNPd25Qcm9wZXJ0eShcIiRcIithW2NdLnZhbHVlKSxhW2NdLnNlbGVjdGVkIT09ZSYmKGFbY10uc2VsZWN0ZWQ9ZSksZSYmZCYmKGFbY10uZGVmYXVsdFNlbGVjdGVkPSEwKX1lbHNle2M9XCJcIitjO2I9bnVsbDtmb3IoZT0wO2U8YS5sZW5ndGg7ZSsrKXtpZihhW2VdLnZhbHVlPT09Yyl7YVtlXS5zZWxlY3RlZD0hMDtkJiYoYVtlXS5kZWZhdWx0U2VsZWN0ZWQ9ITApO3JldHVybn1udWxsIT09Ynx8YVtlXS5kaXNhYmxlZHx8KGI9YVtlXSl9bnVsbCE9PWImJihiLnNlbGVjdGVkPSEwKX19XG5mdW5jdGlvbiB3ZShhLGIpe3ZhciBjPWIudmFsdWU7YS5fd3JhcHBlclN0YXRlPXtpbml0aWFsVmFsdWU6bnVsbCE9Yz9jOmIuZGVmYXVsdFZhbHVlLHdhc011bHRpcGxlOiEhYi5tdWx0aXBsZX19ZnVuY3Rpb24geGUoYSxiKXtudWxsIT1iLmRhbmdlcm91c2x5U2V0SW5uZXJIVE1MP0EoXCI5MVwiKTp2b2lkIDA7cmV0dXJuIHAoe30sYix7dmFsdWU6dm9pZCAwLGRlZmF1bHRWYWx1ZTp2b2lkIDAsY2hpbGRyZW46XCJcIithLl93cmFwcGVyU3RhdGUuaW5pdGlhbFZhbHVlfSl9ZnVuY3Rpb24geWUoYSxiKXt2YXIgYz1iLnZhbHVlO251bGw9PWMmJihjPWIuZGVmYXVsdFZhbHVlLGI9Yi5jaGlsZHJlbixudWxsIT1iJiYobnVsbCE9Yz9BKFwiOTJcIik6dm9pZCAwLEFycmF5LmlzQXJyYXkoYikmJigxPj1iLmxlbmd0aD92b2lkIDA6QShcIjkzXCIpLGI9YlswXSksYz1cIlwiK2IpLG51bGw9PWMmJihjPVwiXCIpKTthLl93cmFwcGVyU3RhdGU9e2luaXRpYWxWYWx1ZTpcIlwiK2N9fVxuZnVuY3Rpb24gemUoYSxiKXt2YXIgYz1iLnZhbHVlO251bGwhPWMmJihjPVwiXCIrYyxjIT09YS52YWx1ZSYmKGEudmFsdWU9YyksbnVsbD09Yi5kZWZhdWx0VmFsdWUmJihhLmRlZmF1bHRWYWx1ZT1jKSk7bnVsbCE9Yi5kZWZhdWx0VmFsdWUmJihhLmRlZmF1bHRWYWx1ZT1iLmRlZmF1bHRWYWx1ZSl9ZnVuY3Rpb24gQWUoYSl7dmFyIGI9YS50ZXh0Q29udGVudDtiPT09YS5fd3JhcHBlclN0YXRlLmluaXRpYWxWYWx1ZSYmKGEudmFsdWU9Yil9dmFyIEJlPXtodG1sOlwiaHR0cDovL3d3dy53My5vcmcvMTk5OS94aHRtbFwiLG1hdGhtbDpcImh0dHA6Ly93d3cudzMub3JnLzE5OTgvTWF0aC9NYXRoTUxcIixzdmc6XCJodHRwOi8vd3d3LnczLm9yZy8yMDAwL3N2Z1wifTtcbmZ1bmN0aW9uIENlKGEpe3N3aXRjaChhKXtjYXNlIFwic3ZnXCI6cmV0dXJuXCJodHRwOi8vd3d3LnczLm9yZy8yMDAwL3N2Z1wiO2Nhc2UgXCJtYXRoXCI6cmV0dXJuXCJodHRwOi8vd3d3LnczLm9yZy8xOTk4L01hdGgvTWF0aE1MXCI7ZGVmYXVsdDpyZXR1cm5cImh0dHA6Ly93d3cudzMub3JnLzE5OTkveGh0bWxcIn19ZnVuY3Rpb24gRGUoYSxiKXtyZXR1cm4gbnVsbD09YXx8XCJodHRwOi8vd3d3LnczLm9yZy8xOTk5L3hodG1sXCI9PT1hP0NlKGIpOlwiaHR0cDovL3d3dy53My5vcmcvMjAwMC9zdmdcIj09PWEmJlwiZm9yZWlnbk9iamVjdFwiPT09Yj9cImh0dHA6Ly93d3cudzMub3JnLzE5OTkveGh0bWxcIjphfVxudmFyIEVlPXZvaWQgMCxGZT1mdW5jdGlvbihhKXtyZXR1cm5cInVuZGVmaW5lZFwiIT09dHlwZW9mIE1TQXBwJiZNU0FwcC5leGVjVW5zYWZlTG9jYWxGdW5jdGlvbj9mdW5jdGlvbihiLGMsZCxlKXtNU0FwcC5leGVjVW5zYWZlTG9jYWxGdW5jdGlvbihmdW5jdGlvbigpe3JldHVybiBhKGIsYyxkLGUpfSl9OmF9KGZ1bmN0aW9uKGEsYil7aWYoYS5uYW1lc3BhY2VVUkkhPT1CZS5zdmd8fFwiaW5uZXJIVE1MXCJpbiBhKWEuaW5uZXJIVE1MPWI7ZWxzZXtFZT1FZXx8ZG9jdW1lbnQuY3JlYXRlRWxlbWVudChcImRpdlwiKTtFZS5pbm5lckhUTUw9XCI8c3ZnPlwiK2IrXCI8L3N2Zz5cIjtmb3IoYj1FZS5maXJzdENoaWxkO2EuZmlyc3RDaGlsZDspYS5yZW1vdmVDaGlsZChhLmZpcnN0Q2hpbGQpO2Zvcig7Yi5maXJzdENoaWxkOylhLmFwcGVuZENoaWxkKGIuZmlyc3RDaGlsZCl9fSk7XG5mdW5jdGlvbiBHZShhLGIpe2lmKGIpe3ZhciBjPWEuZmlyc3RDaGlsZDtpZihjJiZjPT09YS5sYXN0Q2hpbGQmJjM9PT1jLm5vZGVUeXBlKXtjLm5vZGVWYWx1ZT1iO3JldHVybn19YS50ZXh0Q29udGVudD1ifVxudmFyIEhlPXthbmltYXRpb25JdGVyYXRpb25Db3VudDohMCxib3JkZXJJbWFnZU91dHNldDohMCxib3JkZXJJbWFnZVNsaWNlOiEwLGJvcmRlckltYWdlV2lkdGg6ITAsYm94RmxleDohMCxib3hGbGV4R3JvdXA6ITAsYm94T3JkaW5hbEdyb3VwOiEwLGNvbHVtbkNvdW50OiEwLGNvbHVtbnM6ITAsZmxleDohMCxmbGV4R3JvdzohMCxmbGV4UG9zaXRpdmU6ITAsZmxleFNocmluazohMCxmbGV4TmVnYXRpdmU6ITAsZmxleE9yZGVyOiEwLGdyaWRSb3c6ITAsZ3JpZFJvd0VuZDohMCxncmlkUm93U3BhbjohMCxncmlkUm93U3RhcnQ6ITAsZ3JpZENvbHVtbjohMCxncmlkQ29sdW1uRW5kOiEwLGdyaWRDb2x1bW5TcGFuOiEwLGdyaWRDb2x1bW5TdGFydDohMCxmb250V2VpZ2h0OiEwLGxpbmVDbGFtcDohMCxsaW5lSGVpZ2h0OiEwLG9wYWNpdHk6ITAsb3JkZXI6ITAsb3JwaGFuczohMCx0YWJTaXplOiEwLHdpZG93czohMCx6SW5kZXg6ITAsem9vbTohMCxmaWxsT3BhY2l0eTohMCxmbG9vZE9wYWNpdHk6ITAsXG5zdG9wT3BhY2l0eTohMCxzdHJva2VEYXNoYXJyYXk6ITAsc3Ryb2tlRGFzaG9mZnNldDohMCxzdHJva2VNaXRlcmxpbWl0OiEwLHN0cm9rZU9wYWNpdHk6ITAsc3Ryb2tlV2lkdGg6ITB9LEllPVtcIldlYmtpdFwiLFwibXNcIixcIk1velwiLFwiT1wiXTtPYmplY3Qua2V5cyhIZSkuZm9yRWFjaChmdW5jdGlvbihhKXtJZS5mb3JFYWNoKGZ1bmN0aW9uKGIpe2I9YithLmNoYXJBdCgwKS50b1VwcGVyQ2FzZSgpK2Euc3Vic3RyaW5nKDEpO0hlW2JdPUhlW2FdfSl9KTtcbmZ1bmN0aW9uIEplKGEsYil7YT1hLnN0eWxlO2Zvcih2YXIgYyBpbiBiKWlmKGIuaGFzT3duUHJvcGVydHkoYykpe3ZhciBkPTA9PT1jLmluZGV4T2YoXCItLVwiKTt2YXIgZT1jO3ZhciBmPWJbY107ZT1udWxsPT1mfHxcImJvb2xlYW5cIj09PXR5cGVvZiBmfHxcIlwiPT09Zj9cIlwiOmR8fFwibnVtYmVyXCIhPT10eXBlb2YgZnx8MD09PWZ8fEhlLmhhc093blByb3BlcnR5KGUpJiZIZVtlXT8oXCJcIitmKS50cmltKCk6ZitcInB4XCI7XCJmbG9hdFwiPT09YyYmKGM9XCJjc3NGbG9hdFwiKTtkP2Euc2V0UHJvcGVydHkoYyxlKTphW2NdPWV9fXZhciBLZT1wKHttZW51aXRlbTohMH0se2FyZWE6ITAsYmFzZTohMCxicjohMCxjb2w6ITAsZW1iZWQ6ITAsaHI6ITAsaW1nOiEwLGlucHV0OiEwLGtleWdlbjohMCxsaW5rOiEwLG1ldGE6ITAscGFyYW06ITAsc291cmNlOiEwLHRyYWNrOiEwLHdicjohMH0pO1xuZnVuY3Rpb24gTGUoYSxiLGMpe2ImJihLZVthXSYmKG51bGwhPWIuY2hpbGRyZW58fG51bGwhPWIuZGFuZ2Vyb3VzbHlTZXRJbm5lckhUTUw/QShcIjEzN1wiLGEsYygpKTp2b2lkIDApLG51bGwhPWIuZGFuZ2Vyb3VzbHlTZXRJbm5lckhUTUwmJihudWxsIT1iLmNoaWxkcmVuP0EoXCI2MFwiKTp2b2lkIDAsXCJvYmplY3RcIj09PXR5cGVvZiBiLmRhbmdlcm91c2x5U2V0SW5uZXJIVE1MJiZcIl9faHRtbFwiaW4gYi5kYW5nZXJvdXNseVNldElubmVySFRNTD92b2lkIDA6QShcIjYxXCIpKSxudWxsIT1iLnN0eWxlJiZcIm9iamVjdFwiIT09dHlwZW9mIGIuc3R5bGU/QShcIjYyXCIsYygpKTp2b2lkIDApfVxuZnVuY3Rpb24gTWUoYSxiKXtpZigtMT09PWEuaW5kZXhPZihcIi1cIikpcmV0dXJuXCJzdHJpbmdcIj09PXR5cGVvZiBiLmlzO3N3aXRjaChhKXtjYXNlIFwiYW5ub3RhdGlvbi14bWxcIjpjYXNlIFwiY29sb3ItcHJvZmlsZVwiOmNhc2UgXCJmb250LWZhY2VcIjpjYXNlIFwiZm9udC1mYWNlLXNyY1wiOmNhc2UgXCJmb250LWZhY2UtdXJpXCI6Y2FzZSBcImZvbnQtZmFjZS1mb3JtYXRcIjpjYXNlIFwiZm9udC1mYWNlLW5hbWVcIjpjYXNlIFwibWlzc2luZy1nbHlwaFwiOnJldHVybiExO2RlZmF1bHQ6cmV0dXJuITB9fXZhciBOZT12LnRoYXRSZXR1cm5zKFwiXCIpO1xuZnVuY3Rpb24gT2UoYSxiKXthPTk9PT1hLm5vZGVUeXBlfHwxMT09PWEubm9kZVR5cGU/YTphLm93bmVyRG9jdW1lbnQ7dmFyIGM9UWQoYSk7Yj1zYVtiXTtmb3IodmFyIGQ9MDtkPGIubGVuZ3RoO2QrKyl7dmFyIGU9YltkXTtpZighYy5oYXNPd25Qcm9wZXJ0eShlKXx8IWNbZV0pe3N3aXRjaChlKXtjYXNlIFwic2Nyb2xsXCI6TGQoXCJzY3JvbGxcIixhKTticmVhaztjYXNlIFwiZm9jdXNcIjpjYXNlIFwiYmx1clwiOkxkKFwiZm9jdXNcIixhKTtMZChcImJsdXJcIixhKTtjLmJsdXI9ITA7Yy5mb2N1cz0hMDticmVhaztjYXNlIFwiY2FuY2VsXCI6Y2FzZSBcImNsb3NlXCI6JGIoZSwhMCkmJkxkKGUsYSk7YnJlYWs7Y2FzZSBcImludmFsaWRcIjpjYXNlIFwic3VibWl0XCI6Y2FzZSBcInJlc2V0XCI6YnJlYWs7ZGVmYXVsdDotMT09PWpiLmluZGV4T2YoZSkmJkwoZSxhKX1jW2VdPSEwfX19XG5mdW5jdGlvbiBQZShhLGIsYyxkKXtjPTk9PT1jLm5vZGVUeXBlP2M6Yy5vd25lckRvY3VtZW50O2Q9PT1CZS5odG1sJiYoZD1DZShhKSk7ZD09PUJlLmh0bWw/XCJzY3JpcHRcIj09PWE/KGE9Yy5jcmVhdGVFbGVtZW50KFwiZGl2XCIpLGEuaW5uZXJIVE1MPVwiPHNjcmlwdD5cXHgzYy9zY3JpcHQ+XCIsYT1hLnJlbW92ZUNoaWxkKGEuZmlyc3RDaGlsZCkpOmE9XCJzdHJpbmdcIj09PXR5cGVvZiBiLmlzP2MuY3JlYXRlRWxlbWVudChhLHtpczpiLmlzfSk6Yy5jcmVhdGVFbGVtZW50KGEpOmE9Yy5jcmVhdGVFbGVtZW50TlMoZCxhKTtyZXR1cm4gYX1mdW5jdGlvbiBRZShhLGIpe3JldHVybig5PT09Yi5ub2RlVHlwZT9iOmIub3duZXJEb2N1bWVudCkuY3JlYXRlVGV4dE5vZGUoYSl9XG5mdW5jdGlvbiBSZShhLGIsYyxkKXt2YXIgZT1NZShiLGMpO3N3aXRjaChiKXtjYXNlIFwiaWZyYW1lXCI6Y2FzZSBcIm9iamVjdFwiOkwoXCJsb2FkXCIsYSk7dmFyIGY9YzticmVhaztjYXNlIFwidmlkZW9cIjpjYXNlIFwiYXVkaW9cIjpmb3IoZj0wO2Y8amIubGVuZ3RoO2YrKylMKGpiW2ZdLGEpO2Y9YzticmVhaztjYXNlIFwic291cmNlXCI6TChcImVycm9yXCIsYSk7Zj1jO2JyZWFrO2Nhc2UgXCJpbWdcIjpjYXNlIFwiaW1hZ2VcIjpjYXNlIFwibGlua1wiOkwoXCJlcnJvclwiLGEpO0woXCJsb2FkXCIsYSk7Zj1jO2JyZWFrO2Nhc2UgXCJmb3JtXCI6TChcInJlc2V0XCIsYSk7TChcInN1Ym1pdFwiLGEpO2Y9YzticmVhaztjYXNlIFwiZGV0YWlsc1wiOkwoXCJ0b2dnbGVcIixhKTtmPWM7YnJlYWs7Y2FzZSBcImlucHV0XCI6R2MoYSxjKTtmPUZjKGEsYyk7TChcImludmFsaWRcIixhKTtPZShkLFwib25DaGFuZ2VcIik7YnJlYWs7Y2FzZSBcIm9wdGlvblwiOmY9dWUoYSxjKTticmVhaztjYXNlIFwic2VsZWN0XCI6d2UoYSxjKTtmPXAoe30sYyx7dmFsdWU6dm9pZCAwfSk7XG5MKFwiaW52YWxpZFwiLGEpO09lKGQsXCJvbkNoYW5nZVwiKTticmVhaztjYXNlIFwidGV4dGFyZWFcIjp5ZShhLGMpO2Y9eGUoYSxjKTtMKFwiaW52YWxpZFwiLGEpO09lKGQsXCJvbkNoYW5nZVwiKTticmVhaztkZWZhdWx0OmY9Y31MZShiLGYsTmUpO3ZhciBnPWYsaDtmb3IoaCBpbiBnKWlmKGcuaGFzT3duUHJvcGVydHkoaCkpe3ZhciBrPWdbaF07XCJzdHlsZVwiPT09aD9KZShhLGssTmUpOlwiZGFuZ2Vyb3VzbHlTZXRJbm5lckhUTUxcIj09PWg/KGs9az9rLl9faHRtbDp2b2lkIDAsbnVsbCE9ayYmRmUoYSxrKSk6XCJjaGlsZHJlblwiPT09aD9cInN0cmluZ1wiPT09dHlwZW9mIGs/KFwidGV4dGFyZWFcIiE9PWJ8fFwiXCIhPT1rKSYmR2UoYSxrKTpcIm51bWJlclwiPT09dHlwZW9mIGsmJkdlKGEsXCJcIitrKTpcInN1cHByZXNzQ29udGVudEVkaXRhYmxlV2FybmluZ1wiIT09aCYmXCJzdXBwcmVzc0h5ZHJhdGlvbldhcm5pbmdcIiE9PWgmJlwiYXV0b0ZvY3VzXCIhPT1oJiYocmEuaGFzT3duUHJvcGVydHkoaCk/bnVsbCE9ayYmT2UoZCxcbmgpOm51bGwhPWsmJkVjKGEsaCxrLGUpKX1zd2l0Y2goYil7Y2FzZSBcImlucHV0XCI6Y2MoYSk7TGMoYSxjKTticmVhaztjYXNlIFwidGV4dGFyZWFcIjpjYyhhKTtBZShhLGMpO2JyZWFrO2Nhc2UgXCJvcHRpb25cIjpudWxsIT1jLnZhbHVlJiZhLnNldEF0dHJpYnV0ZShcInZhbHVlXCIsYy52YWx1ZSk7YnJlYWs7Y2FzZSBcInNlbGVjdFwiOmEubXVsdGlwbGU9ISFjLm11bHRpcGxlO2I9Yy52YWx1ZTtudWxsIT1iP3ZlKGEsISFjLm11bHRpcGxlLGIsITEpOm51bGwhPWMuZGVmYXVsdFZhbHVlJiZ2ZShhLCEhYy5tdWx0aXBsZSxjLmRlZmF1bHRWYWx1ZSwhMCk7YnJlYWs7ZGVmYXVsdDpcImZ1bmN0aW9uXCI9PT10eXBlb2YgZi5vbkNsaWNrJiYoYS5vbmNsaWNrPXYpfX1cbmZ1bmN0aW9uIFNlKGEsYixjLGQsZSl7dmFyIGY9bnVsbDtzd2l0Y2goYil7Y2FzZSBcImlucHV0XCI6Yz1GYyhhLGMpO2Q9RmMoYSxkKTtmPVtdO2JyZWFrO2Nhc2UgXCJvcHRpb25cIjpjPXVlKGEsYyk7ZD11ZShhLGQpO2Y9W107YnJlYWs7Y2FzZSBcInNlbGVjdFwiOmM9cCh7fSxjLHt2YWx1ZTp2b2lkIDB9KTtkPXAoe30sZCx7dmFsdWU6dm9pZCAwfSk7Zj1bXTticmVhaztjYXNlIFwidGV4dGFyZWFcIjpjPXhlKGEsYyk7ZD14ZShhLGQpO2Y9W107YnJlYWs7ZGVmYXVsdDpcImZ1bmN0aW9uXCIhPT10eXBlb2YgYy5vbkNsaWNrJiZcImZ1bmN0aW9uXCI9PT10eXBlb2YgZC5vbkNsaWNrJiYoYS5vbmNsaWNrPXYpfUxlKGIsZCxOZSk7Yj1hPXZvaWQgMDt2YXIgZz1udWxsO2ZvcihhIGluIGMpaWYoIWQuaGFzT3duUHJvcGVydHkoYSkmJmMuaGFzT3duUHJvcGVydHkoYSkmJm51bGwhPWNbYV0paWYoXCJzdHlsZVwiPT09YSl7dmFyIGg9Y1thXTtmb3IoYiBpbiBoKWguaGFzT3duUHJvcGVydHkoYikmJihnfHxcbihnPXt9KSxnW2JdPVwiXCIpfWVsc2VcImRhbmdlcm91c2x5U2V0SW5uZXJIVE1MXCIhPT1hJiZcImNoaWxkcmVuXCIhPT1hJiZcInN1cHByZXNzQ29udGVudEVkaXRhYmxlV2FybmluZ1wiIT09YSYmXCJzdXBwcmVzc0h5ZHJhdGlvbldhcm5pbmdcIiE9PWEmJlwiYXV0b0ZvY3VzXCIhPT1hJiYocmEuaGFzT3duUHJvcGVydHkoYSk/Znx8KGY9W10pOihmPWZ8fFtdKS5wdXNoKGEsbnVsbCkpO2ZvcihhIGluIGQpe3ZhciBrPWRbYV07aD1udWxsIT1jP2NbYV06dm9pZCAwO2lmKGQuaGFzT3duUHJvcGVydHkoYSkmJmshPT1oJiYobnVsbCE9a3x8bnVsbCE9aCkpaWYoXCJzdHlsZVwiPT09YSlpZihoKXtmb3IoYiBpbiBoKSFoLmhhc093blByb3BlcnR5KGIpfHxrJiZrLmhhc093blByb3BlcnR5KGIpfHwoZ3x8KGc9e30pLGdbYl09XCJcIik7Zm9yKGIgaW4gaylrLmhhc093blByb3BlcnR5KGIpJiZoW2JdIT09a1tiXSYmKGd8fChnPXt9KSxnW2JdPWtbYl0pfWVsc2UgZ3x8KGZ8fChmPVtdKSxmLnB1c2goYSxnKSksXG5nPWs7ZWxzZVwiZGFuZ2Vyb3VzbHlTZXRJbm5lckhUTUxcIj09PWE/KGs9az9rLl9faHRtbDp2b2lkIDAsaD1oP2guX19odG1sOnZvaWQgMCxudWxsIT1rJiZoIT09ayYmKGY9Znx8W10pLnB1c2goYSxcIlwiK2spKTpcImNoaWxkcmVuXCI9PT1hP2g9PT1rfHxcInN0cmluZ1wiIT09dHlwZW9mIGsmJlwibnVtYmVyXCIhPT10eXBlb2Yga3x8KGY9Znx8W10pLnB1c2goYSxcIlwiK2spOlwic3VwcHJlc3NDb250ZW50RWRpdGFibGVXYXJuaW5nXCIhPT1hJiZcInN1cHByZXNzSHlkcmF0aW9uV2FybmluZ1wiIT09YSYmKHJhLmhhc093blByb3BlcnR5KGEpPyhudWxsIT1rJiZPZShlLGEpLGZ8fGg9PT1rfHwoZj1bXSkpOihmPWZ8fFtdKS5wdXNoKGEsaykpfWcmJihmPWZ8fFtdKS5wdXNoKFwic3R5bGVcIixnKTtyZXR1cm4gZn1cbmZ1bmN0aW9uIFRlKGEsYixjLGQsZSl7XCJpbnB1dFwiPT09YyYmXCJyYWRpb1wiPT09ZS50eXBlJiZudWxsIT1lLm5hbWUmJkljKGEsZSk7TWUoYyxkKTtkPU1lKGMsZSk7Zm9yKHZhciBmPTA7ZjxiLmxlbmd0aDtmKz0yKXt2YXIgZz1iW2ZdLGg9YltmKzFdO1wic3R5bGVcIj09PWc/SmUoYSxoLE5lKTpcImRhbmdlcm91c2x5U2V0SW5uZXJIVE1MXCI9PT1nP0ZlKGEsaCk6XCJjaGlsZHJlblwiPT09Zz9HZShhLGgpOkVjKGEsZyxoLGQpfXN3aXRjaChjKXtjYXNlIFwiaW5wdXRcIjpKYyhhLGUpO2JyZWFrO2Nhc2UgXCJ0ZXh0YXJlYVwiOnplKGEsZSk7YnJlYWs7Y2FzZSBcInNlbGVjdFwiOmEuX3dyYXBwZXJTdGF0ZS5pbml0aWFsVmFsdWU9dm9pZCAwLGI9YS5fd3JhcHBlclN0YXRlLndhc011bHRpcGxlLGEuX3dyYXBwZXJTdGF0ZS53YXNNdWx0aXBsZT0hIWUubXVsdGlwbGUsYz1lLnZhbHVlLG51bGwhPWM/dmUoYSwhIWUubXVsdGlwbGUsYywhMSk6YiE9PSEhZS5tdWx0aXBsZSYmKG51bGwhPWUuZGVmYXVsdFZhbHVlP1xudmUoYSwhIWUubXVsdGlwbGUsZS5kZWZhdWx0VmFsdWUsITApOnZlKGEsISFlLm11bHRpcGxlLGUubXVsdGlwbGU/W106XCJcIiwhMSkpfX1cbmZ1bmN0aW9uIFVlKGEsYixjLGQsZSl7c3dpdGNoKGIpe2Nhc2UgXCJpZnJhbWVcIjpjYXNlIFwib2JqZWN0XCI6TChcImxvYWRcIixhKTticmVhaztjYXNlIFwidmlkZW9cIjpjYXNlIFwiYXVkaW9cIjpmb3IoZD0wO2Q8amIubGVuZ3RoO2QrKylMKGpiW2RdLGEpO2JyZWFrO2Nhc2UgXCJzb3VyY2VcIjpMKFwiZXJyb3JcIixhKTticmVhaztjYXNlIFwiaW1nXCI6Y2FzZSBcImltYWdlXCI6Y2FzZSBcImxpbmtcIjpMKFwiZXJyb3JcIixhKTtMKFwibG9hZFwiLGEpO2JyZWFrO2Nhc2UgXCJmb3JtXCI6TChcInJlc2V0XCIsYSk7TChcInN1Ym1pdFwiLGEpO2JyZWFrO2Nhc2UgXCJkZXRhaWxzXCI6TChcInRvZ2dsZVwiLGEpO2JyZWFrO2Nhc2UgXCJpbnB1dFwiOkdjKGEsYyk7TChcImludmFsaWRcIixhKTtPZShlLFwib25DaGFuZ2VcIik7YnJlYWs7Y2FzZSBcInNlbGVjdFwiOndlKGEsYyk7TChcImludmFsaWRcIixhKTtPZShlLFwib25DaGFuZ2VcIik7YnJlYWs7Y2FzZSBcInRleHRhcmVhXCI6eWUoYSxjKSxMKFwiaW52YWxpZFwiLGEpLE9lKGUsXCJvbkNoYW5nZVwiKX1MZShiLFxuYyxOZSk7ZD1udWxsO2Zvcih2YXIgZiBpbiBjKWlmKGMuaGFzT3duUHJvcGVydHkoZikpe3ZhciBnPWNbZl07XCJjaGlsZHJlblwiPT09Zj9cInN0cmluZ1wiPT09dHlwZW9mIGc/YS50ZXh0Q29udGVudCE9PWcmJihkPVtcImNoaWxkcmVuXCIsZ10pOlwibnVtYmVyXCI9PT10eXBlb2YgZyYmYS50ZXh0Q29udGVudCE9PVwiXCIrZyYmKGQ9W1wiY2hpbGRyZW5cIixcIlwiK2ddKTpyYS5oYXNPd25Qcm9wZXJ0eShmKSYmbnVsbCE9ZyYmT2UoZSxmKX1zd2l0Y2goYil7Y2FzZSBcImlucHV0XCI6Y2MoYSk7TGMoYSxjKTticmVhaztjYXNlIFwidGV4dGFyZWFcIjpjYyhhKTtBZShhLGMpO2JyZWFrO2Nhc2UgXCJzZWxlY3RcIjpjYXNlIFwib3B0aW9uXCI6YnJlYWs7ZGVmYXVsdDpcImZ1bmN0aW9uXCI9PT10eXBlb2YgYy5vbkNsaWNrJiYoYS5vbmNsaWNrPXYpfXJldHVybiBkfWZ1bmN0aW9uIFZlKGEsYil7cmV0dXJuIGEubm9kZVZhbHVlIT09Yn1cbnZhciBXZT17Y3JlYXRlRWxlbWVudDpQZSxjcmVhdGVUZXh0Tm9kZTpRZSxzZXRJbml0aWFsUHJvcGVydGllczpSZSxkaWZmUHJvcGVydGllczpTZSx1cGRhdGVQcm9wZXJ0aWVzOlRlLGRpZmZIeWRyYXRlZFByb3BlcnRpZXM6VWUsZGlmZkh5ZHJhdGVkVGV4dDpWZSx3YXJuRm9yVW5tYXRjaGVkVGV4dDpmdW5jdGlvbigpe30sd2FybkZvckRlbGV0ZWRIeWRyYXRhYmxlRWxlbWVudDpmdW5jdGlvbigpe30sd2FybkZvckRlbGV0ZWRIeWRyYXRhYmxlVGV4dDpmdW5jdGlvbigpe30sd2FybkZvckluc2VydGVkSHlkcmF0ZWRFbGVtZW50OmZ1bmN0aW9uKCl7fSx3YXJuRm9ySW5zZXJ0ZWRIeWRyYXRlZFRleHQ6ZnVuY3Rpb24oKXt9LHJlc3RvcmVDb250cm9sbGVkU3RhdGU6ZnVuY3Rpb24oYSxiLGMpe3N3aXRjaChiKXtjYXNlIFwiaW5wdXRcIjpKYyhhLGMpO2I9Yy5uYW1lO2lmKFwicmFkaW9cIj09PWMudHlwZSYmbnVsbCE9Yil7Zm9yKGM9YTtjLnBhcmVudE5vZGU7KWM9Yy5wYXJlbnROb2RlO1xuYz1jLnF1ZXJ5U2VsZWN0b3JBbGwoXCJpbnB1dFtuYW1lPVwiK0pTT04uc3RyaW5naWZ5KFwiXCIrYikrJ11bdHlwZT1cInJhZGlvXCJdJyk7Zm9yKGI9MDtiPGMubGVuZ3RoO2IrKyl7dmFyIGQ9Y1tiXTtpZihkIT09YSYmZC5mb3JtPT09YS5mb3JtKXt2YXIgZT1QYShkKTtlP3ZvaWQgMDpBKFwiOTBcIik7ZGMoZCk7SmMoZCxlKX19fWJyZWFrO2Nhc2UgXCJ0ZXh0YXJlYVwiOnplKGEsYyk7YnJlYWs7Y2FzZSBcInNlbGVjdFwiOmI9Yy52YWx1ZSxudWxsIT1iJiZ2ZShhLCEhYy5tdWx0aXBsZSxiLCExKX19fSxYZT1udWxsLFllPW51bGw7ZnVuY3Rpb24gWmUoYSxiKXtzd2l0Y2goYSl7Y2FzZSBcImJ1dHRvblwiOmNhc2UgXCJpbnB1dFwiOmNhc2UgXCJzZWxlY3RcIjpjYXNlIFwidGV4dGFyZWFcIjpyZXR1cm4hIWIuYXV0b0ZvY3VzfXJldHVybiExfVxuZnVuY3Rpb24gJGUoYSxiKXtyZXR1cm5cInRleHRhcmVhXCI9PT1hfHxcInN0cmluZ1wiPT09dHlwZW9mIGIuY2hpbGRyZW58fFwibnVtYmVyXCI9PT10eXBlb2YgYi5jaGlsZHJlbnx8XCJvYmplY3RcIj09PXR5cGVvZiBiLmRhbmdlcm91c2x5U2V0SW5uZXJIVE1MJiZudWxsIT09Yi5kYW5nZXJvdXNseVNldElubmVySFRNTCYmXCJzdHJpbmdcIj09PXR5cGVvZiBiLmRhbmdlcm91c2x5U2V0SW5uZXJIVE1MLl9faHRtbH12YXIgYWY9YmUsYmY9Y2UsY2Y9ZGU7ZnVuY3Rpb24gZGYoYSl7Zm9yKGE9YS5uZXh0U2libGluZzthJiYxIT09YS5ub2RlVHlwZSYmMyE9PWEubm9kZVR5cGU7KWE9YS5uZXh0U2libGluZztyZXR1cm4gYX1mdW5jdGlvbiBlZihhKXtmb3IoYT1hLmZpcnN0Q2hpbGQ7YSYmMSE9PWEubm9kZVR5cGUmJjMhPT1hLm5vZGVUeXBlOylhPWEubmV4dFNpYmxpbmc7cmV0dXJuIGF9bmV3IFNldDt2YXIgZmY9W10sZ2Y9LTE7ZnVuY3Rpb24gaGYoYSl7cmV0dXJue2N1cnJlbnQ6YX19XG5mdW5jdGlvbiBNKGEpezA+Z2Z8fChhLmN1cnJlbnQ9ZmZbZ2ZdLGZmW2dmXT1udWxsLGdmLS0pfWZ1bmN0aW9uIE4oYSxiKXtnZisrO2ZmW2dmXT1hLmN1cnJlbnQ7YS5jdXJyZW50PWJ9dmFyIGpmPWhmKGhhKSxPPWhmKCExKSxrZj1oYTtmdW5jdGlvbiBsZihhKXtyZXR1cm4gbWYoYSk/a2Y6amYuY3VycmVudH1cbmZ1bmN0aW9uIG5mKGEsYil7dmFyIGM9YS50eXBlLmNvbnRleHRUeXBlcztpZighYylyZXR1cm4gaGE7dmFyIGQ9YS5zdGF0ZU5vZGU7aWYoZCYmZC5fX3JlYWN0SW50ZXJuYWxNZW1vaXplZFVubWFza2VkQ2hpbGRDb250ZXh0PT09YilyZXR1cm4gZC5fX3JlYWN0SW50ZXJuYWxNZW1vaXplZE1hc2tlZENoaWxkQ29udGV4dDt2YXIgZT17fSxmO2ZvcihmIGluIGMpZVtmXT1iW2ZdO2QmJihhPWEuc3RhdGVOb2RlLGEuX19yZWFjdEludGVybmFsTWVtb2l6ZWRVbm1hc2tlZENoaWxkQ29udGV4dD1iLGEuX19yZWFjdEludGVybmFsTWVtb2l6ZWRNYXNrZWRDaGlsZENvbnRleHQ9ZSk7cmV0dXJuIGV9ZnVuY3Rpb24gbWYoYSl7cmV0dXJuIDI9PT1hLnRhZyYmbnVsbCE9YS50eXBlLmNoaWxkQ29udGV4dFR5cGVzfWZ1bmN0aW9uIG9mKGEpe21mKGEpJiYoTShPLGEpLE0oamYsYSkpfWZ1bmN0aW9uIHBmKGEpe00oTyxhKTtNKGpmLGEpfVxuZnVuY3Rpb24gcWYoYSxiLGMpe2pmLmN1cnJlbnQhPT1oYT9BKFwiMTY4XCIpOnZvaWQgMDtOKGpmLGIsYSk7TihPLGMsYSl9ZnVuY3Rpb24gcmYoYSxiKXt2YXIgYz1hLnN0YXRlTm9kZSxkPWEudHlwZS5jaGlsZENvbnRleHRUeXBlcztpZihcImZ1bmN0aW9uXCIhPT10eXBlb2YgYy5nZXRDaGlsZENvbnRleHQpcmV0dXJuIGI7Yz1jLmdldENoaWxkQ29udGV4dCgpO2Zvcih2YXIgZSBpbiBjKWUgaW4gZD92b2lkIDA6QShcIjEwOFwiLHRjKGEpfHxcIlVua25vd25cIixlKTtyZXR1cm4gcCh7fSxiLGMpfWZ1bmN0aW9uIHNmKGEpe2lmKCFtZihhKSlyZXR1cm4hMTt2YXIgYj1hLnN0YXRlTm9kZTtiPWImJmIuX19yZWFjdEludGVybmFsTWVtb2l6ZWRNZXJnZWRDaGlsZENvbnRleHR8fGhhO2tmPWpmLmN1cnJlbnQ7TihqZixiLGEpO04oTyxPLmN1cnJlbnQsYSk7cmV0dXJuITB9XG5mdW5jdGlvbiB0ZihhLGIpe3ZhciBjPWEuc3RhdGVOb2RlO2M/dm9pZCAwOkEoXCIxNjlcIik7aWYoYil7dmFyIGQ9cmYoYSxrZik7Yy5fX3JlYWN0SW50ZXJuYWxNZW1vaXplZE1lcmdlZENoaWxkQ29udGV4dD1kO00oTyxhKTtNKGpmLGEpO04oamYsZCxhKX1lbHNlIE0oTyxhKTtOKE8sYixhKX1cbmZ1bmN0aW9uIHVmKGEsYixjLGQpe3RoaXMudGFnPWE7dGhpcy5rZXk9Yzt0aGlzLnNpYmxpbmc9dGhpcy5jaGlsZD10aGlzLnJldHVybj10aGlzLnN0YXRlTm9kZT10aGlzLnR5cGU9bnVsbDt0aGlzLmluZGV4PTA7dGhpcy5yZWY9bnVsbDt0aGlzLnBlbmRpbmdQcm9wcz1iO3RoaXMubWVtb2l6ZWRTdGF0ZT10aGlzLnVwZGF0ZVF1ZXVlPXRoaXMubWVtb2l6ZWRQcm9wcz1udWxsO3RoaXMubW9kZT1kO3RoaXMuZWZmZWN0VGFnPTA7dGhpcy5sYXN0RWZmZWN0PXRoaXMuZmlyc3RFZmZlY3Q9dGhpcy5uZXh0RWZmZWN0PW51bGw7dGhpcy5leHBpcmF0aW9uVGltZT0wO3RoaXMuYWx0ZXJuYXRlPW51bGx9XG5mdW5jdGlvbiB2ZihhLGIsYyl7dmFyIGQ9YS5hbHRlcm5hdGU7bnVsbD09PWQ/KGQ9bmV3IHVmKGEudGFnLGIsYS5rZXksYS5tb2RlKSxkLnR5cGU9YS50eXBlLGQuc3RhdGVOb2RlPWEuc3RhdGVOb2RlLGQuYWx0ZXJuYXRlPWEsYS5hbHRlcm5hdGU9ZCk6KGQucGVuZGluZ1Byb3BzPWIsZC5lZmZlY3RUYWc9MCxkLm5leHRFZmZlY3Q9bnVsbCxkLmZpcnN0RWZmZWN0PW51bGwsZC5sYXN0RWZmZWN0PW51bGwpO2QuZXhwaXJhdGlvblRpbWU9YztkLmNoaWxkPWEuY2hpbGQ7ZC5tZW1vaXplZFByb3BzPWEubWVtb2l6ZWRQcm9wcztkLm1lbW9pemVkU3RhdGU9YS5tZW1vaXplZFN0YXRlO2QudXBkYXRlUXVldWU9YS51cGRhdGVRdWV1ZTtkLnNpYmxpbmc9YS5zaWJsaW5nO2QuaW5kZXg9YS5pbmRleDtkLnJlZj1hLnJlZjtyZXR1cm4gZH1cbmZ1bmN0aW9uIHdmKGEsYixjKXt2YXIgZD1hLnR5cGUsZT1hLmtleTthPWEucHJvcHM7aWYoXCJmdW5jdGlvblwiPT09dHlwZW9mIGQpdmFyIGY9ZC5wcm90b3R5cGUmJmQucHJvdG90eXBlLmlzUmVhY3RDb21wb25lbnQ/MjowO2Vsc2UgaWYoXCJzdHJpbmdcIj09PXR5cGVvZiBkKWY9NTtlbHNlIHN3aXRjaChkKXtjYXNlIGhjOnJldHVybiB4ZihhLmNoaWxkcmVuLGIsYyxlKTtjYXNlIG9jOmY9MTE7Ynw9MzticmVhaztjYXNlIGljOmY9MTE7Ynw9MjticmVhaztjYXNlIGpjOnJldHVybiBkPW5ldyB1ZigxNSxhLGUsYnw0KSxkLnR5cGU9amMsZC5leHBpcmF0aW9uVGltZT1jLGQ7Y2FzZSBxYzpmPTE2O2J8PTI7YnJlYWs7ZGVmYXVsdDphOntzd2l0Y2goXCJvYmplY3RcIj09PXR5cGVvZiBkJiZudWxsIT09ZD9kLiQkdHlwZW9mOm51bGwpe2Nhc2UgbWM6Zj0xMzticmVhayBhO2Nhc2UgbmM6Zj0xMjticmVhayBhO2Nhc2UgcGM6Zj0xNDticmVhayBhO2RlZmF1bHQ6QShcIjEzMFwiLG51bGw9PWQ/XG5kOnR5cGVvZiBkLFwiXCIpfWY9dm9pZCAwfX1iPW5ldyB1ZihmLGEsZSxiKTtiLnR5cGU9ZDtiLmV4cGlyYXRpb25UaW1lPWM7cmV0dXJuIGJ9ZnVuY3Rpb24geGYoYSxiLGMsZCl7YT1uZXcgdWYoMTAsYSxkLGIpO2EuZXhwaXJhdGlvblRpbWU9YztyZXR1cm4gYX1mdW5jdGlvbiB5ZihhLGIsYyl7YT1uZXcgdWYoNixhLG51bGwsYik7YS5leHBpcmF0aW9uVGltZT1jO3JldHVybiBhfWZ1bmN0aW9uIHpmKGEsYixjKXtiPW5ldyB1Zig0LG51bGwhPT1hLmNoaWxkcmVuP2EuY2hpbGRyZW46W10sYS5rZXksYik7Yi5leHBpcmF0aW9uVGltZT1jO2Iuc3RhdGVOb2RlPXtjb250YWluZXJJbmZvOmEuY29udGFpbmVySW5mbyxwZW5kaW5nQ2hpbGRyZW46bnVsbCxpbXBsZW1lbnRhdGlvbjphLmltcGxlbWVudGF0aW9ufTtyZXR1cm4gYn1cbmZ1bmN0aW9uIEFmKGEsYixjKXtiPW5ldyB1ZigzLG51bGwsbnVsbCxiPzM6MCk7YT17Y3VycmVudDpiLGNvbnRhaW5lckluZm86YSxwZW5kaW5nQ2hpbGRyZW46bnVsbCxlYXJsaWVzdFBlbmRpbmdUaW1lOjAsbGF0ZXN0UGVuZGluZ1RpbWU6MCxlYXJsaWVzdFN1c3BlbmRlZFRpbWU6MCxsYXRlc3RTdXNwZW5kZWRUaW1lOjAsbGF0ZXN0UGluZ2VkVGltZTowLHBlbmRpbmdDb21taXRFeHBpcmF0aW9uVGltZTowLGZpbmlzaGVkV29yazpudWxsLGNvbnRleHQ6bnVsbCxwZW5kaW5nQ29udGV4dDpudWxsLGh5ZHJhdGU6YyxyZW1haW5pbmdFeHBpcmF0aW9uVGltZTowLGZpcnN0QmF0Y2g6bnVsbCxuZXh0U2NoZWR1bGVkUm9vdDpudWxsfTtyZXR1cm4gYi5zdGF0ZU5vZGU9YX12YXIgQmY9bnVsbCxDZj1udWxsO2Z1bmN0aW9uIERmKGEpe3JldHVybiBmdW5jdGlvbihiKXt0cnl7cmV0dXJuIGEoYil9Y2F0Y2goYyl7fX19XG5mdW5jdGlvbiBFZihhKXtpZihcInVuZGVmaW5lZFwiPT09dHlwZW9mIF9fUkVBQ1RfREVWVE9PTFNfR0xPQkFMX0hPT0tfXylyZXR1cm4hMTt2YXIgYj1fX1JFQUNUX0RFVlRPT0xTX0dMT0JBTF9IT09LX187aWYoYi5pc0Rpc2FibGVkfHwhYi5zdXBwb3J0c0ZpYmVyKXJldHVybiEwO3RyeXt2YXIgYz1iLmluamVjdChhKTtCZj1EZihmdW5jdGlvbihhKXtyZXR1cm4gYi5vbkNvbW1pdEZpYmVyUm9vdChjLGEpfSk7Q2Y9RGYoZnVuY3Rpb24oYSl7cmV0dXJuIGIub25Db21taXRGaWJlclVubW91bnQoYyxhKX0pfWNhdGNoKGQpe31yZXR1cm4hMH1mdW5jdGlvbiBGZihhKXtcImZ1bmN0aW9uXCI9PT10eXBlb2YgQmYmJkJmKGEpfWZ1bmN0aW9uIEdmKGEpe1wiZnVuY3Rpb25cIj09PXR5cGVvZiBDZiYmQ2YoYSl9dmFyIEhmPSExO1xuZnVuY3Rpb24gSWYoYSl7cmV0dXJue2V4cGlyYXRpb25UaW1lOjAsYmFzZVN0YXRlOmEsZmlyc3RVcGRhdGU6bnVsbCxsYXN0VXBkYXRlOm51bGwsZmlyc3RDYXB0dXJlZFVwZGF0ZTpudWxsLGxhc3RDYXB0dXJlZFVwZGF0ZTpudWxsLGZpcnN0RWZmZWN0Om51bGwsbGFzdEVmZmVjdDpudWxsLGZpcnN0Q2FwdHVyZWRFZmZlY3Q6bnVsbCxsYXN0Q2FwdHVyZWRFZmZlY3Q6bnVsbH19ZnVuY3Rpb24gSmYoYSl7cmV0dXJue2V4cGlyYXRpb25UaW1lOmEuZXhwaXJhdGlvblRpbWUsYmFzZVN0YXRlOmEuYmFzZVN0YXRlLGZpcnN0VXBkYXRlOmEuZmlyc3RVcGRhdGUsbGFzdFVwZGF0ZTphLmxhc3RVcGRhdGUsZmlyc3RDYXB0dXJlZFVwZGF0ZTpudWxsLGxhc3RDYXB0dXJlZFVwZGF0ZTpudWxsLGZpcnN0RWZmZWN0Om51bGwsbGFzdEVmZmVjdDpudWxsLGZpcnN0Q2FwdHVyZWRFZmZlY3Q6bnVsbCxsYXN0Q2FwdHVyZWRFZmZlY3Q6bnVsbH19XG5mdW5jdGlvbiBLZihhKXtyZXR1cm57ZXhwaXJhdGlvblRpbWU6YSx0YWc6MCxwYXlsb2FkOm51bGwsY2FsbGJhY2s6bnVsbCxuZXh0Om51bGwsbmV4dEVmZmVjdDpudWxsfX1mdW5jdGlvbiBMZihhLGIsYyl7bnVsbD09PWEubGFzdFVwZGF0ZT9hLmZpcnN0VXBkYXRlPWEubGFzdFVwZGF0ZT1iOihhLmxhc3RVcGRhdGUubmV4dD1iLGEubGFzdFVwZGF0ZT1iKTtpZigwPT09YS5leHBpcmF0aW9uVGltZXx8YS5leHBpcmF0aW9uVGltZT5jKWEuZXhwaXJhdGlvblRpbWU9Y31cbmZ1bmN0aW9uIE1mKGEsYixjKXt2YXIgZD1hLmFsdGVybmF0ZTtpZihudWxsPT09ZCl7dmFyIGU9YS51cGRhdGVRdWV1ZTt2YXIgZj1udWxsO251bGw9PT1lJiYoZT1hLnVwZGF0ZVF1ZXVlPUlmKGEubWVtb2l6ZWRTdGF0ZSkpfWVsc2UgZT1hLnVwZGF0ZVF1ZXVlLGY9ZC51cGRhdGVRdWV1ZSxudWxsPT09ZT9udWxsPT09Zj8oZT1hLnVwZGF0ZVF1ZXVlPUlmKGEubWVtb2l6ZWRTdGF0ZSksZj1kLnVwZGF0ZVF1ZXVlPUlmKGQubWVtb2l6ZWRTdGF0ZSkpOmU9YS51cGRhdGVRdWV1ZT1KZihmKTpudWxsPT09ZiYmKGY9ZC51cGRhdGVRdWV1ZT1KZihlKSk7bnVsbD09PWZ8fGU9PT1mP0xmKGUsYixjKTpudWxsPT09ZS5sYXN0VXBkYXRlfHxudWxsPT09Zi5sYXN0VXBkYXRlPyhMZihlLGIsYyksTGYoZixiLGMpKTooTGYoZSxiLGMpLGYubGFzdFVwZGF0ZT1iKX1cbmZ1bmN0aW9uIE5mKGEsYixjKXt2YXIgZD1hLnVwZGF0ZVF1ZXVlO2Q9bnVsbD09PWQ/YS51cGRhdGVRdWV1ZT1JZihhLm1lbW9pemVkU3RhdGUpOk9mKGEsZCk7bnVsbD09PWQubGFzdENhcHR1cmVkVXBkYXRlP2QuZmlyc3RDYXB0dXJlZFVwZGF0ZT1kLmxhc3RDYXB0dXJlZFVwZGF0ZT1iOihkLmxhc3RDYXB0dXJlZFVwZGF0ZS5uZXh0PWIsZC5sYXN0Q2FwdHVyZWRVcGRhdGU9Yik7aWYoMD09PWQuZXhwaXJhdGlvblRpbWV8fGQuZXhwaXJhdGlvblRpbWU+YylkLmV4cGlyYXRpb25UaW1lPWN9ZnVuY3Rpb24gT2YoYSxiKXt2YXIgYz1hLmFsdGVybmF0ZTtudWxsIT09YyYmYj09PWMudXBkYXRlUXVldWUmJihiPWEudXBkYXRlUXVldWU9SmYoYikpO3JldHVybiBifVxuZnVuY3Rpb24gUGYoYSxiLGMsZCxlLGYpe3N3aXRjaChjLnRhZyl7Y2FzZSAxOnJldHVybiBhPWMucGF5bG9hZCxcImZ1bmN0aW9uXCI9PT10eXBlb2YgYT9hLmNhbGwoZixkLGUpOmE7Y2FzZSAzOmEuZWZmZWN0VGFnPWEuZWZmZWN0VGFnJi0xMDI1fDY0O2Nhc2UgMDphPWMucGF5bG9hZDtlPVwiZnVuY3Rpb25cIj09PXR5cGVvZiBhP2EuY2FsbChmLGQsZSk6YTtpZihudWxsPT09ZXx8dm9pZCAwPT09ZSlicmVhaztyZXR1cm4gcCh7fSxkLGUpO2Nhc2UgMjpIZj0hMH1yZXR1cm4gZH1cbmZ1bmN0aW9uIFFmKGEsYixjLGQsZSl7SGY9ITE7aWYoISgwPT09Yi5leHBpcmF0aW9uVGltZXx8Yi5leHBpcmF0aW9uVGltZT5lKSl7Yj1PZihhLGIpO2Zvcih2YXIgZj1iLmJhc2VTdGF0ZSxnPW51bGwsaD0wLGs9Yi5maXJzdFVwZGF0ZSxuPWY7bnVsbCE9PWs7KXt2YXIgcj1rLmV4cGlyYXRpb25UaW1lO2lmKHI+ZSl7aWYobnVsbD09PWcmJihnPWssZj1uKSwwPT09aHx8aD5yKWg9cn1lbHNlIG49UGYoYSxiLGssbixjLGQpLG51bGwhPT1rLmNhbGxiYWNrJiYoYS5lZmZlY3RUYWd8PTMyLGsubmV4dEVmZmVjdD1udWxsLG51bGw9PT1iLmxhc3RFZmZlY3Q/Yi5maXJzdEVmZmVjdD1iLmxhc3RFZmZlY3Q9azooYi5sYXN0RWZmZWN0Lm5leHRFZmZlY3Q9ayxiLmxhc3RFZmZlY3Q9aykpO2s9ay5uZXh0fXI9bnVsbDtmb3Ioaz1iLmZpcnN0Q2FwdHVyZWRVcGRhdGU7bnVsbCE9PWs7KXt2YXIgdz1rLmV4cGlyYXRpb25UaW1lO2lmKHc+ZSl7aWYobnVsbD09PXImJihyPWssbnVsbD09PVxuZyYmKGY9bikpLDA9PT1ofHxoPncpaD13fWVsc2Ugbj1QZihhLGIsayxuLGMsZCksbnVsbCE9PWsuY2FsbGJhY2smJihhLmVmZmVjdFRhZ3w9MzIsay5uZXh0RWZmZWN0PW51bGwsbnVsbD09PWIubGFzdENhcHR1cmVkRWZmZWN0P2IuZmlyc3RDYXB0dXJlZEVmZmVjdD1iLmxhc3RDYXB0dXJlZEVmZmVjdD1rOihiLmxhc3RDYXB0dXJlZEVmZmVjdC5uZXh0RWZmZWN0PWssYi5sYXN0Q2FwdHVyZWRFZmZlY3Q9aykpO2s9ay5uZXh0fW51bGw9PT1nJiYoYi5sYXN0VXBkYXRlPW51bGwpO251bGw9PT1yP2IubGFzdENhcHR1cmVkVXBkYXRlPW51bGw6YS5lZmZlY3RUYWd8PTMyO251bGw9PT1nJiZudWxsPT09ciYmKGY9bik7Yi5iYXNlU3RhdGU9ZjtiLmZpcnN0VXBkYXRlPWc7Yi5maXJzdENhcHR1cmVkVXBkYXRlPXI7Yi5leHBpcmF0aW9uVGltZT1oO2EubWVtb2l6ZWRTdGF0ZT1ufX1cbmZ1bmN0aW9uIFJmKGEsYil7XCJmdW5jdGlvblwiIT09dHlwZW9mIGE/QShcIjE5MVwiLGEpOnZvaWQgMDthLmNhbGwoYil9XG5mdW5jdGlvbiBTZihhLGIsYyl7bnVsbCE9PWIuZmlyc3RDYXB0dXJlZFVwZGF0ZSYmKG51bGwhPT1iLmxhc3RVcGRhdGUmJihiLmxhc3RVcGRhdGUubmV4dD1iLmZpcnN0Q2FwdHVyZWRVcGRhdGUsYi5sYXN0VXBkYXRlPWIubGFzdENhcHR1cmVkVXBkYXRlKSxiLmZpcnN0Q2FwdHVyZWRVcGRhdGU9Yi5sYXN0Q2FwdHVyZWRVcGRhdGU9bnVsbCk7YT1iLmZpcnN0RWZmZWN0O2ZvcihiLmZpcnN0RWZmZWN0PWIubGFzdEVmZmVjdD1udWxsO251bGwhPT1hOyl7dmFyIGQ9YS5jYWxsYmFjaztudWxsIT09ZCYmKGEuY2FsbGJhY2s9bnVsbCxSZihkLGMpKTthPWEubmV4dEVmZmVjdH1hPWIuZmlyc3RDYXB0dXJlZEVmZmVjdDtmb3IoYi5maXJzdENhcHR1cmVkRWZmZWN0PWIubGFzdENhcHR1cmVkRWZmZWN0PW51bGw7bnVsbCE9PWE7KWI9YS5jYWxsYmFjayxudWxsIT09YiYmKGEuY2FsbGJhY2s9bnVsbCxSZihiLGMpKSxhPWEubmV4dEVmZmVjdH1cbmZ1bmN0aW9uIFRmKGEsYil7cmV0dXJue3ZhbHVlOmEsc291cmNlOmIsc3RhY2s6dmMoYil9fXZhciBVZj1oZihudWxsKSxWZj1oZihudWxsKSxXZj1oZigwKTtmdW5jdGlvbiBYZihhKXt2YXIgYj1hLnR5cGUuX2NvbnRleHQ7TihXZixiLl9jaGFuZ2VkQml0cyxhKTtOKFZmLGIuX2N1cnJlbnRWYWx1ZSxhKTtOKFVmLGEsYSk7Yi5fY3VycmVudFZhbHVlPWEucGVuZGluZ1Byb3BzLnZhbHVlO2IuX2NoYW5nZWRCaXRzPWEuc3RhdGVOb2RlfWZ1bmN0aW9uIFlmKGEpe3ZhciBiPVdmLmN1cnJlbnQsYz1WZi5jdXJyZW50O00oVWYsYSk7TShWZixhKTtNKFdmLGEpO2E9YS50eXBlLl9jb250ZXh0O2EuX2N1cnJlbnRWYWx1ZT1jO2EuX2NoYW5nZWRCaXRzPWJ9dmFyIFpmPXt9LCRmPWhmKFpmKSxhZz1oZihaZiksYmc9aGYoWmYpO2Z1bmN0aW9uIGNnKGEpe2E9PT1aZj9BKFwiMTc0XCIpOnZvaWQgMDtyZXR1cm4gYX1cbmZ1bmN0aW9uIGRnKGEsYil7TihiZyxiLGEpO04oYWcsYSxhKTtOKCRmLFpmLGEpO3ZhciBjPWIubm9kZVR5cGU7c3dpdGNoKGMpe2Nhc2UgOTpjYXNlIDExOmI9KGI9Yi5kb2N1bWVudEVsZW1lbnQpP2IubmFtZXNwYWNlVVJJOkRlKG51bGwsXCJcIik7YnJlYWs7ZGVmYXVsdDpjPTg9PT1jP2IucGFyZW50Tm9kZTpiLGI9Yy5uYW1lc3BhY2VVUkl8fG51bGwsYz1jLnRhZ05hbWUsYj1EZShiLGMpfU0oJGYsYSk7TigkZixiLGEpfWZ1bmN0aW9uIGVnKGEpe00oJGYsYSk7TShhZyxhKTtNKGJnLGEpfWZ1bmN0aW9uIGZnKGEpe2FnLmN1cnJlbnQ9PT1hJiYoTSgkZixhKSxNKGFnLGEpKX1mdW5jdGlvbiBoZyhhLGIsYyl7dmFyIGQ9YS5tZW1vaXplZFN0YXRlO2I9YihjLGQpO2Q9bnVsbD09PWJ8fHZvaWQgMD09PWI/ZDpwKHt9LGQsYik7YS5tZW1vaXplZFN0YXRlPWQ7YT1hLnVwZGF0ZVF1ZXVlO251bGwhPT1hJiYwPT09YS5leHBpcmF0aW9uVGltZSYmKGEuYmFzZVN0YXRlPWQpfVxudmFyIGxnPXtpc01vdW50ZWQ6ZnVuY3Rpb24oYSl7cmV0dXJuKGE9YS5fcmVhY3RJbnRlcm5hbEZpYmVyKT8yPT09aWQoYSk6ITF9LGVucXVldWVTZXRTdGF0ZTpmdW5jdGlvbihhLGIsYyl7YT1hLl9yZWFjdEludGVybmFsRmliZXI7dmFyIGQ9aWcoKTtkPWpnKGQsYSk7dmFyIGU9S2YoZCk7ZS5wYXlsb2FkPWI7dm9pZCAwIT09YyYmbnVsbCE9PWMmJihlLmNhbGxiYWNrPWMpO01mKGEsZSxkKTtrZyhhLGQpfSxlbnF1ZXVlUmVwbGFjZVN0YXRlOmZ1bmN0aW9uKGEsYixjKXthPWEuX3JlYWN0SW50ZXJuYWxGaWJlcjt2YXIgZD1pZygpO2Q9amcoZCxhKTt2YXIgZT1LZihkKTtlLnRhZz0xO2UucGF5bG9hZD1iO3ZvaWQgMCE9PWMmJm51bGwhPT1jJiYoZS5jYWxsYmFjaz1jKTtNZihhLGUsZCk7a2coYSxkKX0sZW5xdWV1ZUZvcmNlVXBkYXRlOmZ1bmN0aW9uKGEsYil7YT1hLl9yZWFjdEludGVybmFsRmliZXI7dmFyIGM9aWcoKTtjPWpnKGMsYSk7dmFyIGQ9S2YoYyk7ZC50YWc9Mjt2b2lkIDAhPT1cbmImJm51bGwhPT1iJiYoZC5jYWxsYmFjaz1iKTtNZihhLGQsYyk7a2coYSxjKX19O2Z1bmN0aW9uIG1nKGEsYixjLGQsZSxmKXt2YXIgZz1hLnN0YXRlTm9kZTthPWEudHlwZTtyZXR1cm5cImZ1bmN0aW9uXCI9PT10eXBlb2YgZy5zaG91bGRDb21wb25lbnRVcGRhdGU/Zy5zaG91bGRDb21wb25lbnRVcGRhdGUoYyxlLGYpOmEucHJvdG90eXBlJiZhLnByb3RvdHlwZS5pc1B1cmVSZWFjdENvbXBvbmVudD8hZWEoYixjKXx8IWVhKGQsZSk6ITB9XG5mdW5jdGlvbiBuZyhhLGIsYyxkKXthPWIuc3RhdGU7XCJmdW5jdGlvblwiPT09dHlwZW9mIGIuY29tcG9uZW50V2lsbFJlY2VpdmVQcm9wcyYmYi5jb21wb25lbnRXaWxsUmVjZWl2ZVByb3BzKGMsZCk7XCJmdW5jdGlvblwiPT09dHlwZW9mIGIuVU5TQUZFX2NvbXBvbmVudFdpbGxSZWNlaXZlUHJvcHMmJmIuVU5TQUZFX2NvbXBvbmVudFdpbGxSZWNlaXZlUHJvcHMoYyxkKTtiLnN0YXRlIT09YSYmbGcuZW5xdWV1ZVJlcGxhY2VTdGF0ZShiLGIuc3RhdGUsbnVsbCl9XG5mdW5jdGlvbiBvZyhhLGIpe3ZhciBjPWEudHlwZSxkPWEuc3RhdGVOb2RlLGU9YS5wZW5kaW5nUHJvcHMsZj1sZihhKTtkLnByb3BzPWU7ZC5zdGF0ZT1hLm1lbW9pemVkU3RhdGU7ZC5yZWZzPWhhO2QuY29udGV4dD1uZihhLGYpO2Y9YS51cGRhdGVRdWV1ZTtudWxsIT09ZiYmKFFmKGEsZixlLGQsYiksZC5zdGF0ZT1hLm1lbW9pemVkU3RhdGUpO2Y9YS50eXBlLmdldERlcml2ZWRTdGF0ZUZyb21Qcm9wcztcImZ1bmN0aW9uXCI9PT10eXBlb2YgZiYmKGhnKGEsZixlKSxkLnN0YXRlPWEubWVtb2l6ZWRTdGF0ZSk7XCJmdW5jdGlvblwiPT09dHlwZW9mIGMuZ2V0RGVyaXZlZFN0YXRlRnJvbVByb3BzfHxcImZ1bmN0aW9uXCI9PT10eXBlb2YgZC5nZXRTbmFwc2hvdEJlZm9yZVVwZGF0ZXx8XCJmdW5jdGlvblwiIT09dHlwZW9mIGQuVU5TQUZFX2NvbXBvbmVudFdpbGxNb3VudCYmXCJmdW5jdGlvblwiIT09dHlwZW9mIGQuY29tcG9uZW50V2lsbE1vdW50fHwoYz1kLnN0YXRlLFwiZnVuY3Rpb25cIj09PXR5cGVvZiBkLmNvbXBvbmVudFdpbGxNb3VudCYmXG5kLmNvbXBvbmVudFdpbGxNb3VudCgpLFwiZnVuY3Rpb25cIj09PXR5cGVvZiBkLlVOU0FGRV9jb21wb25lbnRXaWxsTW91bnQmJmQuVU5TQUZFX2NvbXBvbmVudFdpbGxNb3VudCgpLGMhPT1kLnN0YXRlJiZsZy5lbnF1ZXVlUmVwbGFjZVN0YXRlKGQsZC5zdGF0ZSxudWxsKSxmPWEudXBkYXRlUXVldWUsbnVsbCE9PWYmJihRZihhLGYsZSxkLGIpLGQuc3RhdGU9YS5tZW1vaXplZFN0YXRlKSk7XCJmdW5jdGlvblwiPT09dHlwZW9mIGQuY29tcG9uZW50RGlkTW91bnQmJihhLmVmZmVjdFRhZ3w9NCl9dmFyIHBnPUFycmF5LmlzQXJyYXk7XG5mdW5jdGlvbiBxZyhhLGIsYyl7YT1jLnJlZjtpZihudWxsIT09YSYmXCJmdW5jdGlvblwiIT09dHlwZW9mIGEmJlwib2JqZWN0XCIhPT10eXBlb2YgYSl7aWYoYy5fb3duZXIpe2M9Yy5fb3duZXI7dmFyIGQ9dm9pZCAwO2MmJigyIT09Yy50YWc/QShcIjExMFwiKTp2b2lkIDAsZD1jLnN0YXRlTm9kZSk7ZD92b2lkIDA6QShcIjE0N1wiLGEpO3ZhciBlPVwiXCIrYTtpZihudWxsIT09YiYmbnVsbCE9PWIucmVmJiZcImZ1bmN0aW9uXCI9PT10eXBlb2YgYi5yZWYmJmIucmVmLl9zdHJpbmdSZWY9PT1lKXJldHVybiBiLnJlZjtiPWZ1bmN0aW9uKGEpe3ZhciBiPWQucmVmcz09PWhhP2QucmVmcz17fTpkLnJlZnM7bnVsbD09PWE/ZGVsZXRlIGJbZV06YltlXT1hfTtiLl9zdHJpbmdSZWY9ZTtyZXR1cm4gYn1cInN0cmluZ1wiIT09dHlwZW9mIGE/QShcIjE0OFwiKTp2b2lkIDA7Yy5fb3duZXI/dm9pZCAwOkEoXCIyNTRcIixhKX1yZXR1cm4gYX1cbmZ1bmN0aW9uIHJnKGEsYil7XCJ0ZXh0YXJlYVwiIT09YS50eXBlJiZBKFwiMzFcIixcIltvYmplY3QgT2JqZWN0XVwiPT09T2JqZWN0LnByb3RvdHlwZS50b1N0cmluZy5jYWxsKGIpP1wib2JqZWN0IHdpdGgga2V5cyB7XCIrT2JqZWN0LmtleXMoYikuam9pbihcIiwgXCIpK1wifVwiOmIsXCJcIil9XG5mdW5jdGlvbiBzZyhhKXtmdW5jdGlvbiBiKGIsYyl7aWYoYSl7dmFyIGQ9Yi5sYXN0RWZmZWN0O251bGwhPT1kPyhkLm5leHRFZmZlY3Q9YyxiLmxhc3RFZmZlY3Q9Yyk6Yi5maXJzdEVmZmVjdD1iLmxhc3RFZmZlY3Q9YztjLm5leHRFZmZlY3Q9bnVsbDtjLmVmZmVjdFRhZz04fX1mdW5jdGlvbiBjKGMsZCl7aWYoIWEpcmV0dXJuIG51bGw7Zm9yKDtudWxsIT09ZDspYihjLGQpLGQ9ZC5zaWJsaW5nO3JldHVybiBudWxsfWZ1bmN0aW9uIGQoYSxiKXtmb3IoYT1uZXcgTWFwO251bGwhPT1iOyludWxsIT09Yi5rZXk/YS5zZXQoYi5rZXksYik6YS5zZXQoYi5pbmRleCxiKSxiPWIuc2libGluZztyZXR1cm4gYX1mdW5jdGlvbiBlKGEsYixjKXthPXZmKGEsYixjKTthLmluZGV4PTA7YS5zaWJsaW5nPW51bGw7cmV0dXJuIGF9ZnVuY3Rpb24gZihiLGMsZCl7Yi5pbmRleD1kO2lmKCFhKXJldHVybiBjO2Q9Yi5hbHRlcm5hdGU7aWYobnVsbCE9PWQpcmV0dXJuIGQ9ZC5pbmRleCxkPGM/KGIuZWZmZWN0VGFnPVxuMixjKTpkO2IuZWZmZWN0VGFnPTI7cmV0dXJuIGN9ZnVuY3Rpb24gZyhiKXthJiZudWxsPT09Yi5hbHRlcm5hdGUmJihiLmVmZmVjdFRhZz0yKTtyZXR1cm4gYn1mdW5jdGlvbiBoKGEsYixjLGQpe2lmKG51bGw9PT1ifHw2IT09Yi50YWcpcmV0dXJuIGI9eWYoYyxhLm1vZGUsZCksYi5yZXR1cm49YSxiO2I9ZShiLGMsZCk7Yi5yZXR1cm49YTtyZXR1cm4gYn1mdW5jdGlvbiBrKGEsYixjLGQpe2lmKG51bGwhPT1iJiZiLnR5cGU9PT1jLnR5cGUpcmV0dXJuIGQ9ZShiLGMucHJvcHMsZCksZC5yZWY9cWcoYSxiLGMpLGQucmV0dXJuPWEsZDtkPXdmKGMsYS5tb2RlLGQpO2QucmVmPXFnKGEsYixjKTtkLnJldHVybj1hO3JldHVybiBkfWZ1bmN0aW9uIG4oYSxiLGMsZCl7aWYobnVsbD09PWJ8fDQhPT1iLnRhZ3x8Yi5zdGF0ZU5vZGUuY29udGFpbmVySW5mbyE9PWMuY29udGFpbmVySW5mb3x8Yi5zdGF0ZU5vZGUuaW1wbGVtZW50YXRpb24hPT1jLmltcGxlbWVudGF0aW9uKXJldHVybiBiPVxuemYoYyxhLm1vZGUsZCksYi5yZXR1cm49YSxiO2I9ZShiLGMuY2hpbGRyZW58fFtdLGQpO2IucmV0dXJuPWE7cmV0dXJuIGJ9ZnVuY3Rpb24gcihhLGIsYyxkLGYpe2lmKG51bGw9PT1ifHwxMCE9PWIudGFnKXJldHVybiBiPXhmKGMsYS5tb2RlLGQsZiksYi5yZXR1cm49YSxiO2I9ZShiLGMsZCk7Yi5yZXR1cm49YTtyZXR1cm4gYn1mdW5jdGlvbiB3KGEsYixjKXtpZihcInN0cmluZ1wiPT09dHlwZW9mIGJ8fFwibnVtYmVyXCI9PT10eXBlb2YgYilyZXR1cm4gYj15ZihcIlwiK2IsYS5tb2RlLGMpLGIucmV0dXJuPWEsYjtpZihcIm9iamVjdFwiPT09dHlwZW9mIGImJm51bGwhPT1iKXtzd2l0Y2goYi4kJHR5cGVvZil7Y2FzZSBmYzpyZXR1cm4gYz13ZihiLGEubW9kZSxjKSxjLnJlZj1xZyhhLG51bGwsYiksYy5yZXR1cm49YSxjO2Nhc2UgZ2M6cmV0dXJuIGI9emYoYixhLm1vZGUsYyksYi5yZXR1cm49YSxifWlmKHBnKGIpfHxzYyhiKSlyZXR1cm4gYj14ZihiLGEubW9kZSxjLG51bGwpLGIucmV0dXJuPVxuYSxiO3JnKGEsYil9cmV0dXJuIG51bGx9ZnVuY3Rpb24gUChhLGIsYyxkKXt2YXIgZT1udWxsIT09Yj9iLmtleTpudWxsO2lmKFwic3RyaW5nXCI9PT10eXBlb2YgY3x8XCJudW1iZXJcIj09PXR5cGVvZiBjKXJldHVybiBudWxsIT09ZT9udWxsOmgoYSxiLFwiXCIrYyxkKTtpZihcIm9iamVjdFwiPT09dHlwZW9mIGMmJm51bGwhPT1jKXtzd2l0Y2goYy4kJHR5cGVvZil7Y2FzZSBmYzpyZXR1cm4gYy5rZXk9PT1lP2MudHlwZT09PWhjP3IoYSxiLGMucHJvcHMuY2hpbGRyZW4sZCxlKTprKGEsYixjLGQpOm51bGw7Y2FzZSBnYzpyZXR1cm4gYy5rZXk9PT1lP24oYSxiLGMsZCk6bnVsbH1pZihwZyhjKXx8c2MoYykpcmV0dXJuIG51bGwhPT1lP251bGw6cihhLGIsYyxkLG51bGwpO3JnKGEsYyl9cmV0dXJuIG51bGx9ZnVuY3Rpb24ga2MoYSxiLGMsZCxlKXtpZihcInN0cmluZ1wiPT09dHlwZW9mIGR8fFwibnVtYmVyXCI9PT10eXBlb2YgZClyZXR1cm4gYT1hLmdldChjKXx8bnVsbCxoKGIsYSxcIlwiK2QsZSk7XG5pZihcIm9iamVjdFwiPT09dHlwZW9mIGQmJm51bGwhPT1kKXtzd2l0Y2goZC4kJHR5cGVvZil7Y2FzZSBmYzpyZXR1cm4gYT1hLmdldChudWxsPT09ZC5rZXk/YzpkLmtleSl8fG51bGwsZC50eXBlPT09aGM/cihiLGEsZC5wcm9wcy5jaGlsZHJlbixlLGQua2V5KTprKGIsYSxkLGUpO2Nhc2UgZ2M6cmV0dXJuIGE9YS5nZXQobnVsbD09PWQua2V5P2M6ZC5rZXkpfHxudWxsLG4oYixhLGQsZSl9aWYocGcoZCl8fHNjKGQpKXJldHVybiBhPWEuZ2V0KGMpfHxudWxsLHIoYixhLGQsZSxudWxsKTtyZyhiLGQpfXJldHVybiBudWxsfWZ1bmN0aW9uIEhkKGUsZyxoLGspe2Zvcih2YXIgdT1udWxsLHg9bnVsbCx0PWcscT1nPTAsbj1udWxsO251bGwhPT10JiZxPGgubGVuZ3RoO3ErKyl7dC5pbmRleD5xPyhuPXQsdD1udWxsKTpuPXQuc2libGluZzt2YXIgbD1QKGUsdCxoW3FdLGspO2lmKG51bGw9PT1sKXtudWxsPT09dCYmKHQ9bik7YnJlYWt9YSYmdCYmbnVsbD09PWwuYWx0ZXJuYXRlJiZiKGUsXG50KTtnPWYobCxnLHEpO251bGw9PT14P3U9bDp4LnNpYmxpbmc9bDt4PWw7dD1ufWlmKHE9PT1oLmxlbmd0aClyZXR1cm4gYyhlLHQpLHU7aWYobnVsbD09PXQpe2Zvcig7cTxoLmxlbmd0aDtxKyspaWYodD13KGUsaFtxXSxrKSlnPWYodCxnLHEpLG51bGw9PT14P3U9dDp4LnNpYmxpbmc9dCx4PXQ7cmV0dXJuIHV9Zm9yKHQ9ZChlLHQpO3E8aC5sZW5ndGg7cSsrKWlmKG49a2ModCxlLHEsaFtxXSxrKSlhJiZudWxsIT09bi5hbHRlcm5hdGUmJnQuZGVsZXRlKG51bGw9PT1uLmtleT9xOm4ua2V5KSxnPWYobixnLHEpLG51bGw9PT14P3U9bjp4LnNpYmxpbmc9bix4PW47YSYmdC5mb3JFYWNoKGZ1bmN0aW9uKGEpe3JldHVybiBiKGUsYSl9KTtyZXR1cm4gdX1mdW5jdGlvbiBFKGUsZyxoLGspe3ZhciB0PXNjKGgpO1wiZnVuY3Rpb25cIiE9PXR5cGVvZiB0P0EoXCIxNTBcIik6dm9pZCAwO2g9dC5jYWxsKGgpO251bGw9PWg/QShcIjE1MVwiKTp2b2lkIDA7Zm9yKHZhciB1PXQ9bnVsbCxuPWcseD1cbmc9MCx5PW51bGwsbD1oLm5leHQoKTtudWxsIT09biYmIWwuZG9uZTt4KyssbD1oLm5leHQoKSl7bi5pbmRleD54Pyh5PW4sbj1udWxsKTp5PW4uc2libGluZzt2YXIgcj1QKGUsbixsLnZhbHVlLGspO2lmKG51bGw9PT1yKXtufHwobj15KTticmVha31hJiZuJiZudWxsPT09ci5hbHRlcm5hdGUmJmIoZSxuKTtnPWYocixnLHgpO251bGw9PT11P3Q9cjp1LnNpYmxpbmc9cjt1PXI7bj15fWlmKGwuZG9uZSlyZXR1cm4gYyhlLG4pLHQ7aWYobnVsbD09PW4pe2Zvcig7IWwuZG9uZTt4KyssbD1oLm5leHQoKSlsPXcoZSxsLnZhbHVlLGspLG51bGwhPT1sJiYoZz1mKGwsZyx4KSxudWxsPT09dT90PWw6dS5zaWJsaW5nPWwsdT1sKTtyZXR1cm4gdH1mb3Iobj1kKGUsbik7IWwuZG9uZTt4KyssbD1oLm5leHQoKSlsPWtjKG4sZSx4LGwudmFsdWUsayksbnVsbCE9PWwmJihhJiZudWxsIT09bC5hbHRlcm5hdGUmJm4uZGVsZXRlKG51bGw9PT1sLmtleT94Omwua2V5KSxnPWYobCxnLHgpLG51bGw9PT1cbnU/dD1sOnUuc2libGluZz1sLHU9bCk7YSYmbi5mb3JFYWNoKGZ1bmN0aW9uKGEpe3JldHVybiBiKGUsYSl9KTtyZXR1cm4gdH1yZXR1cm4gZnVuY3Rpb24oYSxkLGYsaCl7XCJvYmplY3RcIj09PXR5cGVvZiBmJiZudWxsIT09ZiYmZi50eXBlPT09aGMmJm51bGw9PT1mLmtleSYmKGY9Zi5wcm9wcy5jaGlsZHJlbik7dmFyIGs9XCJvYmplY3RcIj09PXR5cGVvZiBmJiZudWxsIT09ZjtpZihrKXN3aXRjaChmLiQkdHlwZW9mKXtjYXNlIGZjOmE6e3ZhciBuPWYua2V5O2ZvcihrPWQ7bnVsbCE9PWs7KXtpZihrLmtleT09PW4paWYoMTA9PT1rLnRhZz9mLnR5cGU9PT1oYzprLnR5cGU9PT1mLnR5cGUpe2MoYSxrLnNpYmxpbmcpO2Q9ZShrLGYudHlwZT09PWhjP2YucHJvcHMuY2hpbGRyZW46Zi5wcm9wcyxoKTtkLnJlZj1xZyhhLGssZik7ZC5yZXR1cm49YTthPWQ7YnJlYWsgYX1lbHNle2MoYSxrKTticmVha31lbHNlIGIoYSxrKTtrPWsuc2libGluZ31mLnR5cGU9PT1oYz8oZD14ZihmLnByb3BzLmNoaWxkcmVuLFxuYS5tb2RlLGgsZi5rZXkpLGQucmV0dXJuPWEsYT1kKTooaD13ZihmLGEubW9kZSxoKSxoLnJlZj1xZyhhLGQsZiksaC5yZXR1cm49YSxhPWgpfXJldHVybiBnKGEpO2Nhc2UgZ2M6YTp7Zm9yKGs9Zi5rZXk7bnVsbCE9PWQ7KXtpZihkLmtleT09PWspaWYoND09PWQudGFnJiZkLnN0YXRlTm9kZS5jb250YWluZXJJbmZvPT09Zi5jb250YWluZXJJbmZvJiZkLnN0YXRlTm9kZS5pbXBsZW1lbnRhdGlvbj09PWYuaW1wbGVtZW50YXRpb24pe2MoYSxkLnNpYmxpbmcpO2Q9ZShkLGYuY2hpbGRyZW58fFtdLGgpO2QucmV0dXJuPWE7YT1kO2JyZWFrIGF9ZWxzZXtjKGEsZCk7YnJlYWt9ZWxzZSBiKGEsZCk7ZD1kLnNpYmxpbmd9ZD16ZihmLGEubW9kZSxoKTtkLnJldHVybj1hO2E9ZH1yZXR1cm4gZyhhKX1pZihcInN0cmluZ1wiPT09dHlwZW9mIGZ8fFwibnVtYmVyXCI9PT10eXBlb2YgZilyZXR1cm4gZj1cIlwiK2YsbnVsbCE9PWQmJjY9PT1kLnRhZz8oYyhhLGQuc2libGluZyksZD1lKGQsZixoKSxkLnJldHVybj1cbmEsYT1kKTooYyhhLGQpLGQ9eWYoZixhLm1vZGUsaCksZC5yZXR1cm49YSxhPWQpLGcoYSk7aWYocGcoZikpcmV0dXJuIEhkKGEsZCxmLGgpO2lmKHNjKGYpKXJldHVybiBFKGEsZCxmLGgpO2smJnJnKGEsZik7aWYoXCJ1bmRlZmluZWRcIj09PXR5cGVvZiBmKXN3aXRjaChhLnRhZyl7Y2FzZSAyOmNhc2UgMTpoPWEudHlwZSxBKFwiMTUyXCIsaC5kaXNwbGF5TmFtZXx8aC5uYW1lfHxcIkNvbXBvbmVudFwiKX1yZXR1cm4gYyhhLGQpfX12YXIgdGc9c2coITApLHVnPXNnKCExKSx2Zz1udWxsLHdnPW51bGwseGc9ITE7ZnVuY3Rpb24geWcoYSxiKXt2YXIgYz1uZXcgdWYoNSxudWxsLG51bGwsMCk7Yy50eXBlPVwiREVMRVRFRFwiO2Muc3RhdGVOb2RlPWI7Yy5yZXR1cm49YTtjLmVmZmVjdFRhZz04O251bGwhPT1hLmxhc3RFZmZlY3Q/KGEubGFzdEVmZmVjdC5uZXh0RWZmZWN0PWMsYS5sYXN0RWZmZWN0PWMpOmEuZmlyc3RFZmZlY3Q9YS5sYXN0RWZmZWN0PWN9XG5mdW5jdGlvbiB6ZyhhLGIpe3N3aXRjaChhLnRhZyl7Y2FzZSA1OnZhciBjPWEudHlwZTtiPTEhPT1iLm5vZGVUeXBlfHxjLnRvTG93ZXJDYXNlKCkhPT1iLm5vZGVOYW1lLnRvTG93ZXJDYXNlKCk/bnVsbDpiO3JldHVybiBudWxsIT09Yj8oYS5zdGF0ZU5vZGU9YiwhMCk6ITE7Y2FzZSA2OnJldHVybiBiPVwiXCI9PT1hLnBlbmRpbmdQcm9wc3x8MyE9PWIubm9kZVR5cGU/bnVsbDpiLG51bGwhPT1iPyhhLnN0YXRlTm9kZT1iLCEwKTohMTtkZWZhdWx0OnJldHVybiExfX1mdW5jdGlvbiBBZyhhKXtpZih4Zyl7dmFyIGI9d2c7aWYoYil7dmFyIGM9YjtpZighemcoYSxiKSl7Yj1kZihjKTtpZighYnx8IXpnKGEsYikpe2EuZWZmZWN0VGFnfD0yO3hnPSExO3ZnPWE7cmV0dXJufXlnKHZnLGMpfXZnPWE7d2c9ZWYoYil9ZWxzZSBhLmVmZmVjdFRhZ3w9Mix4Zz0hMSx2Zz1hfX1cbmZ1bmN0aW9uIEJnKGEpe2ZvcihhPWEucmV0dXJuO251bGwhPT1hJiY1IT09YS50YWcmJjMhPT1hLnRhZzspYT1hLnJldHVybjt2Zz1hfWZ1bmN0aW9uIENnKGEpe2lmKGEhPT12ZylyZXR1cm4hMTtpZigheGcpcmV0dXJuIEJnKGEpLHhnPSEwLCExO3ZhciBiPWEudHlwZTtpZig1IT09YS50YWd8fFwiaGVhZFwiIT09YiYmXCJib2R5XCIhPT1iJiYhJGUoYixhLm1lbW9pemVkUHJvcHMpKWZvcihiPXdnO2I7KXlnKGEsYiksYj1kZihiKTtCZyhhKTt3Zz12Zz9kZihhLnN0YXRlTm9kZSk6bnVsbDtyZXR1cm4hMH1mdW5jdGlvbiBEZygpe3dnPXZnPW51bGw7eGc9ITF9ZnVuY3Rpb24gUShhLGIsYyl7RWcoYSxiLGMsYi5leHBpcmF0aW9uVGltZSl9ZnVuY3Rpb24gRWcoYSxiLGMsZCl7Yi5jaGlsZD1udWxsPT09YT91ZyhiLG51bGwsYyxkKTp0ZyhiLGEuY2hpbGQsYyxkKX1cbmZ1bmN0aW9uIEZnKGEsYil7dmFyIGM9Yi5yZWY7aWYobnVsbD09PWEmJm51bGwhPT1jfHxudWxsIT09YSYmYS5yZWYhPT1jKWIuZWZmZWN0VGFnfD0xMjh9ZnVuY3Rpb24gR2coYSxiLGMsZCxlKXtGZyhhLGIpO3ZhciBmPTAhPT0oYi5lZmZlY3RUYWcmNjQpO2lmKCFjJiYhZilyZXR1cm4gZCYmdGYoYiwhMSksUihhLGIpO2M9Yi5zdGF0ZU5vZGU7ZWMuY3VycmVudD1iO3ZhciBnPWY/bnVsbDpjLnJlbmRlcigpO2IuZWZmZWN0VGFnfD0xO2YmJihFZyhhLGIsbnVsbCxlKSxiLmNoaWxkPW51bGwpO0VnKGEsYixnLGUpO2IubWVtb2l6ZWRTdGF0ZT1jLnN0YXRlO2IubWVtb2l6ZWRQcm9wcz1jLnByb3BzO2QmJnRmKGIsITApO3JldHVybiBiLmNoaWxkfVxuZnVuY3Rpb24gSGcoYSl7dmFyIGI9YS5zdGF0ZU5vZGU7Yi5wZW5kaW5nQ29udGV4dD9xZihhLGIucGVuZGluZ0NvbnRleHQsYi5wZW5kaW5nQ29udGV4dCE9PWIuY29udGV4dCk6Yi5jb250ZXh0JiZxZihhLGIuY29udGV4dCwhMSk7ZGcoYSxiLmNvbnRhaW5lckluZm8pfVxuZnVuY3Rpb24gSWcoYSxiLGMsZCl7dmFyIGU9YS5jaGlsZDtudWxsIT09ZSYmKGUucmV0dXJuPWEpO2Zvcig7bnVsbCE9PWU7KXtzd2l0Y2goZS50YWcpe2Nhc2UgMTI6dmFyIGY9ZS5zdGF0ZU5vZGV8MDtpZihlLnR5cGU9PT1iJiYwIT09KGYmYykpe2ZvcihmPWU7bnVsbCE9PWY7KXt2YXIgZz1mLmFsdGVybmF0ZTtpZigwPT09Zi5leHBpcmF0aW9uVGltZXx8Zi5leHBpcmF0aW9uVGltZT5kKWYuZXhwaXJhdGlvblRpbWU9ZCxudWxsIT09ZyYmKDA9PT1nLmV4cGlyYXRpb25UaW1lfHxnLmV4cGlyYXRpb25UaW1lPmQpJiYoZy5leHBpcmF0aW9uVGltZT1kKTtlbHNlIGlmKG51bGwhPT1nJiYoMD09PWcuZXhwaXJhdGlvblRpbWV8fGcuZXhwaXJhdGlvblRpbWU+ZCkpZy5leHBpcmF0aW9uVGltZT1kO2Vsc2UgYnJlYWs7Zj1mLnJldHVybn1mPW51bGx9ZWxzZSBmPWUuY2hpbGQ7YnJlYWs7Y2FzZSAxMzpmPWUudHlwZT09PWEudHlwZT9udWxsOmUuY2hpbGQ7YnJlYWs7ZGVmYXVsdDpmPVxuZS5jaGlsZH1pZihudWxsIT09ZilmLnJldHVybj1lO2Vsc2UgZm9yKGY9ZTtudWxsIT09Zjspe2lmKGY9PT1hKXtmPW51bGw7YnJlYWt9ZT1mLnNpYmxpbmc7aWYobnVsbCE9PWUpe2UucmV0dXJuPWYucmV0dXJuO2Y9ZTticmVha31mPWYucmV0dXJufWU9Zn19XG5mdW5jdGlvbiBKZyhhLGIsYyl7dmFyIGQ9Yi50eXBlLl9jb250ZXh0LGU9Yi5wZW5kaW5nUHJvcHMsZj1iLm1lbW9pemVkUHJvcHMsZz0hMDtpZihPLmN1cnJlbnQpZz0hMTtlbHNlIGlmKGY9PT1lKXJldHVybiBiLnN0YXRlTm9kZT0wLFhmKGIpLFIoYSxiKTt2YXIgaD1lLnZhbHVlO2IubWVtb2l6ZWRQcm9wcz1lO2lmKG51bGw9PT1mKWg9MTA3Mzc0MTgyMztlbHNlIGlmKGYudmFsdWU9PT1lLnZhbHVlKXtpZihmLmNoaWxkcmVuPT09ZS5jaGlsZHJlbiYmZylyZXR1cm4gYi5zdGF0ZU5vZGU9MCxYZihiKSxSKGEsYik7aD0wfWVsc2V7dmFyIGs9Zi52YWx1ZTtpZihrPT09aCYmKDAhPT1rfHwxL2s9PT0xL2gpfHxrIT09ayYmaCE9PWgpe2lmKGYuY2hpbGRyZW49PT1lLmNoaWxkcmVuJiZnKXJldHVybiBiLnN0YXRlTm9kZT0wLFhmKGIpLFIoYSxiKTtoPTB9ZWxzZSBpZihoPVwiZnVuY3Rpb25cIj09PXR5cGVvZiBkLl9jYWxjdWxhdGVDaGFuZ2VkQml0cz9kLl9jYWxjdWxhdGVDaGFuZ2VkQml0cyhrLFxuaCk6MTA3Mzc0MTgyMyxofD0wLDA9PT1oKXtpZihmLmNoaWxkcmVuPT09ZS5jaGlsZHJlbiYmZylyZXR1cm4gYi5zdGF0ZU5vZGU9MCxYZihiKSxSKGEsYil9ZWxzZSBJZyhiLGQsaCxjKX1iLnN0YXRlTm9kZT1oO1hmKGIpO1EoYSxiLGUuY2hpbGRyZW4pO3JldHVybiBiLmNoaWxkfWZ1bmN0aW9uIFIoYSxiKXtudWxsIT09YSYmYi5jaGlsZCE9PWEuY2hpbGQ/QShcIjE1M1wiKTp2b2lkIDA7aWYobnVsbCE9PWIuY2hpbGQpe2E9Yi5jaGlsZDt2YXIgYz12ZihhLGEucGVuZGluZ1Byb3BzLGEuZXhwaXJhdGlvblRpbWUpO2IuY2hpbGQ9Yztmb3IoYy5yZXR1cm49YjtudWxsIT09YS5zaWJsaW5nOylhPWEuc2libGluZyxjPWMuc2libGluZz12ZihhLGEucGVuZGluZ1Byb3BzLGEuZXhwaXJhdGlvblRpbWUpLGMucmV0dXJuPWI7Yy5zaWJsaW5nPW51bGx9cmV0dXJuIGIuY2hpbGR9XG5mdW5jdGlvbiBLZyhhLGIsYyl7aWYoMD09PWIuZXhwaXJhdGlvblRpbWV8fGIuZXhwaXJhdGlvblRpbWU+Yyl7c3dpdGNoKGIudGFnKXtjYXNlIDM6SGcoYik7YnJlYWs7Y2FzZSAyOnNmKGIpO2JyZWFrO2Nhc2UgNDpkZyhiLGIuc3RhdGVOb2RlLmNvbnRhaW5lckluZm8pO2JyZWFrO2Nhc2UgMTM6WGYoYil9cmV0dXJuIG51bGx9c3dpdGNoKGIudGFnKXtjYXNlIDA6bnVsbCE9PWE/QShcIjE1NVwiKTp2b2lkIDA7dmFyIGQ9Yi50eXBlLGU9Yi5wZW5kaW5nUHJvcHMsZj1sZihiKTtmPW5mKGIsZik7ZD1kKGUsZik7Yi5lZmZlY3RUYWd8PTE7XCJvYmplY3RcIj09PXR5cGVvZiBkJiZudWxsIT09ZCYmXCJmdW5jdGlvblwiPT09dHlwZW9mIGQucmVuZGVyJiZ2b2lkIDA9PT1kLiQkdHlwZW9mPyhmPWIudHlwZSxiLnRhZz0yLGIubWVtb2l6ZWRTdGF0ZT1udWxsIT09ZC5zdGF0ZSYmdm9pZCAwIT09ZC5zdGF0ZT9kLnN0YXRlOm51bGwsZj1mLmdldERlcml2ZWRTdGF0ZUZyb21Qcm9wcyxcImZ1bmN0aW9uXCI9PT1cbnR5cGVvZiBmJiZoZyhiLGYsZSksZT1zZihiKSxkLnVwZGF0ZXI9bGcsYi5zdGF0ZU5vZGU9ZCxkLl9yZWFjdEludGVybmFsRmliZXI9YixvZyhiLGMpLGE9R2coYSxiLCEwLGUsYykpOihiLnRhZz0xLFEoYSxiLGQpLGIubWVtb2l6ZWRQcm9wcz1lLGE9Yi5jaGlsZCk7cmV0dXJuIGE7Y2FzZSAxOnJldHVybiBlPWIudHlwZSxjPWIucGVuZGluZ1Byb3BzLE8uY3VycmVudHx8Yi5tZW1vaXplZFByb3BzIT09Yz8oZD1sZihiKSxkPW5mKGIsZCksZT1lKGMsZCksYi5lZmZlY3RUYWd8PTEsUShhLGIsZSksYi5tZW1vaXplZFByb3BzPWMsYT1iLmNoaWxkKTphPVIoYSxiKSxhO2Nhc2UgMjplPXNmKGIpO2lmKG51bGw9PT1hKWlmKG51bGw9PT1iLnN0YXRlTm9kZSl7dmFyIGc9Yi5wZW5kaW5nUHJvcHMsaD1iLnR5cGU7ZD1sZihiKTt2YXIgaz0yPT09Yi50YWcmJm51bGwhPWIudHlwZS5jb250ZXh0VHlwZXM7Zj1rP25mKGIsZCk6aGE7Zz1uZXcgaChnLGYpO2IubWVtb2l6ZWRTdGF0ZT1udWxsIT09XG5nLnN0YXRlJiZ2b2lkIDAhPT1nLnN0YXRlP2cuc3RhdGU6bnVsbDtnLnVwZGF0ZXI9bGc7Yi5zdGF0ZU5vZGU9ZztnLl9yZWFjdEludGVybmFsRmliZXI9YjtrJiYoaz1iLnN0YXRlTm9kZSxrLl9fcmVhY3RJbnRlcm5hbE1lbW9pemVkVW5tYXNrZWRDaGlsZENvbnRleHQ9ZCxrLl9fcmVhY3RJbnRlcm5hbE1lbW9pemVkTWFza2VkQ2hpbGRDb250ZXh0PWYpO29nKGIsYyk7ZD0hMH1lbHNle2g9Yi50eXBlO2Q9Yi5zdGF0ZU5vZGU7az1iLm1lbW9pemVkUHJvcHM7Zj1iLnBlbmRpbmdQcm9wcztkLnByb3BzPWs7dmFyIG49ZC5jb250ZXh0O2c9bGYoYik7Zz1uZihiLGcpO3ZhciByPWguZ2V0RGVyaXZlZFN0YXRlRnJvbVByb3BzOyhoPVwiZnVuY3Rpb25cIj09PXR5cGVvZiByfHxcImZ1bmN0aW9uXCI9PT10eXBlb2YgZC5nZXRTbmFwc2hvdEJlZm9yZVVwZGF0ZSl8fFwiZnVuY3Rpb25cIiE9PXR5cGVvZiBkLlVOU0FGRV9jb21wb25lbnRXaWxsUmVjZWl2ZVByb3BzJiZcImZ1bmN0aW9uXCIhPT10eXBlb2YgZC5jb21wb25lbnRXaWxsUmVjZWl2ZVByb3BzfHxcbihrIT09Znx8biE9PWcpJiZuZyhiLGQsZixnKTtIZj0hMTt2YXIgdz1iLm1lbW9pemVkU3RhdGU7bj1kLnN0YXRlPXc7dmFyIFA9Yi51cGRhdGVRdWV1ZTtudWxsIT09UCYmKFFmKGIsUCxmLGQsYyksbj1iLm1lbW9pemVkU3RhdGUpO2shPT1mfHx3IT09bnx8Ty5jdXJyZW50fHxIZj8oXCJmdW5jdGlvblwiPT09dHlwZW9mIHImJihoZyhiLHIsZiksbj1iLm1lbW9pemVkU3RhdGUpLChrPUhmfHxtZyhiLGssZix3LG4sZykpPyhofHxcImZ1bmN0aW9uXCIhPT10eXBlb2YgZC5VTlNBRkVfY29tcG9uZW50V2lsbE1vdW50JiZcImZ1bmN0aW9uXCIhPT10eXBlb2YgZC5jb21wb25lbnRXaWxsTW91bnR8fChcImZ1bmN0aW9uXCI9PT10eXBlb2YgZC5jb21wb25lbnRXaWxsTW91bnQmJmQuY29tcG9uZW50V2lsbE1vdW50KCksXCJmdW5jdGlvblwiPT09dHlwZW9mIGQuVU5TQUZFX2NvbXBvbmVudFdpbGxNb3VudCYmZC5VTlNBRkVfY29tcG9uZW50V2lsbE1vdW50KCkpLFwiZnVuY3Rpb25cIj09PXR5cGVvZiBkLmNvbXBvbmVudERpZE1vdW50JiZcbihiLmVmZmVjdFRhZ3w9NCkpOihcImZ1bmN0aW9uXCI9PT10eXBlb2YgZC5jb21wb25lbnREaWRNb3VudCYmKGIuZWZmZWN0VGFnfD00KSxiLm1lbW9pemVkUHJvcHM9ZixiLm1lbW9pemVkU3RhdGU9biksZC5wcm9wcz1mLGQuc3RhdGU9bixkLmNvbnRleHQ9ZyxkPWspOihcImZ1bmN0aW9uXCI9PT10eXBlb2YgZC5jb21wb25lbnREaWRNb3VudCYmKGIuZWZmZWN0VGFnfD00KSxkPSExKX1lbHNlIGg9Yi50eXBlLGQ9Yi5zdGF0ZU5vZGUsZj1iLm1lbW9pemVkUHJvcHMsaz1iLnBlbmRpbmdQcm9wcyxkLnByb3BzPWYsbj1kLmNvbnRleHQsZz1sZihiKSxnPW5mKGIsZykscj1oLmdldERlcml2ZWRTdGF0ZUZyb21Qcm9wcywoaD1cImZ1bmN0aW9uXCI9PT10eXBlb2Ygcnx8XCJmdW5jdGlvblwiPT09dHlwZW9mIGQuZ2V0U25hcHNob3RCZWZvcmVVcGRhdGUpfHxcImZ1bmN0aW9uXCIhPT10eXBlb2YgZC5VTlNBRkVfY29tcG9uZW50V2lsbFJlY2VpdmVQcm9wcyYmXCJmdW5jdGlvblwiIT09dHlwZW9mIGQuY29tcG9uZW50V2lsbFJlY2VpdmVQcm9wc3x8XG4oZiE9PWt8fG4hPT1nKSYmbmcoYixkLGssZyksSGY9ITEsbj1iLm1lbW9pemVkU3RhdGUsdz1kLnN0YXRlPW4sUD1iLnVwZGF0ZVF1ZXVlLG51bGwhPT1QJiYoUWYoYixQLGssZCxjKSx3PWIubWVtb2l6ZWRTdGF0ZSksZiE9PWt8fG4hPT13fHxPLmN1cnJlbnR8fEhmPyhcImZ1bmN0aW9uXCI9PT10eXBlb2YgciYmKGhnKGIscixrKSx3PWIubWVtb2l6ZWRTdGF0ZSksKHI9SGZ8fG1nKGIsZixrLG4sdyxnKSk/KGh8fFwiZnVuY3Rpb25cIiE9PXR5cGVvZiBkLlVOU0FGRV9jb21wb25lbnRXaWxsVXBkYXRlJiZcImZ1bmN0aW9uXCIhPT10eXBlb2YgZC5jb21wb25lbnRXaWxsVXBkYXRlfHwoXCJmdW5jdGlvblwiPT09dHlwZW9mIGQuY29tcG9uZW50V2lsbFVwZGF0ZSYmZC5jb21wb25lbnRXaWxsVXBkYXRlKGssdyxnKSxcImZ1bmN0aW9uXCI9PT10eXBlb2YgZC5VTlNBRkVfY29tcG9uZW50V2lsbFVwZGF0ZSYmZC5VTlNBRkVfY29tcG9uZW50V2lsbFVwZGF0ZShrLHcsZykpLFwiZnVuY3Rpb25cIj09PXR5cGVvZiBkLmNvbXBvbmVudERpZFVwZGF0ZSYmXG4oYi5lZmZlY3RUYWd8PTQpLFwiZnVuY3Rpb25cIj09PXR5cGVvZiBkLmdldFNuYXBzaG90QmVmb3JlVXBkYXRlJiYoYi5lZmZlY3RUYWd8PTI1NikpOihcImZ1bmN0aW9uXCIhPT10eXBlb2YgZC5jb21wb25lbnREaWRVcGRhdGV8fGY9PT1hLm1lbW9pemVkUHJvcHMmJm49PT1hLm1lbW9pemVkU3RhdGV8fChiLmVmZmVjdFRhZ3w9NCksXCJmdW5jdGlvblwiIT09dHlwZW9mIGQuZ2V0U25hcHNob3RCZWZvcmVVcGRhdGV8fGY9PT1hLm1lbW9pemVkUHJvcHMmJm49PT1hLm1lbW9pemVkU3RhdGV8fChiLmVmZmVjdFRhZ3w9MjU2KSxiLm1lbW9pemVkUHJvcHM9ayxiLm1lbW9pemVkU3RhdGU9dyksZC5wcm9wcz1rLGQuc3RhdGU9dyxkLmNvbnRleHQ9ZyxkPXIpOihcImZ1bmN0aW9uXCIhPT10eXBlb2YgZC5jb21wb25lbnREaWRVcGRhdGV8fGY9PT1hLm1lbW9pemVkUHJvcHMmJm49PT1hLm1lbW9pemVkU3RhdGV8fChiLmVmZmVjdFRhZ3w9NCksXCJmdW5jdGlvblwiIT09dHlwZW9mIGQuZ2V0U25hcHNob3RCZWZvcmVVcGRhdGV8fFxuZj09PWEubWVtb2l6ZWRQcm9wcyYmbj09PWEubWVtb2l6ZWRTdGF0ZXx8KGIuZWZmZWN0VGFnfD0yNTYpLGQ9ITEpO3JldHVybiBHZyhhLGIsZCxlLGMpO2Nhc2UgMzpIZyhiKTtlPWIudXBkYXRlUXVldWU7aWYobnVsbCE9PWUpaWYoZD1iLm1lbW9pemVkU3RhdGUsZD1udWxsIT09ZD9kLmVsZW1lbnQ6bnVsbCxRZihiLGUsYi5wZW5kaW5nUHJvcHMsbnVsbCxjKSxlPWIubWVtb2l6ZWRTdGF0ZS5lbGVtZW50LGU9PT1kKURnKCksYT1SKGEsYik7ZWxzZXtkPWIuc3RhdGVOb2RlO2lmKGQ9KG51bGw9PT1hfHxudWxsPT09YS5jaGlsZCkmJmQuaHlkcmF0ZSl3Zz1lZihiLnN0YXRlTm9kZS5jb250YWluZXJJbmZvKSx2Zz1iLGQ9eGc9ITA7ZD8oYi5lZmZlY3RUYWd8PTIsYi5jaGlsZD11ZyhiLG51bGwsZSxjKSk6KERnKCksUShhLGIsZSkpO2E9Yi5jaGlsZH1lbHNlIERnKCksYT1SKGEsYik7cmV0dXJuIGE7Y2FzZSA1OmE6e2NnKGJnLmN1cnJlbnQpO2U9Y2coJGYuY3VycmVudCk7ZD1EZShlLFxuYi50eXBlKTtlIT09ZCYmKE4oYWcsYixiKSxOKCRmLGQsYikpO251bGw9PT1hJiZBZyhiKTtlPWIudHlwZTtrPWIubWVtb2l6ZWRQcm9wcztkPWIucGVuZGluZ1Byb3BzO2Y9bnVsbCE9PWE/YS5tZW1vaXplZFByb3BzOm51bGw7aWYoIU8uY3VycmVudCYmaz09PWQpe2lmKGs9Yi5tb2RlJjEmJiEhZC5oaWRkZW4pYi5leHBpcmF0aW9uVGltZT0xMDczNzQxODIzO2lmKCFrfHwxMDczNzQxODIzIT09Yyl7YT1SKGEsYik7YnJlYWsgYX19az1kLmNoaWxkcmVuOyRlKGUsZCk/az1udWxsOmYmJiRlKGUsZikmJihiLmVmZmVjdFRhZ3w9MTYpO0ZnKGEsYik7MTA3Mzc0MTgyMyE9PWMmJmIubW9kZSYxJiZkLmhpZGRlbj8oYi5leHBpcmF0aW9uVGltZT0xMDczNzQxODIzLGIubWVtb2l6ZWRQcm9wcz1kLGE9bnVsbCk6KFEoYSxiLGspLGIubWVtb2l6ZWRQcm9wcz1kLGE9Yi5jaGlsZCl9cmV0dXJuIGE7Y2FzZSA2OnJldHVybiBudWxsPT09YSYmQWcoYiksYi5tZW1vaXplZFByb3BzPWIucGVuZGluZ1Byb3BzLFxubnVsbDtjYXNlIDE2OnJldHVybiBudWxsO2Nhc2UgNDpyZXR1cm4gZGcoYixiLnN0YXRlTm9kZS5jb250YWluZXJJbmZvKSxlPWIucGVuZGluZ1Byb3BzLE8uY3VycmVudHx8Yi5tZW1vaXplZFByb3BzIT09ZT8obnVsbD09PWE/Yi5jaGlsZD10ZyhiLG51bGwsZSxjKTpRKGEsYixlKSxiLm1lbW9pemVkUHJvcHM9ZSxhPWIuY2hpbGQpOmE9UihhLGIpLGE7Y2FzZSAxNDpyZXR1cm4gZT1iLnR5cGUucmVuZGVyLGM9Yi5wZW5kaW5nUHJvcHMsZD1iLnJlZixPLmN1cnJlbnR8fGIubWVtb2l6ZWRQcm9wcyE9PWN8fGQhPT0obnVsbCE9PWE/YS5yZWY6bnVsbCk/KGU9ZShjLGQpLFEoYSxiLGUpLGIubWVtb2l6ZWRQcm9wcz1jLGE9Yi5jaGlsZCk6YT1SKGEsYiksYTtjYXNlIDEwOnJldHVybiBjPWIucGVuZGluZ1Byb3BzLE8uY3VycmVudHx8Yi5tZW1vaXplZFByb3BzIT09Yz8oUShhLGIsYyksYi5tZW1vaXplZFByb3BzPWMsYT1iLmNoaWxkKTphPVIoYSxiKSxhO2Nhc2UgMTE6cmV0dXJuIGM9XG5iLnBlbmRpbmdQcm9wcy5jaGlsZHJlbixPLmN1cnJlbnR8fG51bGwhPT1jJiZiLm1lbW9pemVkUHJvcHMhPT1jPyhRKGEsYixjKSxiLm1lbW9pemVkUHJvcHM9YyxhPWIuY2hpbGQpOmE9UihhLGIpLGE7Y2FzZSAxNTpyZXR1cm4gYz1iLnBlbmRpbmdQcm9wcyxiLm1lbW9pemVkUHJvcHM9PT1jP2E9UihhLGIpOihRKGEsYixjLmNoaWxkcmVuKSxiLm1lbW9pemVkUHJvcHM9YyxhPWIuY2hpbGQpLGE7Y2FzZSAxMzpyZXR1cm4gSmcoYSxiLGMpO2Nhc2UgMTI6YTppZihkPWIudHlwZSxmPWIucGVuZGluZ1Byb3BzLGs9Yi5tZW1vaXplZFByb3BzLGU9ZC5fY3VycmVudFZhbHVlLGc9ZC5fY2hhbmdlZEJpdHMsTy5jdXJyZW50fHwwIT09Z3x8ayE9PWYpe2IubWVtb2l6ZWRQcm9wcz1mO2g9Zi51bnN0YWJsZV9vYnNlcnZlZEJpdHM7aWYodm9pZCAwPT09aHx8bnVsbD09PWgpaD0xMDczNzQxODIzO2Iuc3RhdGVOb2RlPWg7aWYoMCE9PShnJmgpKUlnKGIsZCxnLGMpO2Vsc2UgaWYoaz09PWYpe2E9XG5SKGEsYik7YnJlYWsgYX1jPWYuY2hpbGRyZW47Yz1jKGUpO2IuZWZmZWN0VGFnfD0xO1EoYSxiLGMpO2E9Yi5jaGlsZH1lbHNlIGE9UihhLGIpO3JldHVybiBhO2RlZmF1bHQ6QShcIjE1NlwiKX19ZnVuY3Rpb24gTGcoYSl7YS5lZmZlY3RUYWd8PTR9dmFyIFBnPXZvaWQgMCxRZz12b2lkIDAsUmc9dm9pZCAwO1BnPWZ1bmN0aW9uKCl7fTtRZz1mdW5jdGlvbihhLGIsYyl7KGIudXBkYXRlUXVldWU9YykmJkxnKGIpfTtSZz1mdW5jdGlvbihhLGIsYyxkKXtjIT09ZCYmTGcoYil9O1xuZnVuY3Rpb24gU2coYSxiKXt2YXIgYz1iLnBlbmRpbmdQcm9wcztzd2l0Y2goYi50YWcpe2Nhc2UgMTpyZXR1cm4gbnVsbDtjYXNlIDI6cmV0dXJuIG9mKGIpLG51bGw7Y2FzZSAzOmVnKGIpO3BmKGIpO3ZhciBkPWIuc3RhdGVOb2RlO2QucGVuZGluZ0NvbnRleHQmJihkLmNvbnRleHQ9ZC5wZW5kaW5nQ29udGV4dCxkLnBlbmRpbmdDb250ZXh0PW51bGwpO2lmKG51bGw9PT1hfHxudWxsPT09YS5jaGlsZClDZyhiKSxiLmVmZmVjdFRhZyY9LTM7UGcoYik7cmV0dXJuIG51bGw7Y2FzZSA1OmZnKGIpO2Q9Y2coYmcuY3VycmVudCk7dmFyIGU9Yi50eXBlO2lmKG51bGwhPT1hJiZudWxsIT1iLnN0YXRlTm9kZSl7dmFyIGY9YS5tZW1vaXplZFByb3BzLGc9Yi5zdGF0ZU5vZGUsaD1jZygkZi5jdXJyZW50KTtnPVNlKGcsZSxmLGMsZCk7UWcoYSxiLGcsZSxmLGMsZCxoKTthLnJlZiE9PWIucmVmJiYoYi5lZmZlY3RUYWd8PTEyOCl9ZWxzZXtpZighYylyZXR1cm4gbnVsbD09PWIuc3RhdGVOb2RlP1xuQShcIjE2NlwiKTp2b2lkIDAsbnVsbDthPWNnKCRmLmN1cnJlbnQpO2lmKENnKGIpKWM9Yi5zdGF0ZU5vZGUsZT1iLnR5cGUsZj1iLm1lbW9pemVkUHJvcHMsY1tDXT1iLGNbTWFdPWYsZD1VZShjLGUsZixhLGQpLGIudXBkYXRlUXVldWU9ZCxudWxsIT09ZCYmTGcoYik7ZWxzZXthPVBlKGUsYyxkLGEpO2FbQ109YjthW01hXT1jO2E6Zm9yKGY9Yi5jaGlsZDtudWxsIT09Zjspe2lmKDU9PT1mLnRhZ3x8Nj09PWYudGFnKWEuYXBwZW5kQ2hpbGQoZi5zdGF0ZU5vZGUpO2Vsc2UgaWYoNCE9PWYudGFnJiZudWxsIT09Zi5jaGlsZCl7Zi5jaGlsZC5yZXR1cm49ZjtmPWYuY2hpbGQ7Y29udGludWV9aWYoZj09PWIpYnJlYWs7Zm9yKDtudWxsPT09Zi5zaWJsaW5nOyl7aWYobnVsbD09PWYucmV0dXJufHxmLnJldHVybj09PWIpYnJlYWsgYTtmPWYucmV0dXJufWYuc2libGluZy5yZXR1cm49Zi5yZXR1cm47Zj1mLnNpYmxpbmd9UmUoYSxlLGMsZCk7WmUoZSxjKSYmTGcoYik7Yi5zdGF0ZU5vZGU9XG5hfW51bGwhPT1iLnJlZiYmKGIuZWZmZWN0VGFnfD0xMjgpfXJldHVybiBudWxsO2Nhc2UgNjppZihhJiZudWxsIT1iLnN0YXRlTm9kZSlSZyhhLGIsYS5tZW1vaXplZFByb3BzLGMpO2Vsc2V7aWYoXCJzdHJpbmdcIiE9PXR5cGVvZiBjKXJldHVybiBudWxsPT09Yi5zdGF0ZU5vZGU/QShcIjE2NlwiKTp2b2lkIDAsbnVsbDtkPWNnKGJnLmN1cnJlbnQpO2NnKCRmLmN1cnJlbnQpO0NnKGIpPyhkPWIuc3RhdGVOb2RlLGM9Yi5tZW1vaXplZFByb3BzLGRbQ109YixWZShkLGMpJiZMZyhiKSk6KGQ9UWUoYyxkKSxkW0NdPWIsYi5zdGF0ZU5vZGU9ZCl9cmV0dXJuIG51bGw7Y2FzZSAxNDpyZXR1cm4gbnVsbDtjYXNlIDE2OnJldHVybiBudWxsO2Nhc2UgMTA6cmV0dXJuIG51bGw7Y2FzZSAxMTpyZXR1cm4gbnVsbDtjYXNlIDE1OnJldHVybiBudWxsO2Nhc2UgNDpyZXR1cm4gZWcoYiksUGcoYiksbnVsbDtjYXNlIDEzOnJldHVybiBZZihiKSxudWxsO2Nhc2UgMTI6cmV0dXJuIG51bGw7Y2FzZSAwOkEoXCIxNjdcIik7XG5kZWZhdWx0OkEoXCIxNTZcIil9fWZ1bmN0aW9uIFRnKGEsYil7dmFyIGM9Yi5zb3VyY2U7bnVsbD09PWIuc3RhY2smJm51bGwhPT1jJiZ2YyhjKTtudWxsIT09YyYmdGMoYyk7Yj1iLnZhbHVlO251bGwhPT1hJiYyPT09YS50YWcmJnRjKGEpO3RyeXtiJiZiLnN1cHByZXNzUmVhY3RFcnJvckxvZ2dpbmd8fGNvbnNvbGUuZXJyb3IoYil9Y2F0Y2goZCl7ZCYmZC5zdXBwcmVzc1JlYWN0RXJyb3JMb2dnaW5nfHxjb25zb2xlLmVycm9yKGQpfX1mdW5jdGlvbiBVZyhhKXt2YXIgYj1hLnJlZjtpZihudWxsIT09YilpZihcImZ1bmN0aW9uXCI9PT10eXBlb2YgYil0cnl7YihudWxsKX1jYXRjaChjKXtWZyhhLGMpfWVsc2UgYi5jdXJyZW50PW51bGx9XG5mdW5jdGlvbiBXZyhhKXtcImZ1bmN0aW9uXCI9PT10eXBlb2YgR2YmJkdmKGEpO3N3aXRjaChhLnRhZyl7Y2FzZSAyOlVnKGEpO3ZhciBiPWEuc3RhdGVOb2RlO2lmKFwiZnVuY3Rpb25cIj09PXR5cGVvZiBiLmNvbXBvbmVudFdpbGxVbm1vdW50KXRyeXtiLnByb3BzPWEubWVtb2l6ZWRQcm9wcyxiLnN0YXRlPWEubWVtb2l6ZWRTdGF0ZSxiLmNvbXBvbmVudFdpbGxVbm1vdW50KCl9Y2F0Y2goYyl7VmcoYSxjKX1icmVhaztjYXNlIDU6VWcoYSk7YnJlYWs7Y2FzZSA0OlhnKGEpfX1mdW5jdGlvbiBZZyhhKXtyZXR1cm4gNT09PWEudGFnfHwzPT09YS50YWd8fDQ9PT1hLnRhZ31cbmZ1bmN0aW9uIFpnKGEpe2E6e2Zvcih2YXIgYj1hLnJldHVybjtudWxsIT09Yjspe2lmKFlnKGIpKXt2YXIgYz1iO2JyZWFrIGF9Yj1iLnJldHVybn1BKFwiMTYwXCIpO2M9dm9pZCAwfXZhciBkPWI9dm9pZCAwO3N3aXRjaChjLnRhZyl7Y2FzZSA1OmI9Yy5zdGF0ZU5vZGU7ZD0hMTticmVhaztjYXNlIDM6Yj1jLnN0YXRlTm9kZS5jb250YWluZXJJbmZvO2Q9ITA7YnJlYWs7Y2FzZSA0OmI9Yy5zdGF0ZU5vZGUuY29udGFpbmVySW5mbztkPSEwO2JyZWFrO2RlZmF1bHQ6QShcIjE2MVwiKX1jLmVmZmVjdFRhZyYxNiYmKEdlKGIsXCJcIiksYy5lZmZlY3RUYWcmPS0xNyk7YTpiOmZvcihjPWE7Oyl7Zm9yKDtudWxsPT09Yy5zaWJsaW5nOyl7aWYobnVsbD09PWMucmV0dXJufHxZZyhjLnJldHVybikpe2M9bnVsbDticmVhayBhfWM9Yy5yZXR1cm59Yy5zaWJsaW5nLnJldHVybj1jLnJldHVybjtmb3IoYz1jLnNpYmxpbmc7NSE9PWMudGFnJiY2IT09Yy50YWc7KXtpZihjLmVmZmVjdFRhZyYyKWNvbnRpbnVlIGI7XG5pZihudWxsPT09Yy5jaGlsZHx8ND09PWMudGFnKWNvbnRpbnVlIGI7ZWxzZSBjLmNoaWxkLnJldHVybj1jLGM9Yy5jaGlsZH1pZighKGMuZWZmZWN0VGFnJjIpKXtjPWMuc3RhdGVOb2RlO2JyZWFrIGF9fWZvcih2YXIgZT1hOzspe2lmKDU9PT1lLnRhZ3x8Nj09PWUudGFnKWlmKGMpaWYoZCl7dmFyIGY9YixnPWUuc3RhdGVOb2RlLGg9Yzs4PT09Zi5ub2RlVHlwZT9mLnBhcmVudE5vZGUuaW5zZXJ0QmVmb3JlKGcsaCk6Zi5pbnNlcnRCZWZvcmUoZyxoKX1lbHNlIGIuaW5zZXJ0QmVmb3JlKGUuc3RhdGVOb2RlLGMpO2Vsc2UgZD8oZj1iLGc9ZS5zdGF0ZU5vZGUsOD09PWYubm9kZVR5cGU/Zi5wYXJlbnROb2RlLmluc2VydEJlZm9yZShnLGYpOmYuYXBwZW5kQ2hpbGQoZykpOmIuYXBwZW5kQ2hpbGQoZS5zdGF0ZU5vZGUpO2Vsc2UgaWYoNCE9PWUudGFnJiZudWxsIT09ZS5jaGlsZCl7ZS5jaGlsZC5yZXR1cm49ZTtlPWUuY2hpbGQ7Y29udGludWV9aWYoZT09PWEpYnJlYWs7Zm9yKDtudWxsPT09XG5lLnNpYmxpbmc7KXtpZihudWxsPT09ZS5yZXR1cm58fGUucmV0dXJuPT09YSlyZXR1cm47ZT1lLnJldHVybn1lLnNpYmxpbmcucmV0dXJuPWUucmV0dXJuO2U9ZS5zaWJsaW5nfX1cbmZ1bmN0aW9uIFhnKGEpe2Zvcih2YXIgYj1hLGM9ITEsZD12b2lkIDAsZT12b2lkIDA7Oyl7aWYoIWMpe2M9Yi5yZXR1cm47YTpmb3IoOzspe251bGw9PT1jP0EoXCIxNjBcIik6dm9pZCAwO3N3aXRjaChjLnRhZyl7Y2FzZSA1OmQ9Yy5zdGF0ZU5vZGU7ZT0hMTticmVhayBhO2Nhc2UgMzpkPWMuc3RhdGVOb2RlLmNvbnRhaW5lckluZm87ZT0hMDticmVhayBhO2Nhc2UgNDpkPWMuc3RhdGVOb2RlLmNvbnRhaW5lckluZm87ZT0hMDticmVhayBhfWM9Yy5yZXR1cm59Yz0hMH1pZig1PT09Yi50YWd8fDY9PT1iLnRhZyl7YTpmb3IodmFyIGY9YixnPWY7OylpZihXZyhnKSxudWxsIT09Zy5jaGlsZCYmNCE9PWcudGFnKWcuY2hpbGQucmV0dXJuPWcsZz1nLmNoaWxkO2Vsc2V7aWYoZz09PWYpYnJlYWs7Zm9yKDtudWxsPT09Zy5zaWJsaW5nOyl7aWYobnVsbD09PWcucmV0dXJufHxnLnJldHVybj09PWYpYnJlYWsgYTtnPWcucmV0dXJufWcuc2libGluZy5yZXR1cm49Zy5yZXR1cm47Zz1nLnNpYmxpbmd9ZT9cbihmPWQsZz1iLnN0YXRlTm9kZSw4PT09Zi5ub2RlVHlwZT9mLnBhcmVudE5vZGUucmVtb3ZlQ2hpbGQoZyk6Zi5yZW1vdmVDaGlsZChnKSk6ZC5yZW1vdmVDaGlsZChiLnN0YXRlTm9kZSl9ZWxzZSBpZig0PT09Yi50YWc/ZD1iLnN0YXRlTm9kZS5jb250YWluZXJJbmZvOldnKGIpLG51bGwhPT1iLmNoaWxkKXtiLmNoaWxkLnJldHVybj1iO2I9Yi5jaGlsZDtjb250aW51ZX1pZihiPT09YSlicmVhaztmb3IoO251bGw9PT1iLnNpYmxpbmc7KXtpZihudWxsPT09Yi5yZXR1cm58fGIucmV0dXJuPT09YSlyZXR1cm47Yj1iLnJldHVybjs0PT09Yi50YWcmJihjPSExKX1iLnNpYmxpbmcucmV0dXJuPWIucmV0dXJuO2I9Yi5zaWJsaW5nfX1cbmZ1bmN0aW9uICRnKGEsYil7c3dpdGNoKGIudGFnKXtjYXNlIDI6YnJlYWs7Y2FzZSA1OnZhciBjPWIuc3RhdGVOb2RlO2lmKG51bGwhPWMpe3ZhciBkPWIubWVtb2l6ZWRQcm9wczthPW51bGwhPT1hP2EubWVtb2l6ZWRQcm9wczpkO3ZhciBlPWIudHlwZSxmPWIudXBkYXRlUXVldWU7Yi51cGRhdGVRdWV1ZT1udWxsO251bGwhPT1mJiYoY1tNYV09ZCxUZShjLGYsZSxhLGQpKX1icmVhaztjYXNlIDY6bnVsbD09PWIuc3RhdGVOb2RlP0EoXCIxNjJcIik6dm9pZCAwO2Iuc3RhdGVOb2RlLm5vZGVWYWx1ZT1iLm1lbW9pemVkUHJvcHM7YnJlYWs7Y2FzZSAzOmJyZWFrO2Nhc2UgMTU6YnJlYWs7Y2FzZSAxNjpicmVhaztkZWZhdWx0OkEoXCIxNjNcIil9fWZ1bmN0aW9uIGFoKGEsYixjKXtjPUtmKGMpO2MudGFnPTM7Yy5wYXlsb2FkPXtlbGVtZW50Om51bGx9O3ZhciBkPWIudmFsdWU7Yy5jYWxsYmFjaz1mdW5jdGlvbigpe2JoKGQpO1RnKGEsYil9O3JldHVybiBjfVxuZnVuY3Rpb24gY2goYSxiLGMpe2M9S2YoYyk7Yy50YWc9Mzt2YXIgZD1hLnN0YXRlTm9kZTtudWxsIT09ZCYmXCJmdW5jdGlvblwiPT09dHlwZW9mIGQuY29tcG9uZW50RGlkQ2F0Y2gmJihjLmNhbGxiYWNrPWZ1bmN0aW9uKCl7bnVsbD09PWRoP2RoPW5ldyBTZXQoW3RoaXNdKTpkaC5hZGQodGhpcyk7dmFyIGM9Yi52YWx1ZSxkPWIuc3RhY2s7VGcoYSxiKTt0aGlzLmNvbXBvbmVudERpZENhdGNoKGMse2NvbXBvbmVudFN0YWNrOm51bGwhPT1kP2Q6XCJcIn0pfSk7cmV0dXJuIGN9XG5mdW5jdGlvbiBlaChhLGIsYyxkLGUsZil7Yy5lZmZlY3RUYWd8PTUxMjtjLmZpcnN0RWZmZWN0PWMubGFzdEVmZmVjdD1udWxsO2Q9VGYoZCxjKTthPWI7ZG97c3dpdGNoKGEudGFnKXtjYXNlIDM6YS5lZmZlY3RUYWd8PTEwMjQ7ZD1haChhLGQsZik7TmYoYSxkLGYpO3JldHVybjtjYXNlIDI6aWYoYj1kLGM9YS5zdGF0ZU5vZGUsMD09PShhLmVmZmVjdFRhZyY2NCkmJm51bGwhPT1jJiZcImZ1bmN0aW9uXCI9PT10eXBlb2YgYy5jb21wb25lbnREaWRDYXRjaCYmKG51bGw9PT1kaHx8IWRoLmhhcyhjKSkpe2EuZWZmZWN0VGFnfD0xMDI0O2Q9Y2goYSxiLGYpO05mKGEsZCxmKTtyZXR1cm59fWE9YS5yZXR1cm59d2hpbGUobnVsbCE9PWEpfVxuZnVuY3Rpb24gZmgoYSl7c3dpdGNoKGEudGFnKXtjYXNlIDI6b2YoYSk7dmFyIGI9YS5lZmZlY3RUYWc7cmV0dXJuIGImMTAyND8oYS5lZmZlY3RUYWc9YiYtMTAyNXw2NCxhKTpudWxsO2Nhc2UgMzpyZXR1cm4gZWcoYSkscGYoYSksYj1hLmVmZmVjdFRhZyxiJjEwMjQ/KGEuZWZmZWN0VGFnPWImLTEwMjV8NjQsYSk6bnVsbDtjYXNlIDU6cmV0dXJuIGZnKGEpLG51bGw7Y2FzZSAxNjpyZXR1cm4gYj1hLmVmZmVjdFRhZyxiJjEwMjQ/KGEuZWZmZWN0VGFnPWImLTEwMjV8NjQsYSk6bnVsbDtjYXNlIDQ6cmV0dXJuIGVnKGEpLG51bGw7Y2FzZSAxMzpyZXR1cm4gWWYoYSksbnVsbDtkZWZhdWx0OnJldHVybiBudWxsfX12YXIgZ2g9YWYoKSxoaD0yLGloPWdoLGpoPTAsa2g9MCxsaD0hMSxTPW51bGwsbWg9bnVsbCxUPTAsbmg9LTEsb2g9ITEsVT1udWxsLHBoPSExLHFoPSExLGRoPW51bGw7XG5mdW5jdGlvbiByaCgpe2lmKG51bGwhPT1TKWZvcih2YXIgYT1TLnJldHVybjtudWxsIT09YTspe3ZhciBiPWE7c3dpdGNoKGIudGFnKXtjYXNlIDI6b2YoYik7YnJlYWs7Y2FzZSAzOmVnKGIpO3BmKGIpO2JyZWFrO2Nhc2UgNTpmZyhiKTticmVhaztjYXNlIDQ6ZWcoYik7YnJlYWs7Y2FzZSAxMzpZZihiKX1hPWEucmV0dXJufW1oPW51bGw7VD0wO25oPS0xO29oPSExO1M9bnVsbDtxaD0hMX1cbmZ1bmN0aW9uIHNoKGEpe2Zvcig7Oyl7dmFyIGI9YS5hbHRlcm5hdGUsYz1hLnJldHVybixkPWEuc2libGluZztpZigwPT09KGEuZWZmZWN0VGFnJjUxMikpe2I9U2coYixhLFQpO3ZhciBlPWE7aWYoMTA3Mzc0MTgyMz09PVR8fDEwNzM3NDE4MjMhPT1lLmV4cGlyYXRpb25UaW1lKXt2YXIgZj0wO3N3aXRjaChlLnRhZyl7Y2FzZSAzOmNhc2UgMjp2YXIgZz1lLnVwZGF0ZVF1ZXVlO251bGwhPT1nJiYoZj1nLmV4cGlyYXRpb25UaW1lKX1mb3IoZz1lLmNoaWxkO251bGwhPT1nOykwIT09Zy5leHBpcmF0aW9uVGltZSYmKDA9PT1mfHxmPmcuZXhwaXJhdGlvblRpbWUpJiYoZj1nLmV4cGlyYXRpb25UaW1lKSxnPWcuc2libGluZztlLmV4cGlyYXRpb25UaW1lPWZ9aWYobnVsbCE9PWIpcmV0dXJuIGI7bnVsbCE9PWMmJjA9PT0oYy5lZmZlY3RUYWcmNTEyKSYmKG51bGw9PT1jLmZpcnN0RWZmZWN0JiYoYy5maXJzdEVmZmVjdD1hLmZpcnN0RWZmZWN0KSxudWxsIT09YS5sYXN0RWZmZWN0JiZcbihudWxsIT09Yy5sYXN0RWZmZWN0JiYoYy5sYXN0RWZmZWN0Lm5leHRFZmZlY3Q9YS5maXJzdEVmZmVjdCksYy5sYXN0RWZmZWN0PWEubGFzdEVmZmVjdCksMTxhLmVmZmVjdFRhZyYmKG51bGwhPT1jLmxhc3RFZmZlY3Q/Yy5sYXN0RWZmZWN0Lm5leHRFZmZlY3Q9YTpjLmZpcnN0RWZmZWN0PWEsYy5sYXN0RWZmZWN0PWEpKTtpZihudWxsIT09ZClyZXR1cm4gZDtpZihudWxsIT09YylhPWM7ZWxzZXtxaD0hMDticmVha319ZWxzZXthPWZoKGEsb2gsVCk7aWYobnVsbCE9PWEpcmV0dXJuIGEuZWZmZWN0VGFnJj01MTEsYTtudWxsIT09YyYmKGMuZmlyc3RFZmZlY3Q9Yy5sYXN0RWZmZWN0PW51bGwsYy5lZmZlY3RUYWd8PTUxMik7aWYobnVsbCE9PWQpcmV0dXJuIGQ7aWYobnVsbCE9PWMpYT1jO2Vsc2UgYnJlYWt9fXJldHVybiBudWxsfVxuZnVuY3Rpb24gdGgoYSl7dmFyIGI9S2coYS5hbHRlcm5hdGUsYSxUKTtudWxsPT09YiYmKGI9c2goYSkpO2VjLmN1cnJlbnQ9bnVsbDtyZXR1cm4gYn1cbmZ1bmN0aW9uIHVoKGEsYixjKXtsaD9BKFwiMjQzXCIpOnZvaWQgMDtsaD0hMDtpZihiIT09VHx8YSE9PW1ofHxudWxsPT09UylyaCgpLG1oPWEsVD1iLG5oPS0xLFM9dmYobWguY3VycmVudCxudWxsLFQpLGEucGVuZGluZ0NvbW1pdEV4cGlyYXRpb25UaW1lPTA7dmFyIGQ9ITE7b2g9IWN8fFQ8PWhoO2Rve3RyeXtpZihjKWZvcig7bnVsbCE9PVMmJiF2aCgpOylTPXRoKFMpO2Vsc2UgZm9yKDtudWxsIT09UzspUz10aChTKX1jYXRjaChmKXtpZihudWxsPT09UylkPSEwLGJoKGYpO2Vsc2V7bnVsbD09PVM/QShcIjI3MVwiKTp2b2lkIDA7Yz1TO3ZhciBlPWMucmV0dXJuO2lmKG51bGw9PT1lKXtkPSEwO2JoKGYpO2JyZWFrfWVoKGEsZSxjLGYsb2gsVCxpaCk7Uz1zaChjKX19YnJlYWt9d2hpbGUoMSk7bGg9ITE7aWYoZClyZXR1cm4gbnVsbDtpZihudWxsPT09Uyl7aWYocWgpcmV0dXJuIGEucGVuZGluZ0NvbW1pdEV4cGlyYXRpb25UaW1lPWIsYS5jdXJyZW50LmFsdGVybmF0ZTtvaD9BKFwiMjYyXCIpOlxudm9pZCAwOzA8PW5oJiZzZXRUaW1lb3V0KGZ1bmN0aW9uKCl7dmFyIGI9YS5jdXJyZW50LmV4cGlyYXRpb25UaW1lOzAhPT1iJiYoMD09PWEucmVtYWluaW5nRXhwaXJhdGlvblRpbWV8fGEucmVtYWluaW5nRXhwaXJhdGlvblRpbWU8YikmJndoKGEsYil9LG5oKTt4aChhLmN1cnJlbnQuZXhwaXJhdGlvblRpbWUpfXJldHVybiBudWxsfVxuZnVuY3Rpb24gVmcoYSxiKXt2YXIgYzthOntsaCYmIXBoP0EoXCIyNjNcIik6dm9pZCAwO2ZvcihjPWEucmV0dXJuO251bGwhPT1jOyl7c3dpdGNoKGMudGFnKXtjYXNlIDI6dmFyIGQ9Yy5zdGF0ZU5vZGU7aWYoXCJmdW5jdGlvblwiPT09dHlwZW9mIGMudHlwZS5nZXREZXJpdmVkU3RhdGVGcm9tQ2F0Y2h8fFwiZnVuY3Rpb25cIj09PXR5cGVvZiBkLmNvbXBvbmVudERpZENhdGNoJiYobnVsbD09PWRofHwhZGguaGFzKGQpKSl7YT1UZihiLGEpO2E9Y2goYyxhLDEpO01mKGMsYSwxKTtrZyhjLDEpO2M9dm9pZCAwO2JyZWFrIGF9YnJlYWs7Y2FzZSAzOmE9VGYoYixhKTthPWFoKGMsYSwxKTtNZihjLGEsMSk7a2coYywxKTtjPXZvaWQgMDticmVhayBhfWM9Yy5yZXR1cm59Mz09PWEudGFnJiYoYz1UZihiLGEpLGM9YWgoYSxjLDEpLE1mKGEsYywxKSxrZyhhLDEpKTtjPXZvaWQgMH1yZXR1cm4gY31cbmZ1bmN0aW9uIHloKCl7dmFyIGE9MisyNSooKChpZygpLTIrNTAwKS8yNXwwKSsxKTthPD1qaCYmKGE9amgrMSk7cmV0dXJuIGpoPWF9ZnVuY3Rpb24gamcoYSxiKXthPTAhPT1raD9raDpsaD9waD8xOlQ6Yi5tb2RlJjE/emg/MisxMCooKChhLTIrMTUpLzEwfDApKzEpOjIrMjUqKCgoYS0yKzUwMCkvMjV8MCkrMSk6MTt6aCYmKDA9PT1BaHx8YT5BaCkmJihBaD1hKTtyZXR1cm4gYX1cbmZ1bmN0aW9uIGtnKGEsYil7Zm9yKDtudWxsIT09YTspe2lmKDA9PT1hLmV4cGlyYXRpb25UaW1lfHxhLmV4cGlyYXRpb25UaW1lPmIpYS5leHBpcmF0aW9uVGltZT1iO251bGwhPT1hLmFsdGVybmF0ZSYmKDA9PT1hLmFsdGVybmF0ZS5leHBpcmF0aW9uVGltZXx8YS5hbHRlcm5hdGUuZXhwaXJhdGlvblRpbWU+YikmJihhLmFsdGVybmF0ZS5leHBpcmF0aW9uVGltZT1iKTtpZihudWxsPT09YS5yZXR1cm4paWYoMz09PWEudGFnKXt2YXIgYz1hLnN0YXRlTm9kZTshbGgmJjAhPT1UJiZiPFQmJnJoKCk7dmFyIGQ9Yy5jdXJyZW50LmV4cGlyYXRpb25UaW1lO2xoJiYhcGgmJm1oPT09Y3x8d2goYyxkKTtCaD5DaCYmQShcIjE4NVwiKX1lbHNlIGJyZWFrO2E9YS5yZXR1cm59fWZ1bmN0aW9uIGlnKCl7aWg9YWYoKS1naDtyZXR1cm4gaGg9KGloLzEwfDApKzJ9XG5mdW5jdGlvbiBEaChhKXt2YXIgYj1raDtraD0yKzI1KigoKGlnKCktMis1MDApLzI1fDApKzEpO3RyeXtyZXR1cm4gYSgpfWZpbmFsbHl7a2g9Yn19ZnVuY3Rpb24gRWgoYSxiLGMsZCxlKXt2YXIgZj1raDtraD0xO3RyeXtyZXR1cm4gYShiLGMsZCxlKX1maW5hbGx5e2toPWZ9fXZhciBGaD1udWxsLFY9bnVsbCxHaD0wLEhoPS0xLFc9ITEsWD1udWxsLFk9MCxBaD0wLEloPSExLEpoPSExLEtoPW51bGwsTGg9bnVsbCxaPSExLE1oPSExLHpoPSExLE5oPW51bGwsQ2g9MUUzLEJoPTAsT2g9MTtmdW5jdGlvbiBQaChhKXtpZigwIT09R2gpe2lmKGE+R2gpcmV0dXJuO2NmKEhoKX12YXIgYj1hZigpLWdoO0doPWE7SGg9YmYoUWgse3RpbWVvdXQ6MTAqKGEtMiktYn0pfVxuZnVuY3Rpb24gd2goYSxiKXtpZihudWxsPT09YS5uZXh0U2NoZWR1bGVkUm9vdClhLnJlbWFpbmluZ0V4cGlyYXRpb25UaW1lPWIsbnVsbD09PVY/KEZoPVY9YSxhLm5leHRTY2hlZHVsZWRSb290PWEpOihWPVYubmV4dFNjaGVkdWxlZFJvb3Q9YSxWLm5leHRTY2hlZHVsZWRSb290PUZoKTtlbHNle3ZhciBjPWEucmVtYWluaW5nRXhwaXJhdGlvblRpbWU7aWYoMD09PWN8fGI8YylhLnJlbWFpbmluZ0V4cGlyYXRpb25UaW1lPWJ9V3x8KFo/TWgmJihYPWEsWT0xLFJoKGEsMSwhMSkpOjE9PT1iP1NoKCk6UGgoYikpfVxuZnVuY3Rpb24gVGgoKXt2YXIgYT0wLGI9bnVsbDtpZihudWxsIT09Vilmb3IodmFyIGM9VixkPUZoO251bGwhPT1kOyl7dmFyIGU9ZC5yZW1haW5pbmdFeHBpcmF0aW9uVGltZTtpZigwPT09ZSl7bnVsbD09PWN8fG51bGw9PT1WP0EoXCIyNDRcIik6dm9pZCAwO2lmKGQ9PT1kLm5leHRTY2hlZHVsZWRSb290KXtGaD1WPWQubmV4dFNjaGVkdWxlZFJvb3Q9bnVsbDticmVha31lbHNlIGlmKGQ9PT1GaClGaD1lPWQubmV4dFNjaGVkdWxlZFJvb3QsVi5uZXh0U2NoZWR1bGVkUm9vdD1lLGQubmV4dFNjaGVkdWxlZFJvb3Q9bnVsbDtlbHNlIGlmKGQ9PT1WKXtWPWM7Vi5uZXh0U2NoZWR1bGVkUm9vdD1GaDtkLm5leHRTY2hlZHVsZWRSb290PW51bGw7YnJlYWt9ZWxzZSBjLm5leHRTY2hlZHVsZWRSb290PWQubmV4dFNjaGVkdWxlZFJvb3QsZC5uZXh0U2NoZWR1bGVkUm9vdD1udWxsO2Q9Yy5uZXh0U2NoZWR1bGVkUm9vdH1lbHNle2lmKDA9PT1hfHxlPGEpYT1lLGI9ZDtpZihkPT09VilicmVhaztcbmM9ZDtkPWQubmV4dFNjaGVkdWxlZFJvb3R9fWM9WDtudWxsIT09YyYmYz09PWImJjE9PT1hP0JoKys6Qmg9MDtYPWI7WT1hfWZ1bmN0aW9uIFFoKGEpe1VoKDAsITAsYSl9ZnVuY3Rpb24gU2goKXtVaCgxLCExLG51bGwpfWZ1bmN0aW9uIFVoKGEsYixjKXtMaD1jO1RoKCk7aWYoYilmb3IoO251bGwhPT1YJiYwIT09WSYmKDA9PT1hfHxhPj1ZKSYmKCFJaHx8aWcoKT49WSk7KWlnKCksUmgoWCxZLCFJaCksVGgoKTtlbHNlIGZvcig7bnVsbCE9PVgmJjAhPT1ZJiYoMD09PWF8fGE+PVkpOylSaChYLFksITEpLFRoKCk7bnVsbCE9PUxoJiYoR2g9MCxIaD0tMSk7MCE9PVkmJlBoKFkpO0xoPW51bGw7SWg9ITE7VmgoKX1mdW5jdGlvbiBXaChhLGIpe1c/QShcIjI1M1wiKTp2b2lkIDA7WD1hO1k9YjtSaChhLGIsITEpO1NoKCk7VmgoKX1cbmZ1bmN0aW9uIFZoKCl7Qmg9MDtpZihudWxsIT09Tmgpe3ZhciBhPU5oO05oPW51bGw7Zm9yKHZhciBiPTA7YjxhLmxlbmd0aDtiKyspe3ZhciBjPWFbYl07dHJ5e2MuX29uQ29tcGxldGUoKX1jYXRjaChkKXtKaHx8KEpoPSEwLEtoPWQpfX19aWYoSmgpdGhyb3cgYT1LaCxLaD1udWxsLEpoPSExLGE7fWZ1bmN0aW9uIFJoKGEsYixjKXtXP0EoXCIyNDVcIik6dm9pZCAwO1c9ITA7Yz8oYz1hLmZpbmlzaGVkV29yayxudWxsIT09Yz9YaChhLGMsYik6KGEuZmluaXNoZWRXb3JrPW51bGwsYz11aChhLGIsITApLG51bGwhPT1jJiYodmgoKT9hLmZpbmlzaGVkV29yaz1jOlhoKGEsYyxiKSkpKTooYz1hLmZpbmlzaGVkV29yayxudWxsIT09Yz9YaChhLGMsYik6KGEuZmluaXNoZWRXb3JrPW51bGwsYz11aChhLGIsITEpLG51bGwhPT1jJiZYaChhLGMsYikpKTtXPSExfVxuZnVuY3Rpb24gWGgoYSxiLGMpe3ZhciBkPWEuZmlyc3RCYXRjaDtpZihudWxsIT09ZCYmZC5fZXhwaXJhdGlvblRpbWU8PWMmJihudWxsPT09Tmg/Tmg9W2RdOk5oLnB1c2goZCksZC5fZGVmZXIpKXthLmZpbmlzaGVkV29yaz1iO2EucmVtYWluaW5nRXhwaXJhdGlvblRpbWU9MDtyZXR1cm59YS5maW5pc2hlZFdvcms9bnVsbDtwaD1saD0hMDtjPWIuc3RhdGVOb2RlO2MuY3VycmVudD09PWI/QShcIjE3N1wiKTp2b2lkIDA7ZD1jLnBlbmRpbmdDb21taXRFeHBpcmF0aW9uVGltZTswPT09ZD9BKFwiMjYxXCIpOnZvaWQgMDtjLnBlbmRpbmdDb21taXRFeHBpcmF0aW9uVGltZT0wO2lnKCk7ZWMuY3VycmVudD1udWxsO2lmKDE8Yi5lZmZlY3RUYWcpaWYobnVsbCE9PWIubGFzdEVmZmVjdCl7Yi5sYXN0RWZmZWN0Lm5leHRFZmZlY3Q9Yjt2YXIgZT1iLmZpcnN0RWZmZWN0fWVsc2UgZT1iO2Vsc2UgZT1iLmZpcnN0RWZmZWN0O1hlPUdkO3ZhciBmPWRhKCk7aWYoVGQoZikpe2lmKFwic2VsZWN0aW9uU3RhcnRcImluXG5mKXZhciBnPXtzdGFydDpmLnNlbGVjdGlvblN0YXJ0LGVuZDpmLnNlbGVjdGlvbkVuZH07ZWxzZSBhOnt2YXIgaD13aW5kb3cuZ2V0U2VsZWN0aW9uJiZ3aW5kb3cuZ2V0U2VsZWN0aW9uKCk7aWYoaCYmMCE9PWgucmFuZ2VDb3VudCl7Zz1oLmFuY2hvck5vZGU7dmFyIGs9aC5hbmNob3JPZmZzZXQsbj1oLmZvY3VzTm9kZTtoPWguZm9jdXNPZmZzZXQ7dHJ5e2cubm9kZVR5cGUsbi5ub2RlVHlwZX1jYXRjaChXYSl7Zz1udWxsO2JyZWFrIGF9dmFyIHI9MCx3PS0xLFA9LTEsa2M9MCxIZD0wLEU9Zix0PW51bGw7Yjpmb3IoOzspe2Zvcih2YXIgeDs7KXtFIT09Z3x8MCE9PWsmJjMhPT1FLm5vZGVUeXBlfHwodz1yK2spO0UhPT1ufHwwIT09aCYmMyE9PUUubm9kZVR5cGV8fChQPXIraCk7Mz09PUUubm9kZVR5cGUmJihyKz1FLm5vZGVWYWx1ZS5sZW5ndGgpO2lmKG51bGw9PT0oeD1FLmZpcnN0Q2hpbGQpKWJyZWFrO3Q9RTtFPXh9Zm9yKDs7KXtpZihFPT09ZilicmVhayBiO3Q9PT1nJiZcbisra2M9PT1rJiYodz1yKTt0PT09biYmKytIZD09PWgmJihQPXIpO2lmKG51bGwhPT0oeD1FLm5leHRTaWJsaW5nKSlicmVhaztFPXQ7dD1FLnBhcmVudE5vZGV9RT14fWc9LTE9PT13fHwtMT09PVA/bnVsbDp7c3RhcnQ6dyxlbmQ6UH19ZWxzZSBnPW51bGx9Zz1nfHx7c3RhcnQ6MCxlbmQ6MH19ZWxzZSBnPW51bGw7WWU9e2ZvY3VzZWRFbGVtOmYsc2VsZWN0aW9uUmFuZ2U6Z307SWQoITEpO2ZvcihVPWU7bnVsbCE9PVU7KXtmPSExO2c9dm9pZCAwO3RyeXtmb3IoO251bGwhPT1VOyl7aWYoVS5lZmZlY3RUYWcmMjU2KXt2YXIgdT1VLmFsdGVybmF0ZTtrPVU7c3dpdGNoKGsudGFnKXtjYXNlIDI6aWYoay5lZmZlY3RUYWcmMjU2JiZudWxsIT09dSl7dmFyIHk9dS5tZW1vaXplZFByb3BzLEQ9dS5tZW1vaXplZFN0YXRlLGphPWsuc3RhdGVOb2RlO2phLnByb3BzPWsubWVtb2l6ZWRQcm9wcztqYS5zdGF0ZT1rLm1lbW9pemVkU3RhdGU7dmFyIGhpPWphLmdldFNuYXBzaG90QmVmb3JlVXBkYXRlKHksXG5EKTtqYS5fX3JlYWN0SW50ZXJuYWxTbmFwc2hvdEJlZm9yZVVwZGF0ZT1oaX1icmVhaztjYXNlIDM6Y2FzZSA1OmNhc2UgNjpjYXNlIDQ6YnJlYWs7ZGVmYXVsdDpBKFwiMTYzXCIpfX1VPVUubmV4dEVmZmVjdH19Y2F0Y2goV2Epe2Y9ITAsZz1XYX1mJiYobnVsbD09PVU/QShcIjE3OFwiKTp2b2lkIDAsVmcoVSxnKSxudWxsIT09VSYmKFU9VS5uZXh0RWZmZWN0KSl9Zm9yKFU9ZTtudWxsIT09VTspe3U9ITE7eT12b2lkIDA7dHJ5e2Zvcig7bnVsbCE9PVU7KXt2YXIgcT1VLmVmZmVjdFRhZztxJjE2JiZHZShVLnN0YXRlTm9kZSxcIlwiKTtpZihxJjEyOCl7dmFyIHo9VS5hbHRlcm5hdGU7aWYobnVsbCE9PXope3ZhciBsPXoucmVmO251bGwhPT1sJiYoXCJmdW5jdGlvblwiPT09dHlwZW9mIGw/bChudWxsKTpsLmN1cnJlbnQ9bnVsbCl9fXN3aXRjaChxJjE0KXtjYXNlIDI6WmcoVSk7VS5lZmZlY3RUYWcmPS0zO2JyZWFrO2Nhc2UgNjpaZyhVKTtVLmVmZmVjdFRhZyY9LTM7JGcoVS5hbHRlcm5hdGUsXG5VKTticmVhaztjYXNlIDQ6JGcoVS5hbHRlcm5hdGUsVSk7YnJlYWs7Y2FzZSA4OkQ9VSxYZyhEKSxELnJldHVybj1udWxsLEQuY2hpbGQ9bnVsbCxELmFsdGVybmF0ZSYmKEQuYWx0ZXJuYXRlLmNoaWxkPW51bGwsRC5hbHRlcm5hdGUucmV0dXJuPW51bGwpfVU9VS5uZXh0RWZmZWN0fX1jYXRjaChXYSl7dT0hMCx5PVdhfXUmJihudWxsPT09VT9BKFwiMTc4XCIpOnZvaWQgMCxWZyhVLHkpLG51bGwhPT1VJiYoVT1VLm5leHRFZmZlY3QpKX1sPVllO3o9ZGEoKTtxPWwuZm9jdXNlZEVsZW07dT1sLnNlbGVjdGlvblJhbmdlO2lmKHohPT1xJiZmYShkb2N1bWVudC5kb2N1bWVudEVsZW1lbnQscSkpe1RkKHEpJiYoej11LnN0YXJ0LGw9dS5lbmQsdm9pZCAwPT09bCYmKGw9eiksXCJzZWxlY3Rpb25TdGFydFwiaW4gcT8ocS5zZWxlY3Rpb25TdGFydD16LHEuc2VsZWN0aW9uRW5kPU1hdGgubWluKGwscS52YWx1ZS5sZW5ndGgpKTp3aW5kb3cuZ2V0U2VsZWN0aW9uJiYoej13aW5kb3cuZ2V0U2VsZWN0aW9uKCksXG55PXFbbGIoKV0ubGVuZ3RoLGw9TWF0aC5taW4odS5zdGFydCx5KSx1PXZvaWQgMD09PXUuZW5kP2w6TWF0aC5taW4odS5lbmQseSksIXouZXh0ZW5kJiZsPnUmJih5PXUsdT1sLGw9eSkseT1TZChxLGwpLEQ9U2QocSx1KSx5JiZEJiYoMSE9PXoucmFuZ2VDb3VudHx8ei5hbmNob3JOb2RlIT09eS5ub2RlfHx6LmFuY2hvck9mZnNldCE9PXkub2Zmc2V0fHx6LmZvY3VzTm9kZSE9PUQubm9kZXx8ei5mb2N1c09mZnNldCE9PUQub2Zmc2V0KSYmKGphPWRvY3VtZW50LmNyZWF0ZVJhbmdlKCksamEuc2V0U3RhcnQoeS5ub2RlLHkub2Zmc2V0KSx6LnJlbW92ZUFsbFJhbmdlcygpLGw+dT8oei5hZGRSYW5nZShqYSksei5leHRlbmQoRC5ub2RlLEQub2Zmc2V0KSk6KGphLnNldEVuZChELm5vZGUsRC5vZmZzZXQpLHouYWRkUmFuZ2UoamEpKSkpKTt6PVtdO2ZvcihsPXE7bD1sLnBhcmVudE5vZGU7KTE9PT1sLm5vZGVUeXBlJiZ6LnB1c2goe2VsZW1lbnQ6bCxsZWZ0Omwuc2Nyb2xsTGVmdCxcbnRvcDpsLnNjcm9sbFRvcH0pO3EuZm9jdXMoKTtmb3IocT0wO3E8ei5sZW5ndGg7cSsrKWw9eltxXSxsLmVsZW1lbnQuc2Nyb2xsTGVmdD1sLmxlZnQsbC5lbGVtZW50LnNjcm9sbFRvcD1sLnRvcH1ZZT1udWxsO0lkKFhlKTtYZT1udWxsO2MuY3VycmVudD1iO2ZvcihVPWU7bnVsbCE9PVU7KXtlPSExO3E9dm9pZCAwO3RyeXtmb3Ioej1kO251bGwhPT1VOyl7dmFyIGdnPVUuZWZmZWN0VGFnO2lmKGdnJjM2KXt2YXIgbGM9VS5hbHRlcm5hdGU7bD1VO3U9ejtzd2l0Y2gobC50YWcpe2Nhc2UgMjp2YXIgYmE9bC5zdGF0ZU5vZGU7aWYobC5lZmZlY3RUYWcmNClpZihudWxsPT09bGMpYmEucHJvcHM9bC5tZW1vaXplZFByb3BzLGJhLnN0YXRlPWwubWVtb2l6ZWRTdGF0ZSxiYS5jb21wb25lbnREaWRNb3VudCgpO2Vsc2V7dmFyIHJpPWxjLm1lbW9pemVkUHJvcHMsc2k9bGMubWVtb2l6ZWRTdGF0ZTtiYS5wcm9wcz1sLm1lbW9pemVkUHJvcHM7YmEuc3RhdGU9bC5tZW1vaXplZFN0YXRlO1xuYmEuY29tcG9uZW50RGlkVXBkYXRlKHJpLHNpLGJhLl9fcmVhY3RJbnRlcm5hbFNuYXBzaG90QmVmb3JlVXBkYXRlKX12YXIgTWc9bC51cGRhdGVRdWV1ZTtudWxsIT09TWcmJihiYS5wcm9wcz1sLm1lbW9pemVkUHJvcHMsYmEuc3RhdGU9bC5tZW1vaXplZFN0YXRlLFNmKGwsTWcsYmEsdSkpO2JyZWFrO2Nhc2UgMzp2YXIgTmc9bC51cGRhdGVRdWV1ZTtpZihudWxsIT09Tmcpe3k9bnVsbDtpZihudWxsIT09bC5jaGlsZClzd2l0Y2gobC5jaGlsZC50YWcpe2Nhc2UgNTp5PWwuY2hpbGQuc3RhdGVOb2RlO2JyZWFrO2Nhc2UgMjp5PWwuY2hpbGQuc3RhdGVOb2RlfVNmKGwsTmcseSx1KX1icmVhaztjYXNlIDU6dmFyIHRpPWwuc3RhdGVOb2RlO251bGw9PT1sYyYmbC5lZmZlY3RUYWcmNCYmWmUobC50eXBlLGwubWVtb2l6ZWRQcm9wcykmJnRpLmZvY3VzKCk7YnJlYWs7Y2FzZSA2OmJyZWFrO2Nhc2UgNDpicmVhaztjYXNlIDE1OmJyZWFrO2Nhc2UgMTY6YnJlYWs7ZGVmYXVsdDpBKFwiMTYzXCIpfX1pZihnZyZcbjEyOCl7bD12b2lkIDA7dmFyIHVjPVUucmVmO2lmKG51bGwhPT11Yyl7dmFyIE9nPVUuc3RhdGVOb2RlO3N3aXRjaChVLnRhZyl7Y2FzZSA1Omw9T2c7YnJlYWs7ZGVmYXVsdDpsPU9nfVwiZnVuY3Rpb25cIj09PXR5cGVvZiB1Yz91YyhsKTp1Yy5jdXJyZW50PWx9fXZhciB1aT1VLm5leHRFZmZlY3Q7VS5uZXh0RWZmZWN0PW51bGw7VT11aX19Y2F0Y2goV2Epe2U9ITAscT1XYX1lJiYobnVsbD09PVU/QShcIjE3OFwiKTp2b2lkIDAsVmcoVSxxKSxudWxsIT09VSYmKFU9VS5uZXh0RWZmZWN0KSl9bGg9cGg9ITE7XCJmdW5jdGlvblwiPT09dHlwZW9mIEZmJiZGZihiLnN0YXRlTm9kZSk7Yj1jLmN1cnJlbnQuZXhwaXJhdGlvblRpbWU7MD09PWImJihkaD1udWxsKTthLnJlbWFpbmluZ0V4cGlyYXRpb25UaW1lPWJ9ZnVuY3Rpb24gdmgoKXtyZXR1cm4gbnVsbD09PUxofHxMaC50aW1lUmVtYWluaW5nKCk+T2g/ITE6SWg9ITB9XG5mdW5jdGlvbiBiaChhKXtudWxsPT09WD9BKFwiMjQ2XCIpOnZvaWQgMDtYLnJlbWFpbmluZ0V4cGlyYXRpb25UaW1lPTA7Smh8fChKaD0hMCxLaD1hKX1mdW5jdGlvbiB4aChhKXtudWxsPT09WD9BKFwiMjQ2XCIpOnZvaWQgMDtYLnJlbWFpbmluZ0V4cGlyYXRpb25UaW1lPWF9ZnVuY3Rpb24gWWgoYSxiKXt2YXIgYz1aO1o9ITA7dHJ5e3JldHVybiBhKGIpfWZpbmFsbHl7KFo9Yyl8fFd8fFNoKCl9fWZ1bmN0aW9uIFpoKGEsYil7aWYoWiYmIU1oKXtNaD0hMDt0cnl7cmV0dXJuIGEoYil9ZmluYWxseXtNaD0hMX19cmV0dXJuIGEoYil9ZnVuY3Rpb24gJGgoYSxiKXtXP0EoXCIxODdcIik6dm9pZCAwO3ZhciBjPVo7Wj0hMDt0cnl7cmV0dXJuIEVoKGEsYil9ZmluYWxseXtaPWMsU2goKX19ZnVuY3Rpb24gYWkoYSl7dmFyIGI9WjtaPSEwO3RyeXtFaChhKX1maW5hbGx5eyhaPWIpfHxXfHxVaCgxLCExLG51bGwpfX1cbmZ1bmN0aW9uIGJpKGEsYixjLGQsZSl7dmFyIGY9Yi5jdXJyZW50O2lmKGMpe2M9Yy5fcmVhY3RJbnRlcm5hbEZpYmVyO3ZhciBnO2I6ezI9PT1pZChjKSYmMj09PWMudGFnP3ZvaWQgMDpBKFwiMTcwXCIpO2ZvcihnPWM7MyE9PWcudGFnOyl7aWYobWYoZykpe2c9Zy5zdGF0ZU5vZGUuX19yZWFjdEludGVybmFsTWVtb2l6ZWRNZXJnZWRDaGlsZENvbnRleHQ7YnJlYWsgYn0oZz1nLnJldHVybik/dm9pZCAwOkEoXCIxNzFcIil9Zz1nLnN0YXRlTm9kZS5jb250ZXh0fWM9bWYoYyk/cmYoYyxnKTpnfWVsc2UgYz1oYTtudWxsPT09Yi5jb250ZXh0P2IuY29udGV4dD1jOmIucGVuZGluZ0NvbnRleHQ9YztiPWU7ZT1LZihkKTtlLnBheWxvYWQ9e2VsZW1lbnQ6YX07Yj12b2lkIDA9PT1iP251bGw6YjtudWxsIT09YiYmKGUuY2FsbGJhY2s9Yik7TWYoZixlLGQpO2tnKGYsZCk7cmV0dXJuIGR9XG5mdW5jdGlvbiBjaShhKXt2YXIgYj1hLl9yZWFjdEludGVybmFsRmliZXI7dm9pZCAwPT09YiYmKFwiZnVuY3Rpb25cIj09PXR5cGVvZiBhLnJlbmRlcj9BKFwiMTg4XCIpOkEoXCIyNjhcIixPYmplY3Qua2V5cyhhKSkpO2E9bGQoYik7cmV0dXJuIG51bGw9PT1hP251bGw6YS5zdGF0ZU5vZGV9ZnVuY3Rpb24gZGkoYSxiLGMsZCl7dmFyIGU9Yi5jdXJyZW50LGY9aWcoKTtlPWpnKGYsZSk7cmV0dXJuIGJpKGEsYixjLGUsZCl9ZnVuY3Rpb24gZWkoYSl7YT1hLmN1cnJlbnQ7aWYoIWEuY2hpbGQpcmV0dXJuIG51bGw7c3dpdGNoKGEuY2hpbGQudGFnKXtjYXNlIDU6cmV0dXJuIGEuY2hpbGQuc3RhdGVOb2RlO2RlZmF1bHQ6cmV0dXJuIGEuY2hpbGQuc3RhdGVOb2RlfX1cbmZ1bmN0aW9uIGZpKGEpe3ZhciBiPWEuZmluZEZpYmVyQnlIb3N0SW5zdGFuY2U7cmV0dXJuIEVmKHAoe30sYSx7ZmluZEhvc3RJbnN0YW5jZUJ5RmliZXI6ZnVuY3Rpb24oYSl7YT1sZChhKTtyZXR1cm4gbnVsbD09PWE/bnVsbDphLnN0YXRlTm9kZX0sZmluZEZpYmVyQnlIb3N0SW5zdGFuY2U6ZnVuY3Rpb24oYSl7cmV0dXJuIGI/YihhKTpudWxsfX0pKX1cbnZhciBnaT17dXBkYXRlQ29udGFpbmVyQXRFeHBpcmF0aW9uVGltZTpiaSxjcmVhdGVDb250YWluZXI6ZnVuY3Rpb24oYSxiLGMpe3JldHVybiBBZihhLGIsYyl9LHVwZGF0ZUNvbnRhaW5lcjpkaSxmbHVzaFJvb3Q6V2gscmVxdWVzdFdvcms6d2gsY29tcHV0ZVVuaXF1ZUFzeW5jRXhwaXJhdGlvbjp5aCxiYXRjaGVkVXBkYXRlczpZaCx1bmJhdGNoZWRVcGRhdGVzOlpoLGRlZmVycmVkVXBkYXRlczpEaCxzeW5jVXBkYXRlczpFaCxpbnRlcmFjdGl2ZVVwZGF0ZXM6ZnVuY3Rpb24oYSxiLGMpe2lmKHpoKXJldHVybiBhKGIsYyk7Wnx8V3x8MD09PUFofHwoVWgoQWgsITEsbnVsbCksQWg9MCk7dmFyIGQ9emgsZT1aO1o9emg9ITA7dHJ5e3JldHVybiBhKGIsYyl9ZmluYWxseXt6aD1kLChaPWUpfHxXfHxTaCgpfX0sZmx1c2hJbnRlcmFjdGl2ZVVwZGF0ZXM6ZnVuY3Rpb24oKXtXfHwwPT09QWh8fChVaChBaCwhMSxudWxsKSxBaD0wKX0sZmx1c2hDb250cm9sbGVkOmFpLGZsdXNoU3luYzokaCxcbmdldFB1YmxpY1Jvb3RJbnN0YW5jZTplaSxmaW5kSG9zdEluc3RhbmNlOmNpLGZpbmRIb3N0SW5zdGFuY2VXaXRoTm9Qb3J0YWxzOmZ1bmN0aW9uKGEpe2E9bWQoYSk7cmV0dXJuIG51bGw9PT1hP251bGw6YS5zdGF0ZU5vZGV9LGluamVjdEludG9EZXZUb29sczpmaX07ZnVuY3Rpb24gaWkoYSxiLGMpe3ZhciBkPTM8YXJndW1lbnRzLmxlbmd0aCYmdm9pZCAwIT09YXJndW1lbnRzWzNdP2FyZ3VtZW50c1szXTpudWxsO3JldHVybnskJHR5cGVvZjpnYyxrZXk6bnVsbD09ZD9udWxsOlwiXCIrZCxjaGlsZHJlbjphLGNvbnRhaW5lckluZm86YixpbXBsZW1lbnRhdGlvbjpjfX1LYi5pbmplY3RGaWJlckNvbnRyb2xsZWRIb3N0Q29tcG9uZW50KFdlKTtcbmZ1bmN0aW9uIGppKGEpe3RoaXMuX2V4cGlyYXRpb25UaW1lPXloKCk7dGhpcy5fcm9vdD1hO3RoaXMuX2NhbGxiYWNrcz10aGlzLl9uZXh0PW51bGw7dGhpcy5faGFzQ2hpbGRyZW49dGhpcy5fZGlkQ29tcGxldGU9ITE7dGhpcy5fY2hpbGRyZW49bnVsbDt0aGlzLl9kZWZlcj0hMH1qaS5wcm90b3R5cGUucmVuZGVyPWZ1bmN0aW9uKGEpe3RoaXMuX2RlZmVyP3ZvaWQgMDpBKFwiMjUwXCIpO3RoaXMuX2hhc0NoaWxkcmVuPSEwO3RoaXMuX2NoaWxkcmVuPWE7dmFyIGI9dGhpcy5fcm9vdC5faW50ZXJuYWxSb290LGM9dGhpcy5fZXhwaXJhdGlvblRpbWUsZD1uZXcga2k7YmkoYSxiLG51bGwsYyxkLl9vbkNvbW1pdCk7cmV0dXJuIGR9O2ppLnByb3RvdHlwZS50aGVuPWZ1bmN0aW9uKGEpe2lmKHRoaXMuX2RpZENvbXBsZXRlKWEoKTtlbHNle3ZhciBiPXRoaXMuX2NhbGxiYWNrcztudWxsPT09YiYmKGI9dGhpcy5fY2FsbGJhY2tzPVtdKTtiLnB1c2goYSl9fTtcbmppLnByb3RvdHlwZS5jb21taXQ9ZnVuY3Rpb24oKXt2YXIgYT10aGlzLl9yb290Ll9pbnRlcm5hbFJvb3QsYj1hLmZpcnN0QmF0Y2g7dGhpcy5fZGVmZXImJm51bGwhPT1iP3ZvaWQgMDpBKFwiMjUxXCIpO2lmKHRoaXMuX2hhc0NoaWxkcmVuKXt2YXIgYz10aGlzLl9leHBpcmF0aW9uVGltZTtpZihiIT09dGhpcyl7dGhpcy5faGFzQ2hpbGRyZW4mJihjPXRoaXMuX2V4cGlyYXRpb25UaW1lPWIuX2V4cGlyYXRpb25UaW1lLHRoaXMucmVuZGVyKHRoaXMuX2NoaWxkcmVuKSk7Zm9yKHZhciBkPW51bGwsZT1iO2UhPT10aGlzOylkPWUsZT1lLl9uZXh0O251bGw9PT1kP0EoXCIyNTFcIik6dm9pZCAwO2QuX25leHQ9ZS5fbmV4dDt0aGlzLl9uZXh0PWI7YS5maXJzdEJhdGNoPXRoaXN9dGhpcy5fZGVmZXI9ITE7V2goYSxjKTtiPXRoaXMuX25leHQ7dGhpcy5fbmV4dD1udWxsO2I9YS5maXJzdEJhdGNoPWI7bnVsbCE9PWImJmIuX2hhc0NoaWxkcmVuJiZiLnJlbmRlcihiLl9jaGlsZHJlbil9ZWxzZSB0aGlzLl9uZXh0PVxubnVsbCx0aGlzLl9kZWZlcj0hMX07amkucHJvdG90eXBlLl9vbkNvbXBsZXRlPWZ1bmN0aW9uKCl7aWYoIXRoaXMuX2RpZENvbXBsZXRlKXt0aGlzLl9kaWRDb21wbGV0ZT0hMDt2YXIgYT10aGlzLl9jYWxsYmFja3M7aWYobnVsbCE9PWEpZm9yKHZhciBiPTA7YjxhLmxlbmd0aDtiKyspKDAsYVtiXSkoKX19O2Z1bmN0aW9uIGtpKCl7dGhpcy5fY2FsbGJhY2tzPW51bGw7dGhpcy5fZGlkQ29tbWl0PSExO3RoaXMuX29uQ29tbWl0PXRoaXMuX29uQ29tbWl0LmJpbmQodGhpcyl9a2kucHJvdG90eXBlLnRoZW49ZnVuY3Rpb24oYSl7aWYodGhpcy5fZGlkQ29tbWl0KWEoKTtlbHNle3ZhciBiPXRoaXMuX2NhbGxiYWNrcztudWxsPT09YiYmKGI9dGhpcy5fY2FsbGJhY2tzPVtdKTtiLnB1c2goYSl9fTtcbmtpLnByb3RvdHlwZS5fb25Db21taXQ9ZnVuY3Rpb24oKXtpZighdGhpcy5fZGlkQ29tbWl0KXt0aGlzLl9kaWRDb21taXQ9ITA7dmFyIGE9dGhpcy5fY2FsbGJhY2tzO2lmKG51bGwhPT1hKWZvcih2YXIgYj0wO2I8YS5sZW5ndGg7YisrKXt2YXIgYz1hW2JdO1wiZnVuY3Rpb25cIiE9PXR5cGVvZiBjP0EoXCIxOTFcIixjKTp2b2lkIDA7YygpfX19O2Z1bmN0aW9uIGxpKGEsYixjKXt0aGlzLl9pbnRlcm5hbFJvb3Q9QWYoYSxiLGMpfWxpLnByb3RvdHlwZS5yZW5kZXI9ZnVuY3Rpb24oYSxiKXt2YXIgYz10aGlzLl9pbnRlcm5hbFJvb3QsZD1uZXcga2k7Yj12b2lkIDA9PT1iP251bGw6YjtudWxsIT09YiYmZC50aGVuKGIpO2RpKGEsYyxudWxsLGQuX29uQ29tbWl0KTtyZXR1cm4gZH07XG5saS5wcm90b3R5cGUudW5tb3VudD1mdW5jdGlvbihhKXt2YXIgYj10aGlzLl9pbnRlcm5hbFJvb3QsYz1uZXcga2k7YT12b2lkIDA9PT1hP251bGw6YTtudWxsIT09YSYmYy50aGVuKGEpO2RpKG51bGwsYixudWxsLGMuX29uQ29tbWl0KTtyZXR1cm4gY307bGkucHJvdG90eXBlLmxlZ2FjeV9yZW5kZXJTdWJ0cmVlSW50b0NvbnRhaW5lcj1mdW5jdGlvbihhLGIsYyl7dmFyIGQ9dGhpcy5faW50ZXJuYWxSb290LGU9bmV3IGtpO2M9dm9pZCAwPT09Yz9udWxsOmM7bnVsbCE9PWMmJmUudGhlbihjKTtkaShiLGQsYSxlLl9vbkNvbW1pdCk7cmV0dXJuIGV9O1xubGkucHJvdG90eXBlLmNyZWF0ZUJhdGNoPWZ1bmN0aW9uKCl7dmFyIGE9bmV3IGppKHRoaXMpLGI9YS5fZXhwaXJhdGlvblRpbWUsYz10aGlzLl9pbnRlcm5hbFJvb3QsZD1jLmZpcnN0QmF0Y2g7aWYobnVsbD09PWQpYy5maXJzdEJhdGNoPWEsYS5fbmV4dD1udWxsO2Vsc2V7Zm9yKGM9bnVsbDtudWxsIT09ZCYmZC5fZXhwaXJhdGlvblRpbWU8PWI7KWM9ZCxkPWQuX25leHQ7YS5fbmV4dD1kO251bGwhPT1jJiYoYy5fbmV4dD1hKX1yZXR1cm4gYX07ZnVuY3Rpb24gbWkoYSl7cmV0dXJuISghYXx8MSE9PWEubm9kZVR5cGUmJjkhPT1hLm5vZGVUeXBlJiYxMSE9PWEubm9kZVR5cGUmJig4IT09YS5ub2RlVHlwZXx8XCIgcmVhY3QtbW91bnQtcG9pbnQtdW5zdGFibGUgXCIhPT1hLm5vZGVWYWx1ZSkpfVNiPWdpLmJhdGNoZWRVcGRhdGVzO1RiPWdpLmludGVyYWN0aXZlVXBkYXRlcztVYj1naS5mbHVzaEludGVyYWN0aXZlVXBkYXRlcztcbmZ1bmN0aW9uIG5pKGEsYil7Ynx8KGI9YT85PT09YS5ub2RlVHlwZT9hLmRvY3VtZW50RWxlbWVudDphLmZpcnN0Q2hpbGQ6bnVsbCxiPSEoIWJ8fDEhPT1iLm5vZGVUeXBlfHwhYi5oYXNBdHRyaWJ1dGUoXCJkYXRhLXJlYWN0cm9vdFwiKSkpO2lmKCFiKWZvcih2YXIgYztjPWEubGFzdENoaWxkOylhLnJlbW92ZUNoaWxkKGMpO3JldHVybiBuZXcgbGkoYSwhMSxiKX1cbmZ1bmN0aW9uIG9pKGEsYixjLGQsZSl7bWkoYyk/dm9pZCAwOkEoXCIyMDBcIik7dmFyIGY9Yy5fcmVhY3RSb290Q29udGFpbmVyO2lmKGYpe2lmKFwiZnVuY3Rpb25cIj09PXR5cGVvZiBlKXt2YXIgZz1lO2U9ZnVuY3Rpb24oKXt2YXIgYT1laShmLl9pbnRlcm5hbFJvb3QpO2cuY2FsbChhKX19bnVsbCE9YT9mLmxlZ2FjeV9yZW5kZXJTdWJ0cmVlSW50b0NvbnRhaW5lcihhLGIsZSk6Zi5yZW5kZXIoYixlKX1lbHNle2Y9Yy5fcmVhY3RSb290Q29udGFpbmVyPW5pKGMsZCk7aWYoXCJmdW5jdGlvblwiPT09dHlwZW9mIGUpe3ZhciBoPWU7ZT1mdW5jdGlvbigpe3ZhciBhPWVpKGYuX2ludGVybmFsUm9vdCk7aC5jYWxsKGEpfX1aaChmdW5jdGlvbigpe251bGwhPWE/Zi5sZWdhY3lfcmVuZGVyU3VidHJlZUludG9Db250YWluZXIoYSxiLGUpOmYucmVuZGVyKGIsZSl9KX1yZXR1cm4gZWkoZi5faW50ZXJuYWxSb290KX1cbmZ1bmN0aW9uIHBpKGEsYil7dmFyIGM9Mjxhcmd1bWVudHMubGVuZ3RoJiZ2b2lkIDAhPT1hcmd1bWVudHNbMl0/YXJndW1lbnRzWzJdOm51bGw7bWkoYik/dm9pZCAwOkEoXCIyMDBcIik7cmV0dXJuIGlpKGEsYixudWxsLGMpfVxudmFyIHFpPXtjcmVhdGVQb3J0YWw6cGksZmluZERPTU5vZGU6ZnVuY3Rpb24oYSl7cmV0dXJuIG51bGw9PWE/bnVsbDoxPT09YS5ub2RlVHlwZT9hOmNpKGEpfSxoeWRyYXRlOmZ1bmN0aW9uKGEsYixjKXtyZXR1cm4gb2kobnVsbCxhLGIsITAsYyl9LHJlbmRlcjpmdW5jdGlvbihhLGIsYyl7cmV0dXJuIG9pKG51bGwsYSxiLCExLGMpfSx1bnN0YWJsZV9yZW5kZXJTdWJ0cmVlSW50b0NvbnRhaW5lcjpmdW5jdGlvbihhLGIsYyxkKXtudWxsPT1hfHx2b2lkIDA9PT1hLl9yZWFjdEludGVybmFsRmliZXI/QShcIjM4XCIpOnZvaWQgMDtyZXR1cm4gb2koYSxiLGMsITEsZCl9LHVubW91bnRDb21wb25lbnRBdE5vZGU6ZnVuY3Rpb24oYSl7bWkoYSk/dm9pZCAwOkEoXCI0MFwiKTtyZXR1cm4gYS5fcmVhY3RSb290Q29udGFpbmVyPyhaaChmdW5jdGlvbigpe29pKG51bGwsbnVsbCxhLCExLGZ1bmN0aW9uKCl7YS5fcmVhY3RSb290Q29udGFpbmVyPW51bGx9KX0pLCEwKTohMX0sdW5zdGFibGVfY3JlYXRlUG9ydGFsOmZ1bmN0aW9uKCl7cmV0dXJuIHBpLmFwcGx5KHZvaWQgMCxcbmFyZ3VtZW50cyl9LHVuc3RhYmxlX2JhdGNoZWRVcGRhdGVzOlloLHVuc3RhYmxlX2RlZmVycmVkVXBkYXRlczpEaCxmbHVzaFN5bmM6JGgsdW5zdGFibGVfZmx1c2hDb250cm9sbGVkOmFpLF9fU0VDUkVUX0lOVEVSTkFMU19ET19OT1RfVVNFX09SX1lPVV9XSUxMX0JFX0ZJUkVEOntFdmVudFBsdWdpbkh1YjpLYSxFdmVudFBsdWdpblJlZ2lzdHJ5OnZhLEV2ZW50UHJvcGFnYXRvcnM6JGEsUmVhY3RDb250cm9sbGVkQ29tcG9uZW50OlJiLFJlYWN0RE9NQ29tcG9uZW50VHJlZTpRYSxSZWFjdERPTUV2ZW50TGlzdGVuZXI6TWR9LHVuc3RhYmxlX2NyZWF0ZVJvb3Q6ZnVuY3Rpb24oYSxiKXtyZXR1cm4gbmV3IGxpKGEsITAsbnVsbCE9YiYmITA9PT1iLmh5ZHJhdGUpfX07Zmkoe2ZpbmRGaWJlckJ5SG9zdEluc3RhbmNlOk5hLGJ1bmRsZVR5cGU6MCx2ZXJzaW9uOlwiMTYuNC4wXCIscmVuZGVyZXJQYWNrYWdlTmFtZTpcInJlYWN0LWRvbVwifSk7XG52YXIgdmk9e2RlZmF1bHQ6cWl9LHdpPXZpJiZxaXx8dmk7bW9kdWxlLmV4cG9ydHM9d2kuZGVmYXVsdD93aS5kZWZhdWx0OndpO1xuIiwiLyoqIEBsaWNlbnNlIFJlYWN0IHYxNi40LjBcbiAqIHJlYWN0LnByb2R1Y3Rpb24ubWluLmpzXG4gKlxuICogQ29weXJpZ2h0IChjKSAyMDEzLXByZXNlbnQsIEZhY2Vib29rLCBJbmMuXG4gKlxuICogVGhpcyBzb3VyY2UgY29kZSBpcyBsaWNlbnNlZCB1bmRlciB0aGUgTUlUIGxpY2Vuc2UgZm91bmQgaW4gdGhlXG4gKiBMSUNFTlNFIGZpbGUgaW4gdGhlIHJvb3QgZGlyZWN0b3J5IG9mIHRoaXMgc291cmNlIHRyZWUuXG4gKi9cblxuJ3VzZSBzdHJpY3QnO3ZhciBrPXJlcXVpcmUoXCJvYmplY3QtYXNzaWduXCIpLG49cmVxdWlyZShcImZianMvbGliL2ludmFyaWFudFwiKSxwPXJlcXVpcmUoXCJmYmpzL2xpYi9lbXB0eU9iamVjdFwiKSxxPXJlcXVpcmUoXCJmYmpzL2xpYi9lbXB0eUZ1bmN0aW9uXCIpLHI9XCJmdW5jdGlvblwiPT09dHlwZW9mIFN5bWJvbCYmU3ltYm9sLmZvcix0PXI/U3ltYm9sLmZvcihcInJlYWN0LmVsZW1lbnRcIik6NjAxMDMsdT1yP1N5bWJvbC5mb3IoXCJyZWFjdC5wb3J0YWxcIik6NjAxMDYsdj1yP1N5bWJvbC5mb3IoXCJyZWFjdC5mcmFnbWVudFwiKTo2MDEwNyx3PXI/U3ltYm9sLmZvcihcInJlYWN0LnN0cmljdF9tb2RlXCIpOjYwMTA4LHg9cj9TeW1ib2wuZm9yKFwicmVhY3QucHJvZmlsZXJcIik6NjAxMTQseT1yP1N5bWJvbC5mb3IoXCJyZWFjdC5wcm92aWRlclwiKTo2MDEwOSx6PXI/U3ltYm9sLmZvcihcInJlYWN0LmNvbnRleHRcIik6NjAxMTAsQT1yP1N5bWJvbC5mb3IoXCJyZWFjdC5hc3luY19tb2RlXCIpOjYwMTExLEI9XG5yP1N5bWJvbC5mb3IoXCJyZWFjdC5mb3J3YXJkX3JlZlwiKTo2MDExMjtyJiZTeW1ib2wuZm9yKFwicmVhY3QudGltZW91dFwiKTt2YXIgQz1cImZ1bmN0aW9uXCI9PT10eXBlb2YgU3ltYm9sJiZTeW1ib2wuaXRlcmF0b3I7ZnVuY3Rpb24gRChhKXtmb3IodmFyIGI9YXJndW1lbnRzLmxlbmd0aC0xLGU9XCJodHRwczovL3JlYWN0anMub3JnL2RvY3MvZXJyb3ItZGVjb2Rlci5odG1sP2ludmFyaWFudD1cIithLGM9MDtjPGI7YysrKWUrPVwiJmFyZ3NbXT1cIitlbmNvZGVVUklDb21wb25lbnQoYXJndW1lbnRzW2MrMV0pO24oITEsXCJNaW5pZmllZCBSZWFjdCBlcnJvciAjXCIrYStcIjsgdmlzaXQgJXMgZm9yIHRoZSBmdWxsIG1lc3NhZ2Ugb3IgdXNlIHRoZSBub24tbWluaWZpZWQgZGV2IGVudmlyb25tZW50IGZvciBmdWxsIGVycm9ycyBhbmQgYWRkaXRpb25hbCBoZWxwZnVsIHdhcm5pbmdzLiBcIixlKX1cbnZhciBFPXtpc01vdW50ZWQ6ZnVuY3Rpb24oKXtyZXR1cm4hMX0sZW5xdWV1ZUZvcmNlVXBkYXRlOmZ1bmN0aW9uKCl7fSxlbnF1ZXVlUmVwbGFjZVN0YXRlOmZ1bmN0aW9uKCl7fSxlbnF1ZXVlU2V0U3RhdGU6ZnVuY3Rpb24oKXt9fTtmdW5jdGlvbiBGKGEsYixlKXt0aGlzLnByb3BzPWE7dGhpcy5jb250ZXh0PWI7dGhpcy5yZWZzPXA7dGhpcy51cGRhdGVyPWV8fEV9Ri5wcm90b3R5cGUuaXNSZWFjdENvbXBvbmVudD17fTtGLnByb3RvdHlwZS5zZXRTdGF0ZT1mdW5jdGlvbihhLGIpe1wib2JqZWN0XCIhPT10eXBlb2YgYSYmXCJmdW5jdGlvblwiIT09dHlwZW9mIGEmJm51bGwhPWE/RChcIjg1XCIpOnZvaWQgMDt0aGlzLnVwZGF0ZXIuZW5xdWV1ZVNldFN0YXRlKHRoaXMsYSxiLFwic2V0U3RhdGVcIil9O0YucHJvdG90eXBlLmZvcmNlVXBkYXRlPWZ1bmN0aW9uKGEpe3RoaXMudXBkYXRlci5lbnF1ZXVlRm9yY2VVcGRhdGUodGhpcyxhLFwiZm9yY2VVcGRhdGVcIil9O2Z1bmN0aW9uIEcoKXt9XG5HLnByb3RvdHlwZT1GLnByb3RvdHlwZTtmdW5jdGlvbiBIKGEsYixlKXt0aGlzLnByb3BzPWE7dGhpcy5jb250ZXh0PWI7dGhpcy5yZWZzPXA7dGhpcy51cGRhdGVyPWV8fEV9dmFyIEk9SC5wcm90b3R5cGU9bmV3IEc7SS5jb25zdHJ1Y3Rvcj1IO2soSSxGLnByb3RvdHlwZSk7SS5pc1B1cmVSZWFjdENvbXBvbmVudD0hMDt2YXIgSj17Y3VycmVudDpudWxsfSxLPU9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHksTD17a2V5OiEwLHJlZjohMCxfX3NlbGY6ITAsX19zb3VyY2U6ITB9O1xuZnVuY3Rpb24gTShhLGIsZSl7dmFyIGM9dm9pZCAwLGQ9e30sZz1udWxsLGg9bnVsbDtpZihudWxsIT1iKWZvcihjIGluIHZvaWQgMCE9PWIucmVmJiYoaD1iLnJlZiksdm9pZCAwIT09Yi5rZXkmJihnPVwiXCIrYi5rZXkpLGIpSy5jYWxsKGIsYykmJiFMLmhhc093blByb3BlcnR5KGMpJiYoZFtjXT1iW2NdKTt2YXIgZj1hcmd1bWVudHMubGVuZ3RoLTI7aWYoMT09PWYpZC5jaGlsZHJlbj1lO2Vsc2UgaWYoMTxmKXtmb3IodmFyIGw9QXJyYXkoZiksbT0wO208ZjttKyspbFttXT1hcmd1bWVudHNbbSsyXTtkLmNoaWxkcmVuPWx9aWYoYSYmYS5kZWZhdWx0UHJvcHMpZm9yKGMgaW4gZj1hLmRlZmF1bHRQcm9wcyxmKXZvaWQgMD09PWRbY10mJihkW2NdPWZbY10pO3JldHVybnskJHR5cGVvZjp0LHR5cGU6YSxrZXk6ZyxyZWY6aCxwcm9wczpkLF9vd25lcjpKLmN1cnJlbnR9fVxuZnVuY3Rpb24gTihhKXtyZXR1cm5cIm9iamVjdFwiPT09dHlwZW9mIGEmJm51bGwhPT1hJiZhLiQkdHlwZW9mPT09dH1mdW5jdGlvbiBlc2NhcGUoYSl7dmFyIGI9e1wiPVwiOlwiPTBcIixcIjpcIjpcIj0yXCJ9O3JldHVyblwiJFwiKyhcIlwiK2EpLnJlcGxhY2UoL1s9Ol0vZyxmdW5jdGlvbihhKXtyZXR1cm4gYlthXX0pfXZhciBPPS9cXC8rL2csUD1bXTtmdW5jdGlvbiBRKGEsYixlLGMpe2lmKFAubGVuZ3RoKXt2YXIgZD1QLnBvcCgpO2QucmVzdWx0PWE7ZC5rZXlQcmVmaXg9YjtkLmZ1bmM9ZTtkLmNvbnRleHQ9YztkLmNvdW50PTA7cmV0dXJuIGR9cmV0dXJue3Jlc3VsdDphLGtleVByZWZpeDpiLGZ1bmM6ZSxjb250ZXh0OmMsY291bnQ6MH19ZnVuY3Rpb24gUihhKXthLnJlc3VsdD1udWxsO2Eua2V5UHJlZml4PW51bGw7YS5mdW5jPW51bGw7YS5jb250ZXh0PW51bGw7YS5jb3VudD0wOzEwPlAubGVuZ3RoJiZQLnB1c2goYSl9XG5mdW5jdGlvbiBTKGEsYixlLGMpe3ZhciBkPXR5cGVvZiBhO2lmKFwidW5kZWZpbmVkXCI9PT1kfHxcImJvb2xlYW5cIj09PWQpYT1udWxsO3ZhciBnPSExO2lmKG51bGw9PT1hKWc9ITA7ZWxzZSBzd2l0Y2goZCl7Y2FzZSBcInN0cmluZ1wiOmNhc2UgXCJudW1iZXJcIjpnPSEwO2JyZWFrO2Nhc2UgXCJvYmplY3RcIjpzd2l0Y2goYS4kJHR5cGVvZil7Y2FzZSB0OmNhc2UgdTpnPSEwfX1pZihnKXJldHVybiBlKGMsYSxcIlwiPT09Yj9cIi5cIitUKGEsMCk6YiksMTtnPTA7Yj1cIlwiPT09Yj9cIi5cIjpiK1wiOlwiO2lmKEFycmF5LmlzQXJyYXkoYSkpZm9yKHZhciBoPTA7aDxhLmxlbmd0aDtoKyspe2Q9YVtoXTt2YXIgZj1iK1QoZCxoKTtnKz1TKGQsZixlLGMpfWVsc2UgaWYobnVsbD09PWF8fFwidW5kZWZpbmVkXCI9PT10eXBlb2YgYT9mPW51bGw6KGY9QyYmYVtDXXx8YVtcIkBAaXRlcmF0b3JcIl0sZj1cImZ1bmN0aW9uXCI9PT10eXBlb2YgZj9mOm51bGwpLFwiZnVuY3Rpb25cIj09PXR5cGVvZiBmKWZvcihhPWYuY2FsbChhKSxcbmg9MDshKGQ9YS5uZXh0KCkpLmRvbmU7KWQ9ZC52YWx1ZSxmPWIrVChkLGgrKyksZys9UyhkLGYsZSxjKTtlbHNlXCJvYmplY3RcIj09PWQmJihlPVwiXCIrYSxEKFwiMzFcIixcIltvYmplY3QgT2JqZWN0XVwiPT09ZT9cIm9iamVjdCB3aXRoIGtleXMge1wiK09iamVjdC5rZXlzKGEpLmpvaW4oXCIsIFwiKStcIn1cIjplLFwiXCIpKTtyZXR1cm4gZ31mdW5jdGlvbiBUKGEsYil7cmV0dXJuXCJvYmplY3RcIj09PXR5cGVvZiBhJiZudWxsIT09YSYmbnVsbCE9YS5rZXk/ZXNjYXBlKGEua2V5KTpiLnRvU3RyaW5nKDM2KX1mdW5jdGlvbiBVKGEsYil7YS5mdW5jLmNhbGwoYS5jb250ZXh0LGIsYS5jb3VudCsrKX1cbmZ1bmN0aW9uIFYoYSxiLGUpe3ZhciBjPWEucmVzdWx0LGQ9YS5rZXlQcmVmaXg7YT1hLmZ1bmMuY2FsbChhLmNvbnRleHQsYixhLmNvdW50KyspO0FycmF5LmlzQXJyYXkoYSk/VyhhLGMsZSxxLnRoYXRSZXR1cm5zQXJndW1lbnQpOm51bGwhPWEmJihOKGEpJiYoYj1kKyghYS5rZXl8fGImJmIua2V5PT09YS5rZXk/XCJcIjooXCJcIithLmtleSkucmVwbGFjZShPLFwiJCYvXCIpK1wiL1wiKStlLGE9eyQkdHlwZW9mOnQsdHlwZTphLnR5cGUsa2V5OmIscmVmOmEucmVmLHByb3BzOmEucHJvcHMsX293bmVyOmEuX293bmVyfSksYy5wdXNoKGEpKX1mdW5jdGlvbiBXKGEsYixlLGMsZCl7dmFyIGc9XCJcIjtudWxsIT1lJiYoZz0oXCJcIitlKS5yZXBsYWNlKE8sXCIkJi9cIikrXCIvXCIpO2I9UShiLGcsYyxkKTtudWxsPT1hfHxTKGEsXCJcIixWLGIpO1IoYil9XG52YXIgWD17Q2hpbGRyZW46e21hcDpmdW5jdGlvbihhLGIsZSl7aWYobnVsbD09YSlyZXR1cm4gYTt2YXIgYz1bXTtXKGEsYyxudWxsLGIsZSk7cmV0dXJuIGN9LGZvckVhY2g6ZnVuY3Rpb24oYSxiLGUpe2lmKG51bGw9PWEpcmV0dXJuIGE7Yj1RKG51bGwsbnVsbCxiLGUpO251bGw9PWF8fFMoYSxcIlwiLFUsYik7UihiKX0sY291bnQ6ZnVuY3Rpb24oYSl7cmV0dXJuIG51bGw9PWE/MDpTKGEsXCJcIixxLnRoYXRSZXR1cm5zTnVsbCxudWxsKX0sdG9BcnJheTpmdW5jdGlvbihhKXt2YXIgYj1bXTtXKGEsYixudWxsLHEudGhhdFJldHVybnNBcmd1bWVudCk7cmV0dXJuIGJ9LG9ubHk6ZnVuY3Rpb24oYSl7TihhKT92b2lkIDA6RChcIjE0M1wiKTtyZXR1cm4gYX19LGNyZWF0ZVJlZjpmdW5jdGlvbigpe3JldHVybntjdXJyZW50Om51bGx9fSxDb21wb25lbnQ6RixQdXJlQ29tcG9uZW50OkgsY3JlYXRlQ29udGV4dDpmdW5jdGlvbihhLGIpe3ZvaWQgMD09PWImJihiPW51bGwpO2E9eyQkdHlwZW9mOnosXG5fY2FsY3VsYXRlQ2hhbmdlZEJpdHM6YixfZGVmYXVsdFZhbHVlOmEsX2N1cnJlbnRWYWx1ZTphLF9jdXJyZW50VmFsdWUyOmEsX2NoYW5nZWRCaXRzOjAsX2NoYW5nZWRCaXRzMjowLFByb3ZpZGVyOm51bGwsQ29uc3VtZXI6bnVsbH07YS5Qcm92aWRlcj17JCR0eXBlb2Y6eSxfY29udGV4dDphfTtyZXR1cm4gYS5Db25zdW1lcj1hfSxmb3J3YXJkUmVmOmZ1bmN0aW9uKGEpe3JldHVybnskJHR5cGVvZjpCLHJlbmRlcjphfX0sRnJhZ21lbnQ6dixTdHJpY3RNb2RlOncsdW5zdGFibGVfQXN5bmNNb2RlOkEsdW5zdGFibGVfUHJvZmlsZXI6eCxjcmVhdGVFbGVtZW50Ok0sY2xvbmVFbGVtZW50OmZ1bmN0aW9uKGEsYixlKXtudWxsPT09YXx8dm9pZCAwPT09YT9EKFwiMjY3XCIsYSk6dm9pZCAwO3ZhciBjPXZvaWQgMCxkPWsoe30sYS5wcm9wcyksZz1hLmtleSxoPWEucmVmLGY9YS5fb3duZXI7aWYobnVsbCE9Yil7dm9pZCAwIT09Yi5yZWYmJihoPWIucmVmLGY9Si5jdXJyZW50KTt2b2lkIDAhPT1cbmIua2V5JiYoZz1cIlwiK2Iua2V5KTt2YXIgbD12b2lkIDA7YS50eXBlJiZhLnR5cGUuZGVmYXVsdFByb3BzJiYobD1hLnR5cGUuZGVmYXVsdFByb3BzKTtmb3IoYyBpbiBiKUsuY2FsbChiLGMpJiYhTC5oYXNPd25Qcm9wZXJ0eShjKSYmKGRbY109dm9pZCAwPT09YltjXSYmdm9pZCAwIT09bD9sW2NdOmJbY10pfWM9YXJndW1lbnRzLmxlbmd0aC0yO2lmKDE9PT1jKWQuY2hpbGRyZW49ZTtlbHNlIGlmKDE8Yyl7bD1BcnJheShjKTtmb3IodmFyIG09MDttPGM7bSsrKWxbbV09YXJndW1lbnRzW20rMl07ZC5jaGlsZHJlbj1sfXJldHVybnskJHR5cGVvZjp0LHR5cGU6YS50eXBlLGtleTpnLHJlZjpoLHByb3BzOmQsX293bmVyOmZ9fSxjcmVhdGVGYWN0b3J5OmZ1bmN0aW9uKGEpe3ZhciBiPU0uYmluZChudWxsLGEpO2IudHlwZT1hO3JldHVybiBifSxpc1ZhbGlkRWxlbWVudDpOLHZlcnNpb246XCIxNi40LjBcIixfX1NFQ1JFVF9JTlRFUk5BTFNfRE9fTk9UX1VTRV9PUl9ZT1VfV0lMTF9CRV9GSVJFRDp7UmVhY3RDdXJyZW50T3duZXI6SixcbmFzc2lnbjprfX0sWT17ZGVmYXVsdDpYfSxaPVkmJlh8fFk7bW9kdWxlLmV4cG9ydHM9Wi5kZWZhdWx0P1ouZGVmYXVsdDpaO1xuIiwiaW1wb3J0IFJlYWN0IGZyb20gJ3JlYWN0J1xuaW1wb3J0IFJlYWN0RE9NIGZyb20gJ3JlYWN0LWRvbSdcbmltcG9ydCBBcHAgZnJvbSAnQ29tcG9uZW50cy9BcHAnXG5pbXBvcnQgcm9vdFJlZHVjZXIgZnJvbSAnUmVkdWNlcnMvaW5kZXgnXG5pbXBvcnQgeyBQcm92aWRlciB9IGZyb20gJ3JlYWN0LXJlZHV4J1xuaW1wb3J0IHRodW5rIGZyb20gJ3JlZHV4LXRodW5rJ1xuaW1wb3J0IHtcbiAgY3JlYXRlU3RvcmUsXG4gIGFwcGx5TWlkZGxld2FyZVxufSBmcm9tICdyZWR1eCdcblxuY29uc3Qgc3RvcmUgPSBjcmVhdGVTdG9yZShcbiAgcm9vdFJlZHVjZXIsXG4gIGFwcGx5TWlkZGxld2FyZSh0aHVuaylcbilcblxuUmVhY3RET00ucmVuZGVyKFxuICA8UHJvdmlkZXIgc3RvcmU9e3N0b3JlfSA+XG4gICAgPEFwcCAvPlxuICA8L1Byb3ZpZGVyPixcbiAgZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoJ3Jvb3QnKVxuKVxuIiwibW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAocmVnRXhwLCByZXBsYWNlKSB7XG4gIHZhciByZXBsYWNlciA9IHJlcGxhY2UgPT09IE9iamVjdChyZXBsYWNlKSA/IGZ1bmN0aW9uIChwYXJ0KSB7XG4gICAgcmV0dXJuIHJlcGxhY2VbcGFydF07XG4gIH0gOiByZXBsYWNlO1xuICByZXR1cm4gZnVuY3Rpb24gKGl0KSB7XG4gICAgcmV0dXJuIFN0cmluZyhpdCkucmVwbGFjZShyZWdFeHAsIHJlcGxhY2VyKTtcbiAgfTtcbn07XG4iLCIvLyBodHRwczovL2dpdGh1Yi5jb20vYmVuamFtaW5nci9SZXhFeHAuZXNjYXBlXG52YXIgJGV4cG9ydCA9IHJlcXVpcmUoJy4vX2V4cG9ydCcpO1xudmFyICRyZSA9IHJlcXVpcmUoJy4vX3JlcGxhY2VyJykoL1tcXFxcXiQqKz8uKCl8W1xcXXt9XS9nLCAnXFxcXCQmJyk7XG5cbiRleHBvcnQoJGV4cG9ydC5TLCAnUmVnRXhwJywgeyBlc2NhcGU6IGZ1bmN0aW9uIGVzY2FwZShpdCkgeyByZXR1cm4gJHJlKGl0KTsgfSB9KTtcbiIsInJlcXVpcmUoJy4uLy4uL21vZHVsZXMvY29yZS5yZWdleHAuZXNjYXBlJyk7XG5tb2R1bGUuZXhwb3J0cyA9IHJlcXVpcmUoJy4uLy4uL21vZHVsZXMvX2NvcmUnKS5SZWdFeHAuZXNjYXBlO1xuIiwiLyoqXG4gKiBDb3B5cmlnaHQgKGMpIDIwMTQsIEZhY2Vib29rLCBJbmMuXG4gKiBBbGwgcmlnaHRzIHJlc2VydmVkLlxuICpcbiAqIFRoaXMgc291cmNlIGNvZGUgaXMgbGljZW5zZWQgdW5kZXIgdGhlIEJTRC1zdHlsZSBsaWNlbnNlIGZvdW5kIGluIHRoZVxuICogaHR0cHM6Ly9yYXcuZ2l0aHViLmNvbS9mYWNlYm9vay9yZWdlbmVyYXRvci9tYXN0ZXIvTElDRU5TRSBmaWxlLiBBblxuICogYWRkaXRpb25hbCBncmFudCBvZiBwYXRlbnQgcmlnaHRzIGNhbiBiZSBmb3VuZCBpbiB0aGUgUEFURU5UUyBmaWxlIGluXG4gKiB0aGUgc2FtZSBkaXJlY3RvcnkuXG4gKi9cblxuIShmdW5jdGlvbihnbG9iYWwpIHtcbiAgXCJ1c2Ugc3RyaWN0XCI7XG5cbiAgdmFyIE9wID0gT2JqZWN0LnByb3RvdHlwZTtcbiAgdmFyIGhhc093biA9IE9wLmhhc093blByb3BlcnR5O1xuICB2YXIgdW5kZWZpbmVkOyAvLyBNb3JlIGNvbXByZXNzaWJsZSB0aGFuIHZvaWQgMC5cbiAgdmFyICRTeW1ib2wgPSB0eXBlb2YgU3ltYm9sID09PSBcImZ1bmN0aW9uXCIgPyBTeW1ib2wgOiB7fTtcbiAgdmFyIGl0ZXJhdG9yU3ltYm9sID0gJFN5bWJvbC5pdGVyYXRvciB8fCBcIkBAaXRlcmF0b3JcIjtcbiAgdmFyIGFzeW5jSXRlcmF0b3JTeW1ib2wgPSAkU3ltYm9sLmFzeW5jSXRlcmF0b3IgfHwgXCJAQGFzeW5jSXRlcmF0b3JcIjtcbiAgdmFyIHRvU3RyaW5nVGFnU3ltYm9sID0gJFN5bWJvbC50b1N0cmluZ1RhZyB8fCBcIkBAdG9TdHJpbmdUYWdcIjtcblxuICB2YXIgaW5Nb2R1bGUgPSB0eXBlb2YgbW9kdWxlID09PSBcIm9iamVjdFwiO1xuICB2YXIgcnVudGltZSA9IGdsb2JhbC5yZWdlbmVyYXRvclJ1bnRpbWU7XG4gIGlmIChydW50aW1lKSB7XG4gICAgaWYgKGluTW9kdWxlKSB7XG4gICAgICAvLyBJZiByZWdlbmVyYXRvclJ1bnRpbWUgaXMgZGVmaW5lZCBnbG9iYWxseSBhbmQgd2UncmUgaW4gYSBtb2R1bGUsXG4gICAgICAvLyBtYWtlIHRoZSBleHBvcnRzIG9iamVjdCBpZGVudGljYWwgdG8gcmVnZW5lcmF0b3JSdW50aW1lLlxuICAgICAgbW9kdWxlLmV4cG9ydHMgPSBydW50aW1lO1xuICAgIH1cbiAgICAvLyBEb24ndCBib3RoZXIgZXZhbHVhdGluZyB0aGUgcmVzdCBvZiB0aGlzIGZpbGUgaWYgdGhlIHJ1bnRpbWUgd2FzXG4gICAgLy8gYWxyZWFkeSBkZWZpbmVkIGdsb2JhbGx5LlxuICAgIHJldHVybjtcbiAgfVxuXG4gIC8vIERlZmluZSB0aGUgcnVudGltZSBnbG9iYWxseSAoYXMgZXhwZWN0ZWQgYnkgZ2VuZXJhdGVkIGNvZGUpIGFzIGVpdGhlclxuICAvLyBtb2R1bGUuZXhwb3J0cyAoaWYgd2UncmUgaW4gYSBtb2R1bGUpIG9yIGEgbmV3LCBlbXB0eSBvYmplY3QuXG4gIHJ1bnRpbWUgPSBnbG9iYWwucmVnZW5lcmF0b3JSdW50aW1lID0gaW5Nb2R1bGUgPyBtb2R1bGUuZXhwb3J0cyA6IHt9O1xuXG4gIGZ1bmN0aW9uIHdyYXAoaW5uZXJGbiwgb3V0ZXJGbiwgc2VsZiwgdHJ5TG9jc0xpc3QpIHtcbiAgICAvLyBJZiBvdXRlckZuIHByb3ZpZGVkIGFuZCBvdXRlckZuLnByb3RvdHlwZSBpcyBhIEdlbmVyYXRvciwgdGhlbiBvdXRlckZuLnByb3RvdHlwZSBpbnN0YW5jZW9mIEdlbmVyYXRvci5cbiAgICB2YXIgcHJvdG9HZW5lcmF0b3IgPSBvdXRlckZuICYmIG91dGVyRm4ucHJvdG90eXBlIGluc3RhbmNlb2YgR2VuZXJhdG9yID8gb3V0ZXJGbiA6IEdlbmVyYXRvcjtcbiAgICB2YXIgZ2VuZXJhdG9yID0gT2JqZWN0LmNyZWF0ZShwcm90b0dlbmVyYXRvci5wcm90b3R5cGUpO1xuICAgIHZhciBjb250ZXh0ID0gbmV3IENvbnRleHQodHJ5TG9jc0xpc3QgfHwgW10pO1xuXG4gICAgLy8gVGhlIC5faW52b2tlIG1ldGhvZCB1bmlmaWVzIHRoZSBpbXBsZW1lbnRhdGlvbnMgb2YgdGhlIC5uZXh0LFxuICAgIC8vIC50aHJvdywgYW5kIC5yZXR1cm4gbWV0aG9kcy5cbiAgICBnZW5lcmF0b3IuX2ludm9rZSA9IG1ha2VJbnZva2VNZXRob2QoaW5uZXJGbiwgc2VsZiwgY29udGV4dCk7XG5cbiAgICByZXR1cm4gZ2VuZXJhdG9yO1xuICB9XG4gIHJ1bnRpbWUud3JhcCA9IHdyYXA7XG5cbiAgLy8gVHJ5L2NhdGNoIGhlbHBlciB0byBtaW5pbWl6ZSBkZW9wdGltaXphdGlvbnMuIFJldHVybnMgYSBjb21wbGV0aW9uXG4gIC8vIHJlY29yZCBsaWtlIGNvbnRleHQudHJ5RW50cmllc1tpXS5jb21wbGV0aW9uLiBUaGlzIGludGVyZmFjZSBjb3VsZFxuICAvLyBoYXZlIGJlZW4gKGFuZCB3YXMgcHJldmlvdXNseSkgZGVzaWduZWQgdG8gdGFrZSBhIGNsb3N1cmUgdG8gYmVcbiAgLy8gaW52b2tlZCB3aXRob3V0IGFyZ3VtZW50cywgYnV0IGluIGFsbCB0aGUgY2FzZXMgd2UgY2FyZSBhYm91dCB3ZVxuICAvLyBhbHJlYWR5IGhhdmUgYW4gZXhpc3RpbmcgbWV0aG9kIHdlIHdhbnQgdG8gY2FsbCwgc28gdGhlcmUncyBubyBuZWVkXG4gIC8vIHRvIGNyZWF0ZSBhIG5ldyBmdW5jdGlvbiBvYmplY3QuIFdlIGNhbiBldmVuIGdldCBhd2F5IHdpdGggYXNzdW1pbmdcbiAgLy8gdGhlIG1ldGhvZCB0YWtlcyBleGFjdGx5IG9uZSBhcmd1bWVudCwgc2luY2UgdGhhdCBoYXBwZW5zIHRvIGJlIHRydWVcbiAgLy8gaW4gZXZlcnkgY2FzZSwgc28gd2UgZG9uJ3QgaGF2ZSB0byB0b3VjaCB0aGUgYXJndW1lbnRzIG9iamVjdC4gVGhlXG4gIC8vIG9ubHkgYWRkaXRpb25hbCBhbGxvY2F0aW9uIHJlcXVpcmVkIGlzIHRoZSBjb21wbGV0aW9uIHJlY29yZCwgd2hpY2hcbiAgLy8gaGFzIGEgc3RhYmxlIHNoYXBlIGFuZCBzbyBob3BlZnVsbHkgc2hvdWxkIGJlIGNoZWFwIHRvIGFsbG9jYXRlLlxuICBmdW5jdGlvbiB0cnlDYXRjaChmbiwgb2JqLCBhcmcpIHtcbiAgICB0cnkge1xuICAgICAgcmV0dXJuIHsgdHlwZTogXCJub3JtYWxcIiwgYXJnOiBmbi5jYWxsKG9iaiwgYXJnKSB9O1xuICAgIH0gY2F0Y2ggKGVycikge1xuICAgICAgcmV0dXJuIHsgdHlwZTogXCJ0aHJvd1wiLCBhcmc6IGVyciB9O1xuICAgIH1cbiAgfVxuXG4gIHZhciBHZW5TdGF0ZVN1c3BlbmRlZFN0YXJ0ID0gXCJzdXNwZW5kZWRTdGFydFwiO1xuICB2YXIgR2VuU3RhdGVTdXNwZW5kZWRZaWVsZCA9IFwic3VzcGVuZGVkWWllbGRcIjtcbiAgdmFyIEdlblN0YXRlRXhlY3V0aW5nID0gXCJleGVjdXRpbmdcIjtcbiAgdmFyIEdlblN0YXRlQ29tcGxldGVkID0gXCJjb21wbGV0ZWRcIjtcblxuICAvLyBSZXR1cm5pbmcgdGhpcyBvYmplY3QgZnJvbSB0aGUgaW5uZXJGbiBoYXMgdGhlIHNhbWUgZWZmZWN0IGFzXG4gIC8vIGJyZWFraW5nIG91dCBvZiB0aGUgZGlzcGF0Y2ggc3dpdGNoIHN0YXRlbWVudC5cbiAgdmFyIENvbnRpbnVlU2VudGluZWwgPSB7fTtcblxuICAvLyBEdW1teSBjb25zdHJ1Y3RvciBmdW5jdGlvbnMgdGhhdCB3ZSB1c2UgYXMgdGhlIC5jb25zdHJ1Y3RvciBhbmRcbiAgLy8gLmNvbnN0cnVjdG9yLnByb3RvdHlwZSBwcm9wZXJ0aWVzIGZvciBmdW5jdGlvbnMgdGhhdCByZXR1cm4gR2VuZXJhdG9yXG4gIC8vIG9iamVjdHMuIEZvciBmdWxsIHNwZWMgY29tcGxpYW5jZSwgeW91IG1heSB3aXNoIHRvIGNvbmZpZ3VyZSB5b3VyXG4gIC8vIG1pbmlmaWVyIG5vdCB0byBtYW5nbGUgdGhlIG5hbWVzIG9mIHRoZXNlIHR3byBmdW5jdGlvbnMuXG4gIGZ1bmN0aW9uIEdlbmVyYXRvcigpIHt9XG4gIGZ1bmN0aW9uIEdlbmVyYXRvckZ1bmN0aW9uKCkge31cbiAgZnVuY3Rpb24gR2VuZXJhdG9yRnVuY3Rpb25Qcm90b3R5cGUoKSB7fVxuXG4gIC8vIFRoaXMgaXMgYSBwb2x5ZmlsbCBmb3IgJUl0ZXJhdG9yUHJvdG90eXBlJSBmb3IgZW52aXJvbm1lbnRzIHRoYXRcbiAgLy8gZG9uJ3QgbmF0aXZlbHkgc3VwcG9ydCBpdC5cbiAgdmFyIEl0ZXJhdG9yUHJvdG90eXBlID0ge307XG4gIEl0ZXJhdG9yUHJvdG90eXBlW2l0ZXJhdG9yU3ltYm9sXSA9IGZ1bmN0aW9uICgpIHtcbiAgICByZXR1cm4gdGhpcztcbiAgfTtcblxuICB2YXIgZ2V0UHJvdG8gPSBPYmplY3QuZ2V0UHJvdG90eXBlT2Y7XG4gIHZhciBOYXRpdmVJdGVyYXRvclByb3RvdHlwZSA9IGdldFByb3RvICYmIGdldFByb3RvKGdldFByb3RvKHZhbHVlcyhbXSkpKTtcbiAgaWYgKE5hdGl2ZUl0ZXJhdG9yUHJvdG90eXBlICYmXG4gICAgICBOYXRpdmVJdGVyYXRvclByb3RvdHlwZSAhPT0gT3AgJiZcbiAgICAgIGhhc093bi5jYWxsKE5hdGl2ZUl0ZXJhdG9yUHJvdG90eXBlLCBpdGVyYXRvclN5bWJvbCkpIHtcbiAgICAvLyBUaGlzIGVudmlyb25tZW50IGhhcyBhIG5hdGl2ZSAlSXRlcmF0b3JQcm90b3R5cGUlOyB1c2UgaXQgaW5zdGVhZFxuICAgIC8vIG9mIHRoZSBwb2x5ZmlsbC5cbiAgICBJdGVyYXRvclByb3RvdHlwZSA9IE5hdGl2ZUl0ZXJhdG9yUHJvdG90eXBlO1xuICB9XG5cbiAgdmFyIEdwID0gR2VuZXJhdG9yRnVuY3Rpb25Qcm90b3R5cGUucHJvdG90eXBlID1cbiAgICBHZW5lcmF0b3IucHJvdG90eXBlID0gT2JqZWN0LmNyZWF0ZShJdGVyYXRvclByb3RvdHlwZSk7XG4gIEdlbmVyYXRvckZ1bmN0aW9uLnByb3RvdHlwZSA9IEdwLmNvbnN0cnVjdG9yID0gR2VuZXJhdG9yRnVuY3Rpb25Qcm90b3R5cGU7XG4gIEdlbmVyYXRvckZ1bmN0aW9uUHJvdG90eXBlLmNvbnN0cnVjdG9yID0gR2VuZXJhdG9yRnVuY3Rpb247XG4gIEdlbmVyYXRvckZ1bmN0aW9uUHJvdG90eXBlW3RvU3RyaW5nVGFnU3ltYm9sXSA9XG4gICAgR2VuZXJhdG9yRnVuY3Rpb24uZGlzcGxheU5hbWUgPSBcIkdlbmVyYXRvckZ1bmN0aW9uXCI7XG5cbiAgLy8gSGVscGVyIGZvciBkZWZpbmluZyB0aGUgLm5leHQsIC50aHJvdywgYW5kIC5yZXR1cm4gbWV0aG9kcyBvZiB0aGVcbiAgLy8gSXRlcmF0b3IgaW50ZXJmYWNlIGluIHRlcm1zIG9mIGEgc2luZ2xlIC5faW52b2tlIG1ldGhvZC5cbiAgZnVuY3Rpb24gZGVmaW5lSXRlcmF0b3JNZXRob2RzKHByb3RvdHlwZSkge1xuICAgIFtcIm5leHRcIiwgXCJ0aHJvd1wiLCBcInJldHVyblwiXS5mb3JFYWNoKGZ1bmN0aW9uKG1ldGhvZCkge1xuICAgICAgcHJvdG90eXBlW21ldGhvZF0gPSBmdW5jdGlvbihhcmcpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuX2ludm9rZShtZXRob2QsIGFyZyk7XG4gICAgICB9O1xuICAgIH0pO1xuICB9XG5cbiAgcnVudGltZS5pc0dlbmVyYXRvckZ1bmN0aW9uID0gZnVuY3Rpb24oZ2VuRnVuKSB7XG4gICAgdmFyIGN0b3IgPSB0eXBlb2YgZ2VuRnVuID09PSBcImZ1bmN0aW9uXCIgJiYgZ2VuRnVuLmNvbnN0cnVjdG9yO1xuICAgIHJldHVybiBjdG9yXG4gICAgICA/IGN0b3IgPT09IEdlbmVyYXRvckZ1bmN0aW9uIHx8XG4gICAgICAgIC8vIEZvciB0aGUgbmF0aXZlIEdlbmVyYXRvckZ1bmN0aW9uIGNvbnN0cnVjdG9yLCB0aGUgYmVzdCB3ZSBjYW5cbiAgICAgICAgLy8gZG8gaXMgdG8gY2hlY2sgaXRzIC5uYW1lIHByb3BlcnR5LlxuICAgICAgICAoY3Rvci5kaXNwbGF5TmFtZSB8fCBjdG9yLm5hbWUpID09PSBcIkdlbmVyYXRvckZ1bmN0aW9uXCJcbiAgICAgIDogZmFsc2U7XG4gIH07XG5cbiAgcnVudGltZS5tYXJrID0gZnVuY3Rpb24oZ2VuRnVuKSB7XG4gICAgaWYgKE9iamVjdC5zZXRQcm90b3R5cGVPZikge1xuICAgICAgT2JqZWN0LnNldFByb3RvdHlwZU9mKGdlbkZ1biwgR2VuZXJhdG9yRnVuY3Rpb25Qcm90b3R5cGUpO1xuICAgIH0gZWxzZSB7XG4gICAgICBnZW5GdW4uX19wcm90b19fID0gR2VuZXJhdG9yRnVuY3Rpb25Qcm90b3R5cGU7XG4gICAgICBpZiAoISh0b1N0cmluZ1RhZ1N5bWJvbCBpbiBnZW5GdW4pKSB7XG4gICAgICAgIGdlbkZ1blt0b1N0cmluZ1RhZ1N5bWJvbF0gPSBcIkdlbmVyYXRvckZ1bmN0aW9uXCI7XG4gICAgICB9XG4gICAgfVxuICAgIGdlbkZ1bi5wcm90b3R5cGUgPSBPYmplY3QuY3JlYXRlKEdwKTtcbiAgICByZXR1cm4gZ2VuRnVuO1xuICB9O1xuXG4gIC8vIFdpdGhpbiB0aGUgYm9keSBvZiBhbnkgYXN5bmMgZnVuY3Rpb24sIGBhd2FpdCB4YCBpcyB0cmFuc2Zvcm1lZCB0b1xuICAvLyBgeWllbGQgcmVnZW5lcmF0b3JSdW50aW1lLmF3cmFwKHgpYCwgc28gdGhhdCB0aGUgcnVudGltZSBjYW4gdGVzdFxuICAvLyBgaGFzT3duLmNhbGwodmFsdWUsIFwiX19hd2FpdFwiKWAgdG8gZGV0ZXJtaW5lIGlmIHRoZSB5aWVsZGVkIHZhbHVlIGlzXG4gIC8vIG1lYW50IHRvIGJlIGF3YWl0ZWQuXG4gIHJ1bnRpbWUuYXdyYXAgPSBmdW5jdGlvbihhcmcpIHtcbiAgICByZXR1cm4geyBfX2F3YWl0OiBhcmcgfTtcbiAgfTtcblxuICBmdW5jdGlvbiBBc3luY0l0ZXJhdG9yKGdlbmVyYXRvcikge1xuICAgIGZ1bmN0aW9uIGludm9rZShtZXRob2QsIGFyZywgcmVzb2x2ZSwgcmVqZWN0KSB7XG4gICAgICB2YXIgcmVjb3JkID0gdHJ5Q2F0Y2goZ2VuZXJhdG9yW21ldGhvZF0sIGdlbmVyYXRvciwgYXJnKTtcbiAgICAgIGlmIChyZWNvcmQudHlwZSA9PT0gXCJ0aHJvd1wiKSB7XG4gICAgICAgIHJlamVjdChyZWNvcmQuYXJnKTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHZhciByZXN1bHQgPSByZWNvcmQuYXJnO1xuICAgICAgICB2YXIgdmFsdWUgPSByZXN1bHQudmFsdWU7XG4gICAgICAgIGlmICh2YWx1ZSAmJlxuICAgICAgICAgICAgdHlwZW9mIHZhbHVlID09PSBcIm9iamVjdFwiICYmXG4gICAgICAgICAgICBoYXNPd24uY2FsbCh2YWx1ZSwgXCJfX2F3YWl0XCIpKSB7XG4gICAgICAgICAgcmV0dXJuIFByb21pc2UucmVzb2x2ZSh2YWx1ZS5fX2F3YWl0KS50aGVuKGZ1bmN0aW9uKHZhbHVlKSB7XG4gICAgICAgICAgICBpbnZva2UoXCJuZXh0XCIsIHZhbHVlLCByZXNvbHZlLCByZWplY3QpO1xuICAgICAgICAgIH0sIGZ1bmN0aW9uKGVycikge1xuICAgICAgICAgICAgaW52b2tlKFwidGhyb3dcIiwgZXJyLCByZXNvbHZlLCByZWplY3QpO1xuICAgICAgICAgIH0pO1xuICAgICAgICB9XG5cbiAgICAgICAgcmV0dXJuIFByb21pc2UucmVzb2x2ZSh2YWx1ZSkudGhlbihmdW5jdGlvbih1bndyYXBwZWQpIHtcbiAgICAgICAgICAvLyBXaGVuIGEgeWllbGRlZCBQcm9taXNlIGlzIHJlc29sdmVkLCBpdHMgZmluYWwgdmFsdWUgYmVjb21lc1xuICAgICAgICAgIC8vIHRoZSAudmFsdWUgb2YgdGhlIFByb21pc2U8e3ZhbHVlLGRvbmV9PiByZXN1bHQgZm9yIHRoZVxuICAgICAgICAgIC8vIGN1cnJlbnQgaXRlcmF0aW9uLiBJZiB0aGUgUHJvbWlzZSBpcyByZWplY3RlZCwgaG93ZXZlciwgdGhlXG4gICAgICAgICAgLy8gcmVzdWx0IGZvciB0aGlzIGl0ZXJhdGlvbiB3aWxsIGJlIHJlamVjdGVkIHdpdGggdGhlIHNhbWVcbiAgICAgICAgICAvLyByZWFzb24uIE5vdGUgdGhhdCByZWplY3Rpb25zIG9mIHlpZWxkZWQgUHJvbWlzZXMgYXJlIG5vdFxuICAgICAgICAgIC8vIHRocm93biBiYWNrIGludG8gdGhlIGdlbmVyYXRvciBmdW5jdGlvbiwgYXMgaXMgdGhlIGNhc2VcbiAgICAgICAgICAvLyB3aGVuIGFuIGF3YWl0ZWQgUHJvbWlzZSBpcyByZWplY3RlZC4gVGhpcyBkaWZmZXJlbmNlIGluXG4gICAgICAgICAgLy8gYmVoYXZpb3IgYmV0d2VlbiB5aWVsZCBhbmQgYXdhaXQgaXMgaW1wb3J0YW50LCBiZWNhdXNlIGl0XG4gICAgICAgICAgLy8gYWxsb3dzIHRoZSBjb25zdW1lciB0byBkZWNpZGUgd2hhdCB0byBkbyB3aXRoIHRoZSB5aWVsZGVkXG4gICAgICAgICAgLy8gcmVqZWN0aW9uIChzd2FsbG93IGl0IGFuZCBjb250aW51ZSwgbWFudWFsbHkgLnRocm93IGl0IGJhY2tcbiAgICAgICAgICAvLyBpbnRvIHRoZSBnZW5lcmF0b3IsIGFiYW5kb24gaXRlcmF0aW9uLCB3aGF0ZXZlcikuIFdpdGhcbiAgICAgICAgICAvLyBhd2FpdCwgYnkgY29udHJhc3QsIHRoZXJlIGlzIG5vIG9wcG9ydHVuaXR5IHRvIGV4YW1pbmUgdGhlXG4gICAgICAgICAgLy8gcmVqZWN0aW9uIHJlYXNvbiBvdXRzaWRlIHRoZSBnZW5lcmF0b3IgZnVuY3Rpb24sIHNvIHRoZVxuICAgICAgICAgIC8vIG9ubHkgb3B0aW9uIGlzIHRvIHRocm93IGl0IGZyb20gdGhlIGF3YWl0IGV4cHJlc3Npb24sIGFuZFxuICAgICAgICAgIC8vIGxldCB0aGUgZ2VuZXJhdG9yIGZ1bmN0aW9uIGhhbmRsZSB0aGUgZXhjZXB0aW9uLlxuICAgICAgICAgIHJlc3VsdC52YWx1ZSA9IHVud3JhcHBlZDtcbiAgICAgICAgICByZXNvbHZlKHJlc3VsdCk7XG4gICAgICAgIH0sIHJlamVjdCk7XG4gICAgICB9XG4gICAgfVxuXG4gICAgaWYgKHR5cGVvZiBnbG9iYWwucHJvY2VzcyA9PT0gXCJvYmplY3RcIiAmJiBnbG9iYWwucHJvY2Vzcy5kb21haW4pIHtcbiAgICAgIGludm9rZSA9IGdsb2JhbC5wcm9jZXNzLmRvbWFpbi5iaW5kKGludm9rZSk7XG4gICAgfVxuXG4gICAgdmFyIHByZXZpb3VzUHJvbWlzZTtcblxuICAgIGZ1bmN0aW9uIGVucXVldWUobWV0aG9kLCBhcmcpIHtcbiAgICAgIGZ1bmN0aW9uIGNhbGxJbnZva2VXaXRoTWV0aG9kQW5kQXJnKCkge1xuICAgICAgICByZXR1cm4gbmV3IFByb21pc2UoZnVuY3Rpb24ocmVzb2x2ZSwgcmVqZWN0KSB7XG4gICAgICAgICAgaW52b2tlKG1ldGhvZCwgYXJnLCByZXNvbHZlLCByZWplY3QpO1xuICAgICAgICB9KTtcbiAgICAgIH1cblxuICAgICAgcmV0dXJuIHByZXZpb3VzUHJvbWlzZSA9XG4gICAgICAgIC8vIElmIGVucXVldWUgaGFzIGJlZW4gY2FsbGVkIGJlZm9yZSwgdGhlbiB3ZSB3YW50IHRvIHdhaXQgdW50aWxcbiAgICAgICAgLy8gYWxsIHByZXZpb3VzIFByb21pc2VzIGhhdmUgYmVlbiByZXNvbHZlZCBiZWZvcmUgY2FsbGluZyBpbnZva2UsXG4gICAgICAgIC8vIHNvIHRoYXQgcmVzdWx0cyBhcmUgYWx3YXlzIGRlbGl2ZXJlZCBpbiB0aGUgY29ycmVjdCBvcmRlci4gSWZcbiAgICAgICAgLy8gZW5xdWV1ZSBoYXMgbm90IGJlZW4gY2FsbGVkIGJlZm9yZSwgdGhlbiBpdCBpcyBpbXBvcnRhbnQgdG9cbiAgICAgICAgLy8gY2FsbCBpbnZva2UgaW1tZWRpYXRlbHksIHdpdGhvdXQgd2FpdGluZyBvbiBhIGNhbGxiYWNrIHRvIGZpcmUsXG4gICAgICAgIC8vIHNvIHRoYXQgdGhlIGFzeW5jIGdlbmVyYXRvciBmdW5jdGlvbiBoYXMgdGhlIG9wcG9ydHVuaXR5IHRvIGRvXG4gICAgICAgIC8vIGFueSBuZWNlc3Nhcnkgc2V0dXAgaW4gYSBwcmVkaWN0YWJsZSB3YXkuIFRoaXMgcHJlZGljdGFiaWxpdHlcbiAgICAgICAgLy8gaXMgd2h5IHRoZSBQcm9taXNlIGNvbnN0cnVjdG9yIHN5bmNocm9ub3VzbHkgaW52b2tlcyBpdHNcbiAgICAgICAgLy8gZXhlY3V0b3IgY2FsbGJhY2ssIGFuZCB3aHkgYXN5bmMgZnVuY3Rpb25zIHN5bmNocm9ub3VzbHlcbiAgICAgICAgLy8gZXhlY3V0ZSBjb2RlIGJlZm9yZSB0aGUgZmlyc3QgYXdhaXQuIFNpbmNlIHdlIGltcGxlbWVudCBzaW1wbGVcbiAgICAgICAgLy8gYXN5bmMgZnVuY3Rpb25zIGluIHRlcm1zIG9mIGFzeW5jIGdlbmVyYXRvcnMsIGl0IGlzIGVzcGVjaWFsbHlcbiAgICAgICAgLy8gaW1wb3J0YW50IHRvIGdldCB0aGlzIHJpZ2h0LCBldmVuIHRob3VnaCBpdCByZXF1aXJlcyBjYXJlLlxuICAgICAgICBwcmV2aW91c1Byb21pc2UgPyBwcmV2aW91c1Byb21pc2UudGhlbihcbiAgICAgICAgICBjYWxsSW52b2tlV2l0aE1ldGhvZEFuZEFyZyxcbiAgICAgICAgICAvLyBBdm9pZCBwcm9wYWdhdGluZyBmYWlsdXJlcyB0byBQcm9taXNlcyByZXR1cm5lZCBieSBsYXRlclxuICAgICAgICAgIC8vIGludm9jYXRpb25zIG9mIHRoZSBpdGVyYXRvci5cbiAgICAgICAgICBjYWxsSW52b2tlV2l0aE1ldGhvZEFuZEFyZ1xuICAgICAgICApIDogY2FsbEludm9rZVdpdGhNZXRob2RBbmRBcmcoKTtcbiAgICB9XG5cbiAgICAvLyBEZWZpbmUgdGhlIHVuaWZpZWQgaGVscGVyIG1ldGhvZCB0aGF0IGlzIHVzZWQgdG8gaW1wbGVtZW50IC5uZXh0LFxuICAgIC8vIC50aHJvdywgYW5kIC5yZXR1cm4gKHNlZSBkZWZpbmVJdGVyYXRvck1ldGhvZHMpLlxuICAgIHRoaXMuX2ludm9rZSA9IGVucXVldWU7XG4gIH1cblxuICBkZWZpbmVJdGVyYXRvck1ldGhvZHMoQXN5bmNJdGVyYXRvci5wcm90b3R5cGUpO1xuICBBc3luY0l0ZXJhdG9yLnByb3RvdHlwZVthc3luY0l0ZXJhdG9yU3ltYm9sXSA9IGZ1bmN0aW9uICgpIHtcbiAgICByZXR1cm4gdGhpcztcbiAgfTtcbiAgcnVudGltZS5Bc3luY0l0ZXJhdG9yID0gQXN5bmNJdGVyYXRvcjtcblxuICAvLyBOb3RlIHRoYXQgc2ltcGxlIGFzeW5jIGZ1bmN0aW9ucyBhcmUgaW1wbGVtZW50ZWQgb24gdG9wIG9mXG4gIC8vIEFzeW5jSXRlcmF0b3Igb2JqZWN0czsgdGhleSBqdXN0IHJldHVybiBhIFByb21pc2UgZm9yIHRoZSB2YWx1ZSBvZlxuICAvLyB0aGUgZmluYWwgcmVzdWx0IHByb2R1Y2VkIGJ5IHRoZSBpdGVyYXRvci5cbiAgcnVudGltZS5hc3luYyA9IGZ1bmN0aW9uKGlubmVyRm4sIG91dGVyRm4sIHNlbGYsIHRyeUxvY3NMaXN0KSB7XG4gICAgdmFyIGl0ZXIgPSBuZXcgQXN5bmNJdGVyYXRvcihcbiAgICAgIHdyYXAoaW5uZXJGbiwgb3V0ZXJGbiwgc2VsZiwgdHJ5TG9jc0xpc3QpXG4gICAgKTtcblxuICAgIHJldHVybiBydW50aW1lLmlzR2VuZXJhdG9yRnVuY3Rpb24ob3V0ZXJGbilcbiAgICAgID8gaXRlciAvLyBJZiBvdXRlckZuIGlzIGEgZ2VuZXJhdG9yLCByZXR1cm4gdGhlIGZ1bGwgaXRlcmF0b3IuXG4gICAgICA6IGl0ZXIubmV4dCgpLnRoZW4oZnVuY3Rpb24ocmVzdWx0KSB7XG4gICAgICAgICAgcmV0dXJuIHJlc3VsdC5kb25lID8gcmVzdWx0LnZhbHVlIDogaXRlci5uZXh0KCk7XG4gICAgICAgIH0pO1xuICB9O1xuXG4gIGZ1bmN0aW9uIG1ha2VJbnZva2VNZXRob2QoaW5uZXJGbiwgc2VsZiwgY29udGV4dCkge1xuICAgIHZhciBzdGF0ZSA9IEdlblN0YXRlU3VzcGVuZGVkU3RhcnQ7XG5cbiAgICByZXR1cm4gZnVuY3Rpb24gaW52b2tlKG1ldGhvZCwgYXJnKSB7XG4gICAgICBpZiAoc3RhdGUgPT09IEdlblN0YXRlRXhlY3V0aW5nKSB7XG4gICAgICAgIHRocm93IG5ldyBFcnJvcihcIkdlbmVyYXRvciBpcyBhbHJlYWR5IHJ1bm5pbmdcIik7XG4gICAgICB9XG5cbiAgICAgIGlmIChzdGF0ZSA9PT0gR2VuU3RhdGVDb21wbGV0ZWQpIHtcbiAgICAgICAgaWYgKG1ldGhvZCA9PT0gXCJ0aHJvd1wiKSB7XG4gICAgICAgICAgdGhyb3cgYXJnO1xuICAgICAgICB9XG5cbiAgICAgICAgLy8gQmUgZm9yZ2l2aW5nLCBwZXIgMjUuMy4zLjMuMyBvZiB0aGUgc3BlYzpcbiAgICAgICAgLy8gaHR0cHM6Ly9wZW9wbGUubW96aWxsYS5vcmcvfmpvcmVuZG9yZmYvZXM2LWRyYWZ0Lmh0bWwjc2VjLWdlbmVyYXRvcnJlc3VtZVxuICAgICAgICByZXR1cm4gZG9uZVJlc3VsdCgpO1xuICAgICAgfVxuXG4gICAgICBjb250ZXh0Lm1ldGhvZCA9IG1ldGhvZDtcbiAgICAgIGNvbnRleHQuYXJnID0gYXJnO1xuXG4gICAgICB3aGlsZSAodHJ1ZSkge1xuICAgICAgICB2YXIgZGVsZWdhdGUgPSBjb250ZXh0LmRlbGVnYXRlO1xuICAgICAgICBpZiAoZGVsZWdhdGUpIHtcbiAgICAgICAgICB2YXIgZGVsZWdhdGVSZXN1bHQgPSBtYXliZUludm9rZURlbGVnYXRlKGRlbGVnYXRlLCBjb250ZXh0KTtcbiAgICAgICAgICBpZiAoZGVsZWdhdGVSZXN1bHQpIHtcbiAgICAgICAgICAgIGlmIChkZWxlZ2F0ZVJlc3VsdCA9PT0gQ29udGludWVTZW50aW5lbCkgY29udGludWU7XG4gICAgICAgICAgICByZXR1cm4gZGVsZWdhdGVSZXN1bHQ7XG4gICAgICAgICAgfVxuICAgICAgICB9XG5cbiAgICAgICAgaWYgKGNvbnRleHQubWV0aG9kID09PSBcIm5leHRcIikge1xuICAgICAgICAgIC8vIFNldHRpbmcgY29udGV4dC5fc2VudCBmb3IgbGVnYWN5IHN1cHBvcnQgb2YgQmFiZWwnc1xuICAgICAgICAgIC8vIGZ1bmN0aW9uLnNlbnQgaW1wbGVtZW50YXRpb24uXG4gICAgICAgICAgY29udGV4dC5zZW50ID0gY29udGV4dC5fc2VudCA9IGNvbnRleHQuYXJnO1xuXG4gICAgICAgIH0gZWxzZSBpZiAoY29udGV4dC5tZXRob2QgPT09IFwidGhyb3dcIikge1xuICAgICAgICAgIGlmIChzdGF0ZSA9PT0gR2VuU3RhdGVTdXNwZW5kZWRTdGFydCkge1xuICAgICAgICAgICAgc3RhdGUgPSBHZW5TdGF0ZUNvbXBsZXRlZDtcbiAgICAgICAgICAgIHRocm93IGNvbnRleHQuYXJnO1xuICAgICAgICAgIH1cblxuICAgICAgICAgIGNvbnRleHQuZGlzcGF0Y2hFeGNlcHRpb24oY29udGV4dC5hcmcpO1xuXG4gICAgICAgIH0gZWxzZSBpZiAoY29udGV4dC5tZXRob2QgPT09IFwicmV0dXJuXCIpIHtcbiAgICAgICAgICBjb250ZXh0LmFicnVwdChcInJldHVyblwiLCBjb250ZXh0LmFyZyk7XG4gICAgICAgIH1cblxuICAgICAgICBzdGF0ZSA9IEdlblN0YXRlRXhlY3V0aW5nO1xuXG4gICAgICAgIHZhciByZWNvcmQgPSB0cnlDYXRjaChpbm5lckZuLCBzZWxmLCBjb250ZXh0KTtcbiAgICAgICAgaWYgKHJlY29yZC50eXBlID09PSBcIm5vcm1hbFwiKSB7XG4gICAgICAgICAgLy8gSWYgYW4gZXhjZXB0aW9uIGlzIHRocm93biBmcm9tIGlubmVyRm4sIHdlIGxlYXZlIHN0YXRlID09PVxuICAgICAgICAgIC8vIEdlblN0YXRlRXhlY3V0aW5nIGFuZCBsb29wIGJhY2sgZm9yIGFub3RoZXIgaW52b2NhdGlvbi5cbiAgICAgICAgICBzdGF0ZSA9IGNvbnRleHQuZG9uZVxuICAgICAgICAgICAgPyBHZW5TdGF0ZUNvbXBsZXRlZFxuICAgICAgICAgICAgOiBHZW5TdGF0ZVN1c3BlbmRlZFlpZWxkO1xuXG4gICAgICAgICAgaWYgKHJlY29yZC5hcmcgPT09IENvbnRpbnVlU2VudGluZWwpIHtcbiAgICAgICAgICAgIGNvbnRpbnVlO1xuICAgICAgICAgIH1cblxuICAgICAgICAgIHJldHVybiB7XG4gICAgICAgICAgICB2YWx1ZTogcmVjb3JkLmFyZyxcbiAgICAgICAgICAgIGRvbmU6IGNvbnRleHQuZG9uZVxuICAgICAgICAgIH07XG5cbiAgICAgICAgfSBlbHNlIGlmIChyZWNvcmQudHlwZSA9PT0gXCJ0aHJvd1wiKSB7XG4gICAgICAgICAgc3RhdGUgPSBHZW5TdGF0ZUNvbXBsZXRlZDtcbiAgICAgICAgICAvLyBEaXNwYXRjaCB0aGUgZXhjZXB0aW9uIGJ5IGxvb3BpbmcgYmFjayBhcm91bmQgdG8gdGhlXG4gICAgICAgICAgLy8gY29udGV4dC5kaXNwYXRjaEV4Y2VwdGlvbihjb250ZXh0LmFyZykgY2FsbCBhYm92ZS5cbiAgICAgICAgICBjb250ZXh0Lm1ldGhvZCA9IFwidGhyb3dcIjtcbiAgICAgICAgICBjb250ZXh0LmFyZyA9IHJlY29yZC5hcmc7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9O1xuICB9XG5cbiAgLy8gQ2FsbCBkZWxlZ2F0ZS5pdGVyYXRvcltjb250ZXh0Lm1ldGhvZF0oY29udGV4dC5hcmcpIGFuZCBoYW5kbGUgdGhlXG4gIC8vIHJlc3VsdCwgZWl0aGVyIGJ5IHJldHVybmluZyBhIHsgdmFsdWUsIGRvbmUgfSByZXN1bHQgZnJvbSB0aGVcbiAgLy8gZGVsZWdhdGUgaXRlcmF0b3IsIG9yIGJ5IG1vZGlmeWluZyBjb250ZXh0Lm1ldGhvZCBhbmQgY29udGV4dC5hcmcsXG4gIC8vIHNldHRpbmcgY29udGV4dC5kZWxlZ2F0ZSB0byBudWxsLCBhbmQgcmV0dXJuaW5nIHRoZSBDb250aW51ZVNlbnRpbmVsLlxuICBmdW5jdGlvbiBtYXliZUludm9rZURlbGVnYXRlKGRlbGVnYXRlLCBjb250ZXh0KSB7XG4gICAgdmFyIG1ldGhvZCA9IGRlbGVnYXRlLml0ZXJhdG9yW2NvbnRleHQubWV0aG9kXTtcbiAgICBpZiAobWV0aG9kID09PSB1bmRlZmluZWQpIHtcbiAgICAgIC8vIEEgLnRocm93IG9yIC5yZXR1cm4gd2hlbiB0aGUgZGVsZWdhdGUgaXRlcmF0b3IgaGFzIG5vIC50aHJvd1xuICAgICAgLy8gbWV0aG9kIGFsd2F5cyB0ZXJtaW5hdGVzIHRoZSB5aWVsZCogbG9vcC5cbiAgICAgIGNvbnRleHQuZGVsZWdhdGUgPSBudWxsO1xuXG4gICAgICBpZiAoY29udGV4dC5tZXRob2QgPT09IFwidGhyb3dcIikge1xuICAgICAgICBpZiAoZGVsZWdhdGUuaXRlcmF0b3IucmV0dXJuKSB7XG4gICAgICAgICAgLy8gSWYgdGhlIGRlbGVnYXRlIGl0ZXJhdG9yIGhhcyBhIHJldHVybiBtZXRob2QsIGdpdmUgaXQgYVxuICAgICAgICAgIC8vIGNoYW5jZSB0byBjbGVhbiB1cC5cbiAgICAgICAgICBjb250ZXh0Lm1ldGhvZCA9IFwicmV0dXJuXCI7XG4gICAgICAgICAgY29udGV4dC5hcmcgPSB1bmRlZmluZWQ7XG4gICAgICAgICAgbWF5YmVJbnZva2VEZWxlZ2F0ZShkZWxlZ2F0ZSwgY29udGV4dCk7XG5cbiAgICAgICAgICBpZiAoY29udGV4dC5tZXRob2QgPT09IFwidGhyb3dcIikge1xuICAgICAgICAgICAgLy8gSWYgbWF5YmVJbnZva2VEZWxlZ2F0ZShjb250ZXh0KSBjaGFuZ2VkIGNvbnRleHQubWV0aG9kIGZyb21cbiAgICAgICAgICAgIC8vIFwicmV0dXJuXCIgdG8gXCJ0aHJvd1wiLCBsZXQgdGhhdCBvdmVycmlkZSB0aGUgVHlwZUVycm9yIGJlbG93LlxuICAgICAgICAgICAgcmV0dXJuIENvbnRpbnVlU2VudGluZWw7XG4gICAgICAgICAgfVxuICAgICAgICB9XG5cbiAgICAgICAgY29udGV4dC5tZXRob2QgPSBcInRocm93XCI7XG4gICAgICAgIGNvbnRleHQuYXJnID0gbmV3IFR5cGVFcnJvcihcbiAgICAgICAgICBcIlRoZSBpdGVyYXRvciBkb2VzIG5vdCBwcm92aWRlIGEgJ3Rocm93JyBtZXRob2RcIik7XG4gICAgICB9XG5cbiAgICAgIHJldHVybiBDb250aW51ZVNlbnRpbmVsO1xuICAgIH1cblxuICAgIHZhciByZWNvcmQgPSB0cnlDYXRjaChtZXRob2QsIGRlbGVnYXRlLml0ZXJhdG9yLCBjb250ZXh0LmFyZyk7XG5cbiAgICBpZiAocmVjb3JkLnR5cGUgPT09IFwidGhyb3dcIikge1xuICAgICAgY29udGV4dC5tZXRob2QgPSBcInRocm93XCI7XG4gICAgICBjb250ZXh0LmFyZyA9IHJlY29yZC5hcmc7XG4gICAgICBjb250ZXh0LmRlbGVnYXRlID0gbnVsbDtcbiAgICAgIHJldHVybiBDb250aW51ZVNlbnRpbmVsO1xuICAgIH1cblxuICAgIHZhciBpbmZvID0gcmVjb3JkLmFyZztcblxuICAgIGlmICghIGluZm8pIHtcbiAgICAgIGNvbnRleHQubWV0aG9kID0gXCJ0aHJvd1wiO1xuICAgICAgY29udGV4dC5hcmcgPSBuZXcgVHlwZUVycm9yKFwiaXRlcmF0b3IgcmVzdWx0IGlzIG5vdCBhbiBvYmplY3RcIik7XG4gICAgICBjb250ZXh0LmRlbGVnYXRlID0gbnVsbDtcbiAgICAgIHJldHVybiBDb250aW51ZVNlbnRpbmVsO1xuICAgIH1cblxuICAgIGlmIChpbmZvLmRvbmUpIHtcbiAgICAgIC8vIEFzc2lnbiB0aGUgcmVzdWx0IG9mIHRoZSBmaW5pc2hlZCBkZWxlZ2F0ZSB0byB0aGUgdGVtcG9yYXJ5XG4gICAgICAvLyB2YXJpYWJsZSBzcGVjaWZpZWQgYnkgZGVsZWdhdGUucmVzdWx0TmFtZSAoc2VlIGRlbGVnYXRlWWllbGQpLlxuICAgICAgY29udGV4dFtkZWxlZ2F0ZS5yZXN1bHROYW1lXSA9IGluZm8udmFsdWU7XG5cbiAgICAgIC8vIFJlc3VtZSBleGVjdXRpb24gYXQgdGhlIGRlc2lyZWQgbG9jYXRpb24gKHNlZSBkZWxlZ2F0ZVlpZWxkKS5cbiAgICAgIGNvbnRleHQubmV4dCA9IGRlbGVnYXRlLm5leHRMb2M7XG5cbiAgICAgIC8vIElmIGNvbnRleHQubWV0aG9kIHdhcyBcInRocm93XCIgYnV0IHRoZSBkZWxlZ2F0ZSBoYW5kbGVkIHRoZVxuICAgICAgLy8gZXhjZXB0aW9uLCBsZXQgdGhlIG91dGVyIGdlbmVyYXRvciBwcm9jZWVkIG5vcm1hbGx5LiBJZlxuICAgICAgLy8gY29udGV4dC5tZXRob2Qgd2FzIFwibmV4dFwiLCBmb3JnZXQgY29udGV4dC5hcmcgc2luY2UgaXQgaGFzIGJlZW5cbiAgICAgIC8vIFwiY29uc3VtZWRcIiBieSB0aGUgZGVsZWdhdGUgaXRlcmF0b3IuIElmIGNvbnRleHQubWV0aG9kIHdhc1xuICAgICAgLy8gXCJyZXR1cm5cIiwgYWxsb3cgdGhlIG9yaWdpbmFsIC5yZXR1cm4gY2FsbCB0byBjb250aW51ZSBpbiB0aGVcbiAgICAgIC8vIG91dGVyIGdlbmVyYXRvci5cbiAgICAgIGlmIChjb250ZXh0Lm1ldGhvZCAhPT0gXCJyZXR1cm5cIikge1xuICAgICAgICBjb250ZXh0Lm1ldGhvZCA9IFwibmV4dFwiO1xuICAgICAgICBjb250ZXh0LmFyZyA9IHVuZGVmaW5lZDtcbiAgICAgIH1cblxuICAgIH0gZWxzZSB7XG4gICAgICAvLyBSZS15aWVsZCB0aGUgcmVzdWx0IHJldHVybmVkIGJ5IHRoZSBkZWxlZ2F0ZSBtZXRob2QuXG4gICAgICByZXR1cm4gaW5mbztcbiAgICB9XG5cbiAgICAvLyBUaGUgZGVsZWdhdGUgaXRlcmF0b3IgaXMgZmluaXNoZWQsIHNvIGZvcmdldCBpdCBhbmQgY29udGludWUgd2l0aFxuICAgIC8vIHRoZSBvdXRlciBnZW5lcmF0b3IuXG4gICAgY29udGV4dC5kZWxlZ2F0ZSA9IG51bGw7XG4gICAgcmV0dXJuIENvbnRpbnVlU2VudGluZWw7XG4gIH1cblxuICAvLyBEZWZpbmUgR2VuZXJhdG9yLnByb3RvdHlwZS57bmV4dCx0aHJvdyxyZXR1cm59IGluIHRlcm1zIG9mIHRoZVxuICAvLyB1bmlmaWVkIC5faW52b2tlIGhlbHBlciBtZXRob2QuXG4gIGRlZmluZUl0ZXJhdG9yTWV0aG9kcyhHcCk7XG5cbiAgR3BbdG9TdHJpbmdUYWdTeW1ib2xdID0gXCJHZW5lcmF0b3JcIjtcblxuICAvLyBBIEdlbmVyYXRvciBzaG91bGQgYWx3YXlzIHJldHVybiBpdHNlbGYgYXMgdGhlIGl0ZXJhdG9yIG9iamVjdCB3aGVuIHRoZVxuICAvLyBAQGl0ZXJhdG9yIGZ1bmN0aW9uIGlzIGNhbGxlZCBvbiBpdC4gU29tZSBicm93c2VycycgaW1wbGVtZW50YXRpb25zIG9mIHRoZVxuICAvLyBpdGVyYXRvciBwcm90b3R5cGUgY2hhaW4gaW5jb3JyZWN0bHkgaW1wbGVtZW50IHRoaXMsIGNhdXNpbmcgdGhlIEdlbmVyYXRvclxuICAvLyBvYmplY3QgdG8gbm90IGJlIHJldHVybmVkIGZyb20gdGhpcyBjYWxsLiBUaGlzIGVuc3VyZXMgdGhhdCBkb2Vzbid0IGhhcHBlbi5cbiAgLy8gU2VlIGh0dHBzOi8vZ2l0aHViLmNvbS9mYWNlYm9vay9yZWdlbmVyYXRvci9pc3N1ZXMvMjc0IGZvciBtb3JlIGRldGFpbHMuXG4gIEdwW2l0ZXJhdG9yU3ltYm9sXSA9IGZ1bmN0aW9uKCkge1xuICAgIHJldHVybiB0aGlzO1xuICB9O1xuXG4gIEdwLnRvU3RyaW5nID0gZnVuY3Rpb24oKSB7XG4gICAgcmV0dXJuIFwiW29iamVjdCBHZW5lcmF0b3JdXCI7XG4gIH07XG5cbiAgZnVuY3Rpb24gcHVzaFRyeUVudHJ5KGxvY3MpIHtcbiAgICB2YXIgZW50cnkgPSB7IHRyeUxvYzogbG9jc1swXSB9O1xuXG4gICAgaWYgKDEgaW4gbG9jcykge1xuICAgICAgZW50cnkuY2F0Y2hMb2MgPSBsb2NzWzFdO1xuICAgIH1cblxuICAgIGlmICgyIGluIGxvY3MpIHtcbiAgICAgIGVudHJ5LmZpbmFsbHlMb2MgPSBsb2NzWzJdO1xuICAgICAgZW50cnkuYWZ0ZXJMb2MgPSBsb2NzWzNdO1xuICAgIH1cblxuICAgIHRoaXMudHJ5RW50cmllcy5wdXNoKGVudHJ5KTtcbiAgfVxuXG4gIGZ1bmN0aW9uIHJlc2V0VHJ5RW50cnkoZW50cnkpIHtcbiAgICB2YXIgcmVjb3JkID0gZW50cnkuY29tcGxldGlvbiB8fCB7fTtcbiAgICByZWNvcmQudHlwZSA9IFwibm9ybWFsXCI7XG4gICAgZGVsZXRlIHJlY29yZC5hcmc7XG4gICAgZW50cnkuY29tcGxldGlvbiA9IHJlY29yZDtcbiAgfVxuXG4gIGZ1bmN0aW9uIENvbnRleHQodHJ5TG9jc0xpc3QpIHtcbiAgICAvLyBUaGUgcm9vdCBlbnRyeSBvYmplY3QgKGVmZmVjdGl2ZWx5IGEgdHJ5IHN0YXRlbWVudCB3aXRob3V0IGEgY2F0Y2hcbiAgICAvLyBvciBhIGZpbmFsbHkgYmxvY2spIGdpdmVzIHVzIGEgcGxhY2UgdG8gc3RvcmUgdmFsdWVzIHRocm93biBmcm9tXG4gICAgLy8gbG9jYXRpb25zIHdoZXJlIHRoZXJlIGlzIG5vIGVuY2xvc2luZyB0cnkgc3RhdGVtZW50LlxuICAgIHRoaXMudHJ5RW50cmllcyA9IFt7IHRyeUxvYzogXCJyb290XCIgfV07XG4gICAgdHJ5TG9jc0xpc3QuZm9yRWFjaChwdXNoVHJ5RW50cnksIHRoaXMpO1xuICAgIHRoaXMucmVzZXQodHJ1ZSk7XG4gIH1cblxuICBydW50aW1lLmtleXMgPSBmdW5jdGlvbihvYmplY3QpIHtcbiAgICB2YXIga2V5cyA9IFtdO1xuICAgIGZvciAodmFyIGtleSBpbiBvYmplY3QpIHtcbiAgICAgIGtleXMucHVzaChrZXkpO1xuICAgIH1cbiAgICBrZXlzLnJldmVyc2UoKTtcblxuICAgIC8vIFJhdGhlciB0aGFuIHJldHVybmluZyBhbiBvYmplY3Qgd2l0aCBhIG5leHQgbWV0aG9kLCB3ZSBrZWVwXG4gICAgLy8gdGhpbmdzIHNpbXBsZSBhbmQgcmV0dXJuIHRoZSBuZXh0IGZ1bmN0aW9uIGl0c2VsZi5cbiAgICByZXR1cm4gZnVuY3Rpb24gbmV4dCgpIHtcbiAgICAgIHdoaWxlIChrZXlzLmxlbmd0aCkge1xuICAgICAgICB2YXIga2V5ID0ga2V5cy5wb3AoKTtcbiAgICAgICAgaWYgKGtleSBpbiBvYmplY3QpIHtcbiAgICAgICAgICBuZXh0LnZhbHVlID0ga2V5O1xuICAgICAgICAgIG5leHQuZG9uZSA9IGZhbHNlO1xuICAgICAgICAgIHJldHVybiBuZXh0O1xuICAgICAgICB9XG4gICAgICB9XG5cbiAgICAgIC8vIFRvIGF2b2lkIGNyZWF0aW5nIGFuIGFkZGl0aW9uYWwgb2JqZWN0LCB3ZSBqdXN0IGhhbmcgdGhlIC52YWx1ZVxuICAgICAgLy8gYW5kIC5kb25lIHByb3BlcnRpZXMgb2ZmIHRoZSBuZXh0IGZ1bmN0aW9uIG9iamVjdCBpdHNlbGYuIFRoaXNcbiAgICAgIC8vIGFsc28gZW5zdXJlcyB0aGF0IHRoZSBtaW5pZmllciB3aWxsIG5vdCBhbm9ueW1pemUgdGhlIGZ1bmN0aW9uLlxuICAgICAgbmV4dC5kb25lID0gdHJ1ZTtcbiAgICAgIHJldHVybiBuZXh0O1xuICAgIH07XG4gIH07XG5cbiAgZnVuY3Rpb24gdmFsdWVzKGl0ZXJhYmxlKSB7XG4gICAgaWYgKGl0ZXJhYmxlKSB7XG4gICAgICB2YXIgaXRlcmF0b3JNZXRob2QgPSBpdGVyYWJsZVtpdGVyYXRvclN5bWJvbF07XG4gICAgICBpZiAoaXRlcmF0b3JNZXRob2QpIHtcbiAgICAgICAgcmV0dXJuIGl0ZXJhdG9yTWV0aG9kLmNhbGwoaXRlcmFibGUpO1xuICAgICAgfVxuXG4gICAgICBpZiAodHlwZW9mIGl0ZXJhYmxlLm5leHQgPT09IFwiZnVuY3Rpb25cIikge1xuICAgICAgICByZXR1cm4gaXRlcmFibGU7XG4gICAgICB9XG5cbiAgICAgIGlmICghaXNOYU4oaXRlcmFibGUubGVuZ3RoKSkge1xuICAgICAgICB2YXIgaSA9IC0xLCBuZXh0ID0gZnVuY3Rpb24gbmV4dCgpIHtcbiAgICAgICAgICB3aGlsZSAoKytpIDwgaXRlcmFibGUubGVuZ3RoKSB7XG4gICAgICAgICAgICBpZiAoaGFzT3duLmNhbGwoaXRlcmFibGUsIGkpKSB7XG4gICAgICAgICAgICAgIG5leHQudmFsdWUgPSBpdGVyYWJsZVtpXTtcbiAgICAgICAgICAgICAgbmV4dC5kb25lID0gZmFsc2U7XG4gICAgICAgICAgICAgIHJldHVybiBuZXh0O1xuICAgICAgICAgICAgfVxuICAgICAgICAgIH1cblxuICAgICAgICAgIG5leHQudmFsdWUgPSB1bmRlZmluZWQ7XG4gICAgICAgICAgbmV4dC5kb25lID0gdHJ1ZTtcblxuICAgICAgICAgIHJldHVybiBuZXh0O1xuICAgICAgICB9O1xuXG4gICAgICAgIHJldHVybiBuZXh0Lm5leHQgPSBuZXh0O1xuICAgICAgfVxuICAgIH1cblxuICAgIC8vIFJldHVybiBhbiBpdGVyYXRvciB3aXRoIG5vIHZhbHVlcy5cbiAgICByZXR1cm4geyBuZXh0OiBkb25lUmVzdWx0IH07XG4gIH1cbiAgcnVudGltZS52YWx1ZXMgPSB2YWx1ZXM7XG5cbiAgZnVuY3Rpb24gZG9uZVJlc3VsdCgpIHtcbiAgICByZXR1cm4geyB2YWx1ZTogdW5kZWZpbmVkLCBkb25lOiB0cnVlIH07XG4gIH1cblxuICBDb250ZXh0LnByb3RvdHlwZSA9IHtcbiAgICBjb25zdHJ1Y3RvcjogQ29udGV4dCxcblxuICAgIHJlc2V0OiBmdW5jdGlvbihza2lwVGVtcFJlc2V0KSB7XG4gICAgICB0aGlzLnByZXYgPSAwO1xuICAgICAgdGhpcy5uZXh0ID0gMDtcbiAgICAgIC8vIFJlc2V0dGluZyBjb250ZXh0Ll9zZW50IGZvciBsZWdhY3kgc3VwcG9ydCBvZiBCYWJlbCdzXG4gICAgICAvLyBmdW5jdGlvbi5zZW50IGltcGxlbWVudGF0aW9uLlxuICAgICAgdGhpcy5zZW50ID0gdGhpcy5fc2VudCA9IHVuZGVmaW5lZDtcbiAgICAgIHRoaXMuZG9uZSA9IGZhbHNlO1xuICAgICAgdGhpcy5kZWxlZ2F0ZSA9IG51bGw7XG5cbiAgICAgIHRoaXMubWV0aG9kID0gXCJuZXh0XCI7XG4gICAgICB0aGlzLmFyZyA9IHVuZGVmaW5lZDtcblxuICAgICAgdGhpcy50cnlFbnRyaWVzLmZvckVhY2gocmVzZXRUcnlFbnRyeSk7XG5cbiAgICAgIGlmICghc2tpcFRlbXBSZXNldCkge1xuICAgICAgICBmb3IgKHZhciBuYW1lIGluIHRoaXMpIHtcbiAgICAgICAgICAvLyBOb3Qgc3VyZSBhYm91dCB0aGUgb3B0aW1hbCBvcmRlciBvZiB0aGVzZSBjb25kaXRpb25zOlxuICAgICAgICAgIGlmIChuYW1lLmNoYXJBdCgwKSA9PT0gXCJ0XCIgJiZcbiAgICAgICAgICAgICAgaGFzT3duLmNhbGwodGhpcywgbmFtZSkgJiZcbiAgICAgICAgICAgICAgIWlzTmFOKCtuYW1lLnNsaWNlKDEpKSkge1xuICAgICAgICAgICAgdGhpc1tuYW1lXSA9IHVuZGVmaW5lZDtcbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9LFxuXG4gICAgc3RvcDogZnVuY3Rpb24oKSB7XG4gICAgICB0aGlzLmRvbmUgPSB0cnVlO1xuXG4gICAgICB2YXIgcm9vdEVudHJ5ID0gdGhpcy50cnlFbnRyaWVzWzBdO1xuICAgICAgdmFyIHJvb3RSZWNvcmQgPSByb290RW50cnkuY29tcGxldGlvbjtcbiAgICAgIGlmIChyb290UmVjb3JkLnR5cGUgPT09IFwidGhyb3dcIikge1xuICAgICAgICB0aHJvdyByb290UmVjb3JkLmFyZztcbiAgICAgIH1cblxuICAgICAgcmV0dXJuIHRoaXMucnZhbDtcbiAgICB9LFxuXG4gICAgZGlzcGF0Y2hFeGNlcHRpb246IGZ1bmN0aW9uKGV4Y2VwdGlvbikge1xuICAgICAgaWYgKHRoaXMuZG9uZSkge1xuICAgICAgICB0aHJvdyBleGNlcHRpb247XG4gICAgICB9XG5cbiAgICAgIHZhciBjb250ZXh0ID0gdGhpcztcbiAgICAgIGZ1bmN0aW9uIGhhbmRsZShsb2MsIGNhdWdodCkge1xuICAgICAgICByZWNvcmQudHlwZSA9IFwidGhyb3dcIjtcbiAgICAgICAgcmVjb3JkLmFyZyA9IGV4Y2VwdGlvbjtcbiAgICAgICAgY29udGV4dC5uZXh0ID0gbG9jO1xuXG4gICAgICAgIGlmIChjYXVnaHQpIHtcbiAgICAgICAgICAvLyBJZiB0aGUgZGlzcGF0Y2hlZCBleGNlcHRpb24gd2FzIGNhdWdodCBieSBhIGNhdGNoIGJsb2NrLFxuICAgICAgICAgIC8vIHRoZW4gbGV0IHRoYXQgY2F0Y2ggYmxvY2sgaGFuZGxlIHRoZSBleGNlcHRpb24gbm9ybWFsbHkuXG4gICAgICAgICAgY29udGV4dC5tZXRob2QgPSBcIm5leHRcIjtcbiAgICAgICAgICBjb250ZXh0LmFyZyA9IHVuZGVmaW5lZDtcbiAgICAgICAgfVxuXG4gICAgICAgIHJldHVybiAhISBjYXVnaHQ7XG4gICAgICB9XG5cbiAgICAgIGZvciAodmFyIGkgPSB0aGlzLnRyeUVudHJpZXMubGVuZ3RoIC0gMTsgaSA+PSAwOyAtLWkpIHtcbiAgICAgICAgdmFyIGVudHJ5ID0gdGhpcy50cnlFbnRyaWVzW2ldO1xuICAgICAgICB2YXIgcmVjb3JkID0gZW50cnkuY29tcGxldGlvbjtcblxuICAgICAgICBpZiAoZW50cnkudHJ5TG9jID09PSBcInJvb3RcIikge1xuICAgICAgICAgIC8vIEV4Y2VwdGlvbiB0aHJvd24gb3V0c2lkZSBvZiBhbnkgdHJ5IGJsb2NrIHRoYXQgY291bGQgaGFuZGxlXG4gICAgICAgICAgLy8gaXQsIHNvIHNldCB0aGUgY29tcGxldGlvbiB2YWx1ZSBvZiB0aGUgZW50aXJlIGZ1bmN0aW9uIHRvXG4gICAgICAgICAgLy8gdGhyb3cgdGhlIGV4Y2VwdGlvbi5cbiAgICAgICAgICByZXR1cm4gaGFuZGxlKFwiZW5kXCIpO1xuICAgICAgICB9XG5cbiAgICAgICAgaWYgKGVudHJ5LnRyeUxvYyA8PSB0aGlzLnByZXYpIHtcbiAgICAgICAgICB2YXIgaGFzQ2F0Y2ggPSBoYXNPd24uY2FsbChlbnRyeSwgXCJjYXRjaExvY1wiKTtcbiAgICAgICAgICB2YXIgaGFzRmluYWxseSA9IGhhc093bi5jYWxsKGVudHJ5LCBcImZpbmFsbHlMb2NcIik7XG5cbiAgICAgICAgICBpZiAoaGFzQ2F0Y2ggJiYgaGFzRmluYWxseSkge1xuICAgICAgICAgICAgaWYgKHRoaXMucHJldiA8IGVudHJ5LmNhdGNoTG9jKSB7XG4gICAgICAgICAgICAgIHJldHVybiBoYW5kbGUoZW50cnkuY2F0Y2hMb2MsIHRydWUpO1xuICAgICAgICAgICAgfSBlbHNlIGlmICh0aGlzLnByZXYgPCBlbnRyeS5maW5hbGx5TG9jKSB7XG4gICAgICAgICAgICAgIHJldHVybiBoYW5kbGUoZW50cnkuZmluYWxseUxvYyk7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICB9IGVsc2UgaWYgKGhhc0NhdGNoKSB7XG4gICAgICAgICAgICBpZiAodGhpcy5wcmV2IDwgZW50cnkuY2F0Y2hMb2MpIHtcbiAgICAgICAgICAgICAgcmV0dXJuIGhhbmRsZShlbnRyeS5jYXRjaExvYywgdHJ1ZSk7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICB9IGVsc2UgaWYgKGhhc0ZpbmFsbHkpIHtcbiAgICAgICAgICAgIGlmICh0aGlzLnByZXYgPCBlbnRyeS5maW5hbGx5TG9jKSB7XG4gICAgICAgICAgICAgIHJldHVybiBoYW5kbGUoZW50cnkuZmluYWxseUxvYyk7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKFwidHJ5IHN0YXRlbWVudCB3aXRob3V0IGNhdGNoIG9yIGZpbmFsbHlcIik7XG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICB9XG4gICAgfSxcblxuICAgIGFicnVwdDogZnVuY3Rpb24odHlwZSwgYXJnKSB7XG4gICAgICBmb3IgKHZhciBpID0gdGhpcy50cnlFbnRyaWVzLmxlbmd0aCAtIDE7IGkgPj0gMDsgLS1pKSB7XG4gICAgICAgIHZhciBlbnRyeSA9IHRoaXMudHJ5RW50cmllc1tpXTtcbiAgICAgICAgaWYgKGVudHJ5LnRyeUxvYyA8PSB0aGlzLnByZXYgJiZcbiAgICAgICAgICAgIGhhc093bi5jYWxsKGVudHJ5LCBcImZpbmFsbHlMb2NcIikgJiZcbiAgICAgICAgICAgIHRoaXMucHJldiA8IGVudHJ5LmZpbmFsbHlMb2MpIHtcbiAgICAgICAgICB2YXIgZmluYWxseUVudHJ5ID0gZW50cnk7XG4gICAgICAgICAgYnJlYWs7XG4gICAgICAgIH1cbiAgICAgIH1cblxuICAgICAgaWYgKGZpbmFsbHlFbnRyeSAmJlxuICAgICAgICAgICh0eXBlID09PSBcImJyZWFrXCIgfHxcbiAgICAgICAgICAgdHlwZSA9PT0gXCJjb250aW51ZVwiKSAmJlxuICAgICAgICAgIGZpbmFsbHlFbnRyeS50cnlMb2MgPD0gYXJnICYmXG4gICAgICAgICAgYXJnIDw9IGZpbmFsbHlFbnRyeS5maW5hbGx5TG9jKSB7XG4gICAgICAgIC8vIElnbm9yZSB0aGUgZmluYWxseSBlbnRyeSBpZiBjb250cm9sIGlzIG5vdCBqdW1waW5nIHRvIGFcbiAgICAgICAgLy8gbG9jYXRpb24gb3V0c2lkZSB0aGUgdHJ5L2NhdGNoIGJsb2NrLlxuICAgICAgICBmaW5hbGx5RW50cnkgPSBudWxsO1xuICAgICAgfVxuXG4gICAgICB2YXIgcmVjb3JkID0gZmluYWxseUVudHJ5ID8gZmluYWxseUVudHJ5LmNvbXBsZXRpb24gOiB7fTtcbiAgICAgIHJlY29yZC50eXBlID0gdHlwZTtcbiAgICAgIHJlY29yZC5hcmcgPSBhcmc7XG5cbiAgICAgIGlmIChmaW5hbGx5RW50cnkpIHtcbiAgICAgICAgdGhpcy5tZXRob2QgPSBcIm5leHRcIjtcbiAgICAgICAgdGhpcy5uZXh0ID0gZmluYWxseUVudHJ5LmZpbmFsbHlMb2M7XG4gICAgICAgIHJldHVybiBDb250aW51ZVNlbnRpbmVsO1xuICAgICAgfVxuXG4gICAgICByZXR1cm4gdGhpcy5jb21wbGV0ZShyZWNvcmQpO1xuICAgIH0sXG5cbiAgICBjb21wbGV0ZTogZnVuY3Rpb24ocmVjb3JkLCBhZnRlckxvYykge1xuICAgICAgaWYgKHJlY29yZC50eXBlID09PSBcInRocm93XCIpIHtcbiAgICAgICAgdGhyb3cgcmVjb3JkLmFyZztcbiAgICAgIH1cblxuICAgICAgaWYgKHJlY29yZC50eXBlID09PSBcImJyZWFrXCIgfHxcbiAgICAgICAgICByZWNvcmQudHlwZSA9PT0gXCJjb250aW51ZVwiKSB7XG4gICAgICAgIHRoaXMubmV4dCA9IHJlY29yZC5hcmc7XG4gICAgICB9IGVsc2UgaWYgKHJlY29yZC50eXBlID09PSBcInJldHVyblwiKSB7XG4gICAgICAgIHRoaXMucnZhbCA9IHRoaXMuYXJnID0gcmVjb3JkLmFyZztcbiAgICAgICAgdGhpcy5tZXRob2QgPSBcInJldHVyblwiO1xuICAgICAgICB0aGlzLm5leHQgPSBcImVuZFwiO1xuICAgICAgfSBlbHNlIGlmIChyZWNvcmQudHlwZSA9PT0gXCJub3JtYWxcIiAmJiBhZnRlckxvYykge1xuICAgICAgICB0aGlzLm5leHQgPSBhZnRlckxvYztcbiAgICAgIH1cblxuICAgICAgcmV0dXJuIENvbnRpbnVlU2VudGluZWw7XG4gICAgfSxcblxuICAgIGZpbmlzaDogZnVuY3Rpb24oZmluYWxseUxvYykge1xuICAgICAgZm9yICh2YXIgaSA9IHRoaXMudHJ5RW50cmllcy5sZW5ndGggLSAxOyBpID49IDA7IC0taSkge1xuICAgICAgICB2YXIgZW50cnkgPSB0aGlzLnRyeUVudHJpZXNbaV07XG4gICAgICAgIGlmIChlbnRyeS5maW5hbGx5TG9jID09PSBmaW5hbGx5TG9jKSB7XG4gICAgICAgICAgdGhpcy5jb21wbGV0ZShlbnRyeS5jb21wbGV0aW9uLCBlbnRyeS5hZnRlckxvYyk7XG4gICAgICAgICAgcmVzZXRUcnlFbnRyeShlbnRyeSk7XG4gICAgICAgICAgcmV0dXJuIENvbnRpbnVlU2VudGluZWw7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9LFxuXG4gICAgXCJjYXRjaFwiOiBmdW5jdGlvbih0cnlMb2MpIHtcbiAgICAgIGZvciAodmFyIGkgPSB0aGlzLnRyeUVudHJpZXMubGVuZ3RoIC0gMTsgaSA+PSAwOyAtLWkpIHtcbiAgICAgICAgdmFyIGVudHJ5ID0gdGhpcy50cnlFbnRyaWVzW2ldO1xuICAgICAgICBpZiAoZW50cnkudHJ5TG9jID09PSB0cnlMb2MpIHtcbiAgICAgICAgICB2YXIgcmVjb3JkID0gZW50cnkuY29tcGxldGlvbjtcbiAgICAgICAgICBpZiAocmVjb3JkLnR5cGUgPT09IFwidGhyb3dcIikge1xuICAgICAgICAgICAgdmFyIHRocm93biA9IHJlY29yZC5hcmc7XG4gICAgICAgICAgICByZXNldFRyeUVudHJ5KGVudHJ5KTtcbiAgICAgICAgICB9XG4gICAgICAgICAgcmV0dXJuIHRocm93bjtcbiAgICAgICAgfVxuICAgICAgfVxuXG4gICAgICAvLyBUaGUgY29udGV4dC5jYXRjaCBtZXRob2QgbXVzdCBvbmx5IGJlIGNhbGxlZCB3aXRoIGEgbG9jYXRpb25cbiAgICAgIC8vIGFyZ3VtZW50IHRoYXQgY29ycmVzcG9uZHMgdG8gYSBrbm93biBjYXRjaCBibG9jay5cbiAgICAgIHRocm93IG5ldyBFcnJvcihcImlsbGVnYWwgY2F0Y2ggYXR0ZW1wdFwiKTtcbiAgICB9LFxuXG4gICAgZGVsZWdhdGVZaWVsZDogZnVuY3Rpb24oaXRlcmFibGUsIHJlc3VsdE5hbWUsIG5leHRMb2MpIHtcbiAgICAgIHRoaXMuZGVsZWdhdGUgPSB7XG4gICAgICAgIGl0ZXJhdG9yOiB2YWx1ZXMoaXRlcmFibGUpLFxuICAgICAgICByZXN1bHROYW1lOiByZXN1bHROYW1lLFxuICAgICAgICBuZXh0TG9jOiBuZXh0TG9jXG4gICAgICB9O1xuXG4gICAgICBpZiAodGhpcy5tZXRob2QgPT09IFwibmV4dFwiKSB7XG4gICAgICAgIC8vIERlbGliZXJhdGVseSBmb3JnZXQgdGhlIGxhc3Qgc2VudCB2YWx1ZSBzbyB0aGF0IHdlIGRvbid0XG4gICAgICAgIC8vIGFjY2lkZW50YWxseSBwYXNzIGl0IG9uIHRvIHRoZSBkZWxlZ2F0ZS5cbiAgICAgICAgdGhpcy5hcmcgPSB1bmRlZmluZWQ7XG4gICAgICB9XG5cbiAgICAgIHJldHVybiBDb250aW51ZVNlbnRpbmVsO1xuICAgIH1cbiAgfTtcbn0pKFxuICAvLyBBbW9uZyB0aGUgdmFyaW91cyB0cmlja3MgZm9yIG9idGFpbmluZyBhIHJlZmVyZW5jZSB0byB0aGUgZ2xvYmFsXG4gIC8vIG9iamVjdCwgdGhpcyBzZWVtcyB0byBiZSB0aGUgbW9zdCByZWxpYWJsZSB0ZWNobmlxdWUgdGhhdCBkb2VzIG5vdFxuICAvLyB1c2UgaW5kaXJlY3QgZXZhbCAod2hpY2ggdmlvbGF0ZXMgQ29udGVudCBTZWN1cml0eSBQb2xpY3kpLlxuICB0eXBlb2YgZ2xvYmFsID09PSBcIm9iamVjdFwiID8gZ2xvYmFsIDpcbiAgdHlwZW9mIHdpbmRvdyA9PT0gXCJvYmplY3RcIiA/IHdpbmRvdyA6XG4gIHR5cGVvZiBzZWxmID09PSBcIm9iamVjdFwiID8gc2VsZiA6IHRoaXNcbik7XG4iLCJ2YXIgJGl0ZXJhdG9ycyA9IHJlcXVpcmUoJy4vZXM2LmFycmF5Lml0ZXJhdG9yJyk7XG52YXIgZ2V0S2V5cyA9IHJlcXVpcmUoJy4vX29iamVjdC1rZXlzJyk7XG52YXIgcmVkZWZpbmUgPSByZXF1aXJlKCcuL19yZWRlZmluZScpO1xudmFyIGdsb2JhbCA9IHJlcXVpcmUoJy4vX2dsb2JhbCcpO1xudmFyIGhpZGUgPSByZXF1aXJlKCcuL19oaWRlJyk7XG52YXIgSXRlcmF0b3JzID0gcmVxdWlyZSgnLi9faXRlcmF0b3JzJyk7XG52YXIgd2tzID0gcmVxdWlyZSgnLi9fd2tzJyk7XG52YXIgSVRFUkFUT1IgPSB3a3MoJ2l0ZXJhdG9yJyk7XG52YXIgVE9fU1RSSU5HX1RBRyA9IHdrcygndG9TdHJpbmdUYWcnKTtcbnZhciBBcnJheVZhbHVlcyA9IEl0ZXJhdG9ycy5BcnJheTtcblxudmFyIERPTUl0ZXJhYmxlcyA9IHtcbiAgQ1NTUnVsZUxpc3Q6IHRydWUsIC8vIFRPRE86IE5vdCBzcGVjIGNvbXBsaWFudCwgc2hvdWxkIGJlIGZhbHNlLlxuICBDU1NTdHlsZURlY2xhcmF0aW9uOiBmYWxzZSxcbiAgQ1NTVmFsdWVMaXN0OiBmYWxzZSxcbiAgQ2xpZW50UmVjdExpc3Q6IGZhbHNlLFxuICBET01SZWN0TGlzdDogZmFsc2UsXG4gIERPTVN0cmluZ0xpc3Q6IGZhbHNlLFxuICBET01Ub2tlbkxpc3Q6IHRydWUsXG4gIERhdGFUcmFuc2Zlckl0ZW1MaXN0OiBmYWxzZSxcbiAgRmlsZUxpc3Q6IGZhbHNlLFxuICBIVE1MQWxsQ29sbGVjdGlvbjogZmFsc2UsXG4gIEhUTUxDb2xsZWN0aW9uOiBmYWxzZSxcbiAgSFRNTEZvcm1FbGVtZW50OiBmYWxzZSxcbiAgSFRNTFNlbGVjdEVsZW1lbnQ6IGZhbHNlLFxuICBNZWRpYUxpc3Q6IHRydWUsIC8vIFRPRE86IE5vdCBzcGVjIGNvbXBsaWFudCwgc2hvdWxkIGJlIGZhbHNlLlxuICBNaW1lVHlwZUFycmF5OiBmYWxzZSxcbiAgTmFtZWROb2RlTWFwOiBmYWxzZSxcbiAgTm9kZUxpc3Q6IHRydWUsXG4gIFBhaW50UmVxdWVzdExpc3Q6IGZhbHNlLFxuICBQbHVnaW46IGZhbHNlLFxuICBQbHVnaW5BcnJheTogZmFsc2UsXG4gIFNWR0xlbmd0aExpc3Q6IGZhbHNlLFxuICBTVkdOdW1iZXJMaXN0OiBmYWxzZSxcbiAgU1ZHUGF0aFNlZ0xpc3Q6IGZhbHNlLFxuICBTVkdQb2ludExpc3Q6IGZhbHNlLFxuICBTVkdTdHJpbmdMaXN0OiBmYWxzZSxcbiAgU1ZHVHJhbnNmb3JtTGlzdDogZmFsc2UsXG4gIFNvdXJjZUJ1ZmZlckxpc3Q6IGZhbHNlLFxuICBTdHlsZVNoZWV0TGlzdDogdHJ1ZSwgLy8gVE9ETzogTm90IHNwZWMgY29tcGxpYW50LCBzaG91bGQgYmUgZmFsc2UuXG4gIFRleHRUcmFja0N1ZUxpc3Q6IGZhbHNlLFxuICBUZXh0VHJhY2tMaXN0OiBmYWxzZSxcbiAgVG91Y2hMaXN0OiBmYWxzZVxufTtcblxuZm9yICh2YXIgY29sbGVjdGlvbnMgPSBnZXRLZXlzKERPTUl0ZXJhYmxlcyksIGkgPSAwOyBpIDwgY29sbGVjdGlvbnMubGVuZ3RoOyBpKyspIHtcbiAgdmFyIE5BTUUgPSBjb2xsZWN0aW9uc1tpXTtcbiAgdmFyIGV4cGxpY2l0ID0gRE9NSXRlcmFibGVzW05BTUVdO1xuICB2YXIgQ29sbGVjdGlvbiA9IGdsb2JhbFtOQU1FXTtcbiAgdmFyIHByb3RvID0gQ29sbGVjdGlvbiAmJiBDb2xsZWN0aW9uLnByb3RvdHlwZTtcbiAgdmFyIGtleTtcbiAgaWYgKHByb3RvKSB7XG4gICAgaWYgKCFwcm90b1tJVEVSQVRPUl0pIGhpZGUocHJvdG8sIElURVJBVE9SLCBBcnJheVZhbHVlcyk7XG4gICAgaWYgKCFwcm90b1tUT19TVFJJTkdfVEFHXSkgaGlkZShwcm90bywgVE9fU1RSSU5HX1RBRywgTkFNRSk7XG4gICAgSXRlcmF0b3JzW05BTUVdID0gQXJyYXlWYWx1ZXM7XG4gICAgaWYgKGV4cGxpY2l0KSBmb3IgKGtleSBpbiAkaXRlcmF0b3JzKSBpZiAoIXByb3RvW2tleV0pIHJlZGVmaW5lKHByb3RvLCBrZXksICRpdGVyYXRvcnNba2V5XSwgdHJ1ZSk7XG4gIH1cbn1cbiIsInZhciAkZXhwb3J0ID0gcmVxdWlyZSgnLi9fZXhwb3J0Jyk7XG52YXIgJHRhc2sgPSByZXF1aXJlKCcuL190YXNrJyk7XG4kZXhwb3J0KCRleHBvcnQuRyArICRleHBvcnQuQiwge1xuICBzZXRJbW1lZGlhdGU6ICR0YXNrLnNldCxcbiAgY2xlYXJJbW1lZGlhdGU6ICR0YXNrLmNsZWFyXG59KTtcbiIsIi8vIGllOS0gc2V0VGltZW91dCAmIHNldEludGVydmFsIGFkZGl0aW9uYWwgcGFyYW1ldGVycyBmaXhcbnZhciBnbG9iYWwgPSByZXF1aXJlKCcuL19nbG9iYWwnKTtcbnZhciAkZXhwb3J0ID0gcmVxdWlyZSgnLi9fZXhwb3J0Jyk7XG52YXIgdXNlckFnZW50ID0gcmVxdWlyZSgnLi9fdXNlci1hZ2VudCcpO1xudmFyIHNsaWNlID0gW10uc2xpY2U7XG52YXIgTVNJRSA9IC9NU0lFIC5cXC4vLnRlc3QodXNlckFnZW50KTsgLy8gPC0gZGlydHkgaWU5LSBjaGVja1xudmFyIHdyYXAgPSBmdW5jdGlvbiAoc2V0KSB7XG4gIHJldHVybiBmdW5jdGlvbiAoZm4sIHRpbWUgLyogLCAuLi5hcmdzICovKSB7XG4gICAgdmFyIGJvdW5kQXJncyA9IGFyZ3VtZW50cy5sZW5ndGggPiAyO1xuICAgIHZhciBhcmdzID0gYm91bmRBcmdzID8gc2xpY2UuY2FsbChhcmd1bWVudHMsIDIpIDogZmFsc2U7XG4gICAgcmV0dXJuIHNldChib3VuZEFyZ3MgPyBmdW5jdGlvbiAoKSB7XG4gICAgICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgbm8tbmV3LWZ1bmNcbiAgICAgICh0eXBlb2YgZm4gPT0gJ2Z1bmN0aW9uJyA/IGZuIDogRnVuY3Rpb24oZm4pKS5hcHBseSh0aGlzLCBhcmdzKTtcbiAgICB9IDogZm4sIHRpbWUpO1xuICB9O1xufTtcbiRleHBvcnQoJGV4cG9ydC5HICsgJGV4cG9ydC5CICsgJGV4cG9ydC5GICogTVNJRSwge1xuICBzZXRUaW1lb3V0OiB3cmFwKGdsb2JhbC5zZXRUaW1lb3V0KSxcbiAgc2V0SW50ZXJ2YWw6IHdyYXAoZ2xvYmFsLnNldEludGVydmFsKVxufSk7XG4iLCIndXNlIHN0cmljdCc7XG4vLyBodHRwczovL2dpdGh1Yi5jb20vemVucGFyc2luZy9lcy1vYnNlcnZhYmxlXG52YXIgJGV4cG9ydCA9IHJlcXVpcmUoJy4vX2V4cG9ydCcpO1xudmFyIGdsb2JhbCA9IHJlcXVpcmUoJy4vX2dsb2JhbCcpO1xudmFyIGNvcmUgPSByZXF1aXJlKCcuL19jb3JlJyk7XG52YXIgbWljcm90YXNrID0gcmVxdWlyZSgnLi9fbWljcm90YXNrJykoKTtcbnZhciBPQlNFUlZBQkxFID0gcmVxdWlyZSgnLi9fd2tzJykoJ29ic2VydmFibGUnKTtcbnZhciBhRnVuY3Rpb24gPSByZXF1aXJlKCcuL19hLWZ1bmN0aW9uJyk7XG52YXIgYW5PYmplY3QgPSByZXF1aXJlKCcuL19hbi1vYmplY3QnKTtcbnZhciBhbkluc3RhbmNlID0gcmVxdWlyZSgnLi9fYW4taW5zdGFuY2UnKTtcbnZhciByZWRlZmluZUFsbCA9IHJlcXVpcmUoJy4vX3JlZGVmaW5lLWFsbCcpO1xudmFyIGhpZGUgPSByZXF1aXJlKCcuL19oaWRlJyk7XG52YXIgZm9yT2YgPSByZXF1aXJlKCcuL19mb3Itb2YnKTtcbnZhciBSRVRVUk4gPSBmb3JPZi5SRVRVUk47XG5cbnZhciBnZXRNZXRob2QgPSBmdW5jdGlvbiAoZm4pIHtcbiAgcmV0dXJuIGZuID09IG51bGwgPyB1bmRlZmluZWQgOiBhRnVuY3Rpb24oZm4pO1xufTtcblxudmFyIGNsZWFudXBTdWJzY3JpcHRpb24gPSBmdW5jdGlvbiAoc3Vic2NyaXB0aW9uKSB7XG4gIHZhciBjbGVhbnVwID0gc3Vic2NyaXB0aW9uLl9jO1xuICBpZiAoY2xlYW51cCkge1xuICAgIHN1YnNjcmlwdGlvbi5fYyA9IHVuZGVmaW5lZDtcbiAgICBjbGVhbnVwKCk7XG4gIH1cbn07XG5cbnZhciBzdWJzY3JpcHRpb25DbG9zZWQgPSBmdW5jdGlvbiAoc3Vic2NyaXB0aW9uKSB7XG4gIHJldHVybiBzdWJzY3JpcHRpb24uX28gPT09IHVuZGVmaW5lZDtcbn07XG5cbnZhciBjbG9zZVN1YnNjcmlwdGlvbiA9IGZ1bmN0aW9uIChzdWJzY3JpcHRpb24pIHtcbiAgaWYgKCFzdWJzY3JpcHRpb25DbG9zZWQoc3Vic2NyaXB0aW9uKSkge1xuICAgIHN1YnNjcmlwdGlvbi5fbyA9IHVuZGVmaW5lZDtcbiAgICBjbGVhbnVwU3Vic2NyaXB0aW9uKHN1YnNjcmlwdGlvbik7XG4gIH1cbn07XG5cbnZhciBTdWJzY3JpcHRpb24gPSBmdW5jdGlvbiAob2JzZXJ2ZXIsIHN1YnNjcmliZXIpIHtcbiAgYW5PYmplY3Qob2JzZXJ2ZXIpO1xuICB0aGlzLl9jID0gdW5kZWZpbmVkO1xuICB0aGlzLl9vID0gb2JzZXJ2ZXI7XG4gIG9ic2VydmVyID0gbmV3IFN1YnNjcmlwdGlvbk9ic2VydmVyKHRoaXMpO1xuICB0cnkge1xuICAgIHZhciBjbGVhbnVwID0gc3Vic2NyaWJlcihvYnNlcnZlcik7XG4gICAgdmFyIHN1YnNjcmlwdGlvbiA9IGNsZWFudXA7XG4gICAgaWYgKGNsZWFudXAgIT0gbnVsbCkge1xuICAgICAgaWYgKHR5cGVvZiBjbGVhbnVwLnVuc3Vic2NyaWJlID09PSAnZnVuY3Rpb24nKSBjbGVhbnVwID0gZnVuY3Rpb24gKCkgeyBzdWJzY3JpcHRpb24udW5zdWJzY3JpYmUoKTsgfTtcbiAgICAgIGVsc2UgYUZ1bmN0aW9uKGNsZWFudXApO1xuICAgICAgdGhpcy5fYyA9IGNsZWFudXA7XG4gICAgfVxuICB9IGNhdGNoIChlKSB7XG4gICAgb2JzZXJ2ZXIuZXJyb3IoZSk7XG4gICAgcmV0dXJuO1xuICB9IGlmIChzdWJzY3JpcHRpb25DbG9zZWQodGhpcykpIGNsZWFudXBTdWJzY3JpcHRpb24odGhpcyk7XG59O1xuXG5TdWJzY3JpcHRpb24ucHJvdG90eXBlID0gcmVkZWZpbmVBbGwoe30sIHtcbiAgdW5zdWJzY3JpYmU6IGZ1bmN0aW9uIHVuc3Vic2NyaWJlKCkgeyBjbG9zZVN1YnNjcmlwdGlvbih0aGlzKTsgfVxufSk7XG5cbnZhciBTdWJzY3JpcHRpb25PYnNlcnZlciA9IGZ1bmN0aW9uIChzdWJzY3JpcHRpb24pIHtcbiAgdGhpcy5fcyA9IHN1YnNjcmlwdGlvbjtcbn07XG5cblN1YnNjcmlwdGlvbk9ic2VydmVyLnByb3RvdHlwZSA9IHJlZGVmaW5lQWxsKHt9LCB7XG4gIG5leHQ6IGZ1bmN0aW9uIG5leHQodmFsdWUpIHtcbiAgICB2YXIgc3Vic2NyaXB0aW9uID0gdGhpcy5fcztcbiAgICBpZiAoIXN1YnNjcmlwdGlvbkNsb3NlZChzdWJzY3JpcHRpb24pKSB7XG4gICAgICB2YXIgb2JzZXJ2ZXIgPSBzdWJzY3JpcHRpb24uX287XG4gICAgICB0cnkge1xuICAgICAgICB2YXIgbSA9IGdldE1ldGhvZChvYnNlcnZlci5uZXh0KTtcbiAgICAgICAgaWYgKG0pIHJldHVybiBtLmNhbGwob2JzZXJ2ZXIsIHZhbHVlKTtcbiAgICAgIH0gY2F0Y2ggKGUpIHtcbiAgICAgICAgdHJ5IHtcbiAgICAgICAgICBjbG9zZVN1YnNjcmlwdGlvbihzdWJzY3JpcHRpb24pO1xuICAgICAgICB9IGZpbmFsbHkge1xuICAgICAgICAgIHRocm93IGU7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9XG4gIH0sXG4gIGVycm9yOiBmdW5jdGlvbiBlcnJvcih2YWx1ZSkge1xuICAgIHZhciBzdWJzY3JpcHRpb24gPSB0aGlzLl9zO1xuICAgIGlmIChzdWJzY3JpcHRpb25DbG9zZWQoc3Vic2NyaXB0aW9uKSkgdGhyb3cgdmFsdWU7XG4gICAgdmFyIG9ic2VydmVyID0gc3Vic2NyaXB0aW9uLl9vO1xuICAgIHN1YnNjcmlwdGlvbi5fbyA9IHVuZGVmaW5lZDtcbiAgICB0cnkge1xuICAgICAgdmFyIG0gPSBnZXRNZXRob2Qob2JzZXJ2ZXIuZXJyb3IpO1xuICAgICAgaWYgKCFtKSB0aHJvdyB2YWx1ZTtcbiAgICAgIHZhbHVlID0gbS5jYWxsKG9ic2VydmVyLCB2YWx1ZSk7XG4gICAgfSBjYXRjaCAoZSkge1xuICAgICAgdHJ5IHtcbiAgICAgICAgY2xlYW51cFN1YnNjcmlwdGlvbihzdWJzY3JpcHRpb24pO1xuICAgICAgfSBmaW5hbGx5IHtcbiAgICAgICAgdGhyb3cgZTtcbiAgICAgIH1cbiAgICB9IGNsZWFudXBTdWJzY3JpcHRpb24oc3Vic2NyaXB0aW9uKTtcbiAgICByZXR1cm4gdmFsdWU7XG4gIH0sXG4gIGNvbXBsZXRlOiBmdW5jdGlvbiBjb21wbGV0ZSh2YWx1ZSkge1xuICAgIHZhciBzdWJzY3JpcHRpb24gPSB0aGlzLl9zO1xuICAgIGlmICghc3Vic2NyaXB0aW9uQ2xvc2VkKHN1YnNjcmlwdGlvbikpIHtcbiAgICAgIHZhciBvYnNlcnZlciA9IHN1YnNjcmlwdGlvbi5fbztcbiAgICAgIHN1YnNjcmlwdGlvbi5fbyA9IHVuZGVmaW5lZDtcbiAgICAgIHRyeSB7XG4gICAgICAgIHZhciBtID0gZ2V0TWV0aG9kKG9ic2VydmVyLmNvbXBsZXRlKTtcbiAgICAgICAgdmFsdWUgPSBtID8gbS5jYWxsKG9ic2VydmVyLCB2YWx1ZSkgOiB1bmRlZmluZWQ7XG4gICAgICB9IGNhdGNoIChlKSB7XG4gICAgICAgIHRyeSB7XG4gICAgICAgICAgY2xlYW51cFN1YnNjcmlwdGlvbihzdWJzY3JpcHRpb24pO1xuICAgICAgICB9IGZpbmFsbHkge1xuICAgICAgICAgIHRocm93IGU7XG4gICAgICAgIH1cbiAgICAgIH0gY2xlYW51cFN1YnNjcmlwdGlvbihzdWJzY3JpcHRpb24pO1xuICAgICAgcmV0dXJuIHZhbHVlO1xuICAgIH1cbiAgfVxufSk7XG5cbnZhciAkT2JzZXJ2YWJsZSA9IGZ1bmN0aW9uIE9ic2VydmFibGUoc3Vic2NyaWJlcikge1xuICBhbkluc3RhbmNlKHRoaXMsICRPYnNlcnZhYmxlLCAnT2JzZXJ2YWJsZScsICdfZicpLl9mID0gYUZ1bmN0aW9uKHN1YnNjcmliZXIpO1xufTtcblxucmVkZWZpbmVBbGwoJE9ic2VydmFibGUucHJvdG90eXBlLCB7XG4gIHN1YnNjcmliZTogZnVuY3Rpb24gc3Vic2NyaWJlKG9ic2VydmVyKSB7XG4gICAgcmV0dXJuIG5ldyBTdWJzY3JpcHRpb24ob2JzZXJ2ZXIsIHRoaXMuX2YpO1xuICB9LFxuICBmb3JFYWNoOiBmdW5jdGlvbiBmb3JFYWNoKGZuKSB7XG4gICAgdmFyIHRoYXQgPSB0aGlzO1xuICAgIHJldHVybiBuZXcgKGNvcmUuUHJvbWlzZSB8fCBnbG9iYWwuUHJvbWlzZSkoZnVuY3Rpb24gKHJlc29sdmUsIHJlamVjdCkge1xuICAgICAgYUZ1bmN0aW9uKGZuKTtcbiAgICAgIHZhciBzdWJzY3JpcHRpb24gPSB0aGF0LnN1YnNjcmliZSh7XG4gICAgICAgIG5leHQ6IGZ1bmN0aW9uICh2YWx1ZSkge1xuICAgICAgICAgIHRyeSB7XG4gICAgICAgICAgICByZXR1cm4gZm4odmFsdWUpO1xuICAgICAgICAgIH0gY2F0Y2ggKGUpIHtcbiAgICAgICAgICAgIHJlamVjdChlKTtcbiAgICAgICAgICAgIHN1YnNjcmlwdGlvbi51bnN1YnNjcmliZSgpO1xuICAgICAgICAgIH1cbiAgICAgICAgfSxcbiAgICAgICAgZXJyb3I6IHJlamVjdCxcbiAgICAgICAgY29tcGxldGU6IHJlc29sdmVcbiAgICAgIH0pO1xuICAgIH0pO1xuICB9XG59KTtcblxucmVkZWZpbmVBbGwoJE9ic2VydmFibGUsIHtcbiAgZnJvbTogZnVuY3Rpb24gZnJvbSh4KSB7XG4gICAgdmFyIEMgPSB0eXBlb2YgdGhpcyA9PT0gJ2Z1bmN0aW9uJyA/IHRoaXMgOiAkT2JzZXJ2YWJsZTtcbiAgICB2YXIgbWV0aG9kID0gZ2V0TWV0aG9kKGFuT2JqZWN0KHgpW09CU0VSVkFCTEVdKTtcbiAgICBpZiAobWV0aG9kKSB7XG4gICAgICB2YXIgb2JzZXJ2YWJsZSA9IGFuT2JqZWN0KG1ldGhvZC5jYWxsKHgpKTtcbiAgICAgIHJldHVybiBvYnNlcnZhYmxlLmNvbnN0cnVjdG9yID09PSBDID8gb2JzZXJ2YWJsZSA6IG5ldyBDKGZ1bmN0aW9uIChvYnNlcnZlcikge1xuICAgICAgICByZXR1cm4gb2JzZXJ2YWJsZS5zdWJzY3JpYmUob2JzZXJ2ZXIpO1xuICAgICAgfSk7XG4gICAgfVxuICAgIHJldHVybiBuZXcgQyhmdW5jdGlvbiAob2JzZXJ2ZXIpIHtcbiAgICAgIHZhciBkb25lID0gZmFsc2U7XG4gICAgICBtaWNyb3Rhc2soZnVuY3Rpb24gKCkge1xuICAgICAgICBpZiAoIWRvbmUpIHtcbiAgICAgICAgICB0cnkge1xuICAgICAgICAgICAgaWYgKGZvck9mKHgsIGZhbHNlLCBmdW5jdGlvbiAoaXQpIHtcbiAgICAgICAgICAgICAgb2JzZXJ2ZXIubmV4dChpdCk7XG4gICAgICAgICAgICAgIGlmIChkb25lKSByZXR1cm4gUkVUVVJOO1xuICAgICAgICAgICAgfSkgPT09IFJFVFVSTikgcmV0dXJuO1xuICAgICAgICAgIH0gY2F0Y2ggKGUpIHtcbiAgICAgICAgICAgIGlmIChkb25lKSB0aHJvdyBlO1xuICAgICAgICAgICAgb2JzZXJ2ZXIuZXJyb3IoZSk7XG4gICAgICAgICAgICByZXR1cm47XG4gICAgICAgICAgfSBvYnNlcnZlci5jb21wbGV0ZSgpO1xuICAgICAgICB9XG4gICAgICB9KTtcbiAgICAgIHJldHVybiBmdW5jdGlvbiAoKSB7IGRvbmUgPSB0cnVlOyB9O1xuICAgIH0pO1xuICB9LFxuICBvZjogZnVuY3Rpb24gb2YoKSB7XG4gICAgZm9yICh2YXIgaSA9IDAsIGwgPSBhcmd1bWVudHMubGVuZ3RoLCBpdGVtcyA9IG5ldyBBcnJheShsKTsgaSA8IGw7KSBpdGVtc1tpXSA9IGFyZ3VtZW50c1tpKytdO1xuICAgIHJldHVybiBuZXcgKHR5cGVvZiB0aGlzID09PSAnZnVuY3Rpb24nID8gdGhpcyA6ICRPYnNlcnZhYmxlKShmdW5jdGlvbiAob2JzZXJ2ZXIpIHtcbiAgICAgIHZhciBkb25lID0gZmFsc2U7XG4gICAgICBtaWNyb3Rhc2soZnVuY3Rpb24gKCkge1xuICAgICAgICBpZiAoIWRvbmUpIHtcbiAgICAgICAgICBmb3IgKHZhciBqID0gMDsgaiA8IGl0ZW1zLmxlbmd0aDsgKytqKSB7XG4gICAgICAgICAgICBvYnNlcnZlci5uZXh0KGl0ZW1zW2pdKTtcbiAgICAgICAgICAgIGlmIChkb25lKSByZXR1cm47XG4gICAgICAgICAgfSBvYnNlcnZlci5jb21wbGV0ZSgpO1xuICAgICAgICB9XG4gICAgICB9KTtcbiAgICAgIHJldHVybiBmdW5jdGlvbiAoKSB7IGRvbmUgPSB0cnVlOyB9O1xuICAgIH0pO1xuICB9XG59KTtcblxuaGlkZSgkT2JzZXJ2YWJsZS5wcm90b3R5cGUsIE9CU0VSVkFCTEUsIGZ1bmN0aW9uICgpIHsgcmV0dXJuIHRoaXM7IH0pO1xuXG4kZXhwb3J0KCRleHBvcnQuRywgeyBPYnNlcnZhYmxlOiAkT2JzZXJ2YWJsZSB9KTtcblxucmVxdWlyZSgnLi9fc2V0LXNwZWNpZXMnKSgnT2JzZXJ2YWJsZScpO1xuIiwiLy8gaHR0cHM6Ly9naXRodWIuY29tL3J3YWxkcm9uL3RjMzktbm90ZXMvYmxvYi9tYXN0ZXIvZXM2LzIwMTQtMDkvc2VwdC0yNS5tZCM1MTAtZ2xvYmFsYXNhcC1mb3ItZW5xdWV1aW5nLWEtbWljcm90YXNrXG52YXIgJGV4cG9ydCA9IHJlcXVpcmUoJy4vX2V4cG9ydCcpO1xudmFyIG1pY3JvdGFzayA9IHJlcXVpcmUoJy4vX21pY3JvdGFzaycpKCk7XG52YXIgcHJvY2VzcyA9IHJlcXVpcmUoJy4vX2dsb2JhbCcpLnByb2Nlc3M7XG52YXIgaXNOb2RlID0gcmVxdWlyZSgnLi9fY29mJykocHJvY2VzcykgPT0gJ3Byb2Nlc3MnO1xuXG4kZXhwb3J0KCRleHBvcnQuRywge1xuICBhc2FwOiBmdW5jdGlvbiBhc2FwKGZuKSB7XG4gICAgdmFyIGRvbWFpbiA9IGlzTm9kZSAmJiBwcm9jZXNzLmRvbWFpbjtcbiAgICBtaWNyb3Rhc2soZG9tYWluID8gZG9tYWluLmJpbmQoZm4pIDogZm4pO1xuICB9XG59KTtcbiIsInZhciAkbWV0YWRhdGEgPSByZXF1aXJlKCcuL19tZXRhZGF0YScpO1xudmFyIGFuT2JqZWN0ID0gcmVxdWlyZSgnLi9fYW4tb2JqZWN0Jyk7XG52YXIgYUZ1bmN0aW9uID0gcmVxdWlyZSgnLi9fYS1mdW5jdGlvbicpO1xudmFyIHRvTWV0YUtleSA9ICRtZXRhZGF0YS5rZXk7XG52YXIgb3JkaW5hcnlEZWZpbmVPd25NZXRhZGF0YSA9ICRtZXRhZGF0YS5zZXQ7XG5cbiRtZXRhZGF0YS5leHAoeyBtZXRhZGF0YTogZnVuY3Rpb24gbWV0YWRhdGEobWV0YWRhdGFLZXksIG1ldGFkYXRhVmFsdWUpIHtcbiAgcmV0dXJuIGZ1bmN0aW9uIGRlY29yYXRvcih0YXJnZXQsIHRhcmdldEtleSkge1xuICAgIG9yZGluYXJ5RGVmaW5lT3duTWV0YWRhdGEoXG4gICAgICBtZXRhZGF0YUtleSwgbWV0YWRhdGFWYWx1ZSxcbiAgICAgICh0YXJnZXRLZXkgIT09IHVuZGVmaW5lZCA/IGFuT2JqZWN0IDogYUZ1bmN0aW9uKSh0YXJnZXQpLFxuICAgICAgdG9NZXRhS2V5KHRhcmdldEtleSlcbiAgICApO1xuICB9O1xufSB9KTtcbiIsInZhciBtZXRhZGF0YSA9IHJlcXVpcmUoJy4vX21ldGFkYXRhJyk7XG52YXIgYW5PYmplY3QgPSByZXF1aXJlKCcuL19hbi1vYmplY3QnKTtcbnZhciBvcmRpbmFyeUhhc093bk1ldGFkYXRhID0gbWV0YWRhdGEuaGFzO1xudmFyIHRvTWV0YUtleSA9IG1ldGFkYXRhLmtleTtcblxubWV0YWRhdGEuZXhwKHsgaGFzT3duTWV0YWRhdGE6IGZ1bmN0aW9uIGhhc093bk1ldGFkYXRhKG1ldGFkYXRhS2V5LCB0YXJnZXQgLyogLCB0YXJnZXRLZXkgKi8pIHtcbiAgcmV0dXJuIG9yZGluYXJ5SGFzT3duTWV0YWRhdGEobWV0YWRhdGFLZXksIGFuT2JqZWN0KHRhcmdldClcbiAgICAsIGFyZ3VtZW50cy5sZW5ndGggPCAzID8gdW5kZWZpbmVkIDogdG9NZXRhS2V5KGFyZ3VtZW50c1syXSkpO1xufSB9KTtcbiIsInZhciBtZXRhZGF0YSA9IHJlcXVpcmUoJy4vX21ldGFkYXRhJyk7XG52YXIgYW5PYmplY3QgPSByZXF1aXJlKCcuL19hbi1vYmplY3QnKTtcbnZhciBnZXRQcm90b3R5cGVPZiA9IHJlcXVpcmUoJy4vX29iamVjdC1ncG8nKTtcbnZhciBvcmRpbmFyeUhhc093bk1ldGFkYXRhID0gbWV0YWRhdGEuaGFzO1xudmFyIHRvTWV0YUtleSA9IG1ldGFkYXRhLmtleTtcblxudmFyIG9yZGluYXJ5SGFzTWV0YWRhdGEgPSBmdW5jdGlvbiAoTWV0YWRhdGFLZXksIE8sIFApIHtcbiAgdmFyIGhhc093biA9IG9yZGluYXJ5SGFzT3duTWV0YWRhdGEoTWV0YWRhdGFLZXksIE8sIFApO1xuICBpZiAoaGFzT3duKSByZXR1cm4gdHJ1ZTtcbiAgdmFyIHBhcmVudCA9IGdldFByb3RvdHlwZU9mKE8pO1xuICByZXR1cm4gcGFyZW50ICE9PSBudWxsID8gb3JkaW5hcnlIYXNNZXRhZGF0YShNZXRhZGF0YUtleSwgcGFyZW50LCBQKSA6IGZhbHNlO1xufTtcblxubWV0YWRhdGEuZXhwKHsgaGFzTWV0YWRhdGE6IGZ1bmN0aW9uIGhhc01ldGFkYXRhKG1ldGFkYXRhS2V5LCB0YXJnZXQgLyogLCB0YXJnZXRLZXkgKi8pIHtcbiAgcmV0dXJuIG9yZGluYXJ5SGFzTWV0YWRhdGEobWV0YWRhdGFLZXksIGFuT2JqZWN0KHRhcmdldCksIGFyZ3VtZW50cy5sZW5ndGggPCAzID8gdW5kZWZpbmVkIDogdG9NZXRhS2V5KGFyZ3VtZW50c1syXSkpO1xufSB9KTtcbiIsInZhciBtZXRhZGF0YSA9IHJlcXVpcmUoJy4vX21ldGFkYXRhJyk7XG52YXIgYW5PYmplY3QgPSByZXF1aXJlKCcuL19hbi1vYmplY3QnKTtcbnZhciBvcmRpbmFyeU93bk1ldGFkYXRhS2V5cyA9IG1ldGFkYXRhLmtleXM7XG52YXIgdG9NZXRhS2V5ID0gbWV0YWRhdGEua2V5O1xuXG5tZXRhZGF0YS5leHAoeyBnZXRPd25NZXRhZGF0YUtleXM6IGZ1bmN0aW9uIGdldE93bk1ldGFkYXRhS2V5cyh0YXJnZXQgLyogLCB0YXJnZXRLZXkgKi8pIHtcbiAgcmV0dXJuIG9yZGluYXJ5T3duTWV0YWRhdGFLZXlzKGFuT2JqZWN0KHRhcmdldCksIGFyZ3VtZW50cy5sZW5ndGggPCAyID8gdW5kZWZpbmVkIDogdG9NZXRhS2V5KGFyZ3VtZW50c1sxXSkpO1xufSB9KTtcbiIsInZhciBtZXRhZGF0YSA9IHJlcXVpcmUoJy4vX21ldGFkYXRhJyk7XG52YXIgYW5PYmplY3QgPSByZXF1aXJlKCcuL19hbi1vYmplY3QnKTtcbnZhciBvcmRpbmFyeUdldE93bk1ldGFkYXRhID0gbWV0YWRhdGEuZ2V0O1xudmFyIHRvTWV0YUtleSA9IG1ldGFkYXRhLmtleTtcblxubWV0YWRhdGEuZXhwKHsgZ2V0T3duTWV0YWRhdGE6IGZ1bmN0aW9uIGdldE93bk1ldGFkYXRhKG1ldGFkYXRhS2V5LCB0YXJnZXQgLyogLCB0YXJnZXRLZXkgKi8pIHtcbiAgcmV0dXJuIG9yZGluYXJ5R2V0T3duTWV0YWRhdGEobWV0YWRhdGFLZXksIGFuT2JqZWN0KHRhcmdldClcbiAgICAsIGFyZ3VtZW50cy5sZW5ndGggPCAzID8gdW5kZWZpbmVkIDogdG9NZXRhS2V5KGFyZ3VtZW50c1syXSkpO1xufSB9KTtcbiIsInZhciBTZXQgPSByZXF1aXJlKCcuL2VzNi5zZXQnKTtcbnZhciBmcm9tID0gcmVxdWlyZSgnLi9fYXJyYXktZnJvbS1pdGVyYWJsZScpO1xudmFyIG1ldGFkYXRhID0gcmVxdWlyZSgnLi9fbWV0YWRhdGEnKTtcbnZhciBhbk9iamVjdCA9IHJlcXVpcmUoJy4vX2FuLW9iamVjdCcpO1xudmFyIGdldFByb3RvdHlwZU9mID0gcmVxdWlyZSgnLi9fb2JqZWN0LWdwbycpO1xudmFyIG9yZGluYXJ5T3duTWV0YWRhdGFLZXlzID0gbWV0YWRhdGEua2V5cztcbnZhciB0b01ldGFLZXkgPSBtZXRhZGF0YS5rZXk7XG5cbnZhciBvcmRpbmFyeU1ldGFkYXRhS2V5cyA9IGZ1bmN0aW9uIChPLCBQKSB7XG4gIHZhciBvS2V5cyA9IG9yZGluYXJ5T3duTWV0YWRhdGFLZXlzKE8sIFApO1xuICB2YXIgcGFyZW50ID0gZ2V0UHJvdG90eXBlT2YoTyk7XG4gIGlmIChwYXJlbnQgPT09IG51bGwpIHJldHVybiBvS2V5cztcbiAgdmFyIHBLZXlzID0gb3JkaW5hcnlNZXRhZGF0YUtleXMocGFyZW50LCBQKTtcbiAgcmV0dXJuIHBLZXlzLmxlbmd0aCA/IG9LZXlzLmxlbmd0aCA/IGZyb20obmV3IFNldChvS2V5cy5jb25jYXQocEtleXMpKSkgOiBwS2V5cyA6IG9LZXlzO1xufTtcblxubWV0YWRhdGEuZXhwKHsgZ2V0TWV0YWRhdGFLZXlzOiBmdW5jdGlvbiBnZXRNZXRhZGF0YUtleXModGFyZ2V0IC8qICwgdGFyZ2V0S2V5ICovKSB7XG4gIHJldHVybiBvcmRpbmFyeU1ldGFkYXRhS2V5cyhhbk9iamVjdCh0YXJnZXQpLCBhcmd1bWVudHMubGVuZ3RoIDwgMiA/IHVuZGVmaW5lZCA6IHRvTWV0YUtleShhcmd1bWVudHNbMV0pKTtcbn0gfSk7XG4iLCJ2YXIgbWV0YWRhdGEgPSByZXF1aXJlKCcuL19tZXRhZGF0YScpO1xudmFyIGFuT2JqZWN0ID0gcmVxdWlyZSgnLi9fYW4tb2JqZWN0Jyk7XG52YXIgZ2V0UHJvdG90eXBlT2YgPSByZXF1aXJlKCcuL19vYmplY3QtZ3BvJyk7XG52YXIgb3JkaW5hcnlIYXNPd25NZXRhZGF0YSA9IG1ldGFkYXRhLmhhcztcbnZhciBvcmRpbmFyeUdldE93bk1ldGFkYXRhID0gbWV0YWRhdGEuZ2V0O1xudmFyIHRvTWV0YUtleSA9IG1ldGFkYXRhLmtleTtcblxudmFyIG9yZGluYXJ5R2V0TWV0YWRhdGEgPSBmdW5jdGlvbiAoTWV0YWRhdGFLZXksIE8sIFApIHtcbiAgdmFyIGhhc093biA9IG9yZGluYXJ5SGFzT3duTWV0YWRhdGEoTWV0YWRhdGFLZXksIE8sIFApO1xuICBpZiAoaGFzT3duKSByZXR1cm4gb3JkaW5hcnlHZXRPd25NZXRhZGF0YShNZXRhZGF0YUtleSwgTywgUCk7XG4gIHZhciBwYXJlbnQgPSBnZXRQcm90b3R5cGVPZihPKTtcbiAgcmV0dXJuIHBhcmVudCAhPT0gbnVsbCA/IG9yZGluYXJ5R2V0TWV0YWRhdGEoTWV0YWRhdGFLZXksIHBhcmVudCwgUCkgOiB1bmRlZmluZWQ7XG59O1xuXG5tZXRhZGF0YS5leHAoeyBnZXRNZXRhZGF0YTogZnVuY3Rpb24gZ2V0TWV0YWRhdGEobWV0YWRhdGFLZXksIHRhcmdldCAvKiAsIHRhcmdldEtleSAqLykge1xuICByZXR1cm4gb3JkaW5hcnlHZXRNZXRhZGF0YShtZXRhZGF0YUtleSwgYW5PYmplY3QodGFyZ2V0KSwgYXJndW1lbnRzLmxlbmd0aCA8IDMgPyB1bmRlZmluZWQgOiB0b01ldGFLZXkoYXJndW1lbnRzWzJdKSk7XG59IH0pO1xuIiwidmFyIG1ldGFkYXRhID0gcmVxdWlyZSgnLi9fbWV0YWRhdGEnKTtcbnZhciBhbk9iamVjdCA9IHJlcXVpcmUoJy4vX2FuLW9iamVjdCcpO1xudmFyIHRvTWV0YUtleSA9IG1ldGFkYXRhLmtleTtcbnZhciBnZXRPckNyZWF0ZU1ldGFkYXRhTWFwID0gbWV0YWRhdGEubWFwO1xudmFyIHN0b3JlID0gbWV0YWRhdGEuc3RvcmU7XG5cbm1ldGFkYXRhLmV4cCh7IGRlbGV0ZU1ldGFkYXRhOiBmdW5jdGlvbiBkZWxldGVNZXRhZGF0YShtZXRhZGF0YUtleSwgdGFyZ2V0IC8qICwgdGFyZ2V0S2V5ICovKSB7XG4gIHZhciB0YXJnZXRLZXkgPSBhcmd1bWVudHMubGVuZ3RoIDwgMyA/IHVuZGVmaW5lZCA6IHRvTWV0YUtleShhcmd1bWVudHNbMl0pO1xuICB2YXIgbWV0YWRhdGFNYXAgPSBnZXRPckNyZWF0ZU1ldGFkYXRhTWFwKGFuT2JqZWN0KHRhcmdldCksIHRhcmdldEtleSwgZmFsc2UpO1xuICBpZiAobWV0YWRhdGFNYXAgPT09IHVuZGVmaW5lZCB8fCAhbWV0YWRhdGFNYXBbJ2RlbGV0ZSddKG1ldGFkYXRhS2V5KSkgcmV0dXJuIGZhbHNlO1xuICBpZiAobWV0YWRhdGFNYXAuc2l6ZSkgcmV0dXJuIHRydWU7XG4gIHZhciB0YXJnZXRNZXRhZGF0YSA9IHN0b3JlLmdldCh0YXJnZXQpO1xuICB0YXJnZXRNZXRhZGF0YVsnZGVsZXRlJ10odGFyZ2V0S2V5KTtcbiAgcmV0dXJuICEhdGFyZ2V0TWV0YWRhdGEuc2l6ZSB8fCBzdG9yZVsnZGVsZXRlJ10odGFyZ2V0KTtcbn0gfSk7XG4iLCJ2YXIgbWV0YWRhdGEgPSByZXF1aXJlKCcuL19tZXRhZGF0YScpO1xudmFyIGFuT2JqZWN0ID0gcmVxdWlyZSgnLi9fYW4tb2JqZWN0Jyk7XG52YXIgdG9NZXRhS2V5ID0gbWV0YWRhdGEua2V5O1xudmFyIG9yZGluYXJ5RGVmaW5lT3duTWV0YWRhdGEgPSBtZXRhZGF0YS5zZXQ7XG5cbm1ldGFkYXRhLmV4cCh7IGRlZmluZU1ldGFkYXRhOiBmdW5jdGlvbiBkZWZpbmVNZXRhZGF0YShtZXRhZGF0YUtleSwgbWV0YWRhdGFWYWx1ZSwgdGFyZ2V0LCB0YXJnZXRLZXkpIHtcbiAgb3JkaW5hcnlEZWZpbmVPd25NZXRhZGF0YShtZXRhZGF0YUtleSwgbWV0YWRhdGFWYWx1ZSwgYW5PYmplY3QodGFyZ2V0KSwgdG9NZXRhS2V5KHRhcmdldEtleSkpO1xufSB9KTtcbiIsIid1c2Ugc3RyaWN0Jztcbi8vIGh0dHBzOi8vZ2l0aHViLmNvbS90YzM5L3Byb3Bvc2FsLXByb21pc2UtdHJ5XG52YXIgJGV4cG9ydCA9IHJlcXVpcmUoJy4vX2V4cG9ydCcpO1xudmFyIG5ld1Byb21pc2VDYXBhYmlsaXR5ID0gcmVxdWlyZSgnLi9fbmV3LXByb21pc2UtY2FwYWJpbGl0eScpO1xudmFyIHBlcmZvcm0gPSByZXF1aXJlKCcuL19wZXJmb3JtJyk7XG5cbiRleHBvcnQoJGV4cG9ydC5TLCAnUHJvbWlzZScsIHsgJ3RyeSc6IGZ1bmN0aW9uIChjYWxsYmFja2ZuKSB7XG4gIHZhciBwcm9taXNlQ2FwYWJpbGl0eSA9IG5ld1Byb21pc2VDYXBhYmlsaXR5LmYodGhpcyk7XG4gIHZhciByZXN1bHQgPSBwZXJmb3JtKGNhbGxiYWNrZm4pO1xuICAocmVzdWx0LmUgPyBwcm9taXNlQ2FwYWJpbGl0eS5yZWplY3QgOiBwcm9taXNlQ2FwYWJpbGl0eS5yZXNvbHZlKShyZXN1bHQudik7XG4gIHJldHVybiBwcm9taXNlQ2FwYWJpbGl0eS5wcm9taXNlO1xufSB9KTtcbiIsIi8vIGh0dHBzOi8vZ2l0aHViLmNvbS90YzM5L3Byb3Bvc2FsLXByb21pc2UtZmluYWxseVxuJ3VzZSBzdHJpY3QnO1xudmFyICRleHBvcnQgPSByZXF1aXJlKCcuL19leHBvcnQnKTtcbnZhciBjb3JlID0gcmVxdWlyZSgnLi9fY29yZScpO1xudmFyIGdsb2JhbCA9IHJlcXVpcmUoJy4vX2dsb2JhbCcpO1xudmFyIHNwZWNpZXNDb25zdHJ1Y3RvciA9IHJlcXVpcmUoJy4vX3NwZWNpZXMtY29uc3RydWN0b3InKTtcbnZhciBwcm9taXNlUmVzb2x2ZSA9IHJlcXVpcmUoJy4vX3Byb21pc2UtcmVzb2x2ZScpO1xuXG4kZXhwb3J0KCRleHBvcnQuUCArICRleHBvcnQuUiwgJ1Byb21pc2UnLCB7ICdmaW5hbGx5JzogZnVuY3Rpb24gKG9uRmluYWxseSkge1xuICB2YXIgQyA9IHNwZWNpZXNDb25zdHJ1Y3Rvcih0aGlzLCBjb3JlLlByb21pc2UgfHwgZ2xvYmFsLlByb21pc2UpO1xuICB2YXIgaXNGdW5jdGlvbiA9IHR5cGVvZiBvbkZpbmFsbHkgPT0gJ2Z1bmN0aW9uJztcbiAgcmV0dXJuIHRoaXMudGhlbihcbiAgICBpc0Z1bmN0aW9uID8gZnVuY3Rpb24gKHgpIHtcbiAgICAgIHJldHVybiBwcm9taXNlUmVzb2x2ZShDLCBvbkZpbmFsbHkoKSkudGhlbihmdW5jdGlvbiAoKSB7IHJldHVybiB4OyB9KTtcbiAgICB9IDogb25GaW5hbGx5LFxuICAgIGlzRnVuY3Rpb24gPyBmdW5jdGlvbiAoZSkge1xuICAgICAgcmV0dXJuIHByb21pc2VSZXNvbHZlKEMsIG9uRmluYWxseSgpKS50aGVuKGZ1bmN0aW9uICgpIHsgdGhyb3cgZTsgfSk7XG4gICAgfSA6IG9uRmluYWxseVxuICApO1xufSB9KTtcbiIsIi8vIGh0dHA6Ly9qZmJhc3RpZW4uZ2l0aHViLmlvL3BhcGVycy9NYXRoLnNpZ25iaXQuaHRtbFxudmFyICRleHBvcnQgPSByZXF1aXJlKCcuL19leHBvcnQnKTtcblxuJGV4cG9ydCgkZXhwb3J0LlMsICdNYXRoJywgeyBzaWduYml0OiBmdW5jdGlvbiBzaWduYml0KHgpIHtcbiAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIG5vLXNlbGYtY29tcGFyZVxuICByZXR1cm4gKHggPSAreCkgIT0geCA/IHggOiB4ID09IDAgPyAxIC8geCA9PSBJbmZpbml0eSA6IHggPiAwO1xufSB9KTtcbiIsIi8vIGh0dHBzOi8vZ2lzdC5naXRodWIuY29tL0JyZW5kYW5FaWNoLzQyOTRkNWMyMTJhNmQyMjU0NzAzXG52YXIgJGV4cG9ydCA9IHJlcXVpcmUoJy4vX2V4cG9ydCcpO1xuXG4kZXhwb3J0KCRleHBvcnQuUywgJ01hdGgnLCB7XG4gIHVtdWxoOiBmdW5jdGlvbiB1bXVsaCh1LCB2KSB7XG4gICAgdmFyIFVJTlQxNiA9IDB4ZmZmZjtcbiAgICB2YXIgJHUgPSArdTtcbiAgICB2YXIgJHYgPSArdjtcbiAgICB2YXIgdTAgPSAkdSAmIFVJTlQxNjtcbiAgICB2YXIgdjAgPSAkdiAmIFVJTlQxNjtcbiAgICB2YXIgdTEgPSAkdSA+Pj4gMTY7XG4gICAgdmFyIHYxID0gJHYgPj4+IDE2O1xuICAgIHZhciB0ID0gKHUxICogdjAgPj4+IDApICsgKHUwICogdjAgPj4+IDE2KTtcbiAgICByZXR1cm4gdTEgKiB2MSArICh0ID4+PiAxNikgKyAoKHUwICogdjEgPj4+IDApICsgKHQgJiBVSU5UMTYpID4+PiAxNik7XG4gIH1cbn0pO1xuIiwiLy8gaHR0cHM6Ly9yd2FsZHJvbi5naXRodWIuaW8vcHJvcG9zYWwtbWF0aC1leHRlbnNpb25zL1xudmFyICRleHBvcnQgPSByZXF1aXJlKCcuL19leHBvcnQnKTtcblxuJGV4cG9ydCgkZXhwb3J0LlMsICdNYXRoJywgeyBzY2FsZTogcmVxdWlyZSgnLi9fbWF0aC1zY2FsZScpIH0pO1xuIiwiLy8gaHR0cHM6Ly9yd2FsZHJvbi5naXRodWIuaW8vcHJvcG9zYWwtbWF0aC1leHRlbnNpb25zL1xudmFyICRleHBvcnQgPSByZXF1aXJlKCcuL19leHBvcnQnKTtcbnZhciBERUdfUEVSX1JBRCA9IE1hdGguUEkgLyAxODA7XG5cbiRleHBvcnQoJGV4cG9ydC5TLCAnTWF0aCcsIHtcbiAgcmFkaWFuczogZnVuY3Rpb24gcmFkaWFucyhkZWdyZWVzKSB7XG4gICAgcmV0dXJuIGRlZ3JlZXMgKiBERUdfUEVSX1JBRDtcbiAgfVxufSk7XG4iLCIvLyBodHRwczovL3J3YWxkcm9uLmdpdGh1Yi5pby9wcm9wb3NhbC1tYXRoLWV4dGVuc2lvbnMvXG52YXIgJGV4cG9ydCA9IHJlcXVpcmUoJy4vX2V4cG9ydCcpO1xuXG4kZXhwb3J0KCRleHBvcnQuUywgJ01hdGgnLCB7IFJBRF9QRVJfREVHOiAxODAgLyBNYXRoLlBJIH0pO1xuIiwiLy8gaHR0cHM6Ly9naXN0LmdpdGh1Yi5jb20vQnJlbmRhbkVpY2gvNDI5NGQ1YzIxMmE2ZDIyNTQ3MDNcbnZhciAkZXhwb3J0ID0gcmVxdWlyZSgnLi9fZXhwb3J0Jyk7XG5cbiRleHBvcnQoJGV4cG9ydC5TLCAnTWF0aCcsIHtcbiAgaW11bGg6IGZ1bmN0aW9uIGltdWxoKHUsIHYpIHtcbiAgICB2YXIgVUlOVDE2ID0gMHhmZmZmO1xuICAgIHZhciAkdSA9ICt1O1xuICAgIHZhciAkdiA9ICt2O1xuICAgIHZhciB1MCA9ICR1ICYgVUlOVDE2O1xuICAgIHZhciB2MCA9ICR2ICYgVUlOVDE2O1xuICAgIHZhciB1MSA9ICR1ID4+IDE2O1xuICAgIHZhciB2MSA9ICR2ID4+IDE2O1xuICAgIHZhciB0ID0gKHUxICogdjAgPj4+IDApICsgKHUwICogdjAgPj4+IDE2KTtcbiAgICByZXR1cm4gdTEgKiB2MSArICh0ID4+IDE2KSArICgodTAgKiB2MSA+Pj4gMCkgKyAodCAmIFVJTlQxNikgPj4gMTYpO1xuICB9XG59KTtcbiIsIi8vIGh0dHBzOi8vZ2lzdC5naXRodWIuY29tL0JyZW5kYW5FaWNoLzQyOTRkNWMyMTJhNmQyMjU0NzAzXG52YXIgJGV4cG9ydCA9IHJlcXVpcmUoJy4vX2V4cG9ydCcpO1xuXG4kZXhwb3J0KCRleHBvcnQuUywgJ01hdGgnLCB7XG4gIGlzdWJoOiBmdW5jdGlvbiBpc3ViaCh4MCwgeDEsIHkwLCB5MSkge1xuICAgIHZhciAkeDAgPSB4MCA+Pj4gMDtcbiAgICB2YXIgJHgxID0geDEgPj4+IDA7XG4gICAgdmFyICR5MCA9IHkwID4+PiAwO1xuICAgIHJldHVybiAkeDEgLSAoeTEgPj4+IDApIC0gKCh+JHgwICYgJHkwIHwgfigkeDAgXiAkeTApICYgJHgwIC0gJHkwID4+PiAwKSA+Pj4gMzEpIHwgMDtcbiAgfVxufSk7XG4iLCIvLyBodHRwczovL2dpc3QuZ2l0aHViLmNvbS9CcmVuZGFuRWljaC80Mjk0ZDVjMjEyYTZkMjI1NDcwM1xudmFyICRleHBvcnQgPSByZXF1aXJlKCcuL19leHBvcnQnKTtcblxuJGV4cG9ydCgkZXhwb3J0LlMsICdNYXRoJywge1xuICBpYWRkaDogZnVuY3Rpb24gaWFkZGgoeDAsIHgxLCB5MCwgeTEpIHtcbiAgICB2YXIgJHgwID0geDAgPj4+IDA7XG4gICAgdmFyICR4MSA9IHgxID4+PiAwO1xuICAgIHZhciAkeTAgPSB5MCA+Pj4gMDtcbiAgICByZXR1cm4gJHgxICsgKHkxID4+PiAwKSArICgoJHgwICYgJHkwIHwgKCR4MCB8ICR5MCkgJiB+KCR4MCArICR5MCA+Pj4gMCkpID4+PiAzMSkgfCAwO1xuICB9XG59KTtcbiIsIi8vIGh0dHBzOi8vcndhbGRyb24uZ2l0aHViLmlvL3Byb3Bvc2FsLW1hdGgtZXh0ZW5zaW9ucy9cbnZhciAkZXhwb3J0ID0gcmVxdWlyZSgnLi9fZXhwb3J0Jyk7XG52YXIgc2NhbGUgPSByZXF1aXJlKCcuL19tYXRoLXNjYWxlJyk7XG52YXIgZnJvdW5kID0gcmVxdWlyZSgnLi9fbWF0aC1mcm91bmQnKTtcblxuJGV4cG9ydCgkZXhwb3J0LlMsICdNYXRoJywge1xuICBmc2NhbGU6IGZ1bmN0aW9uIGZzY2FsZSh4LCBpbkxvdywgaW5IaWdoLCBvdXRMb3csIG91dEhpZ2gpIHtcbiAgICByZXR1cm4gZnJvdW5kKHNjYWxlKHgsIGluTG93LCBpbkhpZ2gsIG91dExvdywgb3V0SGlnaCkpO1xuICB9XG59KTtcbiIsIi8vIGh0dHBzOi8vcndhbGRyb24uZ2l0aHViLmlvL3Byb3Bvc2FsLW1hdGgtZXh0ZW5zaW9ucy9cbnZhciAkZXhwb3J0ID0gcmVxdWlyZSgnLi9fZXhwb3J0Jyk7XG52YXIgUkFEX1BFUl9ERUcgPSAxODAgLyBNYXRoLlBJO1xuXG4kZXhwb3J0KCRleHBvcnQuUywgJ01hdGgnLCB7XG4gIGRlZ3JlZXM6IGZ1bmN0aW9uIGRlZ3JlZXMocmFkaWFucykge1xuICAgIHJldHVybiByYWRpYW5zICogUkFEX1BFUl9ERUc7XG4gIH1cbn0pO1xuIiwiLy8gaHR0cHM6Ly9yd2FsZHJvbi5naXRodWIuaW8vcHJvcG9zYWwtbWF0aC1leHRlbnNpb25zL1xudmFyICRleHBvcnQgPSByZXF1aXJlKCcuL19leHBvcnQnKTtcblxuJGV4cG9ydCgkZXhwb3J0LlMsICdNYXRoJywgeyBERUdfUEVSX1JBRDogTWF0aC5QSSAvIDE4MCB9KTtcbiIsIi8vIGh0dHBzOi8vcndhbGRyb24uZ2l0aHViLmlvL3Byb3Bvc2FsLW1hdGgtZXh0ZW5zaW9ucy9cbnZhciAkZXhwb3J0ID0gcmVxdWlyZSgnLi9fZXhwb3J0Jyk7XG5cbiRleHBvcnQoJGV4cG9ydC5TLCAnTWF0aCcsIHtcbiAgY2xhbXA6IGZ1bmN0aW9uIGNsYW1wKHgsIGxvd2VyLCB1cHBlcikge1xuICAgIHJldHVybiBNYXRoLm1pbih1cHBlciwgTWF0aC5tYXgobG93ZXIsIHgpKTtcbiAgfVxufSk7XG4iLCIvLyBodHRwczovL2dpdGh1Yi5jb20vbGpoYXJiL3Byb3Bvc2FsLWlzLWVycm9yXG52YXIgJGV4cG9ydCA9IHJlcXVpcmUoJy4vX2V4cG9ydCcpO1xudmFyIGNvZiA9IHJlcXVpcmUoJy4vX2NvZicpO1xuXG4kZXhwb3J0KCRleHBvcnQuUywgJ0Vycm9yJywge1xuICBpc0Vycm9yOiBmdW5jdGlvbiBpc0Vycm9yKGl0KSB7XG4gICAgcmV0dXJuIGNvZihpdCkgPT09ICdFcnJvcic7XG4gIH1cbn0pO1xuIiwiLy8gaHR0cHM6Ly9naXRodWIuY29tL3RjMzkvcHJvcG9zYWwtZ2xvYmFsXG52YXIgJGV4cG9ydCA9IHJlcXVpcmUoJy4vX2V4cG9ydCcpO1xuXG4kZXhwb3J0KCRleHBvcnQuUywgJ1N5c3RlbScsIHsgZ2xvYmFsOiByZXF1aXJlKCcuL19nbG9iYWwnKSB9KTtcbiIsIi8vIGh0dHBzOi8vZ2l0aHViLmNvbS90YzM5L3Byb3Bvc2FsLWdsb2JhbFxudmFyICRleHBvcnQgPSByZXF1aXJlKCcuL19leHBvcnQnKTtcblxuJGV4cG9ydCgkZXhwb3J0LkcsIHsgZ2xvYmFsOiByZXF1aXJlKCcuL19nbG9iYWwnKSB9KTtcbiIsIi8vIGh0dHBzOi8vdGMzOS5naXRodWIuaW8vcHJvcG9zYWwtc2V0bWFwLW9mZnJvbS8jc2VjLXdlYWtzZXQuZnJvbVxucmVxdWlyZSgnLi9fc2V0LWNvbGxlY3Rpb24tZnJvbScpKCdXZWFrU2V0Jyk7XG4iLCIvLyBodHRwczovL3RjMzkuZ2l0aHViLmlvL3Byb3Bvc2FsLXNldG1hcC1vZmZyb20vI3NlYy13ZWFrbWFwLmZyb21cbnJlcXVpcmUoJy4vX3NldC1jb2xsZWN0aW9uLWZyb20nKSgnV2Vha01hcCcpO1xuIiwiLy8gaHR0cHM6Ly90YzM5LmdpdGh1Yi5pby9wcm9wb3NhbC1zZXRtYXAtb2Zmcm9tLyNzZWMtc2V0LmZyb21cbnJlcXVpcmUoJy4vX3NldC1jb2xsZWN0aW9uLWZyb20nKSgnU2V0Jyk7XG4iLCIvLyBodHRwczovL3RjMzkuZ2l0aHViLmlvL3Byb3Bvc2FsLXNldG1hcC1vZmZyb20vI3NlYy1tYXAuZnJvbVxucmVxdWlyZSgnLi9fc2V0LWNvbGxlY3Rpb24tZnJvbScpKCdNYXAnKTtcbiIsIi8vIGh0dHBzOi8vdGMzOS5naXRodWIuaW8vcHJvcG9zYWwtc2V0bWFwLW9mZnJvbS8jc2VjLXdlYWtzZXQub2ZcbnJlcXVpcmUoJy4vX3NldC1jb2xsZWN0aW9uLW9mJykoJ1dlYWtTZXQnKTtcbiIsIi8vIGh0dHBzOi8vdGMzOS5naXRodWIuaW8vcHJvcG9zYWwtc2V0bWFwLW9mZnJvbS8jc2VjLXdlYWttYXAub2ZcbnJlcXVpcmUoJy4vX3NldC1jb2xsZWN0aW9uLW9mJykoJ1dlYWtNYXAnKTtcbiIsIi8vIGh0dHBzOi8vdGMzOS5naXRodWIuaW8vcHJvcG9zYWwtc2V0bWFwLW9mZnJvbS8jc2VjLXNldC5vZlxucmVxdWlyZSgnLi9fc2V0LWNvbGxlY3Rpb24tb2YnKSgnU2V0Jyk7XG4iLCIvLyBodHRwczovL3RjMzkuZ2l0aHViLmlvL3Byb3Bvc2FsLXNldG1hcC1vZmZyb20vI3NlYy1tYXAub2ZcbnJlcXVpcmUoJy4vX3NldC1jb2xsZWN0aW9uLW9mJykoJ01hcCcpO1xuIiwiLy8gaHR0cHM6Ly9naXRodWIuY29tL0RhdmlkQnJ1YW50L01hcC1TZXQucHJvdG90eXBlLnRvSlNPTlxudmFyICRleHBvcnQgPSByZXF1aXJlKCcuL19leHBvcnQnKTtcblxuJGV4cG9ydCgkZXhwb3J0LlAgKyAkZXhwb3J0LlIsICdTZXQnLCB7IHRvSlNPTjogcmVxdWlyZSgnLi9fY29sbGVjdGlvbi10by1qc29uJykoJ1NldCcpIH0pO1xuIiwiLy8gaHR0cHM6Ly9naXRodWIuY29tL0RhdmlkQnJ1YW50L01hcC1TZXQucHJvdG90eXBlLnRvSlNPTlxudmFyICRleHBvcnQgPSByZXF1aXJlKCcuL19leHBvcnQnKTtcblxuJGV4cG9ydCgkZXhwb3J0LlAgKyAkZXhwb3J0LlIsICdNYXAnLCB7IHRvSlNPTjogcmVxdWlyZSgnLi9fY29sbGVjdGlvbi10by1qc29uJykoJ01hcCcpIH0pO1xuIiwiJ3VzZSBzdHJpY3QnO1xudmFyICRleHBvcnQgPSByZXF1aXJlKCcuL19leHBvcnQnKTtcbnZhciB0b09iamVjdCA9IHJlcXVpcmUoJy4vX3RvLW9iamVjdCcpO1xudmFyIHRvUHJpbWl0aXZlID0gcmVxdWlyZSgnLi9fdG8tcHJpbWl0aXZlJyk7XG52YXIgZ2V0UHJvdG90eXBlT2YgPSByZXF1aXJlKCcuL19vYmplY3QtZ3BvJyk7XG52YXIgZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yID0gcmVxdWlyZSgnLi9fb2JqZWN0LWdvcGQnKS5mO1xuXG4vLyBCLjIuMi41IE9iamVjdC5wcm90b3R5cGUuX19sb29rdXBTZXR0ZXJfXyhQKVxucmVxdWlyZSgnLi9fZGVzY3JpcHRvcnMnKSAmJiAkZXhwb3J0KCRleHBvcnQuUCArIHJlcXVpcmUoJy4vX29iamVjdC1mb3JjZWQtcGFtJyksICdPYmplY3QnLCB7XG4gIF9fbG9va3VwU2V0dGVyX186IGZ1bmN0aW9uIF9fbG9va3VwU2V0dGVyX18oUCkge1xuICAgIHZhciBPID0gdG9PYmplY3QodGhpcyk7XG4gICAgdmFyIEsgPSB0b1ByaW1pdGl2ZShQLCB0cnVlKTtcbiAgICB2YXIgRDtcbiAgICBkbyB7XG4gICAgICBpZiAoRCA9IGdldE93blByb3BlcnR5RGVzY3JpcHRvcihPLCBLKSkgcmV0dXJuIEQuc2V0O1xuICAgIH0gd2hpbGUgKE8gPSBnZXRQcm90b3R5cGVPZihPKSk7XG4gIH1cbn0pO1xuIiwiJ3VzZSBzdHJpY3QnO1xudmFyICRleHBvcnQgPSByZXF1aXJlKCcuL19leHBvcnQnKTtcbnZhciB0b09iamVjdCA9IHJlcXVpcmUoJy4vX3RvLW9iamVjdCcpO1xudmFyIHRvUHJpbWl0aXZlID0gcmVxdWlyZSgnLi9fdG8tcHJpbWl0aXZlJyk7XG52YXIgZ2V0UHJvdG90eXBlT2YgPSByZXF1aXJlKCcuL19vYmplY3QtZ3BvJyk7XG52YXIgZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yID0gcmVxdWlyZSgnLi9fb2JqZWN0LWdvcGQnKS5mO1xuXG4vLyBCLjIuMi40IE9iamVjdC5wcm90b3R5cGUuX19sb29rdXBHZXR0ZXJfXyhQKVxucmVxdWlyZSgnLi9fZGVzY3JpcHRvcnMnKSAmJiAkZXhwb3J0KCRleHBvcnQuUCArIHJlcXVpcmUoJy4vX29iamVjdC1mb3JjZWQtcGFtJyksICdPYmplY3QnLCB7XG4gIF9fbG9va3VwR2V0dGVyX186IGZ1bmN0aW9uIF9fbG9va3VwR2V0dGVyX18oUCkge1xuICAgIHZhciBPID0gdG9PYmplY3QodGhpcyk7XG4gICAgdmFyIEsgPSB0b1ByaW1pdGl2ZShQLCB0cnVlKTtcbiAgICB2YXIgRDtcbiAgICBkbyB7XG4gICAgICBpZiAoRCA9IGdldE93blByb3BlcnR5RGVzY3JpcHRvcihPLCBLKSkgcmV0dXJuIEQuZ2V0O1xuICAgIH0gd2hpbGUgKE8gPSBnZXRQcm90b3R5cGVPZihPKSk7XG4gIH1cbn0pO1xuIiwiJ3VzZSBzdHJpY3QnO1xudmFyICRleHBvcnQgPSByZXF1aXJlKCcuL19leHBvcnQnKTtcbnZhciB0b09iamVjdCA9IHJlcXVpcmUoJy4vX3RvLW9iamVjdCcpO1xudmFyIGFGdW5jdGlvbiA9IHJlcXVpcmUoJy4vX2EtZnVuY3Rpb24nKTtcbnZhciAkZGVmaW5lUHJvcGVydHkgPSByZXF1aXJlKCcuL19vYmplY3QtZHAnKTtcblxuLy8gQi4yLjIuMyBPYmplY3QucHJvdG90eXBlLl9fZGVmaW5lU2V0dGVyX18oUCwgc2V0dGVyKVxucmVxdWlyZSgnLi9fZGVzY3JpcHRvcnMnKSAmJiAkZXhwb3J0KCRleHBvcnQuUCArIHJlcXVpcmUoJy4vX29iamVjdC1mb3JjZWQtcGFtJyksICdPYmplY3QnLCB7XG4gIF9fZGVmaW5lU2V0dGVyX186IGZ1bmN0aW9uIF9fZGVmaW5lU2V0dGVyX18oUCwgc2V0dGVyKSB7XG4gICAgJGRlZmluZVByb3BlcnR5LmYodG9PYmplY3QodGhpcyksIFAsIHsgc2V0OiBhRnVuY3Rpb24oc2V0dGVyKSwgZW51bWVyYWJsZTogdHJ1ZSwgY29uZmlndXJhYmxlOiB0cnVlIH0pO1xuICB9XG59KTtcbiIsIid1c2Ugc3RyaWN0JztcbnZhciAkZXhwb3J0ID0gcmVxdWlyZSgnLi9fZXhwb3J0Jyk7XG52YXIgdG9PYmplY3QgPSByZXF1aXJlKCcuL190by1vYmplY3QnKTtcbnZhciBhRnVuY3Rpb24gPSByZXF1aXJlKCcuL19hLWZ1bmN0aW9uJyk7XG52YXIgJGRlZmluZVByb3BlcnR5ID0gcmVxdWlyZSgnLi9fb2JqZWN0LWRwJyk7XG5cbi8vIEIuMi4yLjIgT2JqZWN0LnByb3RvdHlwZS5fX2RlZmluZUdldHRlcl9fKFAsIGdldHRlcilcbnJlcXVpcmUoJy4vX2Rlc2NyaXB0b3JzJykgJiYgJGV4cG9ydCgkZXhwb3J0LlAgKyByZXF1aXJlKCcuL19vYmplY3QtZm9yY2VkLXBhbScpLCAnT2JqZWN0Jywge1xuICBfX2RlZmluZUdldHRlcl9fOiBmdW5jdGlvbiBfX2RlZmluZUdldHRlcl9fKFAsIGdldHRlcikge1xuICAgICRkZWZpbmVQcm9wZXJ0eS5mKHRvT2JqZWN0KHRoaXMpLCBQLCB7IGdldDogYUZ1bmN0aW9uKGdldHRlciksIGVudW1lcmFibGU6IHRydWUsIGNvbmZpZ3VyYWJsZTogdHJ1ZSB9KTtcbiAgfVxufSk7XG4iLCIvLyBodHRwczovL2dpdGh1Yi5jb20vdGMzOS9wcm9wb3NhbC1vYmplY3QtdmFsdWVzLWVudHJpZXNcbnZhciAkZXhwb3J0ID0gcmVxdWlyZSgnLi9fZXhwb3J0Jyk7XG52YXIgJGVudHJpZXMgPSByZXF1aXJlKCcuL19vYmplY3QtdG8tYXJyYXknKSh0cnVlKTtcblxuJGV4cG9ydCgkZXhwb3J0LlMsICdPYmplY3QnLCB7XG4gIGVudHJpZXM6IGZ1bmN0aW9uIGVudHJpZXMoaXQpIHtcbiAgICByZXR1cm4gJGVudHJpZXMoaXQpO1xuICB9XG59KTtcbiIsIi8vIGh0dHBzOi8vZ2l0aHViLmNvbS90YzM5L3Byb3Bvc2FsLW9iamVjdC12YWx1ZXMtZW50cmllc1xudmFyICRleHBvcnQgPSByZXF1aXJlKCcuL19leHBvcnQnKTtcbnZhciAkdmFsdWVzID0gcmVxdWlyZSgnLi9fb2JqZWN0LXRvLWFycmF5JykoZmFsc2UpO1xuXG4kZXhwb3J0KCRleHBvcnQuUywgJ09iamVjdCcsIHtcbiAgdmFsdWVzOiBmdW5jdGlvbiB2YWx1ZXMoaXQpIHtcbiAgICByZXR1cm4gJHZhbHVlcyhpdCk7XG4gIH1cbn0pO1xuIiwiLy8gaHR0cHM6Ly9naXRodWIuY29tL3RjMzkvcHJvcG9zYWwtb2JqZWN0LWdldG93bnByb3BlcnR5ZGVzY3JpcHRvcnNcbnZhciAkZXhwb3J0ID0gcmVxdWlyZSgnLi9fZXhwb3J0Jyk7XG52YXIgb3duS2V5cyA9IHJlcXVpcmUoJy4vX293bi1rZXlzJyk7XG52YXIgdG9JT2JqZWN0ID0gcmVxdWlyZSgnLi9fdG8taW9iamVjdCcpO1xudmFyIGdPUEQgPSByZXF1aXJlKCcuL19vYmplY3QtZ29wZCcpO1xudmFyIGNyZWF0ZVByb3BlcnR5ID0gcmVxdWlyZSgnLi9fY3JlYXRlLXByb3BlcnR5Jyk7XG5cbiRleHBvcnQoJGV4cG9ydC5TLCAnT2JqZWN0Jywge1xuICBnZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3JzOiBmdW5jdGlvbiBnZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3JzKG9iamVjdCkge1xuICAgIHZhciBPID0gdG9JT2JqZWN0KG9iamVjdCk7XG4gICAgdmFyIGdldERlc2MgPSBnT1BELmY7XG4gICAgdmFyIGtleXMgPSBvd25LZXlzKE8pO1xuICAgIHZhciByZXN1bHQgPSB7fTtcbiAgICB2YXIgaSA9IDA7XG4gICAgdmFyIGtleSwgZGVzYztcbiAgICB3aGlsZSAoa2V5cy5sZW5ndGggPiBpKSB7XG4gICAgICBkZXNjID0gZ2V0RGVzYyhPLCBrZXkgPSBrZXlzW2krK10pO1xuICAgICAgaWYgKGRlc2MgIT09IHVuZGVmaW5lZCkgY3JlYXRlUHJvcGVydHkocmVzdWx0LCBrZXksIGRlc2MpO1xuICAgIH1cbiAgICByZXR1cm4gcmVzdWx0O1xuICB9XG59KTtcbiIsInJlcXVpcmUoJy4vX3drcy1kZWZpbmUnKSgnb2JzZXJ2YWJsZScpO1xuIiwicmVxdWlyZSgnLi9fd2tzLWRlZmluZScpKCdhc3luY0l0ZXJhdG9yJyk7XG4iLCIndXNlIHN0cmljdCc7XG4vLyBodHRwczovL3RjMzkuZ2l0aHViLmlvL1N0cmluZy5wcm90b3R5cGUubWF0Y2hBbGwvXG52YXIgJGV4cG9ydCA9IHJlcXVpcmUoJy4vX2V4cG9ydCcpO1xudmFyIGRlZmluZWQgPSByZXF1aXJlKCcuL19kZWZpbmVkJyk7XG52YXIgdG9MZW5ndGggPSByZXF1aXJlKCcuL190by1sZW5ndGgnKTtcbnZhciBpc1JlZ0V4cCA9IHJlcXVpcmUoJy4vX2lzLXJlZ2V4cCcpO1xudmFyIGdldEZsYWdzID0gcmVxdWlyZSgnLi9fZmxhZ3MnKTtcbnZhciBSZWdFeHBQcm90byA9IFJlZ0V4cC5wcm90b3R5cGU7XG5cbnZhciAkUmVnRXhwU3RyaW5nSXRlcmF0b3IgPSBmdW5jdGlvbiAocmVnZXhwLCBzdHJpbmcpIHtcbiAgdGhpcy5fciA9IHJlZ2V4cDtcbiAgdGhpcy5fcyA9IHN0cmluZztcbn07XG5cbnJlcXVpcmUoJy4vX2l0ZXItY3JlYXRlJykoJFJlZ0V4cFN0cmluZ0l0ZXJhdG9yLCAnUmVnRXhwIFN0cmluZycsIGZ1bmN0aW9uIG5leHQoKSB7XG4gIHZhciBtYXRjaCA9IHRoaXMuX3IuZXhlYyh0aGlzLl9zKTtcbiAgcmV0dXJuIHsgdmFsdWU6IG1hdGNoLCBkb25lOiBtYXRjaCA9PT0gbnVsbCB9O1xufSk7XG5cbiRleHBvcnQoJGV4cG9ydC5QLCAnU3RyaW5nJywge1xuICBtYXRjaEFsbDogZnVuY3Rpb24gbWF0Y2hBbGwocmVnZXhwKSB7XG4gICAgZGVmaW5lZCh0aGlzKTtcbiAgICBpZiAoIWlzUmVnRXhwKHJlZ2V4cCkpIHRocm93IFR5cGVFcnJvcihyZWdleHAgKyAnIGlzIG5vdCBhIHJlZ2V4cCEnKTtcbiAgICB2YXIgUyA9IFN0cmluZyh0aGlzKTtcbiAgICB2YXIgZmxhZ3MgPSAnZmxhZ3MnIGluIFJlZ0V4cFByb3RvID8gU3RyaW5nKHJlZ2V4cC5mbGFncykgOiBnZXRGbGFncy5jYWxsKHJlZ2V4cCk7XG4gICAgdmFyIHJ4ID0gbmV3IFJlZ0V4cChyZWdleHAuc291cmNlLCB+ZmxhZ3MuaW5kZXhPZignZycpID8gZmxhZ3MgOiAnZycgKyBmbGFncyk7XG4gICAgcngubGFzdEluZGV4ID0gdG9MZW5ndGgocmVnZXhwLmxhc3RJbmRleCk7XG4gICAgcmV0dXJuIG5ldyAkUmVnRXhwU3RyaW5nSXRlcmF0b3IocngsIFMpO1xuICB9XG59KTtcbiIsIid1c2Ugc3RyaWN0Jztcbi8vIGh0dHBzOi8vZ2l0aHViLmNvbS9zZWJtYXJrYmFnZS9lY21hc2NyaXB0LXN0cmluZy1sZWZ0LXJpZ2h0LXRyaW1cbnJlcXVpcmUoJy4vX3N0cmluZy10cmltJykoJ3RyaW1SaWdodCcsIGZ1bmN0aW9uICgkdHJpbSkge1xuICByZXR1cm4gZnVuY3Rpb24gdHJpbVJpZ2h0KCkge1xuICAgIHJldHVybiAkdHJpbSh0aGlzLCAyKTtcbiAgfTtcbn0sICd0cmltRW5kJyk7XG4iLCIndXNlIHN0cmljdCc7XG4vLyBodHRwczovL2dpdGh1Yi5jb20vc2VibWFya2JhZ2UvZWNtYXNjcmlwdC1zdHJpbmctbGVmdC1yaWdodC10cmltXG5yZXF1aXJlKCcuL19zdHJpbmctdHJpbScpKCd0cmltTGVmdCcsIGZ1bmN0aW9uICgkdHJpbSkge1xuICByZXR1cm4gZnVuY3Rpb24gdHJpbUxlZnQoKSB7XG4gICAgcmV0dXJuICR0cmltKHRoaXMsIDEpO1xuICB9O1xufSwgJ3RyaW1TdGFydCcpO1xuIiwiJ3VzZSBzdHJpY3QnO1xuLy8gaHR0cHM6Ly9naXRodWIuY29tL3RjMzkvcHJvcG9zYWwtc3RyaW5nLXBhZC1zdGFydC1lbmRcbnZhciAkZXhwb3J0ID0gcmVxdWlyZSgnLi9fZXhwb3J0Jyk7XG52YXIgJHBhZCA9IHJlcXVpcmUoJy4vX3N0cmluZy1wYWQnKTtcbnZhciB1c2VyQWdlbnQgPSByZXF1aXJlKCcuL191c2VyLWFnZW50Jyk7XG5cbi8vIGh0dHBzOi8vZ2l0aHViLmNvbS96bG9pcm9jay9jb3JlLWpzL2lzc3Vlcy8yODBcbiRleHBvcnQoJGV4cG9ydC5QICsgJGV4cG9ydC5GICogL1ZlcnNpb25cXC8xMFxcLlxcZCsoXFwuXFxkKyk/IFNhZmFyaVxcLy8udGVzdCh1c2VyQWdlbnQpLCAnU3RyaW5nJywge1xuICBwYWRFbmQ6IGZ1bmN0aW9uIHBhZEVuZChtYXhMZW5ndGggLyogLCBmaWxsU3RyaW5nID0gJyAnICovKSB7XG4gICAgcmV0dXJuICRwYWQodGhpcywgbWF4TGVuZ3RoLCBhcmd1bWVudHMubGVuZ3RoID4gMSA/IGFyZ3VtZW50c1sxXSA6IHVuZGVmaW5lZCwgZmFsc2UpO1xuICB9XG59KTtcbiIsIid1c2Ugc3RyaWN0Jztcbi8vIGh0dHBzOi8vZ2l0aHViLmNvbS90YzM5L3Byb3Bvc2FsLXN0cmluZy1wYWQtc3RhcnQtZW5kXG52YXIgJGV4cG9ydCA9IHJlcXVpcmUoJy4vX2V4cG9ydCcpO1xudmFyICRwYWQgPSByZXF1aXJlKCcuL19zdHJpbmctcGFkJyk7XG52YXIgdXNlckFnZW50ID0gcmVxdWlyZSgnLi9fdXNlci1hZ2VudCcpO1xuXG4vLyBodHRwczovL2dpdGh1Yi5jb20vemxvaXJvY2svY29yZS1qcy9pc3N1ZXMvMjgwXG4kZXhwb3J0KCRleHBvcnQuUCArICRleHBvcnQuRiAqIC9WZXJzaW9uXFwvMTBcXC5cXGQrKFxcLlxcZCspPyBTYWZhcmlcXC8vLnRlc3QodXNlckFnZW50KSwgJ1N0cmluZycsIHtcbiAgcGFkU3RhcnQ6IGZ1bmN0aW9uIHBhZFN0YXJ0KG1heExlbmd0aCAvKiAsIGZpbGxTdHJpbmcgPSAnICcgKi8pIHtcbiAgICByZXR1cm4gJHBhZCh0aGlzLCBtYXhMZW5ndGgsIGFyZ3VtZW50cy5sZW5ndGggPiAxID8gYXJndW1lbnRzWzFdIDogdW5kZWZpbmVkLCB0cnVlKTtcbiAgfVxufSk7XG4iLCIndXNlIHN0cmljdCc7XG4vLyBodHRwczovL2dpdGh1Yi5jb20vbWF0aGlhc2J5bmVucy9TdHJpbmcucHJvdG90eXBlLmF0XG52YXIgJGV4cG9ydCA9IHJlcXVpcmUoJy4vX2V4cG9ydCcpO1xudmFyICRhdCA9IHJlcXVpcmUoJy4vX3N0cmluZy1hdCcpKHRydWUpO1xuXG4kZXhwb3J0KCRleHBvcnQuUCwgJ1N0cmluZycsIHtcbiAgYXQ6IGZ1bmN0aW9uIGF0KHBvcykge1xuICAgIHJldHVybiAkYXQodGhpcywgcG9zKTtcbiAgfVxufSk7XG4iLCIndXNlIHN0cmljdCc7XG4vLyBodHRwczovL3RjMzkuZ2l0aHViLmlvL3Byb3Bvc2FsLWZsYXRNYXAvI3NlYy1BcnJheS5wcm90b3R5cGUuZmxhdHRlblxudmFyICRleHBvcnQgPSByZXF1aXJlKCcuL19leHBvcnQnKTtcbnZhciBmbGF0dGVuSW50b0FycmF5ID0gcmVxdWlyZSgnLi9fZmxhdHRlbi1pbnRvLWFycmF5Jyk7XG52YXIgdG9PYmplY3QgPSByZXF1aXJlKCcuL190by1vYmplY3QnKTtcbnZhciB0b0xlbmd0aCA9IHJlcXVpcmUoJy4vX3RvLWxlbmd0aCcpO1xudmFyIHRvSW50ZWdlciA9IHJlcXVpcmUoJy4vX3RvLWludGVnZXInKTtcbnZhciBhcnJheVNwZWNpZXNDcmVhdGUgPSByZXF1aXJlKCcuL19hcnJheS1zcGVjaWVzLWNyZWF0ZScpO1xuXG4kZXhwb3J0KCRleHBvcnQuUCwgJ0FycmF5Jywge1xuICBmbGF0dGVuOiBmdW5jdGlvbiBmbGF0dGVuKC8qIGRlcHRoQXJnID0gMSAqLykge1xuICAgIHZhciBkZXB0aEFyZyA9IGFyZ3VtZW50c1swXTtcbiAgICB2YXIgTyA9IHRvT2JqZWN0KHRoaXMpO1xuICAgIHZhciBzb3VyY2VMZW4gPSB0b0xlbmd0aChPLmxlbmd0aCk7XG4gICAgdmFyIEEgPSBhcnJheVNwZWNpZXNDcmVhdGUoTywgMCk7XG4gICAgZmxhdHRlbkludG9BcnJheShBLCBPLCBPLCBzb3VyY2VMZW4sIDAsIGRlcHRoQXJnID09PSB1bmRlZmluZWQgPyAxIDogdG9JbnRlZ2VyKGRlcHRoQXJnKSk7XG4gICAgcmV0dXJuIEE7XG4gIH1cbn0pO1xuXG5yZXF1aXJlKCcuL19hZGQtdG8tdW5zY29wYWJsZXMnKSgnZmxhdHRlbicpO1xuIiwiJ3VzZSBzdHJpY3QnO1xuLy8gaHR0cHM6Ly90YzM5LmdpdGh1Yi5pby9wcm9wb3NhbC1mbGF0TWFwLyNzZWMtQXJyYXkucHJvdG90eXBlLmZsYXRNYXBcbnZhciAkZXhwb3J0ID0gcmVxdWlyZSgnLi9fZXhwb3J0Jyk7XG52YXIgZmxhdHRlbkludG9BcnJheSA9IHJlcXVpcmUoJy4vX2ZsYXR0ZW4taW50by1hcnJheScpO1xudmFyIHRvT2JqZWN0ID0gcmVxdWlyZSgnLi9fdG8tb2JqZWN0Jyk7XG52YXIgdG9MZW5ndGggPSByZXF1aXJlKCcuL190by1sZW5ndGgnKTtcbnZhciBhRnVuY3Rpb24gPSByZXF1aXJlKCcuL19hLWZ1bmN0aW9uJyk7XG52YXIgYXJyYXlTcGVjaWVzQ3JlYXRlID0gcmVxdWlyZSgnLi9fYXJyYXktc3BlY2llcy1jcmVhdGUnKTtcblxuJGV4cG9ydCgkZXhwb3J0LlAsICdBcnJheScsIHtcbiAgZmxhdE1hcDogZnVuY3Rpb24gZmxhdE1hcChjYWxsYmFja2ZuIC8qICwgdGhpc0FyZyAqLykge1xuICAgIHZhciBPID0gdG9PYmplY3QodGhpcyk7XG4gICAgdmFyIHNvdXJjZUxlbiwgQTtcbiAgICBhRnVuY3Rpb24oY2FsbGJhY2tmbik7XG4gICAgc291cmNlTGVuID0gdG9MZW5ndGgoTy5sZW5ndGgpO1xuICAgIEEgPSBhcnJheVNwZWNpZXNDcmVhdGUoTywgMCk7XG4gICAgZmxhdHRlbkludG9BcnJheShBLCBPLCBPLCBzb3VyY2VMZW4sIDAsIDEsIGNhbGxiYWNrZm4sIGFyZ3VtZW50c1sxXSk7XG4gICAgcmV0dXJuIEE7XG4gIH1cbn0pO1xuXG5yZXF1aXJlKCcuL19hZGQtdG8tdW5zY29wYWJsZXMnKSgnZmxhdE1hcCcpO1xuIiwiJ3VzZSBzdHJpY3QnO1xuLy8gaHR0cHM6Ly9naXRodWIuY29tL3RjMzkvQXJyYXkucHJvdG90eXBlLmluY2x1ZGVzXG52YXIgJGV4cG9ydCA9IHJlcXVpcmUoJy4vX2V4cG9ydCcpO1xudmFyICRpbmNsdWRlcyA9IHJlcXVpcmUoJy4vX2FycmF5LWluY2x1ZGVzJykodHJ1ZSk7XG5cbiRleHBvcnQoJGV4cG9ydC5QLCAnQXJyYXknLCB7XG4gIGluY2x1ZGVzOiBmdW5jdGlvbiBpbmNsdWRlcyhlbCAvKiAsIGZyb21JbmRleCA9IDAgKi8pIHtcbiAgICByZXR1cm4gJGluY2x1ZGVzKHRoaXMsIGVsLCBhcmd1bWVudHMubGVuZ3RoID4gMSA/IGFyZ3VtZW50c1sxXSA6IHVuZGVmaW5lZCk7XG4gIH1cbn0pO1xuXG5yZXF1aXJlKCcuL19hZGQtdG8tdW5zY29wYWJsZXMnKSgnaW5jbHVkZXMnKTtcbiIsIi8vIDI2LjEuMTQgUmVmbGVjdC5zZXRQcm90b3R5cGVPZih0YXJnZXQsIHByb3RvKVxudmFyICRleHBvcnQgPSByZXF1aXJlKCcuL19leHBvcnQnKTtcbnZhciBzZXRQcm90byA9IHJlcXVpcmUoJy4vX3NldC1wcm90bycpO1xuXG5pZiAoc2V0UHJvdG8pICRleHBvcnQoJGV4cG9ydC5TLCAnUmVmbGVjdCcsIHtcbiAgc2V0UHJvdG90eXBlT2Y6IGZ1bmN0aW9uIHNldFByb3RvdHlwZU9mKHRhcmdldCwgcHJvdG8pIHtcbiAgICBzZXRQcm90by5jaGVjayh0YXJnZXQsIHByb3RvKTtcbiAgICB0cnkge1xuICAgICAgc2V0UHJvdG8uc2V0KHRhcmdldCwgcHJvdG8pO1xuICAgICAgcmV0dXJuIHRydWU7XG4gICAgfSBjYXRjaCAoZSkge1xuICAgICAgcmV0dXJuIGZhbHNlO1xuICAgIH1cbiAgfVxufSk7XG4iLCIvLyAyNi4xLjEzIFJlZmxlY3Quc2V0KHRhcmdldCwgcHJvcGVydHlLZXksIFYgWywgcmVjZWl2ZXJdKVxudmFyIGRQID0gcmVxdWlyZSgnLi9fb2JqZWN0LWRwJyk7XG52YXIgZ09QRCA9IHJlcXVpcmUoJy4vX29iamVjdC1nb3BkJyk7XG52YXIgZ2V0UHJvdG90eXBlT2YgPSByZXF1aXJlKCcuL19vYmplY3QtZ3BvJyk7XG52YXIgaGFzID0gcmVxdWlyZSgnLi9faGFzJyk7XG52YXIgJGV4cG9ydCA9IHJlcXVpcmUoJy4vX2V4cG9ydCcpO1xudmFyIGNyZWF0ZURlc2MgPSByZXF1aXJlKCcuL19wcm9wZXJ0eS1kZXNjJyk7XG52YXIgYW5PYmplY3QgPSByZXF1aXJlKCcuL19hbi1vYmplY3QnKTtcbnZhciBpc09iamVjdCA9IHJlcXVpcmUoJy4vX2lzLW9iamVjdCcpO1xuXG5mdW5jdGlvbiBzZXQodGFyZ2V0LCBwcm9wZXJ0eUtleSwgViAvKiAsIHJlY2VpdmVyICovKSB7XG4gIHZhciByZWNlaXZlciA9IGFyZ3VtZW50cy5sZW5ndGggPCA0ID8gdGFyZ2V0IDogYXJndW1lbnRzWzNdO1xuICB2YXIgb3duRGVzYyA9IGdPUEQuZihhbk9iamVjdCh0YXJnZXQpLCBwcm9wZXJ0eUtleSk7XG4gIHZhciBleGlzdGluZ0Rlc2NyaXB0b3IsIHByb3RvO1xuICBpZiAoIW93bkRlc2MpIHtcbiAgICBpZiAoaXNPYmplY3QocHJvdG8gPSBnZXRQcm90b3R5cGVPZih0YXJnZXQpKSkge1xuICAgICAgcmV0dXJuIHNldChwcm90bywgcHJvcGVydHlLZXksIFYsIHJlY2VpdmVyKTtcbiAgICB9XG4gICAgb3duRGVzYyA9IGNyZWF0ZURlc2MoMCk7XG4gIH1cbiAgaWYgKGhhcyhvd25EZXNjLCAndmFsdWUnKSkge1xuICAgIGlmIChvd25EZXNjLndyaXRhYmxlID09PSBmYWxzZSB8fCAhaXNPYmplY3QocmVjZWl2ZXIpKSByZXR1cm4gZmFsc2U7XG4gICAgaWYgKGV4aXN0aW5nRGVzY3JpcHRvciA9IGdPUEQuZihyZWNlaXZlciwgcHJvcGVydHlLZXkpKSB7XG4gICAgICBpZiAoZXhpc3RpbmdEZXNjcmlwdG9yLmdldCB8fCBleGlzdGluZ0Rlc2NyaXB0b3Iuc2V0IHx8IGV4aXN0aW5nRGVzY3JpcHRvci53cml0YWJsZSA9PT0gZmFsc2UpIHJldHVybiBmYWxzZTtcbiAgICAgIGV4aXN0aW5nRGVzY3JpcHRvci52YWx1ZSA9IFY7XG4gICAgICBkUC5mKHJlY2VpdmVyLCBwcm9wZXJ0eUtleSwgZXhpc3RpbmdEZXNjcmlwdG9yKTtcbiAgICB9IGVsc2UgZFAuZihyZWNlaXZlciwgcHJvcGVydHlLZXksIGNyZWF0ZURlc2MoMCwgVikpO1xuICAgIHJldHVybiB0cnVlO1xuICB9XG4gIHJldHVybiBvd25EZXNjLnNldCA9PT0gdW5kZWZpbmVkID8gZmFsc2UgOiAob3duRGVzYy5zZXQuY2FsbChyZWNlaXZlciwgViksIHRydWUpO1xufVxuXG4kZXhwb3J0KCRleHBvcnQuUywgJ1JlZmxlY3QnLCB7IHNldDogc2V0IH0pO1xuIiwiLy8gMjYuMS4xMiBSZWZsZWN0LnByZXZlbnRFeHRlbnNpb25zKHRhcmdldClcbnZhciAkZXhwb3J0ID0gcmVxdWlyZSgnLi9fZXhwb3J0Jyk7XG52YXIgYW5PYmplY3QgPSByZXF1aXJlKCcuL19hbi1vYmplY3QnKTtcbnZhciAkcHJldmVudEV4dGVuc2lvbnMgPSBPYmplY3QucHJldmVudEV4dGVuc2lvbnM7XG5cbiRleHBvcnQoJGV4cG9ydC5TLCAnUmVmbGVjdCcsIHtcbiAgcHJldmVudEV4dGVuc2lvbnM6IGZ1bmN0aW9uIHByZXZlbnRFeHRlbnNpb25zKHRhcmdldCkge1xuICAgIGFuT2JqZWN0KHRhcmdldCk7XG4gICAgdHJ5IHtcbiAgICAgIGlmICgkcHJldmVudEV4dGVuc2lvbnMpICRwcmV2ZW50RXh0ZW5zaW9ucyh0YXJnZXQpO1xuICAgICAgcmV0dXJuIHRydWU7XG4gICAgfSBjYXRjaCAoZSkge1xuICAgICAgcmV0dXJuIGZhbHNlO1xuICAgIH1cbiAgfVxufSk7XG4iLCIvLyAyNi4xLjExIFJlZmxlY3Qub3duS2V5cyh0YXJnZXQpXG52YXIgJGV4cG9ydCA9IHJlcXVpcmUoJy4vX2V4cG9ydCcpO1xuXG4kZXhwb3J0KCRleHBvcnQuUywgJ1JlZmxlY3QnLCB7IG93bktleXM6IHJlcXVpcmUoJy4vX293bi1rZXlzJykgfSk7XG4iLCIvLyAyNi4xLjEwIFJlZmxlY3QuaXNFeHRlbnNpYmxlKHRhcmdldClcbnZhciAkZXhwb3J0ID0gcmVxdWlyZSgnLi9fZXhwb3J0Jyk7XG52YXIgYW5PYmplY3QgPSByZXF1aXJlKCcuL19hbi1vYmplY3QnKTtcbnZhciAkaXNFeHRlbnNpYmxlID0gT2JqZWN0LmlzRXh0ZW5zaWJsZTtcblxuJGV4cG9ydCgkZXhwb3J0LlMsICdSZWZsZWN0Jywge1xuICBpc0V4dGVuc2libGU6IGZ1bmN0aW9uIGlzRXh0ZW5zaWJsZSh0YXJnZXQpIHtcbiAgICBhbk9iamVjdCh0YXJnZXQpO1xuICAgIHJldHVybiAkaXNFeHRlbnNpYmxlID8gJGlzRXh0ZW5zaWJsZSh0YXJnZXQpIDogdHJ1ZTtcbiAgfVxufSk7XG4iLCIvLyAyNi4xLjkgUmVmbGVjdC5oYXModGFyZ2V0LCBwcm9wZXJ0eUtleSlcbnZhciAkZXhwb3J0ID0gcmVxdWlyZSgnLi9fZXhwb3J0Jyk7XG5cbiRleHBvcnQoJGV4cG9ydC5TLCAnUmVmbGVjdCcsIHtcbiAgaGFzOiBmdW5jdGlvbiBoYXModGFyZ2V0LCBwcm9wZXJ0eUtleSkge1xuICAgIHJldHVybiBwcm9wZXJ0eUtleSBpbiB0YXJnZXQ7XG4gIH1cbn0pO1xuIiwiLy8gMjYuMS44IFJlZmxlY3QuZ2V0UHJvdG90eXBlT2YodGFyZ2V0KVxudmFyICRleHBvcnQgPSByZXF1aXJlKCcuL19leHBvcnQnKTtcbnZhciBnZXRQcm90byA9IHJlcXVpcmUoJy4vX29iamVjdC1ncG8nKTtcbnZhciBhbk9iamVjdCA9IHJlcXVpcmUoJy4vX2FuLW9iamVjdCcpO1xuXG4kZXhwb3J0KCRleHBvcnQuUywgJ1JlZmxlY3QnLCB7XG4gIGdldFByb3RvdHlwZU9mOiBmdW5jdGlvbiBnZXRQcm90b3R5cGVPZih0YXJnZXQpIHtcbiAgICByZXR1cm4gZ2V0UHJvdG8oYW5PYmplY3QodGFyZ2V0KSk7XG4gIH1cbn0pO1xuIiwiLy8gMjYuMS43IFJlZmxlY3QuZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yKHRhcmdldCwgcHJvcGVydHlLZXkpXG52YXIgZ09QRCA9IHJlcXVpcmUoJy4vX29iamVjdC1nb3BkJyk7XG52YXIgJGV4cG9ydCA9IHJlcXVpcmUoJy4vX2V4cG9ydCcpO1xudmFyIGFuT2JqZWN0ID0gcmVxdWlyZSgnLi9fYW4tb2JqZWN0Jyk7XG5cbiRleHBvcnQoJGV4cG9ydC5TLCAnUmVmbGVjdCcsIHtcbiAgZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yOiBmdW5jdGlvbiBnZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3IodGFyZ2V0LCBwcm9wZXJ0eUtleSkge1xuICAgIHJldHVybiBnT1BELmYoYW5PYmplY3QodGFyZ2V0KSwgcHJvcGVydHlLZXkpO1xuICB9XG59KTtcbiIsIi8vIDI2LjEuNiBSZWZsZWN0LmdldCh0YXJnZXQsIHByb3BlcnR5S2V5IFssIHJlY2VpdmVyXSlcbnZhciBnT1BEID0gcmVxdWlyZSgnLi9fb2JqZWN0LWdvcGQnKTtcbnZhciBnZXRQcm90b3R5cGVPZiA9IHJlcXVpcmUoJy4vX29iamVjdC1ncG8nKTtcbnZhciBoYXMgPSByZXF1aXJlKCcuL19oYXMnKTtcbnZhciAkZXhwb3J0ID0gcmVxdWlyZSgnLi9fZXhwb3J0Jyk7XG52YXIgaXNPYmplY3QgPSByZXF1aXJlKCcuL19pcy1vYmplY3QnKTtcbnZhciBhbk9iamVjdCA9IHJlcXVpcmUoJy4vX2FuLW9iamVjdCcpO1xuXG5mdW5jdGlvbiBnZXQodGFyZ2V0LCBwcm9wZXJ0eUtleSAvKiAsIHJlY2VpdmVyICovKSB7XG4gIHZhciByZWNlaXZlciA9IGFyZ3VtZW50cy5sZW5ndGggPCAzID8gdGFyZ2V0IDogYXJndW1lbnRzWzJdO1xuICB2YXIgZGVzYywgcHJvdG87XG4gIGlmIChhbk9iamVjdCh0YXJnZXQpID09PSByZWNlaXZlcikgcmV0dXJuIHRhcmdldFtwcm9wZXJ0eUtleV07XG4gIGlmIChkZXNjID0gZ09QRC5mKHRhcmdldCwgcHJvcGVydHlLZXkpKSByZXR1cm4gaGFzKGRlc2MsICd2YWx1ZScpXG4gICAgPyBkZXNjLnZhbHVlXG4gICAgOiBkZXNjLmdldCAhPT0gdW5kZWZpbmVkXG4gICAgICA/IGRlc2MuZ2V0LmNhbGwocmVjZWl2ZXIpXG4gICAgICA6IHVuZGVmaW5lZDtcbiAgaWYgKGlzT2JqZWN0KHByb3RvID0gZ2V0UHJvdG90eXBlT2YodGFyZ2V0KSkpIHJldHVybiBnZXQocHJvdG8sIHByb3BlcnR5S2V5LCByZWNlaXZlcik7XG59XG5cbiRleHBvcnQoJGV4cG9ydC5TLCAnUmVmbGVjdCcsIHsgZ2V0OiBnZXQgfSk7XG4iLCIndXNlIHN0cmljdCc7XG4vLyAyNi4xLjUgUmVmbGVjdC5lbnVtZXJhdGUodGFyZ2V0KVxudmFyICRleHBvcnQgPSByZXF1aXJlKCcuL19leHBvcnQnKTtcbnZhciBhbk9iamVjdCA9IHJlcXVpcmUoJy4vX2FuLW9iamVjdCcpO1xudmFyIEVudW1lcmF0ZSA9IGZ1bmN0aW9uIChpdGVyYXRlZCkge1xuICB0aGlzLl90ID0gYW5PYmplY3QoaXRlcmF0ZWQpOyAvLyB0YXJnZXRcbiAgdGhpcy5faSA9IDA7ICAgICAgICAgICAgICAgICAgLy8gbmV4dCBpbmRleFxuICB2YXIga2V5cyA9IHRoaXMuX2sgPSBbXTsgICAgICAvLyBrZXlzXG4gIHZhciBrZXk7XG4gIGZvciAoa2V5IGluIGl0ZXJhdGVkKSBrZXlzLnB1c2goa2V5KTtcbn07XG5yZXF1aXJlKCcuL19pdGVyLWNyZWF0ZScpKEVudW1lcmF0ZSwgJ09iamVjdCcsIGZ1bmN0aW9uICgpIHtcbiAgdmFyIHRoYXQgPSB0aGlzO1xuICB2YXIga2V5cyA9IHRoYXQuX2s7XG4gIHZhciBrZXk7XG4gIGRvIHtcbiAgICBpZiAodGhhdC5faSA+PSBrZXlzLmxlbmd0aCkgcmV0dXJuIHsgdmFsdWU6IHVuZGVmaW5lZCwgZG9uZTogdHJ1ZSB9O1xuICB9IHdoaWxlICghKChrZXkgPSBrZXlzW3RoYXQuX2krK10pIGluIHRoYXQuX3QpKTtcbiAgcmV0dXJuIHsgdmFsdWU6IGtleSwgZG9uZTogZmFsc2UgfTtcbn0pO1xuXG4kZXhwb3J0KCRleHBvcnQuUywgJ1JlZmxlY3QnLCB7XG4gIGVudW1lcmF0ZTogZnVuY3Rpb24gZW51bWVyYXRlKHRhcmdldCkge1xuICAgIHJldHVybiBuZXcgRW51bWVyYXRlKHRhcmdldCk7XG4gIH1cbn0pO1xuIiwiLy8gMjYuMS40IFJlZmxlY3QuZGVsZXRlUHJvcGVydHkodGFyZ2V0LCBwcm9wZXJ0eUtleSlcbnZhciAkZXhwb3J0ID0gcmVxdWlyZSgnLi9fZXhwb3J0Jyk7XG52YXIgZ09QRCA9IHJlcXVpcmUoJy4vX29iamVjdC1nb3BkJykuZjtcbnZhciBhbk9iamVjdCA9IHJlcXVpcmUoJy4vX2FuLW9iamVjdCcpO1xuXG4kZXhwb3J0KCRleHBvcnQuUywgJ1JlZmxlY3QnLCB7XG4gIGRlbGV0ZVByb3BlcnR5OiBmdW5jdGlvbiBkZWxldGVQcm9wZXJ0eSh0YXJnZXQsIHByb3BlcnR5S2V5KSB7XG4gICAgdmFyIGRlc2MgPSBnT1BEKGFuT2JqZWN0KHRhcmdldCksIHByb3BlcnR5S2V5KTtcbiAgICByZXR1cm4gZGVzYyAmJiAhZGVzYy5jb25maWd1cmFibGUgPyBmYWxzZSA6IGRlbGV0ZSB0YXJnZXRbcHJvcGVydHlLZXldO1xuICB9XG59KTtcbiIsIi8vIDI2LjEuMyBSZWZsZWN0LmRlZmluZVByb3BlcnR5KHRhcmdldCwgcHJvcGVydHlLZXksIGF0dHJpYnV0ZXMpXG52YXIgZFAgPSByZXF1aXJlKCcuL19vYmplY3QtZHAnKTtcbnZhciAkZXhwb3J0ID0gcmVxdWlyZSgnLi9fZXhwb3J0Jyk7XG52YXIgYW5PYmplY3QgPSByZXF1aXJlKCcuL19hbi1vYmplY3QnKTtcbnZhciB0b1ByaW1pdGl2ZSA9IHJlcXVpcmUoJy4vX3RvLXByaW1pdGl2ZScpO1xuXG4vLyBNUyBFZGdlIGhhcyBicm9rZW4gUmVmbGVjdC5kZWZpbmVQcm9wZXJ0eSAtIHRocm93aW5nIGluc3RlYWQgb2YgcmV0dXJuaW5nIGZhbHNlXG4kZXhwb3J0KCRleHBvcnQuUyArICRleHBvcnQuRiAqIHJlcXVpcmUoJy4vX2ZhaWxzJykoZnVuY3Rpb24gKCkge1xuICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgbm8tdW5kZWZcbiAgUmVmbGVjdC5kZWZpbmVQcm9wZXJ0eShkUC5mKHt9LCAxLCB7IHZhbHVlOiAxIH0pLCAxLCB7IHZhbHVlOiAyIH0pO1xufSksICdSZWZsZWN0Jywge1xuICBkZWZpbmVQcm9wZXJ0eTogZnVuY3Rpb24gZGVmaW5lUHJvcGVydHkodGFyZ2V0LCBwcm9wZXJ0eUtleSwgYXR0cmlidXRlcykge1xuICAgIGFuT2JqZWN0KHRhcmdldCk7XG4gICAgcHJvcGVydHlLZXkgPSB0b1ByaW1pdGl2ZShwcm9wZXJ0eUtleSwgdHJ1ZSk7XG4gICAgYW5PYmplY3QoYXR0cmlidXRlcyk7XG4gICAgdHJ5IHtcbiAgICAgIGRQLmYodGFyZ2V0LCBwcm9wZXJ0eUtleSwgYXR0cmlidXRlcyk7XG4gICAgICByZXR1cm4gdHJ1ZTtcbiAgICB9IGNhdGNoIChlKSB7XG4gICAgICByZXR1cm4gZmFsc2U7XG4gICAgfVxuICB9XG59KTtcbiIsIi8vIDI2LjEuMiBSZWZsZWN0LmNvbnN0cnVjdCh0YXJnZXQsIGFyZ3VtZW50c0xpc3QgWywgbmV3VGFyZ2V0XSlcbnZhciAkZXhwb3J0ID0gcmVxdWlyZSgnLi9fZXhwb3J0Jyk7XG52YXIgY3JlYXRlID0gcmVxdWlyZSgnLi9fb2JqZWN0LWNyZWF0ZScpO1xudmFyIGFGdW5jdGlvbiA9IHJlcXVpcmUoJy4vX2EtZnVuY3Rpb24nKTtcbnZhciBhbk9iamVjdCA9IHJlcXVpcmUoJy4vX2FuLW9iamVjdCcpO1xudmFyIGlzT2JqZWN0ID0gcmVxdWlyZSgnLi9faXMtb2JqZWN0Jyk7XG52YXIgZmFpbHMgPSByZXF1aXJlKCcuL19mYWlscycpO1xudmFyIGJpbmQgPSByZXF1aXJlKCcuL19iaW5kJyk7XG52YXIgckNvbnN0cnVjdCA9IChyZXF1aXJlKCcuL19nbG9iYWwnKS5SZWZsZWN0IHx8IHt9KS5jb25zdHJ1Y3Q7XG5cbi8vIE1TIEVkZ2Ugc3VwcG9ydHMgb25seSAyIGFyZ3VtZW50cyBhbmQgYXJndW1lbnRzTGlzdCBhcmd1bWVudCBpcyBvcHRpb25hbFxuLy8gRkYgTmlnaHRseSBzZXRzIHRoaXJkIGFyZ3VtZW50IGFzIGBuZXcudGFyZ2V0YCwgYnV0IGRvZXMgbm90IGNyZWF0ZSBgdGhpc2AgZnJvbSBpdFxudmFyIE5FV19UQVJHRVRfQlVHID0gZmFpbHMoZnVuY3Rpb24gKCkge1xuICBmdW5jdGlvbiBGKCkgeyAvKiBlbXB0eSAqLyB9XG4gIHJldHVybiAhKHJDb25zdHJ1Y3QoZnVuY3Rpb24gKCkgeyAvKiBlbXB0eSAqLyB9LCBbXSwgRikgaW5zdGFuY2VvZiBGKTtcbn0pO1xudmFyIEFSR1NfQlVHID0gIWZhaWxzKGZ1bmN0aW9uICgpIHtcbiAgckNvbnN0cnVjdChmdW5jdGlvbiAoKSB7IC8qIGVtcHR5ICovIH0pO1xufSk7XG5cbiRleHBvcnQoJGV4cG9ydC5TICsgJGV4cG9ydC5GICogKE5FV19UQVJHRVRfQlVHIHx8IEFSR1NfQlVHKSwgJ1JlZmxlY3QnLCB7XG4gIGNvbnN0cnVjdDogZnVuY3Rpb24gY29uc3RydWN0KFRhcmdldCwgYXJncyAvKiAsIG5ld1RhcmdldCAqLykge1xuICAgIGFGdW5jdGlvbihUYXJnZXQpO1xuICAgIGFuT2JqZWN0KGFyZ3MpO1xuICAgIHZhciBuZXdUYXJnZXQgPSBhcmd1bWVudHMubGVuZ3RoIDwgMyA/IFRhcmdldCA6IGFGdW5jdGlvbihhcmd1bWVudHNbMl0pO1xuICAgIGlmIChBUkdTX0JVRyAmJiAhTkVXX1RBUkdFVF9CVUcpIHJldHVybiByQ29uc3RydWN0KFRhcmdldCwgYXJncywgbmV3VGFyZ2V0KTtcbiAgICBpZiAoVGFyZ2V0ID09IG5ld1RhcmdldCkge1xuICAgICAgLy8gdy9vIGFsdGVyZWQgbmV3VGFyZ2V0LCBvcHRpbWl6YXRpb24gZm9yIDAtNCBhcmd1bWVudHNcbiAgICAgIHN3aXRjaCAoYXJncy5sZW5ndGgpIHtcbiAgICAgICAgY2FzZSAwOiByZXR1cm4gbmV3IFRhcmdldCgpO1xuICAgICAgICBjYXNlIDE6IHJldHVybiBuZXcgVGFyZ2V0KGFyZ3NbMF0pO1xuICAgICAgICBjYXNlIDI6IHJldHVybiBuZXcgVGFyZ2V0KGFyZ3NbMF0sIGFyZ3NbMV0pO1xuICAgICAgICBjYXNlIDM6IHJldHVybiBuZXcgVGFyZ2V0KGFyZ3NbMF0sIGFyZ3NbMV0sIGFyZ3NbMl0pO1xuICAgICAgICBjYXNlIDQ6IHJldHVybiBuZXcgVGFyZ2V0KGFyZ3NbMF0sIGFyZ3NbMV0sIGFyZ3NbMl0sIGFyZ3NbM10pO1xuICAgICAgfVxuICAgICAgLy8gdy9vIGFsdGVyZWQgbmV3VGFyZ2V0LCBsb3Qgb2YgYXJndW1lbnRzIGNhc2VcbiAgICAgIHZhciAkYXJncyA9IFtudWxsXTtcbiAgICAgICRhcmdzLnB1c2guYXBwbHkoJGFyZ3MsIGFyZ3MpO1xuICAgICAgcmV0dXJuIG5ldyAoYmluZC5hcHBseShUYXJnZXQsICRhcmdzKSkoKTtcbiAgICB9XG4gICAgLy8gd2l0aCBhbHRlcmVkIG5ld1RhcmdldCwgbm90IHN1cHBvcnQgYnVpbHQtaW4gY29uc3RydWN0b3JzXG4gICAgdmFyIHByb3RvID0gbmV3VGFyZ2V0LnByb3RvdHlwZTtcbiAgICB2YXIgaW5zdGFuY2UgPSBjcmVhdGUoaXNPYmplY3QocHJvdG8pID8gcHJvdG8gOiBPYmplY3QucHJvdG90eXBlKTtcbiAgICB2YXIgcmVzdWx0ID0gRnVuY3Rpb24uYXBwbHkuY2FsbChUYXJnZXQsIGluc3RhbmNlLCBhcmdzKTtcbiAgICByZXR1cm4gaXNPYmplY3QocmVzdWx0KSA/IHJlc3VsdCA6IGluc3RhbmNlO1xuICB9XG59KTtcbiIsIi8vIDI2LjEuMSBSZWZsZWN0LmFwcGx5KHRhcmdldCwgdGhpc0FyZ3VtZW50LCBhcmd1bWVudHNMaXN0KVxudmFyICRleHBvcnQgPSByZXF1aXJlKCcuL19leHBvcnQnKTtcbnZhciBhRnVuY3Rpb24gPSByZXF1aXJlKCcuL19hLWZ1bmN0aW9uJyk7XG52YXIgYW5PYmplY3QgPSByZXF1aXJlKCcuL19hbi1vYmplY3QnKTtcbnZhciByQXBwbHkgPSAocmVxdWlyZSgnLi9fZ2xvYmFsJykuUmVmbGVjdCB8fCB7fSkuYXBwbHk7XG52YXIgZkFwcGx5ID0gRnVuY3Rpb24uYXBwbHk7XG4vLyBNUyBFZGdlIGFyZ3VtZW50c0xpc3QgYXJndW1lbnQgaXMgb3B0aW9uYWxcbiRleHBvcnQoJGV4cG9ydC5TICsgJGV4cG9ydC5GICogIXJlcXVpcmUoJy4vX2ZhaWxzJykoZnVuY3Rpb24gKCkge1xuICByQXBwbHkoZnVuY3Rpb24gKCkgeyAvKiBlbXB0eSAqLyB9KTtcbn0pLCAnUmVmbGVjdCcsIHtcbiAgYXBwbHk6IGZ1bmN0aW9uIGFwcGx5KHRhcmdldCwgdGhpc0FyZ3VtZW50LCBhcmd1bWVudHNMaXN0KSB7XG4gICAgdmFyIFQgPSBhRnVuY3Rpb24odGFyZ2V0KTtcbiAgICB2YXIgTCA9IGFuT2JqZWN0KGFyZ3VtZW50c0xpc3QpO1xuICAgIHJldHVybiByQXBwbHkgPyByQXBwbHkoVCwgdGhpc0FyZ3VtZW50LCBMKSA6IGZBcHBseS5jYWxsKFQsIHRoaXNBcmd1bWVudCwgTCk7XG4gIH1cbn0pO1xuIiwicmVxdWlyZSgnLi9fdHlwZWQtYXJyYXknKSgnRmxvYXQ2NCcsIDgsIGZ1bmN0aW9uIChpbml0KSB7XG4gIHJldHVybiBmdW5jdGlvbiBGbG9hdDY0QXJyYXkoZGF0YSwgYnl0ZU9mZnNldCwgbGVuZ3RoKSB7XG4gICAgcmV0dXJuIGluaXQodGhpcywgZGF0YSwgYnl0ZU9mZnNldCwgbGVuZ3RoKTtcbiAgfTtcbn0pO1xuIiwicmVxdWlyZSgnLi9fdHlwZWQtYXJyYXknKSgnRmxvYXQzMicsIDQsIGZ1bmN0aW9uIChpbml0KSB7XG4gIHJldHVybiBmdW5jdGlvbiBGbG9hdDMyQXJyYXkoZGF0YSwgYnl0ZU9mZnNldCwgbGVuZ3RoKSB7XG4gICAgcmV0dXJuIGluaXQodGhpcywgZGF0YSwgYnl0ZU9mZnNldCwgbGVuZ3RoKTtcbiAgfTtcbn0pO1xuIiwicmVxdWlyZSgnLi9fdHlwZWQtYXJyYXknKSgnVWludDMyJywgNCwgZnVuY3Rpb24gKGluaXQpIHtcbiAgcmV0dXJuIGZ1bmN0aW9uIFVpbnQzMkFycmF5KGRhdGEsIGJ5dGVPZmZzZXQsIGxlbmd0aCkge1xuICAgIHJldHVybiBpbml0KHRoaXMsIGRhdGEsIGJ5dGVPZmZzZXQsIGxlbmd0aCk7XG4gIH07XG59KTtcbiIsInJlcXVpcmUoJy4vX3R5cGVkLWFycmF5JykoJ0ludDMyJywgNCwgZnVuY3Rpb24gKGluaXQpIHtcbiAgcmV0dXJuIGZ1bmN0aW9uIEludDMyQXJyYXkoZGF0YSwgYnl0ZU9mZnNldCwgbGVuZ3RoKSB7XG4gICAgcmV0dXJuIGluaXQodGhpcywgZGF0YSwgYnl0ZU9mZnNldCwgbGVuZ3RoKTtcbiAgfTtcbn0pO1xuIiwicmVxdWlyZSgnLi9fdHlwZWQtYXJyYXknKSgnVWludDE2JywgMiwgZnVuY3Rpb24gKGluaXQpIHtcbiAgcmV0dXJuIGZ1bmN0aW9uIFVpbnQxNkFycmF5KGRhdGEsIGJ5dGVPZmZzZXQsIGxlbmd0aCkge1xuICAgIHJldHVybiBpbml0KHRoaXMsIGRhdGEsIGJ5dGVPZmZzZXQsIGxlbmd0aCk7XG4gIH07XG59KTtcbiIsInJlcXVpcmUoJy4vX3R5cGVkLWFycmF5JykoJ0ludDE2JywgMiwgZnVuY3Rpb24gKGluaXQpIHtcbiAgcmV0dXJuIGZ1bmN0aW9uIEludDE2QXJyYXkoZGF0YSwgYnl0ZU9mZnNldCwgbGVuZ3RoKSB7XG4gICAgcmV0dXJuIGluaXQodGhpcywgZGF0YSwgYnl0ZU9mZnNldCwgbGVuZ3RoKTtcbiAgfTtcbn0pO1xuIiwicmVxdWlyZSgnLi9fdHlwZWQtYXJyYXknKSgnVWludDgnLCAxLCBmdW5jdGlvbiAoaW5pdCkge1xuICByZXR1cm4gZnVuY3Rpb24gVWludDhDbGFtcGVkQXJyYXkoZGF0YSwgYnl0ZU9mZnNldCwgbGVuZ3RoKSB7XG4gICAgcmV0dXJuIGluaXQodGhpcywgZGF0YSwgYnl0ZU9mZnNldCwgbGVuZ3RoKTtcbiAgfTtcbn0sIHRydWUpO1xuIiwicmVxdWlyZSgnLi9fdHlwZWQtYXJyYXknKSgnVWludDgnLCAxLCBmdW5jdGlvbiAoaW5pdCkge1xuICByZXR1cm4gZnVuY3Rpb24gVWludDhBcnJheShkYXRhLCBieXRlT2Zmc2V0LCBsZW5ndGgpIHtcbiAgICByZXR1cm4gaW5pdCh0aGlzLCBkYXRhLCBieXRlT2Zmc2V0LCBsZW5ndGgpO1xuICB9O1xufSk7XG4iLCJyZXF1aXJlKCcuL190eXBlZC1hcnJheScpKCdJbnQ4JywgMSwgZnVuY3Rpb24gKGluaXQpIHtcbiAgcmV0dXJuIGZ1bmN0aW9uIEludDhBcnJheShkYXRhLCBieXRlT2Zmc2V0LCBsZW5ndGgpIHtcbiAgICByZXR1cm4gaW5pdCh0aGlzLCBkYXRhLCBieXRlT2Zmc2V0LCBsZW5ndGgpO1xuICB9O1xufSk7XG4iLCJ2YXIgJGV4cG9ydCA9IHJlcXVpcmUoJy4vX2V4cG9ydCcpO1xuJGV4cG9ydCgkZXhwb3J0LkcgKyAkZXhwb3J0LlcgKyAkZXhwb3J0LkYgKiAhcmVxdWlyZSgnLi9fdHlwZWQnKS5BQlYsIHtcbiAgRGF0YVZpZXc6IHJlcXVpcmUoJy4vX3R5cGVkLWJ1ZmZlcicpLkRhdGFWaWV3XG59KTtcbiIsIid1c2Ugc3RyaWN0JztcbnZhciAkZXhwb3J0ID0gcmVxdWlyZSgnLi9fZXhwb3J0Jyk7XG52YXIgJHR5cGVkID0gcmVxdWlyZSgnLi9fdHlwZWQnKTtcbnZhciBidWZmZXIgPSByZXF1aXJlKCcuL190eXBlZC1idWZmZXInKTtcbnZhciBhbk9iamVjdCA9IHJlcXVpcmUoJy4vX2FuLW9iamVjdCcpO1xudmFyIHRvQWJzb2x1dGVJbmRleCA9IHJlcXVpcmUoJy4vX3RvLWFic29sdXRlLWluZGV4Jyk7XG52YXIgdG9MZW5ndGggPSByZXF1aXJlKCcuL190by1sZW5ndGgnKTtcbnZhciBpc09iamVjdCA9IHJlcXVpcmUoJy4vX2lzLW9iamVjdCcpO1xudmFyIEFycmF5QnVmZmVyID0gcmVxdWlyZSgnLi9fZ2xvYmFsJykuQXJyYXlCdWZmZXI7XG52YXIgc3BlY2llc0NvbnN0cnVjdG9yID0gcmVxdWlyZSgnLi9fc3BlY2llcy1jb25zdHJ1Y3RvcicpO1xudmFyICRBcnJheUJ1ZmZlciA9IGJ1ZmZlci5BcnJheUJ1ZmZlcjtcbnZhciAkRGF0YVZpZXcgPSBidWZmZXIuRGF0YVZpZXc7XG52YXIgJGlzVmlldyA9ICR0eXBlZC5BQlYgJiYgQXJyYXlCdWZmZXIuaXNWaWV3O1xudmFyICRzbGljZSA9ICRBcnJheUJ1ZmZlci5wcm90b3R5cGUuc2xpY2U7XG52YXIgVklFVyA9ICR0eXBlZC5WSUVXO1xudmFyIEFSUkFZX0JVRkZFUiA9ICdBcnJheUJ1ZmZlcic7XG5cbiRleHBvcnQoJGV4cG9ydC5HICsgJGV4cG9ydC5XICsgJGV4cG9ydC5GICogKEFycmF5QnVmZmVyICE9PSAkQXJyYXlCdWZmZXIpLCB7IEFycmF5QnVmZmVyOiAkQXJyYXlCdWZmZXIgfSk7XG5cbiRleHBvcnQoJGV4cG9ydC5TICsgJGV4cG9ydC5GICogISR0eXBlZC5DT05TVFIsIEFSUkFZX0JVRkZFUiwge1xuICAvLyAyNC4xLjMuMSBBcnJheUJ1ZmZlci5pc1ZpZXcoYXJnKVxuICBpc1ZpZXc6IGZ1bmN0aW9uIGlzVmlldyhpdCkge1xuICAgIHJldHVybiAkaXNWaWV3ICYmICRpc1ZpZXcoaXQpIHx8IGlzT2JqZWN0KGl0KSAmJiBWSUVXIGluIGl0O1xuICB9XG59KTtcblxuJGV4cG9ydCgkZXhwb3J0LlAgKyAkZXhwb3J0LlUgKyAkZXhwb3J0LkYgKiByZXF1aXJlKCcuL19mYWlscycpKGZ1bmN0aW9uICgpIHtcbiAgcmV0dXJuICFuZXcgJEFycmF5QnVmZmVyKDIpLnNsaWNlKDEsIHVuZGVmaW5lZCkuYnl0ZUxlbmd0aDtcbn0pLCBBUlJBWV9CVUZGRVIsIHtcbiAgLy8gMjQuMS40LjMgQXJyYXlCdWZmZXIucHJvdG90eXBlLnNsaWNlKHN0YXJ0LCBlbmQpXG4gIHNsaWNlOiBmdW5jdGlvbiBzbGljZShzdGFydCwgZW5kKSB7XG4gICAgaWYgKCRzbGljZSAhPT0gdW5kZWZpbmVkICYmIGVuZCA9PT0gdW5kZWZpbmVkKSByZXR1cm4gJHNsaWNlLmNhbGwoYW5PYmplY3QodGhpcyksIHN0YXJ0KTsgLy8gRkYgZml4XG4gICAgdmFyIGxlbiA9IGFuT2JqZWN0KHRoaXMpLmJ5dGVMZW5ndGg7XG4gICAgdmFyIGZpcnN0ID0gdG9BYnNvbHV0ZUluZGV4KHN0YXJ0LCBsZW4pO1xuICAgIHZhciBmaW5hbCA9IHRvQWJzb2x1dGVJbmRleChlbmQgPT09IHVuZGVmaW5lZCA/IGxlbiA6IGVuZCwgbGVuKTtcbiAgICB2YXIgcmVzdWx0ID0gbmV3IChzcGVjaWVzQ29uc3RydWN0b3IodGhpcywgJEFycmF5QnVmZmVyKSkodG9MZW5ndGgoZmluYWwgLSBmaXJzdCkpO1xuICAgIHZhciB2aWV3UyA9IG5ldyAkRGF0YVZpZXcodGhpcyk7XG4gICAgdmFyIHZpZXdUID0gbmV3ICREYXRhVmlldyhyZXN1bHQpO1xuICAgIHZhciBpbmRleCA9IDA7XG4gICAgd2hpbGUgKGZpcnN0IDwgZmluYWwpIHtcbiAgICAgIHZpZXdULnNldFVpbnQ4KGluZGV4KyssIHZpZXdTLmdldFVpbnQ4KGZpcnN0KyspKTtcbiAgICB9IHJldHVybiByZXN1bHQ7XG4gIH1cbn0pO1xuXG5yZXF1aXJlKCcuL19zZXQtc3BlY2llcycpKEFSUkFZX0JVRkZFUik7XG4iLCIndXNlIHN0cmljdCc7XG52YXIgd2VhayA9IHJlcXVpcmUoJy4vX2NvbGxlY3Rpb24td2VhaycpO1xudmFyIHZhbGlkYXRlID0gcmVxdWlyZSgnLi9fdmFsaWRhdGUtY29sbGVjdGlvbicpO1xudmFyIFdFQUtfU0VUID0gJ1dlYWtTZXQnO1xuXG4vLyAyMy40IFdlYWtTZXQgT2JqZWN0c1xucmVxdWlyZSgnLi9fY29sbGVjdGlvbicpKFdFQUtfU0VULCBmdW5jdGlvbiAoZ2V0KSB7XG4gIHJldHVybiBmdW5jdGlvbiBXZWFrU2V0KCkgeyByZXR1cm4gZ2V0KHRoaXMsIGFyZ3VtZW50cy5sZW5ndGggPiAwID8gYXJndW1lbnRzWzBdIDogdW5kZWZpbmVkKTsgfTtcbn0sIHtcbiAgLy8gMjMuNC4zLjEgV2Vha1NldC5wcm90b3R5cGUuYWRkKHZhbHVlKVxuICBhZGQ6IGZ1bmN0aW9uIGFkZCh2YWx1ZSkge1xuICAgIHJldHVybiB3ZWFrLmRlZih2YWxpZGF0ZSh0aGlzLCBXRUFLX1NFVCksIHZhbHVlLCB0cnVlKTtcbiAgfVxufSwgd2VhaywgZmFsc2UsIHRydWUpO1xuIiwiJ3VzZSBzdHJpY3QnO1xudmFyIExJQlJBUlkgPSByZXF1aXJlKCcuL19saWJyYXJ5Jyk7XG52YXIgZ2xvYmFsID0gcmVxdWlyZSgnLi9fZ2xvYmFsJyk7XG52YXIgY3R4ID0gcmVxdWlyZSgnLi9fY3R4Jyk7XG52YXIgY2xhc3NvZiA9IHJlcXVpcmUoJy4vX2NsYXNzb2YnKTtcbnZhciAkZXhwb3J0ID0gcmVxdWlyZSgnLi9fZXhwb3J0Jyk7XG52YXIgaXNPYmplY3QgPSByZXF1aXJlKCcuL19pcy1vYmplY3QnKTtcbnZhciBhRnVuY3Rpb24gPSByZXF1aXJlKCcuL19hLWZ1bmN0aW9uJyk7XG52YXIgYW5JbnN0YW5jZSA9IHJlcXVpcmUoJy4vX2FuLWluc3RhbmNlJyk7XG52YXIgZm9yT2YgPSByZXF1aXJlKCcuL19mb3Itb2YnKTtcbnZhciBzcGVjaWVzQ29uc3RydWN0b3IgPSByZXF1aXJlKCcuL19zcGVjaWVzLWNvbnN0cnVjdG9yJyk7XG52YXIgdGFzayA9IHJlcXVpcmUoJy4vX3Rhc2snKS5zZXQ7XG52YXIgbWljcm90YXNrID0gcmVxdWlyZSgnLi9fbWljcm90YXNrJykoKTtcbnZhciBuZXdQcm9taXNlQ2FwYWJpbGl0eU1vZHVsZSA9IHJlcXVpcmUoJy4vX25ldy1wcm9taXNlLWNhcGFiaWxpdHknKTtcbnZhciBwZXJmb3JtID0gcmVxdWlyZSgnLi9fcGVyZm9ybScpO1xudmFyIHVzZXJBZ2VudCA9IHJlcXVpcmUoJy4vX3VzZXItYWdlbnQnKTtcbnZhciBwcm9taXNlUmVzb2x2ZSA9IHJlcXVpcmUoJy4vX3Byb21pc2UtcmVzb2x2ZScpO1xudmFyIFBST01JU0UgPSAnUHJvbWlzZSc7XG52YXIgVHlwZUVycm9yID0gZ2xvYmFsLlR5cGVFcnJvcjtcbnZhciBwcm9jZXNzID0gZ2xvYmFsLnByb2Nlc3M7XG52YXIgdmVyc2lvbnMgPSBwcm9jZXNzICYmIHByb2Nlc3MudmVyc2lvbnM7XG52YXIgdjggPSB2ZXJzaW9ucyAmJiB2ZXJzaW9ucy52OCB8fCAnJztcbnZhciAkUHJvbWlzZSA9IGdsb2JhbFtQUk9NSVNFXTtcbnZhciBpc05vZGUgPSBjbGFzc29mKHByb2Nlc3MpID09ICdwcm9jZXNzJztcbnZhciBlbXB0eSA9IGZ1bmN0aW9uICgpIHsgLyogZW1wdHkgKi8gfTtcbnZhciBJbnRlcm5hbCwgbmV3R2VuZXJpY1Byb21pc2VDYXBhYmlsaXR5LCBPd25Qcm9taXNlQ2FwYWJpbGl0eSwgV3JhcHBlcjtcbnZhciBuZXdQcm9taXNlQ2FwYWJpbGl0eSA9IG5ld0dlbmVyaWNQcm9taXNlQ2FwYWJpbGl0eSA9IG5ld1Byb21pc2VDYXBhYmlsaXR5TW9kdWxlLmY7XG5cbnZhciBVU0VfTkFUSVZFID0gISFmdW5jdGlvbiAoKSB7XG4gIHRyeSB7XG4gICAgLy8gY29ycmVjdCBzdWJjbGFzc2luZyB3aXRoIEBAc3BlY2llcyBzdXBwb3J0XG4gICAgdmFyIHByb21pc2UgPSAkUHJvbWlzZS5yZXNvbHZlKDEpO1xuICAgIHZhciBGYWtlUHJvbWlzZSA9IChwcm9taXNlLmNvbnN0cnVjdG9yID0ge30pW3JlcXVpcmUoJy4vX3drcycpKCdzcGVjaWVzJyldID0gZnVuY3Rpb24gKGV4ZWMpIHtcbiAgICAgIGV4ZWMoZW1wdHksIGVtcHR5KTtcbiAgICB9O1xuICAgIC8vIHVuaGFuZGxlZCByZWplY3Rpb25zIHRyYWNraW5nIHN1cHBvcnQsIE5vZGVKUyBQcm9taXNlIHdpdGhvdXQgaXQgZmFpbHMgQEBzcGVjaWVzIHRlc3RcbiAgICByZXR1cm4gKGlzTm9kZSB8fCB0eXBlb2YgUHJvbWlzZVJlamVjdGlvbkV2ZW50ID09ICdmdW5jdGlvbicpXG4gICAgICAmJiBwcm9taXNlLnRoZW4oZW1wdHkpIGluc3RhbmNlb2YgRmFrZVByb21pc2VcbiAgICAgIC8vIHY4IDYuNiAoTm9kZSAxMCBhbmQgQ2hyb21lIDY2KSBoYXZlIGEgYnVnIHdpdGggcmVzb2x2aW5nIGN1c3RvbSB0aGVuYWJsZXNcbiAgICAgIC8vIGh0dHBzOi8vYnVncy5jaHJvbWl1bS5vcmcvcC9jaHJvbWl1bS9pc3N1ZXMvZGV0YWlsP2lkPTgzMDU2NVxuICAgICAgLy8gd2UgY2FuJ3QgZGV0ZWN0IGl0IHN5bmNocm9ub3VzbHksIHNvIGp1c3QgY2hlY2sgdmVyc2lvbnNcbiAgICAgICYmIHY4LmluZGV4T2YoJzYuNicpICE9PSAwXG4gICAgICAmJiB1c2VyQWdlbnQuaW5kZXhPZignQ2hyb21lLzY2JykgPT09IC0xO1xuICB9IGNhdGNoIChlKSB7IC8qIGVtcHR5ICovIH1cbn0oKTtcblxuLy8gaGVscGVyc1xudmFyIGlzVGhlbmFibGUgPSBmdW5jdGlvbiAoaXQpIHtcbiAgdmFyIHRoZW47XG4gIHJldHVybiBpc09iamVjdChpdCkgJiYgdHlwZW9mICh0aGVuID0gaXQudGhlbikgPT0gJ2Z1bmN0aW9uJyA/IHRoZW4gOiBmYWxzZTtcbn07XG52YXIgbm90aWZ5ID0gZnVuY3Rpb24gKHByb21pc2UsIGlzUmVqZWN0KSB7XG4gIGlmIChwcm9taXNlLl9uKSByZXR1cm47XG4gIHByb21pc2UuX24gPSB0cnVlO1xuICB2YXIgY2hhaW4gPSBwcm9taXNlLl9jO1xuICBtaWNyb3Rhc2soZnVuY3Rpb24gKCkge1xuICAgIHZhciB2YWx1ZSA9IHByb21pc2UuX3Y7XG4gICAgdmFyIG9rID0gcHJvbWlzZS5fcyA9PSAxO1xuICAgIHZhciBpID0gMDtcbiAgICB2YXIgcnVuID0gZnVuY3Rpb24gKHJlYWN0aW9uKSB7XG4gICAgICB2YXIgaGFuZGxlciA9IG9rID8gcmVhY3Rpb24ub2sgOiByZWFjdGlvbi5mYWlsO1xuICAgICAgdmFyIHJlc29sdmUgPSByZWFjdGlvbi5yZXNvbHZlO1xuICAgICAgdmFyIHJlamVjdCA9IHJlYWN0aW9uLnJlamVjdDtcbiAgICAgIHZhciBkb21haW4gPSByZWFjdGlvbi5kb21haW47XG4gICAgICB2YXIgcmVzdWx0LCB0aGVuLCBleGl0ZWQ7XG4gICAgICB0cnkge1xuICAgICAgICBpZiAoaGFuZGxlcikge1xuICAgICAgICAgIGlmICghb2spIHtcbiAgICAgICAgICAgIGlmIChwcm9taXNlLl9oID09IDIpIG9uSGFuZGxlVW5oYW5kbGVkKHByb21pc2UpO1xuICAgICAgICAgICAgcHJvbWlzZS5faCA9IDE7XG4gICAgICAgICAgfVxuICAgICAgICAgIGlmIChoYW5kbGVyID09PSB0cnVlKSByZXN1bHQgPSB2YWx1ZTtcbiAgICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgIGlmIChkb21haW4pIGRvbWFpbi5lbnRlcigpO1xuICAgICAgICAgICAgcmVzdWx0ID0gaGFuZGxlcih2YWx1ZSk7IC8vIG1heSB0aHJvd1xuICAgICAgICAgICAgaWYgKGRvbWFpbikge1xuICAgICAgICAgICAgICBkb21haW4uZXhpdCgpO1xuICAgICAgICAgICAgICBleGl0ZWQgPSB0cnVlO1xuICAgICAgICAgICAgfVxuICAgICAgICAgIH1cbiAgICAgICAgICBpZiAocmVzdWx0ID09PSByZWFjdGlvbi5wcm9taXNlKSB7XG4gICAgICAgICAgICByZWplY3QoVHlwZUVycm9yKCdQcm9taXNlLWNoYWluIGN5Y2xlJykpO1xuICAgICAgICAgIH0gZWxzZSBpZiAodGhlbiA9IGlzVGhlbmFibGUocmVzdWx0KSkge1xuICAgICAgICAgICAgdGhlbi5jYWxsKHJlc3VsdCwgcmVzb2x2ZSwgcmVqZWN0KTtcbiAgICAgICAgICB9IGVsc2UgcmVzb2x2ZShyZXN1bHQpO1xuICAgICAgICB9IGVsc2UgcmVqZWN0KHZhbHVlKTtcbiAgICAgIH0gY2F0Y2ggKGUpIHtcbiAgICAgICAgaWYgKGRvbWFpbiAmJiAhZXhpdGVkKSBkb21haW4uZXhpdCgpO1xuICAgICAgICByZWplY3QoZSk7XG4gICAgICB9XG4gICAgfTtcbiAgICB3aGlsZSAoY2hhaW4ubGVuZ3RoID4gaSkgcnVuKGNoYWluW2krK10pOyAvLyB2YXJpYWJsZSBsZW5ndGggLSBjYW4ndCB1c2UgZm9yRWFjaFxuICAgIHByb21pc2UuX2MgPSBbXTtcbiAgICBwcm9taXNlLl9uID0gZmFsc2U7XG4gICAgaWYgKGlzUmVqZWN0ICYmICFwcm9taXNlLl9oKSBvblVuaGFuZGxlZChwcm9taXNlKTtcbiAgfSk7XG59O1xudmFyIG9uVW5oYW5kbGVkID0gZnVuY3Rpb24gKHByb21pc2UpIHtcbiAgdGFzay5jYWxsKGdsb2JhbCwgZnVuY3Rpb24gKCkge1xuICAgIHZhciB2YWx1ZSA9IHByb21pc2UuX3Y7XG4gICAgdmFyIHVuaGFuZGxlZCA9IGlzVW5oYW5kbGVkKHByb21pc2UpO1xuICAgIHZhciByZXN1bHQsIGhhbmRsZXIsIGNvbnNvbGU7XG4gICAgaWYgKHVuaGFuZGxlZCkge1xuICAgICAgcmVzdWx0ID0gcGVyZm9ybShmdW5jdGlvbiAoKSB7XG4gICAgICAgIGlmIChpc05vZGUpIHtcbiAgICAgICAgICBwcm9jZXNzLmVtaXQoJ3VuaGFuZGxlZFJlamVjdGlvbicsIHZhbHVlLCBwcm9taXNlKTtcbiAgICAgICAgfSBlbHNlIGlmIChoYW5kbGVyID0gZ2xvYmFsLm9udW5oYW5kbGVkcmVqZWN0aW9uKSB7XG4gICAgICAgICAgaGFuZGxlcih7IHByb21pc2U6IHByb21pc2UsIHJlYXNvbjogdmFsdWUgfSk7XG4gICAgICAgIH0gZWxzZSBpZiAoKGNvbnNvbGUgPSBnbG9iYWwuY29uc29sZSkgJiYgY29uc29sZS5lcnJvcikge1xuICAgICAgICAgIGNvbnNvbGUuZXJyb3IoJ1VuaGFuZGxlZCBwcm9taXNlIHJlamVjdGlvbicsIHZhbHVlKTtcbiAgICAgICAgfVxuICAgICAgfSk7XG4gICAgICAvLyBCcm93c2VycyBzaG91bGQgbm90IHRyaWdnZXIgYHJlamVjdGlvbkhhbmRsZWRgIGV2ZW50IGlmIGl0IHdhcyBoYW5kbGVkIGhlcmUsIE5vZGVKUyAtIHNob3VsZFxuICAgICAgcHJvbWlzZS5faCA9IGlzTm9kZSB8fCBpc1VuaGFuZGxlZChwcm9taXNlKSA/IDIgOiAxO1xuICAgIH0gcHJvbWlzZS5fYSA9IHVuZGVmaW5lZDtcbiAgICBpZiAodW5oYW5kbGVkICYmIHJlc3VsdC5lKSB0aHJvdyByZXN1bHQudjtcbiAgfSk7XG59O1xudmFyIGlzVW5oYW5kbGVkID0gZnVuY3Rpb24gKHByb21pc2UpIHtcbiAgcmV0dXJuIHByb21pc2UuX2ggIT09IDEgJiYgKHByb21pc2UuX2EgfHwgcHJvbWlzZS5fYykubGVuZ3RoID09PSAwO1xufTtcbnZhciBvbkhhbmRsZVVuaGFuZGxlZCA9IGZ1bmN0aW9uIChwcm9taXNlKSB7XG4gIHRhc2suY2FsbChnbG9iYWwsIGZ1bmN0aW9uICgpIHtcbiAgICB2YXIgaGFuZGxlcjtcbiAgICBpZiAoaXNOb2RlKSB7XG4gICAgICBwcm9jZXNzLmVtaXQoJ3JlamVjdGlvbkhhbmRsZWQnLCBwcm9taXNlKTtcbiAgICB9IGVsc2UgaWYgKGhhbmRsZXIgPSBnbG9iYWwub25yZWplY3Rpb25oYW5kbGVkKSB7XG4gICAgICBoYW5kbGVyKHsgcHJvbWlzZTogcHJvbWlzZSwgcmVhc29uOiBwcm9taXNlLl92IH0pO1xuICAgIH1cbiAgfSk7XG59O1xudmFyICRyZWplY3QgPSBmdW5jdGlvbiAodmFsdWUpIHtcbiAgdmFyIHByb21pc2UgPSB0aGlzO1xuICBpZiAocHJvbWlzZS5fZCkgcmV0dXJuO1xuICBwcm9taXNlLl9kID0gdHJ1ZTtcbiAgcHJvbWlzZSA9IHByb21pc2UuX3cgfHwgcHJvbWlzZTsgLy8gdW53cmFwXG4gIHByb21pc2UuX3YgPSB2YWx1ZTtcbiAgcHJvbWlzZS5fcyA9IDI7XG4gIGlmICghcHJvbWlzZS5fYSkgcHJvbWlzZS5fYSA9IHByb21pc2UuX2Muc2xpY2UoKTtcbiAgbm90aWZ5KHByb21pc2UsIHRydWUpO1xufTtcbnZhciAkcmVzb2x2ZSA9IGZ1bmN0aW9uICh2YWx1ZSkge1xuICB2YXIgcHJvbWlzZSA9IHRoaXM7XG4gIHZhciB0aGVuO1xuICBpZiAocHJvbWlzZS5fZCkgcmV0dXJuO1xuICBwcm9taXNlLl9kID0gdHJ1ZTtcbiAgcHJvbWlzZSA9IHByb21pc2UuX3cgfHwgcHJvbWlzZTsgLy8gdW53cmFwXG4gIHRyeSB7XG4gICAgaWYgKHByb21pc2UgPT09IHZhbHVlKSB0aHJvdyBUeXBlRXJyb3IoXCJQcm9taXNlIGNhbid0IGJlIHJlc29sdmVkIGl0c2VsZlwiKTtcbiAgICBpZiAodGhlbiA9IGlzVGhlbmFibGUodmFsdWUpKSB7XG4gICAgICBtaWNyb3Rhc2soZnVuY3Rpb24gKCkge1xuICAgICAgICB2YXIgd3JhcHBlciA9IHsgX3c6IHByb21pc2UsIF9kOiBmYWxzZSB9OyAvLyB3cmFwXG4gICAgICAgIHRyeSB7XG4gICAgICAgICAgdGhlbi5jYWxsKHZhbHVlLCBjdHgoJHJlc29sdmUsIHdyYXBwZXIsIDEpLCBjdHgoJHJlamVjdCwgd3JhcHBlciwgMSkpO1xuICAgICAgICB9IGNhdGNoIChlKSB7XG4gICAgICAgICAgJHJlamVjdC5jYWxsKHdyYXBwZXIsIGUpO1xuICAgICAgICB9XG4gICAgICB9KTtcbiAgICB9IGVsc2Uge1xuICAgICAgcHJvbWlzZS5fdiA9IHZhbHVlO1xuICAgICAgcHJvbWlzZS5fcyA9IDE7XG4gICAgICBub3RpZnkocHJvbWlzZSwgZmFsc2UpO1xuICAgIH1cbiAgfSBjYXRjaCAoZSkge1xuICAgICRyZWplY3QuY2FsbCh7IF93OiBwcm9taXNlLCBfZDogZmFsc2UgfSwgZSk7IC8vIHdyYXBcbiAgfVxufTtcblxuLy8gY29uc3RydWN0b3IgcG9seWZpbGxcbmlmICghVVNFX05BVElWRSkge1xuICAvLyAyNS40LjMuMSBQcm9taXNlKGV4ZWN1dG9yKVxuICAkUHJvbWlzZSA9IGZ1bmN0aW9uIFByb21pc2UoZXhlY3V0b3IpIHtcbiAgICBhbkluc3RhbmNlKHRoaXMsICRQcm9taXNlLCBQUk9NSVNFLCAnX2gnKTtcbiAgICBhRnVuY3Rpb24oZXhlY3V0b3IpO1xuICAgIEludGVybmFsLmNhbGwodGhpcyk7XG4gICAgdHJ5IHtcbiAgICAgIGV4ZWN1dG9yKGN0eCgkcmVzb2x2ZSwgdGhpcywgMSksIGN0eCgkcmVqZWN0LCB0aGlzLCAxKSk7XG4gICAgfSBjYXRjaCAoZXJyKSB7XG4gICAgICAkcmVqZWN0LmNhbGwodGhpcywgZXJyKTtcbiAgICB9XG4gIH07XG4gIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBuby11bnVzZWQtdmFyc1xuICBJbnRlcm5hbCA9IGZ1bmN0aW9uIFByb21pc2UoZXhlY3V0b3IpIHtcbiAgICB0aGlzLl9jID0gW107ICAgICAgICAgICAgIC8vIDwtIGF3YWl0aW5nIHJlYWN0aW9uc1xuICAgIHRoaXMuX2EgPSB1bmRlZmluZWQ7ICAgICAgLy8gPC0gY2hlY2tlZCBpbiBpc1VuaGFuZGxlZCByZWFjdGlvbnNcbiAgICB0aGlzLl9zID0gMDsgICAgICAgICAgICAgIC8vIDwtIHN0YXRlXG4gICAgdGhpcy5fZCA9IGZhbHNlOyAgICAgICAgICAvLyA8LSBkb25lXG4gICAgdGhpcy5fdiA9IHVuZGVmaW5lZDsgICAgICAvLyA8LSB2YWx1ZVxuICAgIHRoaXMuX2ggPSAwOyAgICAgICAgICAgICAgLy8gPC0gcmVqZWN0aW9uIHN0YXRlLCAwIC0gZGVmYXVsdCwgMSAtIGhhbmRsZWQsIDIgLSB1bmhhbmRsZWRcbiAgICB0aGlzLl9uID0gZmFsc2U7ICAgICAgICAgIC8vIDwtIG5vdGlmeVxuICB9O1xuICBJbnRlcm5hbC5wcm90b3R5cGUgPSByZXF1aXJlKCcuL19yZWRlZmluZS1hbGwnKSgkUHJvbWlzZS5wcm90b3R5cGUsIHtcbiAgICAvLyAyNS40LjUuMyBQcm9taXNlLnByb3RvdHlwZS50aGVuKG9uRnVsZmlsbGVkLCBvblJlamVjdGVkKVxuICAgIHRoZW46IGZ1bmN0aW9uIHRoZW4ob25GdWxmaWxsZWQsIG9uUmVqZWN0ZWQpIHtcbiAgICAgIHZhciByZWFjdGlvbiA9IG5ld1Byb21pc2VDYXBhYmlsaXR5KHNwZWNpZXNDb25zdHJ1Y3Rvcih0aGlzLCAkUHJvbWlzZSkpO1xuICAgICAgcmVhY3Rpb24ub2sgPSB0eXBlb2Ygb25GdWxmaWxsZWQgPT0gJ2Z1bmN0aW9uJyA/IG9uRnVsZmlsbGVkIDogdHJ1ZTtcbiAgICAgIHJlYWN0aW9uLmZhaWwgPSB0eXBlb2Ygb25SZWplY3RlZCA9PSAnZnVuY3Rpb24nICYmIG9uUmVqZWN0ZWQ7XG4gICAgICByZWFjdGlvbi5kb21haW4gPSBpc05vZGUgPyBwcm9jZXNzLmRvbWFpbiA6IHVuZGVmaW5lZDtcbiAgICAgIHRoaXMuX2MucHVzaChyZWFjdGlvbik7XG4gICAgICBpZiAodGhpcy5fYSkgdGhpcy5fYS5wdXNoKHJlYWN0aW9uKTtcbiAgICAgIGlmICh0aGlzLl9zKSBub3RpZnkodGhpcywgZmFsc2UpO1xuICAgICAgcmV0dXJuIHJlYWN0aW9uLnByb21pc2U7XG4gICAgfSxcbiAgICAvLyAyNS40LjUuMSBQcm9taXNlLnByb3RvdHlwZS5jYXRjaChvblJlamVjdGVkKVxuICAgICdjYXRjaCc6IGZ1bmN0aW9uIChvblJlamVjdGVkKSB7XG4gICAgICByZXR1cm4gdGhpcy50aGVuKHVuZGVmaW5lZCwgb25SZWplY3RlZCk7XG4gICAgfVxuICB9KTtcbiAgT3duUHJvbWlzZUNhcGFiaWxpdHkgPSBmdW5jdGlvbiAoKSB7XG4gICAgdmFyIHByb21pc2UgPSBuZXcgSW50ZXJuYWwoKTtcbiAgICB0aGlzLnByb21pc2UgPSBwcm9taXNlO1xuICAgIHRoaXMucmVzb2x2ZSA9IGN0eCgkcmVzb2x2ZSwgcHJvbWlzZSwgMSk7XG4gICAgdGhpcy5yZWplY3QgPSBjdHgoJHJlamVjdCwgcHJvbWlzZSwgMSk7XG4gIH07XG4gIG5ld1Byb21pc2VDYXBhYmlsaXR5TW9kdWxlLmYgPSBuZXdQcm9taXNlQ2FwYWJpbGl0eSA9IGZ1bmN0aW9uIChDKSB7XG4gICAgcmV0dXJuIEMgPT09ICRQcm9taXNlIHx8IEMgPT09IFdyYXBwZXJcbiAgICAgID8gbmV3IE93blByb21pc2VDYXBhYmlsaXR5KEMpXG4gICAgICA6IG5ld0dlbmVyaWNQcm9taXNlQ2FwYWJpbGl0eShDKTtcbiAgfTtcbn1cblxuJGV4cG9ydCgkZXhwb3J0LkcgKyAkZXhwb3J0LlcgKyAkZXhwb3J0LkYgKiAhVVNFX05BVElWRSwgeyBQcm9taXNlOiAkUHJvbWlzZSB9KTtcbnJlcXVpcmUoJy4vX3NldC10by1zdHJpbmctdGFnJykoJFByb21pc2UsIFBST01JU0UpO1xucmVxdWlyZSgnLi9fc2V0LXNwZWNpZXMnKShQUk9NSVNFKTtcbldyYXBwZXIgPSByZXF1aXJlKCcuL19jb3JlJylbUFJPTUlTRV07XG5cbi8vIHN0YXRpY3NcbiRleHBvcnQoJGV4cG9ydC5TICsgJGV4cG9ydC5GICogIVVTRV9OQVRJVkUsIFBST01JU0UsIHtcbiAgLy8gMjUuNC40LjUgUHJvbWlzZS5yZWplY3QocilcbiAgcmVqZWN0OiBmdW5jdGlvbiByZWplY3Qocikge1xuICAgIHZhciBjYXBhYmlsaXR5ID0gbmV3UHJvbWlzZUNhcGFiaWxpdHkodGhpcyk7XG4gICAgdmFyICQkcmVqZWN0ID0gY2FwYWJpbGl0eS5yZWplY3Q7XG4gICAgJCRyZWplY3Qocik7XG4gICAgcmV0dXJuIGNhcGFiaWxpdHkucHJvbWlzZTtcbiAgfVxufSk7XG4kZXhwb3J0KCRleHBvcnQuUyArICRleHBvcnQuRiAqIChMSUJSQVJZIHx8ICFVU0VfTkFUSVZFKSwgUFJPTUlTRSwge1xuICAvLyAyNS40LjQuNiBQcm9taXNlLnJlc29sdmUoeClcbiAgcmVzb2x2ZTogZnVuY3Rpb24gcmVzb2x2ZSh4KSB7XG4gICAgcmV0dXJuIHByb21pc2VSZXNvbHZlKExJQlJBUlkgJiYgdGhpcyA9PT0gV3JhcHBlciA/ICRQcm9taXNlIDogdGhpcywgeCk7XG4gIH1cbn0pO1xuJGV4cG9ydCgkZXhwb3J0LlMgKyAkZXhwb3J0LkYgKiAhKFVTRV9OQVRJVkUgJiYgcmVxdWlyZSgnLi9faXRlci1kZXRlY3QnKShmdW5jdGlvbiAoaXRlcikge1xuICAkUHJvbWlzZS5hbGwoaXRlcilbJ2NhdGNoJ10oZW1wdHkpO1xufSkpLCBQUk9NSVNFLCB7XG4gIC8vIDI1LjQuNC4xIFByb21pc2UuYWxsKGl0ZXJhYmxlKVxuICBhbGw6IGZ1bmN0aW9uIGFsbChpdGVyYWJsZSkge1xuICAgIHZhciBDID0gdGhpcztcbiAgICB2YXIgY2FwYWJpbGl0eSA9IG5ld1Byb21pc2VDYXBhYmlsaXR5KEMpO1xuICAgIHZhciByZXNvbHZlID0gY2FwYWJpbGl0eS5yZXNvbHZlO1xuICAgIHZhciByZWplY3QgPSBjYXBhYmlsaXR5LnJlamVjdDtcbiAgICB2YXIgcmVzdWx0ID0gcGVyZm9ybShmdW5jdGlvbiAoKSB7XG4gICAgICB2YXIgdmFsdWVzID0gW107XG4gICAgICB2YXIgaW5kZXggPSAwO1xuICAgICAgdmFyIHJlbWFpbmluZyA9IDE7XG4gICAgICBmb3JPZihpdGVyYWJsZSwgZmFsc2UsIGZ1bmN0aW9uIChwcm9taXNlKSB7XG4gICAgICAgIHZhciAkaW5kZXggPSBpbmRleCsrO1xuICAgICAgICB2YXIgYWxyZWFkeUNhbGxlZCA9IGZhbHNlO1xuICAgICAgICB2YWx1ZXMucHVzaCh1bmRlZmluZWQpO1xuICAgICAgICByZW1haW5pbmcrKztcbiAgICAgICAgQy5yZXNvbHZlKHByb21pc2UpLnRoZW4oZnVuY3Rpb24gKHZhbHVlKSB7XG4gICAgICAgICAgaWYgKGFscmVhZHlDYWxsZWQpIHJldHVybjtcbiAgICAgICAgICBhbHJlYWR5Q2FsbGVkID0gdHJ1ZTtcbiAgICAgICAgICB2YWx1ZXNbJGluZGV4XSA9IHZhbHVlO1xuICAgICAgICAgIC0tcmVtYWluaW5nIHx8IHJlc29sdmUodmFsdWVzKTtcbiAgICAgICAgfSwgcmVqZWN0KTtcbiAgICAgIH0pO1xuICAgICAgLS1yZW1haW5pbmcgfHwgcmVzb2x2ZSh2YWx1ZXMpO1xuICAgIH0pO1xuICAgIGlmIChyZXN1bHQuZSkgcmVqZWN0KHJlc3VsdC52KTtcbiAgICByZXR1cm4gY2FwYWJpbGl0eS5wcm9taXNlO1xuICB9LFxuICAvLyAyNS40LjQuNCBQcm9taXNlLnJhY2UoaXRlcmFibGUpXG4gIHJhY2U6IGZ1bmN0aW9uIHJhY2UoaXRlcmFibGUpIHtcbiAgICB2YXIgQyA9IHRoaXM7XG4gICAgdmFyIGNhcGFiaWxpdHkgPSBuZXdQcm9taXNlQ2FwYWJpbGl0eShDKTtcbiAgICB2YXIgcmVqZWN0ID0gY2FwYWJpbGl0eS5yZWplY3Q7XG4gICAgdmFyIHJlc3VsdCA9IHBlcmZvcm0oZnVuY3Rpb24gKCkge1xuICAgICAgZm9yT2YoaXRlcmFibGUsIGZhbHNlLCBmdW5jdGlvbiAocHJvbWlzZSkge1xuICAgICAgICBDLnJlc29sdmUocHJvbWlzZSkudGhlbihjYXBhYmlsaXR5LnJlc29sdmUsIHJlamVjdCk7XG4gICAgICB9KTtcbiAgICB9KTtcbiAgICBpZiAocmVzdWx0LmUpIHJlamVjdChyZXN1bHQudik7XG4gICAgcmV0dXJuIGNhcGFiaWxpdHkucHJvbWlzZTtcbiAgfVxufSk7XG4iLCIvLyBAQHNwbGl0IGxvZ2ljXG5yZXF1aXJlKCcuL19maXgtcmUtd2tzJykoJ3NwbGl0JywgMiwgZnVuY3Rpb24gKGRlZmluZWQsIFNQTElULCAkc3BsaXQpIHtcbiAgJ3VzZSBzdHJpY3QnO1xuICB2YXIgaXNSZWdFeHAgPSByZXF1aXJlKCcuL19pcy1yZWdleHAnKTtcbiAgdmFyIF9zcGxpdCA9ICRzcGxpdDtcbiAgdmFyICRwdXNoID0gW10ucHVzaDtcbiAgdmFyICRTUExJVCA9ICdzcGxpdCc7XG4gIHZhciBMRU5HVEggPSAnbGVuZ3RoJztcbiAgdmFyIExBU1RfSU5ERVggPSAnbGFzdEluZGV4JztcbiAgaWYgKFxuICAgICdhYmJjJ1skU1BMSVRdKC8oYikqLylbMV0gPT0gJ2MnIHx8XG4gICAgJ3Rlc3QnWyRTUExJVF0oLyg/OikvLCAtMSlbTEVOR1RIXSAhPSA0IHx8XG4gICAgJ2FiJ1skU1BMSVRdKC8oPzphYikqLylbTEVOR1RIXSAhPSAyIHx8XG4gICAgJy4nWyRTUExJVF0oLyguPykoLj8pLylbTEVOR1RIXSAhPSA0IHx8XG4gICAgJy4nWyRTUExJVF0oLygpKCkvKVtMRU5HVEhdID4gMSB8fFxuICAgICcnWyRTUExJVF0oLy4/LylbTEVOR1RIXVxuICApIHtcbiAgICB2YXIgTlBDRyA9IC8oKT8/Ly5leGVjKCcnKVsxXSA9PT0gdW5kZWZpbmVkOyAvLyBub25wYXJ0aWNpcGF0aW5nIGNhcHR1cmluZyBncm91cFxuICAgIC8vIGJhc2VkIG9uIGVzNS1zaGltIGltcGxlbWVudGF0aW9uLCBuZWVkIHRvIHJld29yayBpdFxuICAgICRzcGxpdCA9IGZ1bmN0aW9uIChzZXBhcmF0b3IsIGxpbWl0KSB7XG4gICAgICB2YXIgc3RyaW5nID0gU3RyaW5nKHRoaXMpO1xuICAgICAgaWYgKHNlcGFyYXRvciA9PT0gdW5kZWZpbmVkICYmIGxpbWl0ID09PSAwKSByZXR1cm4gW107XG4gICAgICAvLyBJZiBgc2VwYXJhdG9yYCBpcyBub3QgYSByZWdleCwgdXNlIG5hdGl2ZSBzcGxpdFxuICAgICAgaWYgKCFpc1JlZ0V4cChzZXBhcmF0b3IpKSByZXR1cm4gX3NwbGl0LmNhbGwoc3RyaW5nLCBzZXBhcmF0b3IsIGxpbWl0KTtcbiAgICAgIHZhciBvdXRwdXQgPSBbXTtcbiAgICAgIHZhciBmbGFncyA9IChzZXBhcmF0b3IuaWdub3JlQ2FzZSA/ICdpJyA6ICcnKSArXG4gICAgICAgICAgICAgICAgICAoc2VwYXJhdG9yLm11bHRpbGluZSA/ICdtJyA6ICcnKSArXG4gICAgICAgICAgICAgICAgICAoc2VwYXJhdG9yLnVuaWNvZGUgPyAndScgOiAnJykgK1xuICAgICAgICAgICAgICAgICAgKHNlcGFyYXRvci5zdGlja3kgPyAneScgOiAnJyk7XG4gICAgICB2YXIgbGFzdExhc3RJbmRleCA9IDA7XG4gICAgICB2YXIgc3BsaXRMaW1pdCA9IGxpbWl0ID09PSB1bmRlZmluZWQgPyA0Mjk0OTY3Mjk1IDogbGltaXQgPj4+IDA7XG4gICAgICAvLyBNYWtlIGBnbG9iYWxgIGFuZCBhdm9pZCBgbGFzdEluZGV4YCBpc3N1ZXMgYnkgd29ya2luZyB3aXRoIGEgY29weVxuICAgICAgdmFyIHNlcGFyYXRvckNvcHkgPSBuZXcgUmVnRXhwKHNlcGFyYXRvci5zb3VyY2UsIGZsYWdzICsgJ2cnKTtcbiAgICAgIHZhciBzZXBhcmF0b3IyLCBtYXRjaCwgbGFzdEluZGV4LCBsYXN0TGVuZ3RoLCBpO1xuICAgICAgLy8gRG9lc24ndCBuZWVkIGZsYWdzIGd5LCBidXQgdGhleSBkb24ndCBodXJ0XG4gICAgICBpZiAoIU5QQ0cpIHNlcGFyYXRvcjIgPSBuZXcgUmVnRXhwKCdeJyArIHNlcGFyYXRvckNvcHkuc291cmNlICsgJyQoPyFcXFxccyknLCBmbGFncyk7XG4gICAgICB3aGlsZSAobWF0Y2ggPSBzZXBhcmF0b3JDb3B5LmV4ZWMoc3RyaW5nKSkge1xuICAgICAgICAvLyBgc2VwYXJhdG9yQ29weS5sYXN0SW5kZXhgIGlzIG5vdCByZWxpYWJsZSBjcm9zcy1icm93c2VyXG4gICAgICAgIGxhc3RJbmRleCA9IG1hdGNoLmluZGV4ICsgbWF0Y2hbMF1bTEVOR1RIXTtcbiAgICAgICAgaWYgKGxhc3RJbmRleCA+IGxhc3RMYXN0SW5kZXgpIHtcbiAgICAgICAgICBvdXRwdXQucHVzaChzdHJpbmcuc2xpY2UobGFzdExhc3RJbmRleCwgbWF0Y2guaW5kZXgpKTtcbiAgICAgICAgICAvLyBGaXggYnJvd3NlcnMgd2hvc2UgYGV4ZWNgIG1ldGhvZHMgZG9uJ3QgY29uc2lzdGVudGx5IHJldHVybiBgdW5kZWZpbmVkYCBmb3IgTlBDR1xuICAgICAgICAgIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBuby1sb29wLWZ1bmNcbiAgICAgICAgICBpZiAoIU5QQ0cgJiYgbWF0Y2hbTEVOR1RIXSA+IDEpIG1hdGNoWzBdLnJlcGxhY2Uoc2VwYXJhdG9yMiwgZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgZm9yIChpID0gMTsgaSA8IGFyZ3VtZW50c1tMRU5HVEhdIC0gMjsgaSsrKSBpZiAoYXJndW1lbnRzW2ldID09PSB1bmRlZmluZWQpIG1hdGNoW2ldID0gdW5kZWZpbmVkO1xuICAgICAgICAgIH0pO1xuICAgICAgICAgIGlmIChtYXRjaFtMRU5HVEhdID4gMSAmJiBtYXRjaC5pbmRleCA8IHN0cmluZ1tMRU5HVEhdKSAkcHVzaC5hcHBseShvdXRwdXQsIG1hdGNoLnNsaWNlKDEpKTtcbiAgICAgICAgICBsYXN0TGVuZ3RoID0gbWF0Y2hbMF1bTEVOR1RIXTtcbiAgICAgICAgICBsYXN0TGFzdEluZGV4ID0gbGFzdEluZGV4O1xuICAgICAgICAgIGlmIChvdXRwdXRbTEVOR1RIXSA+PSBzcGxpdExpbWl0KSBicmVhaztcbiAgICAgICAgfVxuICAgICAgICBpZiAoc2VwYXJhdG9yQ29weVtMQVNUX0lOREVYXSA9PT0gbWF0Y2guaW5kZXgpIHNlcGFyYXRvckNvcHlbTEFTVF9JTkRFWF0rKzsgLy8gQXZvaWQgYW4gaW5maW5pdGUgbG9vcFxuICAgICAgfVxuICAgICAgaWYgKGxhc3RMYXN0SW5kZXggPT09IHN0cmluZ1tMRU5HVEhdKSB7XG4gICAgICAgIGlmIChsYXN0TGVuZ3RoIHx8ICFzZXBhcmF0b3JDb3B5LnRlc3QoJycpKSBvdXRwdXQucHVzaCgnJyk7XG4gICAgICB9IGVsc2Ugb3V0cHV0LnB1c2goc3RyaW5nLnNsaWNlKGxhc3RMYXN0SW5kZXgpKTtcbiAgICAgIHJldHVybiBvdXRwdXRbTEVOR1RIXSA+IHNwbGl0TGltaXQgPyBvdXRwdXQuc2xpY2UoMCwgc3BsaXRMaW1pdCkgOiBvdXRwdXQ7XG4gICAgfTtcbiAgLy8gQ2hha3JhLCBWOFxuICB9IGVsc2UgaWYgKCcwJ1skU1BMSVRdKHVuZGVmaW5lZCwgMClbTEVOR1RIXSkge1xuICAgICRzcGxpdCA9IGZ1bmN0aW9uIChzZXBhcmF0b3IsIGxpbWl0KSB7XG4gICAgICByZXR1cm4gc2VwYXJhdG9yID09PSB1bmRlZmluZWQgJiYgbGltaXQgPT09IDAgPyBbXSA6IF9zcGxpdC5jYWxsKHRoaXMsIHNlcGFyYXRvciwgbGltaXQpO1xuICAgIH07XG4gIH1cbiAgLy8gMjEuMS4zLjE3IFN0cmluZy5wcm90b3R5cGUuc3BsaXQoc2VwYXJhdG9yLCBsaW1pdClcbiAgcmV0dXJuIFtmdW5jdGlvbiBzcGxpdChzZXBhcmF0b3IsIGxpbWl0KSB7XG4gICAgdmFyIE8gPSBkZWZpbmVkKHRoaXMpO1xuICAgIHZhciBmbiA9IHNlcGFyYXRvciA9PSB1bmRlZmluZWQgPyB1bmRlZmluZWQgOiBzZXBhcmF0b3JbU1BMSVRdO1xuICAgIHJldHVybiBmbiAhPT0gdW5kZWZpbmVkID8gZm4uY2FsbChzZXBhcmF0b3IsIE8sIGxpbWl0KSA6ICRzcGxpdC5jYWxsKFN0cmluZyhPKSwgc2VwYXJhdG9yLCBsaW1pdCk7XG4gIH0sICRzcGxpdF07XG59KTtcbiIsIi8vIEBAc2VhcmNoIGxvZ2ljXG5yZXF1aXJlKCcuL19maXgtcmUtd2tzJykoJ3NlYXJjaCcsIDEsIGZ1bmN0aW9uIChkZWZpbmVkLCBTRUFSQ0gsICRzZWFyY2gpIHtcbiAgLy8gMjEuMS4zLjE1IFN0cmluZy5wcm90b3R5cGUuc2VhcmNoKHJlZ2V4cClcbiAgcmV0dXJuIFtmdW5jdGlvbiBzZWFyY2gocmVnZXhwKSB7XG4gICAgJ3VzZSBzdHJpY3QnO1xuICAgIHZhciBPID0gZGVmaW5lZCh0aGlzKTtcbiAgICB2YXIgZm4gPSByZWdleHAgPT0gdW5kZWZpbmVkID8gdW5kZWZpbmVkIDogcmVnZXhwW1NFQVJDSF07XG4gICAgcmV0dXJuIGZuICE9PSB1bmRlZmluZWQgPyBmbi5jYWxsKHJlZ2V4cCwgTykgOiBuZXcgUmVnRXhwKHJlZ2V4cClbU0VBUkNIXShTdHJpbmcoTykpO1xuICB9LCAkc2VhcmNoXTtcbn0pO1xuIiwiLy8gQEByZXBsYWNlIGxvZ2ljXG5yZXF1aXJlKCcuL19maXgtcmUtd2tzJykoJ3JlcGxhY2UnLCAyLCBmdW5jdGlvbiAoZGVmaW5lZCwgUkVQTEFDRSwgJHJlcGxhY2UpIHtcbiAgLy8gMjEuMS4zLjE0IFN0cmluZy5wcm90b3R5cGUucmVwbGFjZShzZWFyY2hWYWx1ZSwgcmVwbGFjZVZhbHVlKVxuICByZXR1cm4gW2Z1bmN0aW9uIHJlcGxhY2Uoc2VhcmNoVmFsdWUsIHJlcGxhY2VWYWx1ZSkge1xuICAgICd1c2Ugc3RyaWN0JztcbiAgICB2YXIgTyA9IGRlZmluZWQodGhpcyk7XG4gICAgdmFyIGZuID0gc2VhcmNoVmFsdWUgPT0gdW5kZWZpbmVkID8gdW5kZWZpbmVkIDogc2VhcmNoVmFsdWVbUkVQTEFDRV07XG4gICAgcmV0dXJuIGZuICE9PSB1bmRlZmluZWRcbiAgICAgID8gZm4uY2FsbChzZWFyY2hWYWx1ZSwgTywgcmVwbGFjZVZhbHVlKVxuICAgICAgOiAkcmVwbGFjZS5jYWxsKFN0cmluZyhPKSwgc2VhcmNoVmFsdWUsIHJlcGxhY2VWYWx1ZSk7XG4gIH0sICRyZXBsYWNlXTtcbn0pO1xuIiwiLy8gQEBtYXRjaCBsb2dpY1xucmVxdWlyZSgnLi9fZml4LXJlLXdrcycpKCdtYXRjaCcsIDEsIGZ1bmN0aW9uIChkZWZpbmVkLCBNQVRDSCwgJG1hdGNoKSB7XG4gIC8vIDIxLjEuMy4xMSBTdHJpbmcucHJvdG90eXBlLm1hdGNoKHJlZ2V4cClcbiAgcmV0dXJuIFtmdW5jdGlvbiBtYXRjaChyZWdleHApIHtcbiAgICAndXNlIHN0cmljdCc7XG4gICAgdmFyIE8gPSBkZWZpbmVkKHRoaXMpO1xuICAgIHZhciBmbiA9IHJlZ2V4cCA9PSB1bmRlZmluZWQgPyB1bmRlZmluZWQgOiByZWdleHBbTUFUQ0hdO1xuICAgIHJldHVybiBmbiAhPT0gdW5kZWZpbmVkID8gZm4uY2FsbChyZWdleHAsIE8pIDogbmV3IFJlZ0V4cChyZWdleHApW01BVENIXShTdHJpbmcoTykpO1xuICB9LCAkbWF0Y2hdO1xufSk7XG4iLCIndXNlIHN0cmljdCc7XG5yZXF1aXJlKCcuL2VzNi5yZWdleHAuZmxhZ3MnKTtcbnZhciBhbk9iamVjdCA9IHJlcXVpcmUoJy4vX2FuLW9iamVjdCcpO1xudmFyICRmbGFncyA9IHJlcXVpcmUoJy4vX2ZsYWdzJyk7XG52YXIgREVTQ1JJUFRPUlMgPSByZXF1aXJlKCcuL19kZXNjcmlwdG9ycycpO1xudmFyIFRPX1NUUklORyA9ICd0b1N0cmluZyc7XG52YXIgJHRvU3RyaW5nID0gLy4vW1RPX1NUUklOR107XG5cbnZhciBkZWZpbmUgPSBmdW5jdGlvbiAoZm4pIHtcbiAgcmVxdWlyZSgnLi9fcmVkZWZpbmUnKShSZWdFeHAucHJvdG90eXBlLCBUT19TVFJJTkcsIGZuLCB0cnVlKTtcbn07XG5cbi8vIDIxLjIuNS4xNCBSZWdFeHAucHJvdG90eXBlLnRvU3RyaW5nKClcbmlmIChyZXF1aXJlKCcuL19mYWlscycpKGZ1bmN0aW9uICgpIHsgcmV0dXJuICR0b1N0cmluZy5jYWxsKHsgc291cmNlOiAnYScsIGZsYWdzOiAnYicgfSkgIT0gJy9hL2InOyB9KSkge1xuICBkZWZpbmUoZnVuY3Rpb24gdG9TdHJpbmcoKSB7XG4gICAgdmFyIFIgPSBhbk9iamVjdCh0aGlzKTtcbiAgICByZXR1cm4gJy8nLmNvbmNhdChSLnNvdXJjZSwgJy8nLFxuICAgICAgJ2ZsYWdzJyBpbiBSID8gUi5mbGFncyA6ICFERVNDUklQVE9SUyAmJiBSIGluc3RhbmNlb2YgUmVnRXhwID8gJGZsYWdzLmNhbGwoUikgOiB1bmRlZmluZWQpO1xuICB9KTtcbi8vIEZGNDQtIFJlZ0V4cCN0b1N0cmluZyBoYXMgYSB3cm9uZyBuYW1lXG59IGVsc2UgaWYgKCR0b1N0cmluZy5uYW1lICE9IFRPX1NUUklORykge1xuICBkZWZpbmUoZnVuY3Rpb24gdG9TdHJpbmcoKSB7XG4gICAgcmV0dXJuICR0b1N0cmluZy5jYWxsKHRoaXMpO1xuICB9KTtcbn1cbiIsInZhciBnbG9iYWwgPSByZXF1aXJlKCcuL19nbG9iYWwnKTtcbnZhciBpbmhlcml0SWZSZXF1aXJlZCA9IHJlcXVpcmUoJy4vX2luaGVyaXQtaWYtcmVxdWlyZWQnKTtcbnZhciBkUCA9IHJlcXVpcmUoJy4vX29iamVjdC1kcCcpLmY7XG52YXIgZ09QTiA9IHJlcXVpcmUoJy4vX29iamVjdC1nb3BuJykuZjtcbnZhciBpc1JlZ0V4cCA9IHJlcXVpcmUoJy4vX2lzLXJlZ2V4cCcpO1xudmFyICRmbGFncyA9IHJlcXVpcmUoJy4vX2ZsYWdzJyk7XG52YXIgJFJlZ0V4cCA9IGdsb2JhbC5SZWdFeHA7XG52YXIgQmFzZSA9ICRSZWdFeHA7XG52YXIgcHJvdG8gPSAkUmVnRXhwLnByb3RvdHlwZTtcbnZhciByZTEgPSAvYS9nO1xudmFyIHJlMiA9IC9hL2c7XG4vLyBcIm5ld1wiIGNyZWF0ZXMgYSBuZXcgb2JqZWN0LCBvbGQgd2Via2l0IGJ1Z2d5IGhlcmVcbnZhciBDT1JSRUNUX05FVyA9IG5ldyAkUmVnRXhwKHJlMSkgIT09IHJlMTtcblxuaWYgKHJlcXVpcmUoJy4vX2Rlc2NyaXB0b3JzJykgJiYgKCFDT1JSRUNUX05FVyB8fCByZXF1aXJlKCcuL19mYWlscycpKGZ1bmN0aW9uICgpIHtcbiAgcmUyW3JlcXVpcmUoJy4vX3drcycpKCdtYXRjaCcpXSA9IGZhbHNlO1xuICAvLyBSZWdFeHAgY29uc3RydWN0b3IgY2FuIGFsdGVyIGZsYWdzIGFuZCBJc1JlZ0V4cCB3b3JrcyBjb3JyZWN0IHdpdGggQEBtYXRjaFxuICByZXR1cm4gJFJlZ0V4cChyZTEpICE9IHJlMSB8fCAkUmVnRXhwKHJlMikgPT0gcmUyIHx8ICRSZWdFeHAocmUxLCAnaScpICE9ICcvYS9pJztcbn0pKSkge1xuICAkUmVnRXhwID0gZnVuY3Rpb24gUmVnRXhwKHAsIGYpIHtcbiAgICB2YXIgdGlSRSA9IHRoaXMgaW5zdGFuY2VvZiAkUmVnRXhwO1xuICAgIHZhciBwaVJFID0gaXNSZWdFeHAocCk7XG4gICAgdmFyIGZpVSA9IGYgPT09IHVuZGVmaW5lZDtcbiAgICByZXR1cm4gIXRpUkUgJiYgcGlSRSAmJiBwLmNvbnN0cnVjdG9yID09PSAkUmVnRXhwICYmIGZpVSA/IHBcbiAgICAgIDogaW5oZXJpdElmUmVxdWlyZWQoQ09SUkVDVF9ORVdcbiAgICAgICAgPyBuZXcgQmFzZShwaVJFICYmICFmaVUgPyBwLnNvdXJjZSA6IHAsIGYpXG4gICAgICAgIDogQmFzZSgocGlSRSA9IHAgaW5zdGFuY2VvZiAkUmVnRXhwKSA/IHAuc291cmNlIDogcCwgcGlSRSAmJiBmaVUgPyAkZmxhZ3MuY2FsbChwKSA6IGYpXG4gICAgICAsIHRpUkUgPyB0aGlzIDogcHJvdG8sICRSZWdFeHApO1xuICB9O1xuICB2YXIgcHJveHkgPSBmdW5jdGlvbiAoa2V5KSB7XG4gICAga2V5IGluICRSZWdFeHAgfHwgZFAoJFJlZ0V4cCwga2V5LCB7XG4gICAgICBjb25maWd1cmFibGU6IHRydWUsXG4gICAgICBnZXQ6IGZ1bmN0aW9uICgpIHsgcmV0dXJuIEJhc2Vba2V5XTsgfSxcbiAgICAgIHNldDogZnVuY3Rpb24gKGl0KSB7IEJhc2Vba2V5XSA9IGl0OyB9XG4gICAgfSk7XG4gIH07XG4gIGZvciAodmFyIGtleXMgPSBnT1BOKEJhc2UpLCBpID0gMDsga2V5cy5sZW5ndGggPiBpOykgcHJveHkoa2V5c1tpKytdKTtcbiAgcHJvdG8uY29uc3RydWN0b3IgPSAkUmVnRXhwO1xuICAkUmVnRXhwLnByb3RvdHlwZSA9IHByb3RvO1xuICByZXF1aXJlKCcuL19yZWRlZmluZScpKGdsb2JhbCwgJ1JlZ0V4cCcsICRSZWdFeHApO1xufVxuXG5yZXF1aXJlKCcuL19zZXQtc3BlY2llcycpKCdSZWdFeHAnKTtcbiIsInJlcXVpcmUoJy4vX3NldC1zcGVjaWVzJykoJ0FycmF5Jyk7XG4iLCIndXNlIHN0cmljdCc7XG4vLyAyMi4xLjMuOSBBcnJheS5wcm90b3R5cGUuZmluZEluZGV4KHByZWRpY2F0ZSwgdGhpc0FyZyA9IHVuZGVmaW5lZClcbnZhciAkZXhwb3J0ID0gcmVxdWlyZSgnLi9fZXhwb3J0Jyk7XG52YXIgJGZpbmQgPSByZXF1aXJlKCcuL19hcnJheS1tZXRob2RzJykoNik7XG52YXIgS0VZID0gJ2ZpbmRJbmRleCc7XG52YXIgZm9yY2VkID0gdHJ1ZTtcbi8vIFNob3VsZG4ndCBza2lwIGhvbGVzXG5pZiAoS0VZIGluIFtdKSBBcnJheSgxKVtLRVldKGZ1bmN0aW9uICgpIHsgZm9yY2VkID0gZmFsc2U7IH0pO1xuJGV4cG9ydCgkZXhwb3J0LlAgKyAkZXhwb3J0LkYgKiBmb3JjZWQsICdBcnJheScsIHtcbiAgZmluZEluZGV4OiBmdW5jdGlvbiBmaW5kSW5kZXgoY2FsbGJhY2tmbiAvKiAsIHRoYXQgPSB1bmRlZmluZWQgKi8pIHtcbiAgICByZXR1cm4gJGZpbmQodGhpcywgY2FsbGJhY2tmbiwgYXJndW1lbnRzLmxlbmd0aCA+IDEgPyBhcmd1bWVudHNbMV0gOiB1bmRlZmluZWQpO1xuICB9XG59KTtcbnJlcXVpcmUoJy4vX2FkZC10by11bnNjb3BhYmxlcycpKEtFWSk7XG4iLCIndXNlIHN0cmljdCc7XG4vLyAyMi4xLjMuOCBBcnJheS5wcm90b3R5cGUuZmluZChwcmVkaWNhdGUsIHRoaXNBcmcgPSB1bmRlZmluZWQpXG52YXIgJGV4cG9ydCA9IHJlcXVpcmUoJy4vX2V4cG9ydCcpO1xudmFyICRmaW5kID0gcmVxdWlyZSgnLi9fYXJyYXktbWV0aG9kcycpKDUpO1xudmFyIEtFWSA9ICdmaW5kJztcbnZhciBmb3JjZWQgPSB0cnVlO1xuLy8gU2hvdWxkbid0IHNraXAgaG9sZXNcbmlmIChLRVkgaW4gW10pIEFycmF5KDEpW0tFWV0oZnVuY3Rpb24gKCkgeyBmb3JjZWQgPSBmYWxzZTsgfSk7XG4kZXhwb3J0KCRleHBvcnQuUCArICRleHBvcnQuRiAqIGZvcmNlZCwgJ0FycmF5Jywge1xuICBmaW5kOiBmdW5jdGlvbiBmaW5kKGNhbGxiYWNrZm4gLyogLCB0aGF0ID0gdW5kZWZpbmVkICovKSB7XG4gICAgcmV0dXJuICRmaW5kKHRoaXMsIGNhbGxiYWNrZm4sIGFyZ3VtZW50cy5sZW5ndGggPiAxID8gYXJndW1lbnRzWzFdIDogdW5kZWZpbmVkKTtcbiAgfVxufSk7XG5yZXF1aXJlKCcuL19hZGQtdG8tdW5zY29wYWJsZXMnKShLRVkpO1xuIiwiLy8gMjIuMS4zLjYgQXJyYXkucHJvdG90eXBlLmZpbGwodmFsdWUsIHN0YXJ0ID0gMCwgZW5kID0gdGhpcy5sZW5ndGgpXG52YXIgJGV4cG9ydCA9IHJlcXVpcmUoJy4vX2V4cG9ydCcpO1xuXG4kZXhwb3J0KCRleHBvcnQuUCwgJ0FycmF5JywgeyBmaWxsOiByZXF1aXJlKCcuL19hcnJheS1maWxsJykgfSk7XG5cbnJlcXVpcmUoJy4vX2FkZC10by11bnNjb3BhYmxlcycpKCdmaWxsJyk7XG4iLCIvLyAyMi4xLjMuMyBBcnJheS5wcm90b3R5cGUuY29weVdpdGhpbih0YXJnZXQsIHN0YXJ0LCBlbmQgPSB0aGlzLmxlbmd0aClcbnZhciAkZXhwb3J0ID0gcmVxdWlyZSgnLi9fZXhwb3J0Jyk7XG5cbiRleHBvcnQoJGV4cG9ydC5QLCAnQXJyYXknLCB7IGNvcHlXaXRoaW46IHJlcXVpcmUoJy4vX2FycmF5LWNvcHktd2l0aGluJykgfSk7XG5cbnJlcXVpcmUoJy4vX2FkZC10by11bnNjb3BhYmxlcycpKCdjb3B5V2l0aGluJyk7XG4iLCIndXNlIHN0cmljdCc7XG52YXIgJGV4cG9ydCA9IHJlcXVpcmUoJy4vX2V4cG9ydCcpO1xudmFyIHRvSU9iamVjdCA9IHJlcXVpcmUoJy4vX3RvLWlvYmplY3QnKTtcbnZhciB0b0ludGVnZXIgPSByZXF1aXJlKCcuL190by1pbnRlZ2VyJyk7XG52YXIgdG9MZW5ndGggPSByZXF1aXJlKCcuL190by1sZW5ndGgnKTtcbnZhciAkbmF0aXZlID0gW10ubGFzdEluZGV4T2Y7XG52YXIgTkVHQVRJVkVfWkVSTyA9ICEhJG5hdGl2ZSAmJiAxIC8gWzFdLmxhc3RJbmRleE9mKDEsIC0wKSA8IDA7XG5cbiRleHBvcnQoJGV4cG9ydC5QICsgJGV4cG9ydC5GICogKE5FR0FUSVZFX1pFUk8gfHwgIXJlcXVpcmUoJy4vX3N0cmljdC1tZXRob2QnKSgkbmF0aXZlKSksICdBcnJheScsIHtcbiAgLy8gMjIuMS4zLjE0IC8gMTUuNC40LjE1IEFycmF5LnByb3RvdHlwZS5sYXN0SW5kZXhPZihzZWFyY2hFbGVtZW50IFssIGZyb21JbmRleF0pXG4gIGxhc3RJbmRleE9mOiBmdW5jdGlvbiBsYXN0SW5kZXhPZihzZWFyY2hFbGVtZW50IC8qICwgZnJvbUluZGV4ID0gQFsqLTFdICovKSB7XG4gICAgLy8gY29udmVydCAtMCB0byArMFxuICAgIGlmIChORUdBVElWRV9aRVJPKSByZXR1cm4gJG5hdGl2ZS5hcHBseSh0aGlzLCBhcmd1bWVudHMpIHx8IDA7XG4gICAgdmFyIE8gPSB0b0lPYmplY3QodGhpcyk7XG4gICAgdmFyIGxlbmd0aCA9IHRvTGVuZ3RoKE8ubGVuZ3RoKTtcbiAgICB2YXIgaW5kZXggPSBsZW5ndGggLSAxO1xuICAgIGlmIChhcmd1bWVudHMubGVuZ3RoID4gMSkgaW5kZXggPSBNYXRoLm1pbihpbmRleCwgdG9JbnRlZ2VyKGFyZ3VtZW50c1sxXSkpO1xuICAgIGlmIChpbmRleCA8IDApIGluZGV4ID0gbGVuZ3RoICsgaW5kZXg7XG4gICAgZm9yICg7aW5kZXggPj0gMDsgaW5kZXgtLSkgaWYgKGluZGV4IGluIE8pIGlmIChPW2luZGV4XSA9PT0gc2VhcmNoRWxlbWVudCkgcmV0dXJuIGluZGV4IHx8IDA7XG4gICAgcmV0dXJuIC0xO1xuICB9XG59KTtcbiIsIid1c2Ugc3RyaWN0JztcbnZhciAkZXhwb3J0ID0gcmVxdWlyZSgnLi9fZXhwb3J0Jyk7XG52YXIgJGluZGV4T2YgPSByZXF1aXJlKCcuL19hcnJheS1pbmNsdWRlcycpKGZhbHNlKTtcbnZhciAkbmF0aXZlID0gW10uaW5kZXhPZjtcbnZhciBORUdBVElWRV9aRVJPID0gISEkbmF0aXZlICYmIDEgLyBbMV0uaW5kZXhPZigxLCAtMCkgPCAwO1xuXG4kZXhwb3J0KCRleHBvcnQuUCArICRleHBvcnQuRiAqIChORUdBVElWRV9aRVJPIHx8ICFyZXF1aXJlKCcuL19zdHJpY3QtbWV0aG9kJykoJG5hdGl2ZSkpLCAnQXJyYXknLCB7XG4gIC8vIDIyLjEuMy4xMSAvIDE1LjQuNC4xNCBBcnJheS5wcm90b3R5cGUuaW5kZXhPZihzZWFyY2hFbGVtZW50IFssIGZyb21JbmRleF0pXG4gIGluZGV4T2Y6IGZ1bmN0aW9uIGluZGV4T2Yoc2VhcmNoRWxlbWVudCAvKiAsIGZyb21JbmRleCA9IDAgKi8pIHtcbiAgICByZXR1cm4gTkVHQVRJVkVfWkVST1xuICAgICAgLy8gY29udmVydCAtMCB0byArMFxuICAgICAgPyAkbmF0aXZlLmFwcGx5KHRoaXMsIGFyZ3VtZW50cykgfHwgMFxuICAgICAgOiAkaW5kZXhPZih0aGlzLCBzZWFyY2hFbGVtZW50LCBhcmd1bWVudHNbMV0pO1xuICB9XG59KTtcbiIsIid1c2Ugc3RyaWN0JztcbnZhciAkZXhwb3J0ID0gcmVxdWlyZSgnLi9fZXhwb3J0Jyk7XG52YXIgJHJlZHVjZSA9IHJlcXVpcmUoJy4vX2FycmF5LXJlZHVjZScpO1xuXG4kZXhwb3J0KCRleHBvcnQuUCArICRleHBvcnQuRiAqICFyZXF1aXJlKCcuL19zdHJpY3QtbWV0aG9kJykoW10ucmVkdWNlUmlnaHQsIHRydWUpLCAnQXJyYXknLCB7XG4gIC8vIDIyLjEuMy4xOSAvIDE1LjQuNC4yMiBBcnJheS5wcm90b3R5cGUucmVkdWNlUmlnaHQoY2FsbGJhY2tmbiBbLCBpbml0aWFsVmFsdWVdKVxuICByZWR1Y2VSaWdodDogZnVuY3Rpb24gcmVkdWNlUmlnaHQoY2FsbGJhY2tmbiAvKiAsIGluaXRpYWxWYWx1ZSAqLykge1xuICAgIHJldHVybiAkcmVkdWNlKHRoaXMsIGNhbGxiYWNrZm4sIGFyZ3VtZW50cy5sZW5ndGgsIGFyZ3VtZW50c1sxXSwgdHJ1ZSk7XG4gIH1cbn0pO1xuIiwiJ3VzZSBzdHJpY3QnO1xudmFyICRleHBvcnQgPSByZXF1aXJlKCcuL19leHBvcnQnKTtcbnZhciAkcmVkdWNlID0gcmVxdWlyZSgnLi9fYXJyYXktcmVkdWNlJyk7XG5cbiRleHBvcnQoJGV4cG9ydC5QICsgJGV4cG9ydC5GICogIXJlcXVpcmUoJy4vX3N0cmljdC1tZXRob2QnKShbXS5yZWR1Y2UsIHRydWUpLCAnQXJyYXknLCB7XG4gIC8vIDIyLjEuMy4xOCAvIDE1LjQuNC4yMSBBcnJheS5wcm90b3R5cGUucmVkdWNlKGNhbGxiYWNrZm4gWywgaW5pdGlhbFZhbHVlXSlcbiAgcmVkdWNlOiBmdW5jdGlvbiByZWR1Y2UoY2FsbGJhY2tmbiAvKiAsIGluaXRpYWxWYWx1ZSAqLykge1xuICAgIHJldHVybiAkcmVkdWNlKHRoaXMsIGNhbGxiYWNrZm4sIGFyZ3VtZW50cy5sZW5ndGgsIGFyZ3VtZW50c1sxXSwgZmFsc2UpO1xuICB9XG59KTtcbiIsIid1c2Ugc3RyaWN0JztcbnZhciAkZXhwb3J0ID0gcmVxdWlyZSgnLi9fZXhwb3J0Jyk7XG52YXIgJGV2ZXJ5ID0gcmVxdWlyZSgnLi9fYXJyYXktbWV0aG9kcycpKDQpO1xuXG4kZXhwb3J0KCRleHBvcnQuUCArICRleHBvcnQuRiAqICFyZXF1aXJlKCcuL19zdHJpY3QtbWV0aG9kJykoW10uZXZlcnksIHRydWUpLCAnQXJyYXknLCB7XG4gIC8vIDIyLjEuMy41IC8gMTUuNC40LjE2IEFycmF5LnByb3RvdHlwZS5ldmVyeShjYWxsYmFja2ZuIFssIHRoaXNBcmddKVxuICBldmVyeTogZnVuY3Rpb24gZXZlcnkoY2FsbGJhY2tmbiAvKiAsIHRoaXNBcmcgKi8pIHtcbiAgICByZXR1cm4gJGV2ZXJ5KHRoaXMsIGNhbGxiYWNrZm4sIGFyZ3VtZW50c1sxXSk7XG4gIH1cbn0pO1xuIiwiJ3VzZSBzdHJpY3QnO1xudmFyICRleHBvcnQgPSByZXF1aXJlKCcuL19leHBvcnQnKTtcbnZhciAkc29tZSA9IHJlcXVpcmUoJy4vX2FycmF5LW1ldGhvZHMnKSgzKTtcblxuJGV4cG9ydCgkZXhwb3J0LlAgKyAkZXhwb3J0LkYgKiAhcmVxdWlyZSgnLi9fc3RyaWN0LW1ldGhvZCcpKFtdLnNvbWUsIHRydWUpLCAnQXJyYXknLCB7XG4gIC8vIDIyLjEuMy4yMyAvIDE1LjQuNC4xNyBBcnJheS5wcm90b3R5cGUuc29tZShjYWxsYmFja2ZuIFssIHRoaXNBcmddKVxuICBzb21lOiBmdW5jdGlvbiBzb21lKGNhbGxiYWNrZm4gLyogLCB0aGlzQXJnICovKSB7XG4gICAgcmV0dXJuICRzb21lKHRoaXMsIGNhbGxiYWNrZm4sIGFyZ3VtZW50c1sxXSk7XG4gIH1cbn0pO1xuIiwiJ3VzZSBzdHJpY3QnO1xudmFyICRleHBvcnQgPSByZXF1aXJlKCcuL19leHBvcnQnKTtcbnZhciAkZmlsdGVyID0gcmVxdWlyZSgnLi9fYXJyYXktbWV0aG9kcycpKDIpO1xuXG4kZXhwb3J0KCRleHBvcnQuUCArICRleHBvcnQuRiAqICFyZXF1aXJlKCcuL19zdHJpY3QtbWV0aG9kJykoW10uZmlsdGVyLCB0cnVlKSwgJ0FycmF5Jywge1xuICAvLyAyMi4xLjMuNyAvIDE1LjQuNC4yMCBBcnJheS5wcm90b3R5cGUuZmlsdGVyKGNhbGxiYWNrZm4gWywgdGhpc0FyZ10pXG4gIGZpbHRlcjogZnVuY3Rpb24gZmlsdGVyKGNhbGxiYWNrZm4gLyogLCB0aGlzQXJnICovKSB7XG4gICAgcmV0dXJuICRmaWx0ZXIodGhpcywgY2FsbGJhY2tmbiwgYXJndW1lbnRzWzFdKTtcbiAgfVxufSk7XG4iLCIndXNlIHN0cmljdCc7XG52YXIgJGV4cG9ydCA9IHJlcXVpcmUoJy4vX2V4cG9ydCcpO1xudmFyICRtYXAgPSByZXF1aXJlKCcuL19hcnJheS1tZXRob2RzJykoMSk7XG5cbiRleHBvcnQoJGV4cG9ydC5QICsgJGV4cG9ydC5GICogIXJlcXVpcmUoJy4vX3N0cmljdC1tZXRob2QnKShbXS5tYXAsIHRydWUpLCAnQXJyYXknLCB7XG4gIC8vIDIyLjEuMy4xNSAvIDE1LjQuNC4xOSBBcnJheS5wcm90b3R5cGUubWFwKGNhbGxiYWNrZm4gWywgdGhpc0FyZ10pXG4gIG1hcDogZnVuY3Rpb24gbWFwKGNhbGxiYWNrZm4gLyogLCB0aGlzQXJnICovKSB7XG4gICAgcmV0dXJuICRtYXAodGhpcywgY2FsbGJhY2tmbiwgYXJndW1lbnRzWzFdKTtcbiAgfVxufSk7XG4iLCJ2YXIgaXNPYmplY3QgPSByZXF1aXJlKCcuL19pcy1vYmplY3QnKTtcbnZhciBpc0FycmF5ID0gcmVxdWlyZSgnLi9faXMtYXJyYXknKTtcbnZhciBTUEVDSUVTID0gcmVxdWlyZSgnLi9fd2tzJykoJ3NwZWNpZXMnKTtcblxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAob3JpZ2luYWwpIHtcbiAgdmFyIEM7XG4gIGlmIChpc0FycmF5KG9yaWdpbmFsKSkge1xuICAgIEMgPSBvcmlnaW5hbC5jb25zdHJ1Y3RvcjtcbiAgICAvLyBjcm9zcy1yZWFsbSBmYWxsYmFja1xuICAgIGlmICh0eXBlb2YgQyA9PSAnZnVuY3Rpb24nICYmIChDID09PSBBcnJheSB8fCBpc0FycmF5KEMucHJvdG90eXBlKSkpIEMgPSB1bmRlZmluZWQ7XG4gICAgaWYgKGlzT2JqZWN0KEMpKSB7XG4gICAgICBDID0gQ1tTUEVDSUVTXTtcbiAgICAgIGlmIChDID09PSBudWxsKSBDID0gdW5kZWZpbmVkO1xuICAgIH1cbiAgfSByZXR1cm4gQyA9PT0gdW5kZWZpbmVkID8gQXJyYXkgOiBDO1xufTtcbiIsIid1c2Ugc3RyaWN0JztcbnZhciAkZXhwb3J0ID0gcmVxdWlyZSgnLi9fZXhwb3J0Jyk7XG52YXIgJGZvckVhY2ggPSByZXF1aXJlKCcuL19hcnJheS1tZXRob2RzJykoMCk7XG52YXIgU1RSSUNUID0gcmVxdWlyZSgnLi9fc3RyaWN0LW1ldGhvZCcpKFtdLmZvckVhY2gsIHRydWUpO1xuXG4kZXhwb3J0KCRleHBvcnQuUCArICRleHBvcnQuRiAqICFTVFJJQ1QsICdBcnJheScsIHtcbiAgLy8gMjIuMS4zLjEwIC8gMTUuNC40LjE4IEFycmF5LnByb3RvdHlwZS5mb3JFYWNoKGNhbGxiYWNrZm4gWywgdGhpc0FyZ10pXG4gIGZvckVhY2g6IGZ1bmN0aW9uIGZvckVhY2goY2FsbGJhY2tmbiAvKiAsIHRoaXNBcmcgKi8pIHtcbiAgICByZXR1cm4gJGZvckVhY2godGhpcywgY2FsbGJhY2tmbiwgYXJndW1lbnRzWzFdKTtcbiAgfVxufSk7XG4iLCIndXNlIHN0cmljdCc7XG52YXIgJGV4cG9ydCA9IHJlcXVpcmUoJy4vX2V4cG9ydCcpO1xudmFyIGFGdW5jdGlvbiA9IHJlcXVpcmUoJy4vX2EtZnVuY3Rpb24nKTtcbnZhciB0b09iamVjdCA9IHJlcXVpcmUoJy4vX3RvLW9iamVjdCcpO1xudmFyIGZhaWxzID0gcmVxdWlyZSgnLi9fZmFpbHMnKTtcbnZhciAkc29ydCA9IFtdLnNvcnQ7XG52YXIgdGVzdCA9IFsxLCAyLCAzXTtcblxuJGV4cG9ydCgkZXhwb3J0LlAgKyAkZXhwb3J0LkYgKiAoZmFpbHMoZnVuY3Rpb24gKCkge1xuICAvLyBJRTgtXG4gIHRlc3Quc29ydCh1bmRlZmluZWQpO1xufSkgfHwgIWZhaWxzKGZ1bmN0aW9uICgpIHtcbiAgLy8gVjggYnVnXG4gIHRlc3Quc29ydChudWxsKTtcbiAgLy8gT2xkIFdlYktpdFxufSkgfHwgIXJlcXVpcmUoJy4vX3N0cmljdC1tZXRob2QnKSgkc29ydCkpLCAnQXJyYXknLCB7XG4gIC8vIDIyLjEuMy4yNSBBcnJheS5wcm90b3R5cGUuc29ydChjb21wYXJlZm4pXG4gIHNvcnQ6IGZ1bmN0aW9uIHNvcnQoY29tcGFyZWZuKSB7XG4gICAgcmV0dXJuIGNvbXBhcmVmbiA9PT0gdW5kZWZpbmVkXG4gICAgICA/ICRzb3J0LmNhbGwodG9PYmplY3QodGhpcykpXG4gICAgICA6ICRzb3J0LmNhbGwodG9PYmplY3QodGhpcyksIGFGdW5jdGlvbihjb21wYXJlZm4pKTtcbiAgfVxufSk7XG4iLCIndXNlIHN0cmljdCc7XG52YXIgJGV4cG9ydCA9IHJlcXVpcmUoJy4vX2V4cG9ydCcpO1xudmFyIGh0bWwgPSByZXF1aXJlKCcuL19odG1sJyk7XG52YXIgY29mID0gcmVxdWlyZSgnLi9fY29mJyk7XG52YXIgdG9BYnNvbHV0ZUluZGV4ID0gcmVxdWlyZSgnLi9fdG8tYWJzb2x1dGUtaW5kZXgnKTtcbnZhciB0b0xlbmd0aCA9IHJlcXVpcmUoJy4vX3RvLWxlbmd0aCcpO1xudmFyIGFycmF5U2xpY2UgPSBbXS5zbGljZTtcblxuLy8gZmFsbGJhY2sgZm9yIG5vdCBhcnJheS1saWtlIEVTMyBzdHJpbmdzIGFuZCBET00gb2JqZWN0c1xuJGV4cG9ydCgkZXhwb3J0LlAgKyAkZXhwb3J0LkYgKiByZXF1aXJlKCcuL19mYWlscycpKGZ1bmN0aW9uICgpIHtcbiAgaWYgKGh0bWwpIGFycmF5U2xpY2UuY2FsbChodG1sKTtcbn0pLCAnQXJyYXknLCB7XG4gIHNsaWNlOiBmdW5jdGlvbiBzbGljZShiZWdpbiwgZW5kKSB7XG4gICAgdmFyIGxlbiA9IHRvTGVuZ3RoKHRoaXMubGVuZ3RoKTtcbiAgICB2YXIga2xhc3MgPSBjb2YodGhpcyk7XG4gICAgZW5kID0gZW5kID09PSB1bmRlZmluZWQgPyBsZW4gOiBlbmQ7XG4gICAgaWYgKGtsYXNzID09ICdBcnJheScpIHJldHVybiBhcnJheVNsaWNlLmNhbGwodGhpcywgYmVnaW4sIGVuZCk7XG4gICAgdmFyIHN0YXJ0ID0gdG9BYnNvbHV0ZUluZGV4KGJlZ2luLCBsZW4pO1xuICAgIHZhciB1cFRvID0gdG9BYnNvbHV0ZUluZGV4KGVuZCwgbGVuKTtcbiAgICB2YXIgc2l6ZSA9IHRvTGVuZ3RoKHVwVG8gLSBzdGFydCk7XG4gICAgdmFyIGNsb25lZCA9IG5ldyBBcnJheShzaXplKTtcbiAgICB2YXIgaSA9IDA7XG4gICAgZm9yICg7IGkgPCBzaXplOyBpKyspIGNsb25lZFtpXSA9IGtsYXNzID09ICdTdHJpbmcnXG4gICAgICA/IHRoaXMuY2hhckF0KHN0YXJ0ICsgaSlcbiAgICAgIDogdGhpc1tzdGFydCArIGldO1xuICAgIHJldHVybiBjbG9uZWQ7XG4gIH1cbn0pO1xuIiwiJ3VzZSBzdHJpY3QnO1xuLy8gMjIuMS4zLjEzIEFycmF5LnByb3RvdHlwZS5qb2luKHNlcGFyYXRvcilcbnZhciAkZXhwb3J0ID0gcmVxdWlyZSgnLi9fZXhwb3J0Jyk7XG52YXIgdG9JT2JqZWN0ID0gcmVxdWlyZSgnLi9fdG8taW9iamVjdCcpO1xudmFyIGFycmF5Sm9pbiA9IFtdLmpvaW47XG5cbi8vIGZhbGxiYWNrIGZvciBub3QgYXJyYXktbGlrZSBzdHJpbmdzXG4kZXhwb3J0KCRleHBvcnQuUCArICRleHBvcnQuRiAqIChyZXF1aXJlKCcuL19pb2JqZWN0JykgIT0gT2JqZWN0IHx8ICFyZXF1aXJlKCcuL19zdHJpY3QtbWV0aG9kJykoYXJyYXlKb2luKSksICdBcnJheScsIHtcbiAgam9pbjogZnVuY3Rpb24gam9pbihzZXBhcmF0b3IpIHtcbiAgICByZXR1cm4gYXJyYXlKb2luLmNhbGwodG9JT2JqZWN0KHRoaXMpLCBzZXBhcmF0b3IgPT09IHVuZGVmaW5lZCA/ICcsJyA6IHNlcGFyYXRvcik7XG4gIH1cbn0pO1xuIiwiJ3VzZSBzdHJpY3QnO1xudmFyICRleHBvcnQgPSByZXF1aXJlKCcuL19leHBvcnQnKTtcbnZhciBjcmVhdGVQcm9wZXJ0eSA9IHJlcXVpcmUoJy4vX2NyZWF0ZS1wcm9wZXJ0eScpO1xuXG4vLyBXZWJLaXQgQXJyYXkub2YgaXNuJ3QgZ2VuZXJpY1xuJGV4cG9ydCgkZXhwb3J0LlMgKyAkZXhwb3J0LkYgKiByZXF1aXJlKCcuL19mYWlscycpKGZ1bmN0aW9uICgpIHtcbiAgZnVuY3Rpb24gRigpIHsgLyogZW1wdHkgKi8gfVxuICByZXR1cm4gIShBcnJheS5vZi5jYWxsKEYpIGluc3RhbmNlb2YgRik7XG59KSwgJ0FycmF5Jywge1xuICAvLyAyMi4xLjIuMyBBcnJheS5vZiggLi4uaXRlbXMpXG4gIG9mOiBmdW5jdGlvbiBvZigvKiAuLi5hcmdzICovKSB7XG4gICAgdmFyIGluZGV4ID0gMDtcbiAgICB2YXIgYUxlbiA9IGFyZ3VtZW50cy5sZW5ndGg7XG4gICAgdmFyIHJlc3VsdCA9IG5ldyAodHlwZW9mIHRoaXMgPT0gJ2Z1bmN0aW9uJyA/IHRoaXMgOiBBcnJheSkoYUxlbik7XG4gICAgd2hpbGUgKGFMZW4gPiBpbmRleCkgY3JlYXRlUHJvcGVydHkocmVzdWx0LCBpbmRleCwgYXJndW1lbnRzW2luZGV4KytdKTtcbiAgICByZXN1bHQubGVuZ3RoID0gYUxlbjtcbiAgICByZXR1cm4gcmVzdWx0O1xuICB9XG59KTtcbiIsIid1c2Ugc3RyaWN0JztcbnZhciBjdHggPSByZXF1aXJlKCcuL19jdHgnKTtcbnZhciAkZXhwb3J0ID0gcmVxdWlyZSgnLi9fZXhwb3J0Jyk7XG52YXIgdG9PYmplY3QgPSByZXF1aXJlKCcuL190by1vYmplY3QnKTtcbnZhciBjYWxsID0gcmVxdWlyZSgnLi9faXRlci1jYWxsJyk7XG52YXIgaXNBcnJheUl0ZXIgPSByZXF1aXJlKCcuL19pcy1hcnJheS1pdGVyJyk7XG52YXIgdG9MZW5ndGggPSByZXF1aXJlKCcuL190by1sZW5ndGgnKTtcbnZhciBjcmVhdGVQcm9wZXJ0eSA9IHJlcXVpcmUoJy4vX2NyZWF0ZS1wcm9wZXJ0eScpO1xudmFyIGdldEl0ZXJGbiA9IHJlcXVpcmUoJy4vY29yZS5nZXQtaXRlcmF0b3ItbWV0aG9kJyk7XG5cbiRleHBvcnQoJGV4cG9ydC5TICsgJGV4cG9ydC5GICogIXJlcXVpcmUoJy4vX2l0ZXItZGV0ZWN0JykoZnVuY3Rpb24gKGl0ZXIpIHsgQXJyYXkuZnJvbShpdGVyKTsgfSksICdBcnJheScsIHtcbiAgLy8gMjIuMS4yLjEgQXJyYXkuZnJvbShhcnJheUxpa2UsIG1hcGZuID0gdW5kZWZpbmVkLCB0aGlzQXJnID0gdW5kZWZpbmVkKVxuICBmcm9tOiBmdW5jdGlvbiBmcm9tKGFycmF5TGlrZSAvKiAsIG1hcGZuID0gdW5kZWZpbmVkLCB0aGlzQXJnID0gdW5kZWZpbmVkICovKSB7XG4gICAgdmFyIE8gPSB0b09iamVjdChhcnJheUxpa2UpO1xuICAgIHZhciBDID0gdHlwZW9mIHRoaXMgPT0gJ2Z1bmN0aW9uJyA/IHRoaXMgOiBBcnJheTtcbiAgICB2YXIgYUxlbiA9IGFyZ3VtZW50cy5sZW5ndGg7XG4gICAgdmFyIG1hcGZuID0gYUxlbiA+IDEgPyBhcmd1bWVudHNbMV0gOiB1bmRlZmluZWQ7XG4gICAgdmFyIG1hcHBpbmcgPSBtYXBmbiAhPT0gdW5kZWZpbmVkO1xuICAgIHZhciBpbmRleCA9IDA7XG4gICAgdmFyIGl0ZXJGbiA9IGdldEl0ZXJGbihPKTtcbiAgICB2YXIgbGVuZ3RoLCByZXN1bHQsIHN0ZXAsIGl0ZXJhdG9yO1xuICAgIGlmIChtYXBwaW5nKSBtYXBmbiA9IGN0eChtYXBmbiwgYUxlbiA+IDIgPyBhcmd1bWVudHNbMl0gOiB1bmRlZmluZWQsIDIpO1xuICAgIC8vIGlmIG9iamVjdCBpc24ndCBpdGVyYWJsZSBvciBpdCdzIGFycmF5IHdpdGggZGVmYXVsdCBpdGVyYXRvciAtIHVzZSBzaW1wbGUgY2FzZVxuICAgIGlmIChpdGVyRm4gIT0gdW5kZWZpbmVkICYmICEoQyA9PSBBcnJheSAmJiBpc0FycmF5SXRlcihpdGVyRm4pKSkge1xuICAgICAgZm9yIChpdGVyYXRvciA9IGl0ZXJGbi5jYWxsKE8pLCByZXN1bHQgPSBuZXcgQygpOyAhKHN0ZXAgPSBpdGVyYXRvci5uZXh0KCkpLmRvbmU7IGluZGV4KyspIHtcbiAgICAgICAgY3JlYXRlUHJvcGVydHkocmVzdWx0LCBpbmRleCwgbWFwcGluZyA/IGNhbGwoaXRlcmF0b3IsIG1hcGZuLCBbc3RlcC52YWx1ZSwgaW5kZXhdLCB0cnVlKSA6IHN0ZXAudmFsdWUpO1xuICAgICAgfVxuICAgIH0gZWxzZSB7XG4gICAgICBsZW5ndGggPSB0b0xlbmd0aChPLmxlbmd0aCk7XG4gICAgICBmb3IgKHJlc3VsdCA9IG5ldyBDKGxlbmd0aCk7IGxlbmd0aCA+IGluZGV4OyBpbmRleCsrKSB7XG4gICAgICAgIGNyZWF0ZVByb3BlcnR5KHJlc3VsdCwgaW5kZXgsIG1hcHBpbmcgPyBtYXBmbihPW2luZGV4XSwgaW5kZXgpIDogT1tpbmRleF0pO1xuICAgICAgfVxuICAgIH1cbiAgICByZXN1bHQubGVuZ3RoID0gaW5kZXg7XG4gICAgcmV0dXJuIHJlc3VsdDtcbiAgfVxufSk7XG4iLCIvLyAyMi4xLjIuMiAvIDE1LjQuMy4yIEFycmF5LmlzQXJyYXkoYXJnKVxudmFyICRleHBvcnQgPSByZXF1aXJlKCcuL19leHBvcnQnKTtcblxuJGV4cG9ydCgkZXhwb3J0LlMsICdBcnJheScsIHsgaXNBcnJheTogcmVxdWlyZSgnLi9faXMtYXJyYXknKSB9KTtcbiIsIid1c2Ugc3RyaWN0JztcbnZhciBhbk9iamVjdCA9IHJlcXVpcmUoJy4vX2FuLW9iamVjdCcpO1xudmFyIHRvUHJpbWl0aXZlID0gcmVxdWlyZSgnLi9fdG8tcHJpbWl0aXZlJyk7XG52YXIgTlVNQkVSID0gJ251bWJlcic7XG5cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKGhpbnQpIHtcbiAgaWYgKGhpbnQgIT09ICdzdHJpbmcnICYmIGhpbnQgIT09IE5VTUJFUiAmJiBoaW50ICE9PSAnZGVmYXVsdCcpIHRocm93IFR5cGVFcnJvcignSW5jb3JyZWN0IGhpbnQnKTtcbiAgcmV0dXJuIHRvUHJpbWl0aXZlKGFuT2JqZWN0KHRoaXMpLCBoaW50ICE9IE5VTUJFUik7XG59O1xuIiwidmFyIFRPX1BSSU1JVElWRSA9IHJlcXVpcmUoJy4vX3drcycpKCd0b1ByaW1pdGl2ZScpO1xudmFyIHByb3RvID0gRGF0ZS5wcm90b3R5cGU7XG5cbmlmICghKFRPX1BSSU1JVElWRSBpbiBwcm90bykpIHJlcXVpcmUoJy4vX2hpZGUnKShwcm90bywgVE9fUFJJTUlUSVZFLCByZXF1aXJlKCcuL19kYXRlLXRvLXByaW1pdGl2ZScpKTtcbiIsInZhciBEYXRlUHJvdG8gPSBEYXRlLnByb3RvdHlwZTtcbnZhciBJTlZBTElEX0RBVEUgPSAnSW52YWxpZCBEYXRlJztcbnZhciBUT19TVFJJTkcgPSAndG9TdHJpbmcnO1xudmFyICR0b1N0cmluZyA9IERhdGVQcm90b1tUT19TVFJJTkddO1xudmFyIGdldFRpbWUgPSBEYXRlUHJvdG8uZ2V0VGltZTtcbmlmIChuZXcgRGF0ZShOYU4pICsgJycgIT0gSU5WQUxJRF9EQVRFKSB7XG4gIHJlcXVpcmUoJy4vX3JlZGVmaW5lJykoRGF0ZVByb3RvLCBUT19TVFJJTkcsIGZ1bmN0aW9uIHRvU3RyaW5nKCkge1xuICAgIHZhciB2YWx1ZSA9IGdldFRpbWUuY2FsbCh0aGlzKTtcbiAgICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgbm8tc2VsZi1jb21wYXJlXG4gICAgcmV0dXJuIHZhbHVlID09PSB2YWx1ZSA/ICR0b1N0cmluZy5jYWxsKHRoaXMpIDogSU5WQUxJRF9EQVRFO1xuICB9KTtcbn1cbiIsIid1c2Ugc3RyaWN0Jztcbi8vIDIwLjMuNC4zNiAvIDE1LjkuNS40MyBEYXRlLnByb3RvdHlwZS50b0lTT1N0cmluZygpXG52YXIgZmFpbHMgPSByZXF1aXJlKCcuL19mYWlscycpO1xudmFyIGdldFRpbWUgPSBEYXRlLnByb3RvdHlwZS5nZXRUaW1lO1xudmFyICR0b0lTT1N0cmluZyA9IERhdGUucHJvdG90eXBlLnRvSVNPU3RyaW5nO1xuXG52YXIgbHogPSBmdW5jdGlvbiAobnVtKSB7XG4gIHJldHVybiBudW0gPiA5ID8gbnVtIDogJzAnICsgbnVtO1xufTtcblxuLy8gUGhhbnRvbUpTIC8gb2xkIFdlYktpdCBoYXMgYSBicm9rZW4gaW1wbGVtZW50YXRpb25zXG5tb2R1bGUuZXhwb3J0cyA9IChmYWlscyhmdW5jdGlvbiAoKSB7XG4gIHJldHVybiAkdG9JU09TdHJpbmcuY2FsbChuZXcgRGF0ZSgtNWUxMyAtIDEpKSAhPSAnMDM4NS0wNy0yNVQwNzowNjozOS45OTlaJztcbn0pIHx8ICFmYWlscyhmdW5jdGlvbiAoKSB7XG4gICR0b0lTT1N0cmluZy5jYWxsKG5ldyBEYXRlKE5hTikpO1xufSkpID8gZnVuY3Rpb24gdG9JU09TdHJpbmcoKSB7XG4gIGlmICghaXNGaW5pdGUoZ2V0VGltZS5jYWxsKHRoaXMpKSkgdGhyb3cgUmFuZ2VFcnJvcignSW52YWxpZCB0aW1lIHZhbHVlJyk7XG4gIHZhciBkID0gdGhpcztcbiAgdmFyIHkgPSBkLmdldFVUQ0Z1bGxZZWFyKCk7XG4gIHZhciBtID0gZC5nZXRVVENNaWxsaXNlY29uZHMoKTtcbiAgdmFyIHMgPSB5IDwgMCA/ICctJyA6IHkgPiA5OTk5ID8gJysnIDogJyc7XG4gIHJldHVybiBzICsgKCcwMDAwMCcgKyBNYXRoLmFicyh5KSkuc2xpY2UocyA/IC02IDogLTQpICtcbiAgICAnLScgKyBseihkLmdldFVUQ01vbnRoKCkgKyAxKSArICctJyArIGx6KGQuZ2V0VVRDRGF0ZSgpKSArXG4gICAgJ1QnICsgbHooZC5nZXRVVENIb3VycygpKSArICc6JyArIGx6KGQuZ2V0VVRDTWludXRlcygpKSArXG4gICAgJzonICsgbHooZC5nZXRVVENTZWNvbmRzKCkpICsgJy4nICsgKG0gPiA5OSA/IG0gOiAnMCcgKyBseihtKSkgKyAnWic7XG59IDogJHRvSVNPU3RyaW5nO1xuIiwiLy8gMjAuMy40LjM2IC8gMTUuOS41LjQzIERhdGUucHJvdG90eXBlLnRvSVNPU3RyaW5nKClcbnZhciAkZXhwb3J0ID0gcmVxdWlyZSgnLi9fZXhwb3J0Jyk7XG52YXIgdG9JU09TdHJpbmcgPSByZXF1aXJlKCcuL19kYXRlLXRvLWlzby1zdHJpbmcnKTtcblxuLy8gUGhhbnRvbUpTIC8gb2xkIFdlYktpdCBoYXMgYSBicm9rZW4gaW1wbGVtZW50YXRpb25zXG4kZXhwb3J0KCRleHBvcnQuUCArICRleHBvcnQuRiAqIChEYXRlLnByb3RvdHlwZS50b0lTT1N0cmluZyAhPT0gdG9JU09TdHJpbmcpLCAnRGF0ZScsIHtcbiAgdG9JU09TdHJpbmc6IHRvSVNPU3RyaW5nXG59KTtcbiIsIid1c2Ugc3RyaWN0JztcbnZhciAkZXhwb3J0ID0gcmVxdWlyZSgnLi9fZXhwb3J0Jyk7XG52YXIgdG9PYmplY3QgPSByZXF1aXJlKCcuL190by1vYmplY3QnKTtcbnZhciB0b1ByaW1pdGl2ZSA9IHJlcXVpcmUoJy4vX3RvLXByaW1pdGl2ZScpO1xuXG4kZXhwb3J0KCRleHBvcnQuUCArICRleHBvcnQuRiAqIHJlcXVpcmUoJy4vX2ZhaWxzJykoZnVuY3Rpb24gKCkge1xuICByZXR1cm4gbmV3IERhdGUoTmFOKS50b0pTT04oKSAhPT0gbnVsbFxuICAgIHx8IERhdGUucHJvdG90eXBlLnRvSlNPTi5jYWxsKHsgdG9JU09TdHJpbmc6IGZ1bmN0aW9uICgpIHsgcmV0dXJuIDE7IH0gfSkgIT09IDE7XG59KSwgJ0RhdGUnLCB7XG4gIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBuby11bnVzZWQtdmFyc1xuICB0b0pTT046IGZ1bmN0aW9uIHRvSlNPTihrZXkpIHtcbiAgICB2YXIgTyA9IHRvT2JqZWN0KHRoaXMpO1xuICAgIHZhciBwdiA9IHRvUHJpbWl0aXZlKE8pO1xuICAgIHJldHVybiB0eXBlb2YgcHYgPT0gJ251bWJlcicgJiYgIWlzRmluaXRlKHB2KSA/IG51bGwgOiBPLnRvSVNPU3RyaW5nKCk7XG4gIH1cbn0pO1xuIiwiLy8gMjAuMy4zLjEgLyAxNS45LjQuNCBEYXRlLm5vdygpXG52YXIgJGV4cG9ydCA9IHJlcXVpcmUoJy4vX2V4cG9ydCcpO1xuXG4kZXhwb3J0KCRleHBvcnQuUywgJ0RhdGUnLCB7IG5vdzogZnVuY3Rpb24gKCkgeyByZXR1cm4gbmV3IERhdGUoKS5nZXRUaW1lKCk7IH0gfSk7XG4iLCIndXNlIHN0cmljdCc7XG4vLyBCLjIuMy4xNCBTdHJpbmcucHJvdG90eXBlLnN1cCgpXG5yZXF1aXJlKCcuL19zdHJpbmctaHRtbCcpKCdzdXAnLCBmdW5jdGlvbiAoY3JlYXRlSFRNTCkge1xuICByZXR1cm4gZnVuY3Rpb24gc3VwKCkge1xuICAgIHJldHVybiBjcmVhdGVIVE1MKHRoaXMsICdzdXAnLCAnJywgJycpO1xuICB9O1xufSk7XG4iLCIndXNlIHN0cmljdCc7XG4vLyBCLjIuMy4xMyBTdHJpbmcucHJvdG90eXBlLnN1YigpXG5yZXF1aXJlKCcuL19zdHJpbmctaHRtbCcpKCdzdWInLCBmdW5jdGlvbiAoY3JlYXRlSFRNTCkge1xuICByZXR1cm4gZnVuY3Rpb24gc3ViKCkge1xuICAgIHJldHVybiBjcmVhdGVIVE1MKHRoaXMsICdzdWInLCAnJywgJycpO1xuICB9O1xufSk7XG4iLCIndXNlIHN0cmljdCc7XG4vLyBCLjIuMy4xMiBTdHJpbmcucHJvdG90eXBlLnN0cmlrZSgpXG5yZXF1aXJlKCcuL19zdHJpbmctaHRtbCcpKCdzdHJpa2UnLCBmdW5jdGlvbiAoY3JlYXRlSFRNTCkge1xuICByZXR1cm4gZnVuY3Rpb24gc3RyaWtlKCkge1xuICAgIHJldHVybiBjcmVhdGVIVE1MKHRoaXMsICdzdHJpa2UnLCAnJywgJycpO1xuICB9O1xufSk7XG4iLCIndXNlIHN0cmljdCc7XG4vLyBCLjIuMy4xMSBTdHJpbmcucHJvdG90eXBlLnNtYWxsKClcbnJlcXVpcmUoJy4vX3N0cmluZy1odG1sJykoJ3NtYWxsJywgZnVuY3Rpb24gKGNyZWF0ZUhUTUwpIHtcbiAgcmV0dXJuIGZ1bmN0aW9uIHNtYWxsKCkge1xuICAgIHJldHVybiBjcmVhdGVIVE1MKHRoaXMsICdzbWFsbCcsICcnLCAnJyk7XG4gIH07XG59KTtcbiIsIid1c2Ugc3RyaWN0Jztcbi8vIEIuMi4zLjEwIFN0cmluZy5wcm90b3R5cGUubGluayh1cmwpXG5yZXF1aXJlKCcuL19zdHJpbmctaHRtbCcpKCdsaW5rJywgZnVuY3Rpb24gKGNyZWF0ZUhUTUwpIHtcbiAgcmV0dXJuIGZ1bmN0aW9uIGxpbmsodXJsKSB7XG4gICAgcmV0dXJuIGNyZWF0ZUhUTUwodGhpcywgJ2EnLCAnaHJlZicsIHVybCk7XG4gIH07XG59KTtcbiIsIid1c2Ugc3RyaWN0Jztcbi8vIEIuMi4zLjkgU3RyaW5nLnByb3RvdHlwZS5pdGFsaWNzKClcbnJlcXVpcmUoJy4vX3N0cmluZy1odG1sJykoJ2l0YWxpY3MnLCBmdW5jdGlvbiAoY3JlYXRlSFRNTCkge1xuICByZXR1cm4gZnVuY3Rpb24gaXRhbGljcygpIHtcbiAgICByZXR1cm4gY3JlYXRlSFRNTCh0aGlzLCAnaScsICcnLCAnJyk7XG4gIH07XG59KTtcbiIsIid1c2Ugc3RyaWN0Jztcbi8vIEIuMi4zLjggU3RyaW5nLnByb3RvdHlwZS5mb250c2l6ZShzaXplKVxucmVxdWlyZSgnLi9fc3RyaW5nLWh0bWwnKSgnZm9udHNpemUnLCBmdW5jdGlvbiAoY3JlYXRlSFRNTCkge1xuICByZXR1cm4gZnVuY3Rpb24gZm9udHNpemUoc2l6ZSkge1xuICAgIHJldHVybiBjcmVhdGVIVE1MKHRoaXMsICdmb250JywgJ3NpemUnLCBzaXplKTtcbiAgfTtcbn0pO1xuIiwiJ3VzZSBzdHJpY3QnO1xuLy8gQi4yLjMuNyBTdHJpbmcucHJvdG90eXBlLmZvbnRjb2xvcihjb2xvcilcbnJlcXVpcmUoJy4vX3N0cmluZy1odG1sJykoJ2ZvbnRjb2xvcicsIGZ1bmN0aW9uIChjcmVhdGVIVE1MKSB7XG4gIHJldHVybiBmdW5jdGlvbiBmb250Y29sb3IoY29sb3IpIHtcbiAgICByZXR1cm4gY3JlYXRlSFRNTCh0aGlzLCAnZm9udCcsICdjb2xvcicsIGNvbG9yKTtcbiAgfTtcbn0pO1xuIiwiJ3VzZSBzdHJpY3QnO1xuLy8gQi4yLjMuNiBTdHJpbmcucHJvdG90eXBlLmZpeGVkKClcbnJlcXVpcmUoJy4vX3N0cmluZy1odG1sJykoJ2ZpeGVkJywgZnVuY3Rpb24gKGNyZWF0ZUhUTUwpIHtcbiAgcmV0dXJuIGZ1bmN0aW9uIGZpeGVkKCkge1xuICAgIHJldHVybiBjcmVhdGVIVE1MKHRoaXMsICd0dCcsICcnLCAnJyk7XG4gIH07XG59KTtcbiIsIid1c2Ugc3RyaWN0Jztcbi8vIEIuMi4zLjUgU3RyaW5nLnByb3RvdHlwZS5ib2xkKClcbnJlcXVpcmUoJy4vX3N0cmluZy1odG1sJykoJ2JvbGQnLCBmdW5jdGlvbiAoY3JlYXRlSFRNTCkge1xuICByZXR1cm4gZnVuY3Rpb24gYm9sZCgpIHtcbiAgICByZXR1cm4gY3JlYXRlSFRNTCh0aGlzLCAnYicsICcnLCAnJyk7XG4gIH07XG59KTtcbiIsIid1c2Ugc3RyaWN0Jztcbi8vIEIuMi4zLjQgU3RyaW5nLnByb3RvdHlwZS5ibGluaygpXG5yZXF1aXJlKCcuL19zdHJpbmctaHRtbCcpKCdibGluaycsIGZ1bmN0aW9uIChjcmVhdGVIVE1MKSB7XG4gIHJldHVybiBmdW5jdGlvbiBibGluaygpIHtcbiAgICByZXR1cm4gY3JlYXRlSFRNTCh0aGlzLCAnYmxpbmsnLCAnJywgJycpO1xuICB9O1xufSk7XG4iLCIndXNlIHN0cmljdCc7XG4vLyBCLjIuMy4zIFN0cmluZy5wcm90b3R5cGUuYmlnKClcbnJlcXVpcmUoJy4vX3N0cmluZy1odG1sJykoJ2JpZycsIGZ1bmN0aW9uIChjcmVhdGVIVE1MKSB7XG4gIHJldHVybiBmdW5jdGlvbiBiaWcoKSB7XG4gICAgcmV0dXJuIGNyZWF0ZUhUTUwodGhpcywgJ2JpZycsICcnLCAnJyk7XG4gIH07XG59KTtcbiIsIid1c2Ugc3RyaWN0Jztcbi8vIEIuMi4zLjIgU3RyaW5nLnByb3RvdHlwZS5hbmNob3IobmFtZSlcbnJlcXVpcmUoJy4vX3N0cmluZy1odG1sJykoJ2FuY2hvcicsIGZ1bmN0aW9uIChjcmVhdGVIVE1MKSB7XG4gIHJldHVybiBmdW5jdGlvbiBhbmNob3IobmFtZSkge1xuICAgIHJldHVybiBjcmVhdGVIVE1MKHRoaXMsICdhJywgJ25hbWUnLCBuYW1lKTtcbiAgfTtcbn0pO1xuIiwiLy8gMjEuMS4zLjE4IFN0cmluZy5wcm90b3R5cGUuc3RhcnRzV2l0aChzZWFyY2hTdHJpbmcgWywgcG9zaXRpb24gXSlcbid1c2Ugc3RyaWN0JztcbnZhciAkZXhwb3J0ID0gcmVxdWlyZSgnLi9fZXhwb3J0Jyk7XG52YXIgdG9MZW5ndGggPSByZXF1aXJlKCcuL190by1sZW5ndGgnKTtcbnZhciBjb250ZXh0ID0gcmVxdWlyZSgnLi9fc3RyaW5nLWNvbnRleHQnKTtcbnZhciBTVEFSVFNfV0lUSCA9ICdzdGFydHNXaXRoJztcbnZhciAkc3RhcnRzV2l0aCA9ICcnW1NUQVJUU19XSVRIXTtcblxuJGV4cG9ydCgkZXhwb3J0LlAgKyAkZXhwb3J0LkYgKiByZXF1aXJlKCcuL19mYWlscy1pcy1yZWdleHAnKShTVEFSVFNfV0lUSCksICdTdHJpbmcnLCB7XG4gIHN0YXJ0c1dpdGg6IGZ1bmN0aW9uIHN0YXJ0c1dpdGgoc2VhcmNoU3RyaW5nIC8qICwgcG9zaXRpb24gPSAwICovKSB7XG4gICAgdmFyIHRoYXQgPSBjb250ZXh0KHRoaXMsIHNlYXJjaFN0cmluZywgU1RBUlRTX1dJVEgpO1xuICAgIHZhciBpbmRleCA9IHRvTGVuZ3RoKE1hdGgubWluKGFyZ3VtZW50cy5sZW5ndGggPiAxID8gYXJndW1lbnRzWzFdIDogdW5kZWZpbmVkLCB0aGF0Lmxlbmd0aCkpO1xuICAgIHZhciBzZWFyY2ggPSBTdHJpbmcoc2VhcmNoU3RyaW5nKTtcbiAgICByZXR1cm4gJHN0YXJ0c1dpdGhcbiAgICAgID8gJHN0YXJ0c1dpdGguY2FsbCh0aGF0LCBzZWFyY2gsIGluZGV4KVxuICAgICAgOiB0aGF0LnNsaWNlKGluZGV4LCBpbmRleCArIHNlYXJjaC5sZW5ndGgpID09PSBzZWFyY2g7XG4gIH1cbn0pO1xuIiwidmFyICRleHBvcnQgPSByZXF1aXJlKCcuL19leHBvcnQnKTtcblxuJGV4cG9ydCgkZXhwb3J0LlAsICdTdHJpbmcnLCB7XG4gIC8vIDIxLjEuMy4xMyBTdHJpbmcucHJvdG90eXBlLnJlcGVhdChjb3VudClcbiAgcmVwZWF0OiByZXF1aXJlKCcuL19zdHJpbmctcmVwZWF0Jylcbn0pO1xuIiwiLy8gMjEuMS4zLjcgU3RyaW5nLnByb3RvdHlwZS5pbmNsdWRlcyhzZWFyY2hTdHJpbmcsIHBvc2l0aW9uID0gMClcbid1c2Ugc3RyaWN0JztcbnZhciAkZXhwb3J0ID0gcmVxdWlyZSgnLi9fZXhwb3J0Jyk7XG52YXIgY29udGV4dCA9IHJlcXVpcmUoJy4vX3N0cmluZy1jb250ZXh0Jyk7XG52YXIgSU5DTFVERVMgPSAnaW5jbHVkZXMnO1xuXG4kZXhwb3J0KCRleHBvcnQuUCArICRleHBvcnQuRiAqIHJlcXVpcmUoJy4vX2ZhaWxzLWlzLXJlZ2V4cCcpKElOQ0xVREVTKSwgJ1N0cmluZycsIHtcbiAgaW5jbHVkZXM6IGZ1bmN0aW9uIGluY2x1ZGVzKHNlYXJjaFN0cmluZyAvKiAsIHBvc2l0aW9uID0gMCAqLykge1xuICAgIHJldHVybiAhIX5jb250ZXh0KHRoaXMsIHNlYXJjaFN0cmluZywgSU5DTFVERVMpXG4gICAgICAuaW5kZXhPZihzZWFyY2hTdHJpbmcsIGFyZ3VtZW50cy5sZW5ndGggPiAxID8gYXJndW1lbnRzWzFdIDogdW5kZWZpbmVkKTtcbiAgfVxufSk7XG4iLCIvLyAyMS4xLjMuNiBTdHJpbmcucHJvdG90eXBlLmVuZHNXaXRoKHNlYXJjaFN0cmluZyBbLCBlbmRQb3NpdGlvbl0pXG4ndXNlIHN0cmljdCc7XG52YXIgJGV4cG9ydCA9IHJlcXVpcmUoJy4vX2V4cG9ydCcpO1xudmFyIHRvTGVuZ3RoID0gcmVxdWlyZSgnLi9fdG8tbGVuZ3RoJyk7XG52YXIgY29udGV4dCA9IHJlcXVpcmUoJy4vX3N0cmluZy1jb250ZXh0Jyk7XG52YXIgRU5EU19XSVRIID0gJ2VuZHNXaXRoJztcbnZhciAkZW5kc1dpdGggPSAnJ1tFTkRTX1dJVEhdO1xuXG4kZXhwb3J0KCRleHBvcnQuUCArICRleHBvcnQuRiAqIHJlcXVpcmUoJy4vX2ZhaWxzLWlzLXJlZ2V4cCcpKEVORFNfV0lUSCksICdTdHJpbmcnLCB7XG4gIGVuZHNXaXRoOiBmdW5jdGlvbiBlbmRzV2l0aChzZWFyY2hTdHJpbmcgLyogLCBlbmRQb3NpdGlvbiA9IEBsZW5ndGggKi8pIHtcbiAgICB2YXIgdGhhdCA9IGNvbnRleHQodGhpcywgc2VhcmNoU3RyaW5nLCBFTkRTX1dJVEgpO1xuICAgIHZhciBlbmRQb3NpdGlvbiA9IGFyZ3VtZW50cy5sZW5ndGggPiAxID8gYXJndW1lbnRzWzFdIDogdW5kZWZpbmVkO1xuICAgIHZhciBsZW4gPSB0b0xlbmd0aCh0aGF0Lmxlbmd0aCk7XG4gICAgdmFyIGVuZCA9IGVuZFBvc2l0aW9uID09PSB1bmRlZmluZWQgPyBsZW4gOiBNYXRoLm1pbih0b0xlbmd0aChlbmRQb3NpdGlvbiksIGxlbik7XG4gICAgdmFyIHNlYXJjaCA9IFN0cmluZyhzZWFyY2hTdHJpbmcpO1xuICAgIHJldHVybiAkZW5kc1dpdGhcbiAgICAgID8gJGVuZHNXaXRoLmNhbGwodGhhdCwgc2VhcmNoLCBlbmQpXG4gICAgICA6IHRoYXQuc2xpY2UoZW5kIC0gc2VhcmNoLmxlbmd0aCwgZW5kKSA9PT0gc2VhcmNoO1xuICB9XG59KTtcbiIsIid1c2Ugc3RyaWN0JztcbnZhciAkZXhwb3J0ID0gcmVxdWlyZSgnLi9fZXhwb3J0Jyk7XG52YXIgJGF0ID0gcmVxdWlyZSgnLi9fc3RyaW5nLWF0JykoZmFsc2UpO1xuJGV4cG9ydCgkZXhwb3J0LlAsICdTdHJpbmcnLCB7XG4gIC8vIDIxLjEuMy4zIFN0cmluZy5wcm90b3R5cGUuY29kZVBvaW50QXQocG9zKVxuICBjb2RlUG9pbnRBdDogZnVuY3Rpb24gY29kZVBvaW50QXQocG9zKSB7XG4gICAgcmV0dXJuICRhdCh0aGlzLCBwb3MpO1xuICB9XG59KTtcbiIsIid1c2Ugc3RyaWN0JztcbnZhciAkYXQgPSByZXF1aXJlKCcuL19zdHJpbmctYXQnKSh0cnVlKTtcblxuLy8gMjEuMS4zLjI3IFN0cmluZy5wcm90b3R5cGVbQEBpdGVyYXRvcl0oKVxucmVxdWlyZSgnLi9faXRlci1kZWZpbmUnKShTdHJpbmcsICdTdHJpbmcnLCBmdW5jdGlvbiAoaXRlcmF0ZWQpIHtcbiAgdGhpcy5fdCA9IFN0cmluZyhpdGVyYXRlZCk7IC8vIHRhcmdldFxuICB0aGlzLl9pID0gMDsgICAgICAgICAgICAgICAgLy8gbmV4dCBpbmRleFxuLy8gMjEuMS41LjIuMSAlU3RyaW5nSXRlcmF0b3JQcm90b3R5cGUlLm5leHQoKVxufSwgZnVuY3Rpb24gKCkge1xuICB2YXIgTyA9IHRoaXMuX3Q7XG4gIHZhciBpbmRleCA9IHRoaXMuX2k7XG4gIHZhciBwb2ludDtcbiAgaWYgKGluZGV4ID49IE8ubGVuZ3RoKSByZXR1cm4geyB2YWx1ZTogdW5kZWZpbmVkLCBkb25lOiB0cnVlIH07XG4gIHBvaW50ID0gJGF0KE8sIGluZGV4KTtcbiAgdGhpcy5faSArPSBwb2ludC5sZW5ndGg7XG4gIHJldHVybiB7IHZhbHVlOiBwb2ludCwgZG9uZTogZmFsc2UgfTtcbn0pO1xuIiwiJ3VzZSBzdHJpY3QnO1xuLy8gMjEuMS4zLjI1IFN0cmluZy5wcm90b3R5cGUudHJpbSgpXG5yZXF1aXJlKCcuL19zdHJpbmctdHJpbScpKCd0cmltJywgZnVuY3Rpb24gKCR0cmltKSB7XG4gIHJldHVybiBmdW5jdGlvbiB0cmltKCkge1xuICAgIHJldHVybiAkdHJpbSh0aGlzLCAzKTtcbiAgfTtcbn0pO1xuIiwidmFyICRleHBvcnQgPSByZXF1aXJlKCcuL19leHBvcnQnKTtcbnZhciB0b0lPYmplY3QgPSByZXF1aXJlKCcuL190by1pb2JqZWN0Jyk7XG52YXIgdG9MZW5ndGggPSByZXF1aXJlKCcuL190by1sZW5ndGgnKTtcblxuJGV4cG9ydCgkZXhwb3J0LlMsICdTdHJpbmcnLCB7XG4gIC8vIDIxLjEuMi40IFN0cmluZy5yYXcoY2FsbFNpdGUsIC4uLnN1YnN0aXR1dGlvbnMpXG4gIHJhdzogZnVuY3Rpb24gcmF3KGNhbGxTaXRlKSB7XG4gICAgdmFyIHRwbCA9IHRvSU9iamVjdChjYWxsU2l0ZS5yYXcpO1xuICAgIHZhciBsZW4gPSB0b0xlbmd0aCh0cGwubGVuZ3RoKTtcbiAgICB2YXIgYUxlbiA9IGFyZ3VtZW50cy5sZW5ndGg7XG4gICAgdmFyIHJlcyA9IFtdO1xuICAgIHZhciBpID0gMDtcbiAgICB3aGlsZSAobGVuID4gaSkge1xuICAgICAgcmVzLnB1c2goU3RyaW5nKHRwbFtpKytdKSk7XG4gICAgICBpZiAoaSA8IGFMZW4pIHJlcy5wdXNoKFN0cmluZyhhcmd1bWVudHNbaV0pKTtcbiAgICB9IHJldHVybiByZXMuam9pbignJyk7XG4gIH1cbn0pO1xuIiwidmFyICRleHBvcnQgPSByZXF1aXJlKCcuL19leHBvcnQnKTtcbnZhciB0b0Fic29sdXRlSW5kZXggPSByZXF1aXJlKCcuL190by1hYnNvbHV0ZS1pbmRleCcpO1xudmFyIGZyb21DaGFyQ29kZSA9IFN0cmluZy5mcm9tQ2hhckNvZGU7XG52YXIgJGZyb21Db2RlUG9pbnQgPSBTdHJpbmcuZnJvbUNvZGVQb2ludDtcblxuLy8gbGVuZ3RoIHNob3VsZCBiZSAxLCBvbGQgRkYgcHJvYmxlbVxuJGV4cG9ydCgkZXhwb3J0LlMgKyAkZXhwb3J0LkYgKiAoISEkZnJvbUNvZGVQb2ludCAmJiAkZnJvbUNvZGVQb2ludC5sZW5ndGggIT0gMSksICdTdHJpbmcnLCB7XG4gIC8vIDIxLjEuMi4yIFN0cmluZy5mcm9tQ29kZVBvaW50KC4uLmNvZGVQb2ludHMpXG4gIGZyb21Db2RlUG9pbnQ6IGZ1bmN0aW9uIGZyb21Db2RlUG9pbnQoeCkgeyAvLyBlc2xpbnQtZGlzYWJsZS1saW5lIG5vLXVudXNlZC12YXJzXG4gICAgdmFyIHJlcyA9IFtdO1xuICAgIHZhciBhTGVuID0gYXJndW1lbnRzLmxlbmd0aDtcbiAgICB2YXIgaSA9IDA7XG4gICAgdmFyIGNvZGU7XG4gICAgd2hpbGUgKGFMZW4gPiBpKSB7XG4gICAgICBjb2RlID0gK2FyZ3VtZW50c1tpKytdO1xuICAgICAgaWYgKHRvQWJzb2x1dGVJbmRleChjb2RlLCAweDEwZmZmZikgIT09IGNvZGUpIHRocm93IFJhbmdlRXJyb3IoY29kZSArICcgaXMgbm90IGEgdmFsaWQgY29kZSBwb2ludCcpO1xuICAgICAgcmVzLnB1c2goY29kZSA8IDB4MTAwMDBcbiAgICAgICAgPyBmcm9tQ2hhckNvZGUoY29kZSlcbiAgICAgICAgOiBmcm9tQ2hhckNvZGUoKChjb2RlIC09IDB4MTAwMDApID4+IDEwKSArIDB4ZDgwMCwgY29kZSAlIDB4NDAwICsgMHhkYzAwKVxuICAgICAgKTtcbiAgICB9IHJldHVybiByZXMuam9pbignJyk7XG4gIH1cbn0pO1xuIiwiLy8gMjAuMi4yLjM0IE1hdGgudHJ1bmMoeClcbnZhciAkZXhwb3J0ID0gcmVxdWlyZSgnLi9fZXhwb3J0Jyk7XG5cbiRleHBvcnQoJGV4cG9ydC5TLCAnTWF0aCcsIHtcbiAgdHJ1bmM6IGZ1bmN0aW9uIHRydW5jKGl0KSB7XG4gICAgcmV0dXJuIChpdCA+IDAgPyBNYXRoLmZsb29yIDogTWF0aC5jZWlsKShpdCk7XG4gIH1cbn0pO1xuIiwiLy8gMjAuMi4yLjMzIE1hdGgudGFuaCh4KVxudmFyICRleHBvcnQgPSByZXF1aXJlKCcuL19leHBvcnQnKTtcbnZhciBleHBtMSA9IHJlcXVpcmUoJy4vX21hdGgtZXhwbTEnKTtcbnZhciBleHAgPSBNYXRoLmV4cDtcblxuJGV4cG9ydCgkZXhwb3J0LlMsICdNYXRoJywge1xuICB0YW5oOiBmdW5jdGlvbiB0YW5oKHgpIHtcbiAgICB2YXIgYSA9IGV4cG0xKHggPSAreCk7XG4gICAgdmFyIGIgPSBleHBtMSgteCk7XG4gICAgcmV0dXJuIGEgPT0gSW5maW5pdHkgPyAxIDogYiA9PSBJbmZpbml0eSA/IC0xIDogKGEgLSBiKSAvIChleHAoeCkgKyBleHAoLXgpKTtcbiAgfVxufSk7XG4iLCIvLyAyMC4yLjIuMzAgTWF0aC5zaW5oKHgpXG52YXIgJGV4cG9ydCA9IHJlcXVpcmUoJy4vX2V4cG9ydCcpO1xudmFyIGV4cG0xID0gcmVxdWlyZSgnLi9fbWF0aC1leHBtMScpO1xudmFyIGV4cCA9IE1hdGguZXhwO1xuXG4vLyBWOCBuZWFyIENocm9taXVtIDM4IGhhcyBhIHByb2JsZW0gd2l0aCB2ZXJ5IHNtYWxsIG51bWJlcnNcbiRleHBvcnQoJGV4cG9ydC5TICsgJGV4cG9ydC5GICogcmVxdWlyZSgnLi9fZmFpbHMnKShmdW5jdGlvbiAoKSB7XG4gIHJldHVybiAhTWF0aC5zaW5oKC0yZS0xNykgIT0gLTJlLTE3O1xufSksICdNYXRoJywge1xuICBzaW5oOiBmdW5jdGlvbiBzaW5oKHgpIHtcbiAgICByZXR1cm4gTWF0aC5hYnMoeCA9ICt4KSA8IDFcbiAgICAgID8gKGV4cG0xKHgpIC0gZXhwbTEoLXgpKSAvIDJcbiAgICAgIDogKGV4cCh4IC0gMSkgLSBleHAoLXggLSAxKSkgKiAoTWF0aC5FIC8gMik7XG4gIH1cbn0pO1xuIiwiLy8gMjAuMi4yLjI4IE1hdGguc2lnbih4KVxudmFyICRleHBvcnQgPSByZXF1aXJlKCcuL19leHBvcnQnKTtcblxuJGV4cG9ydCgkZXhwb3J0LlMsICdNYXRoJywgeyBzaWduOiByZXF1aXJlKCcuL19tYXRoLXNpZ24nKSB9KTtcbiIsIi8vIDIwLjIuMi4yMiBNYXRoLmxvZzIoeClcbnZhciAkZXhwb3J0ID0gcmVxdWlyZSgnLi9fZXhwb3J0Jyk7XG5cbiRleHBvcnQoJGV4cG9ydC5TLCAnTWF0aCcsIHtcbiAgbG9nMjogZnVuY3Rpb24gbG9nMih4KSB7XG4gICAgcmV0dXJuIE1hdGgubG9nKHgpIC8gTWF0aC5MTjI7XG4gIH1cbn0pO1xuIiwiLy8gMjAuMi4yLjIwIE1hdGgubG9nMXAoeClcbnZhciAkZXhwb3J0ID0gcmVxdWlyZSgnLi9fZXhwb3J0Jyk7XG5cbiRleHBvcnQoJGV4cG9ydC5TLCAnTWF0aCcsIHsgbG9nMXA6IHJlcXVpcmUoJy4vX21hdGgtbG9nMXAnKSB9KTtcbiIsIi8vIDIwLjIuMi4yMSBNYXRoLmxvZzEwKHgpXG52YXIgJGV4cG9ydCA9IHJlcXVpcmUoJy4vX2V4cG9ydCcpO1xuXG4kZXhwb3J0KCRleHBvcnQuUywgJ01hdGgnLCB7XG4gIGxvZzEwOiBmdW5jdGlvbiBsb2cxMCh4KSB7XG4gICAgcmV0dXJuIE1hdGgubG9nKHgpICogTWF0aC5MT0cxMEU7XG4gIH1cbn0pO1xuIiwiLy8gMjAuMi4yLjE4IE1hdGguaW11bCh4LCB5KVxudmFyICRleHBvcnQgPSByZXF1aXJlKCcuL19leHBvcnQnKTtcbnZhciAkaW11bCA9IE1hdGguaW11bDtcblxuLy8gc29tZSBXZWJLaXQgdmVyc2lvbnMgZmFpbHMgd2l0aCBiaWcgbnVtYmVycywgc29tZSBoYXMgd3JvbmcgYXJpdHlcbiRleHBvcnQoJGV4cG9ydC5TICsgJGV4cG9ydC5GICogcmVxdWlyZSgnLi9fZmFpbHMnKShmdW5jdGlvbiAoKSB7XG4gIHJldHVybiAkaW11bCgweGZmZmZmZmZmLCA1KSAhPSAtNSB8fCAkaW11bC5sZW5ndGggIT0gMjtcbn0pLCAnTWF0aCcsIHtcbiAgaW11bDogZnVuY3Rpb24gaW11bCh4LCB5KSB7XG4gICAgdmFyIFVJTlQxNiA9IDB4ZmZmZjtcbiAgICB2YXIgeG4gPSAreDtcbiAgICB2YXIgeW4gPSAreTtcbiAgICB2YXIgeGwgPSBVSU5UMTYgJiB4bjtcbiAgICB2YXIgeWwgPSBVSU5UMTYgJiB5bjtcbiAgICByZXR1cm4gMCB8IHhsICogeWwgKyAoKFVJTlQxNiAmIHhuID4+PiAxNikgKiB5bCArIHhsICogKFVJTlQxNiAmIHluID4+PiAxNikgPDwgMTYgPj4+IDApO1xuICB9XG59KTtcbiIsIi8vIDIwLjIuMi4xNyBNYXRoLmh5cG90KFt2YWx1ZTFbLCB2YWx1ZTJbLCDigKYgXV1dKVxudmFyICRleHBvcnQgPSByZXF1aXJlKCcuL19leHBvcnQnKTtcbnZhciBhYnMgPSBNYXRoLmFicztcblxuJGV4cG9ydCgkZXhwb3J0LlMsICdNYXRoJywge1xuICBoeXBvdDogZnVuY3Rpb24gaHlwb3QodmFsdWUxLCB2YWx1ZTIpIHsgLy8gZXNsaW50LWRpc2FibGUtbGluZSBuby11bnVzZWQtdmFyc1xuICAgIHZhciBzdW0gPSAwO1xuICAgIHZhciBpID0gMDtcbiAgICB2YXIgYUxlbiA9IGFyZ3VtZW50cy5sZW5ndGg7XG4gICAgdmFyIGxhcmcgPSAwO1xuICAgIHZhciBhcmcsIGRpdjtcbiAgICB3aGlsZSAoaSA8IGFMZW4pIHtcbiAgICAgIGFyZyA9IGFicyhhcmd1bWVudHNbaSsrXSk7XG4gICAgICBpZiAobGFyZyA8IGFyZykge1xuICAgICAgICBkaXYgPSBsYXJnIC8gYXJnO1xuICAgICAgICBzdW0gPSBzdW0gKiBkaXYgKiBkaXYgKyAxO1xuICAgICAgICBsYXJnID0gYXJnO1xuICAgICAgfSBlbHNlIGlmIChhcmcgPiAwKSB7XG4gICAgICAgIGRpdiA9IGFyZyAvIGxhcmc7XG4gICAgICAgIHN1bSArPSBkaXYgKiBkaXY7XG4gICAgICB9IGVsc2Ugc3VtICs9IGFyZztcbiAgICB9XG4gICAgcmV0dXJuIGxhcmcgPT09IEluZmluaXR5ID8gSW5maW5pdHkgOiBsYXJnICogTWF0aC5zcXJ0KHN1bSk7XG4gIH1cbn0pO1xuIiwiLy8gMjAuMi4yLjE2IE1hdGguZnJvdW5kKHgpXG52YXIgJGV4cG9ydCA9IHJlcXVpcmUoJy4vX2V4cG9ydCcpO1xuXG4kZXhwb3J0KCRleHBvcnQuUywgJ01hdGgnLCB7IGZyb3VuZDogcmVxdWlyZSgnLi9fbWF0aC1mcm91bmQnKSB9KTtcbiIsIi8vIDIwLjIuMi4xNCBNYXRoLmV4cG0xKHgpXG52YXIgJGV4cG9ydCA9IHJlcXVpcmUoJy4vX2V4cG9ydCcpO1xudmFyICRleHBtMSA9IHJlcXVpcmUoJy4vX21hdGgtZXhwbTEnKTtcblxuJGV4cG9ydCgkZXhwb3J0LlMgKyAkZXhwb3J0LkYgKiAoJGV4cG0xICE9IE1hdGguZXhwbTEpLCAnTWF0aCcsIHsgZXhwbTE6ICRleHBtMSB9KTtcbiIsIi8vIDIwLjIuMi4xMiBNYXRoLmNvc2goeClcbnZhciAkZXhwb3J0ID0gcmVxdWlyZSgnLi9fZXhwb3J0Jyk7XG52YXIgZXhwID0gTWF0aC5leHA7XG5cbiRleHBvcnQoJGV4cG9ydC5TLCAnTWF0aCcsIHtcbiAgY29zaDogZnVuY3Rpb24gY29zaCh4KSB7XG4gICAgcmV0dXJuIChleHAoeCA9ICt4KSArIGV4cCgteCkpIC8gMjtcbiAgfVxufSk7XG4iLCIvLyAyMC4yLjIuMTEgTWF0aC5jbHozMih4KVxudmFyICRleHBvcnQgPSByZXF1aXJlKCcuL19leHBvcnQnKTtcblxuJGV4cG9ydCgkZXhwb3J0LlMsICdNYXRoJywge1xuICBjbHozMjogZnVuY3Rpb24gY2x6MzIoeCkge1xuICAgIHJldHVybiAoeCA+Pj49IDApID8gMzEgLSBNYXRoLmZsb29yKE1hdGgubG9nKHggKyAwLjUpICogTWF0aC5MT0cyRSkgOiAzMjtcbiAgfVxufSk7XG4iLCIvLyAyMC4yLjIuOSBNYXRoLmNicnQoeClcbnZhciAkZXhwb3J0ID0gcmVxdWlyZSgnLi9fZXhwb3J0Jyk7XG52YXIgc2lnbiA9IHJlcXVpcmUoJy4vX21hdGgtc2lnbicpO1xuXG4kZXhwb3J0KCRleHBvcnQuUywgJ01hdGgnLCB7XG4gIGNicnQ6IGZ1bmN0aW9uIGNicnQoeCkge1xuICAgIHJldHVybiBzaWduKHggPSAreCkgKiBNYXRoLnBvdyhNYXRoLmFicyh4KSwgMSAvIDMpO1xuICB9XG59KTtcbiIsIi8vIDIwLjIuMi43IE1hdGguYXRhbmgoeClcbnZhciAkZXhwb3J0ID0gcmVxdWlyZSgnLi9fZXhwb3J0Jyk7XG52YXIgJGF0YW5oID0gTWF0aC5hdGFuaDtcblxuLy8gVG9yIEJyb3dzZXIgYnVnOiBNYXRoLmF0YW5oKC0wKSAtPiAwXG4kZXhwb3J0KCRleHBvcnQuUyArICRleHBvcnQuRiAqICEoJGF0YW5oICYmIDEgLyAkYXRhbmgoLTApIDwgMCksICdNYXRoJywge1xuICBhdGFuaDogZnVuY3Rpb24gYXRhbmgoeCkge1xuICAgIHJldHVybiAoeCA9ICt4KSA9PSAwID8geCA6IE1hdGgubG9nKCgxICsgeCkgLyAoMSAtIHgpKSAvIDI7XG4gIH1cbn0pO1xuIiwiLy8gMjAuMi4yLjUgTWF0aC5hc2luaCh4KVxudmFyICRleHBvcnQgPSByZXF1aXJlKCcuL19leHBvcnQnKTtcbnZhciAkYXNpbmggPSBNYXRoLmFzaW5oO1xuXG5mdW5jdGlvbiBhc2luaCh4KSB7XG4gIHJldHVybiAhaXNGaW5pdGUoeCA9ICt4KSB8fCB4ID09IDAgPyB4IDogeCA8IDAgPyAtYXNpbmgoLXgpIDogTWF0aC5sb2coeCArIE1hdGguc3FydCh4ICogeCArIDEpKTtcbn1cblxuLy8gVG9yIEJyb3dzZXIgYnVnOiBNYXRoLmFzaW5oKDApIC0+IC0wXG4kZXhwb3J0KCRleHBvcnQuUyArICRleHBvcnQuRiAqICEoJGFzaW5oICYmIDEgLyAkYXNpbmgoMCkgPiAwKSwgJ01hdGgnLCB7IGFzaW5oOiBhc2luaCB9KTtcbiIsIi8vIDIwLjIuMi4zIE1hdGguYWNvc2goeClcbnZhciAkZXhwb3J0ID0gcmVxdWlyZSgnLi9fZXhwb3J0Jyk7XG52YXIgbG9nMXAgPSByZXF1aXJlKCcuL19tYXRoLWxvZzFwJyk7XG52YXIgc3FydCA9IE1hdGguc3FydDtcbnZhciAkYWNvc2ggPSBNYXRoLmFjb3NoO1xuXG4kZXhwb3J0KCRleHBvcnQuUyArICRleHBvcnQuRiAqICEoJGFjb3NoXG4gIC8vIFY4IGJ1ZzogaHR0cHM6Ly9jb2RlLmdvb2dsZS5jb20vcC92OC9pc3N1ZXMvZGV0YWlsP2lkPTM1MDlcbiAgJiYgTWF0aC5mbG9vcigkYWNvc2goTnVtYmVyLk1BWF9WQUxVRSkpID09IDcxMFxuICAvLyBUb3IgQnJvd3NlciBidWc6IE1hdGguYWNvc2goSW5maW5pdHkpIC0+IE5hTlxuICAmJiAkYWNvc2goSW5maW5pdHkpID09IEluZmluaXR5XG4pLCAnTWF0aCcsIHtcbiAgYWNvc2g6IGZ1bmN0aW9uIGFjb3NoKHgpIHtcbiAgICByZXR1cm4gKHggPSAreCkgPCAxID8gTmFOIDogeCA+IDk0OTA2MjY1LjYyNDI1MTU2XG4gICAgICA/IE1hdGgubG9nKHgpICsgTWF0aC5MTjJcbiAgICAgIDogbG9nMXAoeCAtIDEgKyBzcXJ0KHggLSAxKSAqIHNxcnQoeCArIDEpKTtcbiAgfVxufSk7XG4iLCJ2YXIgJGV4cG9ydCA9IHJlcXVpcmUoJy4vX2V4cG9ydCcpO1xudmFyICRwYXJzZUludCA9IHJlcXVpcmUoJy4vX3BhcnNlLWludCcpO1xuLy8gMjAuMS4yLjEzIE51bWJlci5wYXJzZUludChzdHJpbmcsIHJhZGl4KVxuJGV4cG9ydCgkZXhwb3J0LlMgKyAkZXhwb3J0LkYgKiAoTnVtYmVyLnBhcnNlSW50ICE9ICRwYXJzZUludCksICdOdW1iZXInLCB7IHBhcnNlSW50OiAkcGFyc2VJbnQgfSk7XG4iLCJ2YXIgJGV4cG9ydCA9IHJlcXVpcmUoJy4vX2V4cG9ydCcpO1xudmFyICRwYXJzZUZsb2F0ID0gcmVxdWlyZSgnLi9fcGFyc2UtZmxvYXQnKTtcbi8vIDIwLjEuMi4xMiBOdW1iZXIucGFyc2VGbG9hdChzdHJpbmcpXG4kZXhwb3J0KCRleHBvcnQuUyArICRleHBvcnQuRiAqIChOdW1iZXIucGFyc2VGbG9hdCAhPSAkcGFyc2VGbG9hdCksICdOdW1iZXInLCB7IHBhcnNlRmxvYXQ6ICRwYXJzZUZsb2F0IH0pO1xuIiwiLy8gMjAuMS4yLjEwIE51bWJlci5NSU5fU0FGRV9JTlRFR0VSXG52YXIgJGV4cG9ydCA9IHJlcXVpcmUoJy4vX2V4cG9ydCcpO1xuXG4kZXhwb3J0KCRleHBvcnQuUywgJ051bWJlcicsIHsgTUlOX1NBRkVfSU5URUdFUjogLTB4MWZmZmZmZmZmZmZmZmYgfSk7XG4iLCIvLyAyMC4xLjIuNiBOdW1iZXIuTUFYX1NBRkVfSU5URUdFUlxudmFyICRleHBvcnQgPSByZXF1aXJlKCcuL19leHBvcnQnKTtcblxuJGV4cG9ydCgkZXhwb3J0LlMsICdOdW1iZXInLCB7IE1BWF9TQUZFX0lOVEVHRVI6IDB4MWZmZmZmZmZmZmZmZmYgfSk7XG4iLCIvLyAyMC4xLjIuNSBOdW1iZXIuaXNTYWZlSW50ZWdlcihudW1iZXIpXG52YXIgJGV4cG9ydCA9IHJlcXVpcmUoJy4vX2V4cG9ydCcpO1xudmFyIGlzSW50ZWdlciA9IHJlcXVpcmUoJy4vX2lzLWludGVnZXInKTtcbnZhciBhYnMgPSBNYXRoLmFicztcblxuJGV4cG9ydCgkZXhwb3J0LlMsICdOdW1iZXInLCB7XG4gIGlzU2FmZUludGVnZXI6IGZ1bmN0aW9uIGlzU2FmZUludGVnZXIobnVtYmVyKSB7XG4gICAgcmV0dXJuIGlzSW50ZWdlcihudW1iZXIpICYmIGFicyhudW1iZXIpIDw9IDB4MWZmZmZmZmZmZmZmZmY7XG4gIH1cbn0pO1xuIiwiLy8gMjAuMS4yLjQgTnVtYmVyLmlzTmFOKG51bWJlcilcbnZhciAkZXhwb3J0ID0gcmVxdWlyZSgnLi9fZXhwb3J0Jyk7XG5cbiRleHBvcnQoJGV4cG9ydC5TLCAnTnVtYmVyJywge1xuICBpc05hTjogZnVuY3Rpb24gaXNOYU4obnVtYmVyKSB7XG4gICAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIG5vLXNlbGYtY29tcGFyZVxuICAgIHJldHVybiBudW1iZXIgIT0gbnVtYmVyO1xuICB9XG59KTtcbiIsIi8vIDIwLjEuMi4zIE51bWJlci5pc0ludGVnZXIobnVtYmVyKVxudmFyICRleHBvcnQgPSByZXF1aXJlKCcuL19leHBvcnQnKTtcblxuJGV4cG9ydCgkZXhwb3J0LlMsICdOdW1iZXInLCB7IGlzSW50ZWdlcjogcmVxdWlyZSgnLi9faXMtaW50ZWdlcicpIH0pO1xuIiwiLy8gMjAuMS4yLjIgTnVtYmVyLmlzRmluaXRlKG51bWJlcilcbnZhciAkZXhwb3J0ID0gcmVxdWlyZSgnLi9fZXhwb3J0Jyk7XG52YXIgX2lzRmluaXRlID0gcmVxdWlyZSgnLi9fZ2xvYmFsJykuaXNGaW5pdGU7XG5cbiRleHBvcnQoJGV4cG9ydC5TLCAnTnVtYmVyJywge1xuICBpc0Zpbml0ZTogZnVuY3Rpb24gaXNGaW5pdGUoaXQpIHtcbiAgICByZXR1cm4gdHlwZW9mIGl0ID09ICdudW1iZXInICYmIF9pc0Zpbml0ZShpdCk7XG4gIH1cbn0pO1xuIiwiLy8gMjAuMS4yLjEgTnVtYmVyLkVQU0lMT05cbnZhciAkZXhwb3J0ID0gcmVxdWlyZSgnLi9fZXhwb3J0Jyk7XG5cbiRleHBvcnQoJGV4cG9ydC5TLCAnTnVtYmVyJywgeyBFUFNJTE9OOiBNYXRoLnBvdygyLCAtNTIpIH0pO1xuIiwiJ3VzZSBzdHJpY3QnO1xudmFyICRleHBvcnQgPSByZXF1aXJlKCcuL19leHBvcnQnKTtcbnZhciAkZmFpbHMgPSByZXF1aXJlKCcuL19mYWlscycpO1xudmFyIGFOdW1iZXJWYWx1ZSA9IHJlcXVpcmUoJy4vX2EtbnVtYmVyLXZhbHVlJyk7XG52YXIgJHRvUHJlY2lzaW9uID0gMS4wLnRvUHJlY2lzaW9uO1xuXG4kZXhwb3J0KCRleHBvcnQuUCArICRleHBvcnQuRiAqICgkZmFpbHMoZnVuY3Rpb24gKCkge1xuICAvLyBJRTctXG4gIHJldHVybiAkdG9QcmVjaXNpb24uY2FsbCgxLCB1bmRlZmluZWQpICE9PSAnMSc7XG59KSB8fCAhJGZhaWxzKGZ1bmN0aW9uICgpIHtcbiAgLy8gVjggfiBBbmRyb2lkIDQuMy1cbiAgJHRvUHJlY2lzaW9uLmNhbGwoe30pO1xufSkpLCAnTnVtYmVyJywge1xuICB0b1ByZWNpc2lvbjogZnVuY3Rpb24gdG9QcmVjaXNpb24ocHJlY2lzaW9uKSB7XG4gICAgdmFyIHRoYXQgPSBhTnVtYmVyVmFsdWUodGhpcywgJ051bWJlciN0b1ByZWNpc2lvbjogaW5jb3JyZWN0IGludm9jYXRpb24hJyk7XG4gICAgcmV0dXJuIHByZWNpc2lvbiA9PT0gdW5kZWZpbmVkID8gJHRvUHJlY2lzaW9uLmNhbGwodGhhdCkgOiAkdG9QcmVjaXNpb24uY2FsbCh0aGF0LCBwcmVjaXNpb24pO1xuICB9XG59KTtcbiIsIid1c2Ugc3RyaWN0JztcbnZhciAkZXhwb3J0ID0gcmVxdWlyZSgnLi9fZXhwb3J0Jyk7XG52YXIgdG9JbnRlZ2VyID0gcmVxdWlyZSgnLi9fdG8taW50ZWdlcicpO1xudmFyIGFOdW1iZXJWYWx1ZSA9IHJlcXVpcmUoJy4vX2EtbnVtYmVyLXZhbHVlJyk7XG52YXIgcmVwZWF0ID0gcmVxdWlyZSgnLi9fc3RyaW5nLXJlcGVhdCcpO1xudmFyICR0b0ZpeGVkID0gMS4wLnRvRml4ZWQ7XG52YXIgZmxvb3IgPSBNYXRoLmZsb29yO1xudmFyIGRhdGEgPSBbMCwgMCwgMCwgMCwgMCwgMF07XG52YXIgRVJST1IgPSAnTnVtYmVyLnRvRml4ZWQ6IGluY29ycmVjdCBpbnZvY2F0aW9uISc7XG52YXIgWkVSTyA9ICcwJztcblxudmFyIG11bHRpcGx5ID0gZnVuY3Rpb24gKG4sIGMpIHtcbiAgdmFyIGkgPSAtMTtcbiAgdmFyIGMyID0gYztcbiAgd2hpbGUgKCsraSA8IDYpIHtcbiAgICBjMiArPSBuICogZGF0YVtpXTtcbiAgICBkYXRhW2ldID0gYzIgJSAxZTc7XG4gICAgYzIgPSBmbG9vcihjMiAvIDFlNyk7XG4gIH1cbn07XG52YXIgZGl2aWRlID0gZnVuY3Rpb24gKG4pIHtcbiAgdmFyIGkgPSA2O1xuICB2YXIgYyA9IDA7XG4gIHdoaWxlICgtLWkgPj0gMCkge1xuICAgIGMgKz0gZGF0YVtpXTtcbiAgICBkYXRhW2ldID0gZmxvb3IoYyAvIG4pO1xuICAgIGMgPSAoYyAlIG4pICogMWU3O1xuICB9XG59O1xudmFyIG51bVRvU3RyaW5nID0gZnVuY3Rpb24gKCkge1xuICB2YXIgaSA9IDY7XG4gIHZhciBzID0gJyc7XG4gIHdoaWxlICgtLWkgPj0gMCkge1xuICAgIGlmIChzICE9PSAnJyB8fCBpID09PSAwIHx8IGRhdGFbaV0gIT09IDApIHtcbiAgICAgIHZhciB0ID0gU3RyaW5nKGRhdGFbaV0pO1xuICAgICAgcyA9IHMgPT09ICcnID8gdCA6IHMgKyByZXBlYXQuY2FsbChaRVJPLCA3IC0gdC5sZW5ndGgpICsgdDtcbiAgICB9XG4gIH0gcmV0dXJuIHM7XG59O1xudmFyIHBvdyA9IGZ1bmN0aW9uICh4LCBuLCBhY2MpIHtcbiAgcmV0dXJuIG4gPT09IDAgPyBhY2MgOiBuICUgMiA9PT0gMSA/IHBvdyh4LCBuIC0gMSwgYWNjICogeCkgOiBwb3coeCAqIHgsIG4gLyAyLCBhY2MpO1xufTtcbnZhciBsb2cgPSBmdW5jdGlvbiAoeCkge1xuICB2YXIgbiA9IDA7XG4gIHZhciB4MiA9IHg7XG4gIHdoaWxlICh4MiA+PSA0MDk2KSB7XG4gICAgbiArPSAxMjtcbiAgICB4MiAvPSA0MDk2O1xuICB9XG4gIHdoaWxlICh4MiA+PSAyKSB7XG4gICAgbiArPSAxO1xuICAgIHgyIC89IDI7XG4gIH0gcmV0dXJuIG47XG59O1xuXG4kZXhwb3J0KCRleHBvcnQuUCArICRleHBvcnQuRiAqICghISR0b0ZpeGVkICYmIChcbiAgMC4wMDAwOC50b0ZpeGVkKDMpICE9PSAnMC4wMDAnIHx8XG4gIDAuOS50b0ZpeGVkKDApICE9PSAnMScgfHxcbiAgMS4yNTUudG9GaXhlZCgyKSAhPT0gJzEuMjUnIHx8XG4gIDEwMDAwMDAwMDAwMDAwMDAxMjguMC50b0ZpeGVkKDApICE9PSAnMTAwMDAwMDAwMDAwMDAwMDEyOCdcbikgfHwgIXJlcXVpcmUoJy4vX2ZhaWxzJykoZnVuY3Rpb24gKCkge1xuICAvLyBWOCB+IEFuZHJvaWQgNC4zLVxuICAkdG9GaXhlZC5jYWxsKHt9KTtcbn0pKSwgJ051bWJlcicsIHtcbiAgdG9GaXhlZDogZnVuY3Rpb24gdG9GaXhlZChmcmFjdGlvbkRpZ2l0cykge1xuICAgIHZhciB4ID0gYU51bWJlclZhbHVlKHRoaXMsIEVSUk9SKTtcbiAgICB2YXIgZiA9IHRvSW50ZWdlcihmcmFjdGlvbkRpZ2l0cyk7XG4gICAgdmFyIHMgPSAnJztcbiAgICB2YXIgbSA9IFpFUk87XG4gICAgdmFyIGUsIHosIGosIGs7XG4gICAgaWYgKGYgPCAwIHx8IGYgPiAyMCkgdGhyb3cgUmFuZ2VFcnJvcihFUlJPUik7XG4gICAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIG5vLXNlbGYtY29tcGFyZVxuICAgIGlmICh4ICE9IHgpIHJldHVybiAnTmFOJztcbiAgICBpZiAoeCA8PSAtMWUyMSB8fCB4ID49IDFlMjEpIHJldHVybiBTdHJpbmcoeCk7XG4gICAgaWYgKHggPCAwKSB7XG4gICAgICBzID0gJy0nO1xuICAgICAgeCA9IC14O1xuICAgIH1cbiAgICBpZiAoeCA+IDFlLTIxKSB7XG4gICAgICBlID0gbG9nKHggKiBwb3coMiwgNjksIDEpKSAtIDY5O1xuICAgICAgeiA9IGUgPCAwID8geCAqIHBvdygyLCAtZSwgMSkgOiB4IC8gcG93KDIsIGUsIDEpO1xuICAgICAgeiAqPSAweDEwMDAwMDAwMDAwMDAwO1xuICAgICAgZSA9IDUyIC0gZTtcbiAgICAgIGlmIChlID4gMCkge1xuICAgICAgICBtdWx0aXBseSgwLCB6KTtcbiAgICAgICAgaiA9IGY7XG4gICAgICAgIHdoaWxlIChqID49IDcpIHtcbiAgICAgICAgICBtdWx0aXBseSgxZTcsIDApO1xuICAgICAgICAgIGogLT0gNztcbiAgICAgICAgfVxuICAgICAgICBtdWx0aXBseShwb3coMTAsIGosIDEpLCAwKTtcbiAgICAgICAgaiA9IGUgLSAxO1xuICAgICAgICB3aGlsZSAoaiA+PSAyMykge1xuICAgICAgICAgIGRpdmlkZSgxIDw8IDIzKTtcbiAgICAgICAgICBqIC09IDIzO1xuICAgICAgICB9XG4gICAgICAgIGRpdmlkZSgxIDw8IGopO1xuICAgICAgICBtdWx0aXBseSgxLCAxKTtcbiAgICAgICAgZGl2aWRlKDIpO1xuICAgICAgICBtID0gbnVtVG9TdHJpbmcoKTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIG11bHRpcGx5KDAsIHopO1xuICAgICAgICBtdWx0aXBseSgxIDw8IC1lLCAwKTtcbiAgICAgICAgbSA9IG51bVRvU3RyaW5nKCkgKyByZXBlYXQuY2FsbChaRVJPLCBmKTtcbiAgICAgIH1cbiAgICB9XG4gICAgaWYgKGYgPiAwKSB7XG4gICAgICBrID0gbS5sZW5ndGg7XG4gICAgICBtID0gcyArIChrIDw9IGYgPyAnMC4nICsgcmVwZWF0LmNhbGwoWkVSTywgZiAtIGspICsgbSA6IG0uc2xpY2UoMCwgayAtIGYpICsgJy4nICsgbS5zbGljZShrIC0gZikpO1xuICAgIH0gZWxzZSB7XG4gICAgICBtID0gcyArIG07XG4gICAgfSByZXR1cm4gbTtcbiAgfVxufSk7XG4iLCIndXNlIHN0cmljdCc7XG52YXIgZ2xvYmFsID0gcmVxdWlyZSgnLi9fZ2xvYmFsJyk7XG52YXIgaGFzID0gcmVxdWlyZSgnLi9faGFzJyk7XG52YXIgY29mID0gcmVxdWlyZSgnLi9fY29mJyk7XG52YXIgaW5oZXJpdElmUmVxdWlyZWQgPSByZXF1aXJlKCcuL19pbmhlcml0LWlmLXJlcXVpcmVkJyk7XG52YXIgdG9QcmltaXRpdmUgPSByZXF1aXJlKCcuL190by1wcmltaXRpdmUnKTtcbnZhciBmYWlscyA9IHJlcXVpcmUoJy4vX2ZhaWxzJyk7XG52YXIgZ09QTiA9IHJlcXVpcmUoJy4vX29iamVjdC1nb3BuJykuZjtcbnZhciBnT1BEID0gcmVxdWlyZSgnLi9fb2JqZWN0LWdvcGQnKS5mO1xudmFyIGRQID0gcmVxdWlyZSgnLi9fb2JqZWN0LWRwJykuZjtcbnZhciAkdHJpbSA9IHJlcXVpcmUoJy4vX3N0cmluZy10cmltJykudHJpbTtcbnZhciBOVU1CRVIgPSAnTnVtYmVyJztcbnZhciAkTnVtYmVyID0gZ2xvYmFsW05VTUJFUl07XG52YXIgQmFzZSA9ICROdW1iZXI7XG52YXIgcHJvdG8gPSAkTnVtYmVyLnByb3RvdHlwZTtcbi8vIE9wZXJhIH4xMiBoYXMgYnJva2VuIE9iamVjdCN0b1N0cmluZ1xudmFyIEJST0tFTl9DT0YgPSBjb2YocmVxdWlyZSgnLi9fb2JqZWN0LWNyZWF0ZScpKHByb3RvKSkgPT0gTlVNQkVSO1xudmFyIFRSSU0gPSAndHJpbScgaW4gU3RyaW5nLnByb3RvdHlwZTtcblxuLy8gNy4xLjMgVG9OdW1iZXIoYXJndW1lbnQpXG52YXIgdG9OdW1iZXIgPSBmdW5jdGlvbiAoYXJndW1lbnQpIHtcbiAgdmFyIGl0ID0gdG9QcmltaXRpdmUoYXJndW1lbnQsIGZhbHNlKTtcbiAgaWYgKHR5cGVvZiBpdCA9PSAnc3RyaW5nJyAmJiBpdC5sZW5ndGggPiAyKSB7XG4gICAgaXQgPSBUUklNID8gaXQudHJpbSgpIDogJHRyaW0oaXQsIDMpO1xuICAgIHZhciBmaXJzdCA9IGl0LmNoYXJDb2RlQXQoMCk7XG4gICAgdmFyIHRoaXJkLCByYWRpeCwgbWF4Q29kZTtcbiAgICBpZiAoZmlyc3QgPT09IDQzIHx8IGZpcnN0ID09PSA0NSkge1xuICAgICAgdGhpcmQgPSBpdC5jaGFyQ29kZUF0KDIpO1xuICAgICAgaWYgKHRoaXJkID09PSA4OCB8fCB0aGlyZCA9PT0gMTIwKSByZXR1cm4gTmFOOyAvLyBOdW1iZXIoJysweDEnKSBzaG91bGQgYmUgTmFOLCBvbGQgVjggZml4XG4gICAgfSBlbHNlIGlmIChmaXJzdCA9PT0gNDgpIHtcbiAgICAgIHN3aXRjaCAoaXQuY2hhckNvZGVBdCgxKSkge1xuICAgICAgICBjYXNlIDY2OiBjYXNlIDk4OiByYWRpeCA9IDI7IG1heENvZGUgPSA0OTsgYnJlYWs7IC8vIGZhc3QgZXF1YWwgL14wYlswMV0rJC9pXG4gICAgICAgIGNhc2UgNzk6IGNhc2UgMTExOiByYWRpeCA9IDg7IG1heENvZGUgPSA1NTsgYnJlYWs7IC8vIGZhc3QgZXF1YWwgL14wb1swLTddKyQvaVxuICAgICAgICBkZWZhdWx0OiByZXR1cm4gK2l0O1xuICAgICAgfVxuICAgICAgZm9yICh2YXIgZGlnaXRzID0gaXQuc2xpY2UoMiksIGkgPSAwLCBsID0gZGlnaXRzLmxlbmd0aCwgY29kZTsgaSA8IGw7IGkrKykge1xuICAgICAgICBjb2RlID0gZGlnaXRzLmNoYXJDb2RlQXQoaSk7XG4gICAgICAgIC8vIHBhcnNlSW50IHBhcnNlcyBhIHN0cmluZyB0byBhIGZpcnN0IHVuYXZhaWxhYmxlIHN5bWJvbFxuICAgICAgICAvLyBidXQgVG9OdW1iZXIgc2hvdWxkIHJldHVybiBOYU4gaWYgYSBzdHJpbmcgY29udGFpbnMgdW5hdmFpbGFibGUgc3ltYm9sc1xuICAgICAgICBpZiAoY29kZSA8IDQ4IHx8IGNvZGUgPiBtYXhDb2RlKSByZXR1cm4gTmFOO1xuICAgICAgfSByZXR1cm4gcGFyc2VJbnQoZGlnaXRzLCByYWRpeCk7XG4gICAgfVxuICB9IHJldHVybiAraXQ7XG59O1xuXG5pZiAoISROdW1iZXIoJyAwbzEnKSB8fCAhJE51bWJlcignMGIxJykgfHwgJE51bWJlcignKzB4MScpKSB7XG4gICROdW1iZXIgPSBmdW5jdGlvbiBOdW1iZXIodmFsdWUpIHtcbiAgICB2YXIgaXQgPSBhcmd1bWVudHMubGVuZ3RoIDwgMSA/IDAgOiB2YWx1ZTtcbiAgICB2YXIgdGhhdCA9IHRoaXM7XG4gICAgcmV0dXJuIHRoYXQgaW5zdGFuY2VvZiAkTnVtYmVyXG4gICAgICAvLyBjaGVjayBvbiAxLi5jb25zdHJ1Y3Rvcihmb28pIGNhc2VcbiAgICAgICYmIChCUk9LRU5fQ09GID8gZmFpbHMoZnVuY3Rpb24gKCkgeyBwcm90by52YWx1ZU9mLmNhbGwodGhhdCk7IH0pIDogY29mKHRoYXQpICE9IE5VTUJFUilcbiAgICAgICAgPyBpbmhlcml0SWZSZXF1aXJlZChuZXcgQmFzZSh0b051bWJlcihpdCkpLCB0aGF0LCAkTnVtYmVyKSA6IHRvTnVtYmVyKGl0KTtcbiAgfTtcbiAgZm9yICh2YXIga2V5cyA9IHJlcXVpcmUoJy4vX2Rlc2NyaXB0b3JzJykgPyBnT1BOKEJhc2UpIDogKFxuICAgIC8vIEVTMzpcbiAgICAnTUFYX1ZBTFVFLE1JTl9WQUxVRSxOYU4sTkVHQVRJVkVfSU5GSU5JVFksUE9TSVRJVkVfSU5GSU5JVFksJyArXG4gICAgLy8gRVM2IChpbiBjYXNlLCBpZiBtb2R1bGVzIHdpdGggRVM2IE51bWJlciBzdGF0aWNzIHJlcXVpcmVkIGJlZm9yZSk6XG4gICAgJ0VQU0lMT04saXNGaW5pdGUsaXNJbnRlZ2VyLGlzTmFOLGlzU2FmZUludGVnZXIsTUFYX1NBRkVfSU5URUdFUiwnICtcbiAgICAnTUlOX1NBRkVfSU5URUdFUixwYXJzZUZsb2F0LHBhcnNlSW50LGlzSW50ZWdlcidcbiAgKS5zcGxpdCgnLCcpLCBqID0gMCwga2V5OyBrZXlzLmxlbmd0aCA+IGo7IGorKykge1xuICAgIGlmIChoYXMoQmFzZSwga2V5ID0ga2V5c1tqXSkgJiYgIWhhcygkTnVtYmVyLCBrZXkpKSB7XG4gICAgICBkUCgkTnVtYmVyLCBrZXksIGdPUEQoQmFzZSwga2V5KSk7XG4gICAgfVxuICB9XG4gICROdW1iZXIucHJvdG90eXBlID0gcHJvdG87XG4gIHByb3RvLmNvbnN0cnVjdG9yID0gJE51bWJlcjtcbiAgcmVxdWlyZSgnLi9fcmVkZWZpbmUnKShnbG9iYWwsIE5VTUJFUiwgJE51bWJlcik7XG59XG4iLCJ2YXIgJGV4cG9ydCA9IHJlcXVpcmUoJy4vX2V4cG9ydCcpO1xudmFyICRwYXJzZUZsb2F0ID0gcmVxdWlyZSgnLi9fcGFyc2UtZmxvYXQnKTtcbi8vIDE4LjIuNCBwYXJzZUZsb2F0KHN0cmluZylcbiRleHBvcnQoJGV4cG9ydC5HICsgJGV4cG9ydC5GICogKHBhcnNlRmxvYXQgIT0gJHBhcnNlRmxvYXQpLCB7IHBhcnNlRmxvYXQ6ICRwYXJzZUZsb2F0IH0pO1xuIiwidmFyICRleHBvcnQgPSByZXF1aXJlKCcuL19leHBvcnQnKTtcbnZhciAkcGFyc2VJbnQgPSByZXF1aXJlKCcuL19wYXJzZS1pbnQnKTtcbi8vIDE4LjIuNSBwYXJzZUludChzdHJpbmcsIHJhZGl4KVxuJGV4cG9ydCgkZXhwb3J0LkcgKyAkZXhwb3J0LkYgKiAocGFyc2VJbnQgIT0gJHBhcnNlSW50KSwgeyBwYXJzZUludDogJHBhcnNlSW50IH0pO1xuIiwiJ3VzZSBzdHJpY3QnO1xudmFyIGlzT2JqZWN0ID0gcmVxdWlyZSgnLi9faXMtb2JqZWN0Jyk7XG52YXIgZ2V0UHJvdG90eXBlT2YgPSByZXF1aXJlKCcuL19vYmplY3QtZ3BvJyk7XG52YXIgSEFTX0lOU1RBTkNFID0gcmVxdWlyZSgnLi9fd2tzJykoJ2hhc0luc3RhbmNlJyk7XG52YXIgRnVuY3Rpb25Qcm90byA9IEZ1bmN0aW9uLnByb3RvdHlwZTtcbi8vIDE5LjIuMy42IEZ1bmN0aW9uLnByb3RvdHlwZVtAQGhhc0luc3RhbmNlXShWKVxuaWYgKCEoSEFTX0lOU1RBTkNFIGluIEZ1bmN0aW9uUHJvdG8pKSByZXF1aXJlKCcuL19vYmplY3QtZHAnKS5mKEZ1bmN0aW9uUHJvdG8sIEhBU19JTlNUQU5DRSwgeyB2YWx1ZTogZnVuY3Rpb24gKE8pIHtcbiAgaWYgKHR5cGVvZiB0aGlzICE9ICdmdW5jdGlvbicgfHwgIWlzT2JqZWN0KE8pKSByZXR1cm4gZmFsc2U7XG4gIGlmICghaXNPYmplY3QodGhpcy5wcm90b3R5cGUpKSByZXR1cm4gTyBpbnN0YW5jZW9mIHRoaXM7XG4gIC8vIGZvciBlbnZpcm9ubWVudCB3L28gbmF0aXZlIGBAQGhhc0luc3RhbmNlYCBsb2dpYyBlbm91Z2ggYGluc3RhbmNlb2ZgLCBidXQgYWRkIHRoaXM6XG4gIHdoaWxlIChPID0gZ2V0UHJvdG90eXBlT2YoTykpIGlmICh0aGlzLnByb3RvdHlwZSA9PT0gTykgcmV0dXJuIHRydWU7XG4gIHJldHVybiBmYWxzZTtcbn0gfSk7XG4iLCJ2YXIgZFAgPSByZXF1aXJlKCcuL19vYmplY3QtZHAnKS5mO1xudmFyIEZQcm90byA9IEZ1bmN0aW9uLnByb3RvdHlwZTtcbnZhciBuYW1lUkUgPSAvXlxccypmdW5jdGlvbiAoW14gKF0qKS87XG52YXIgTkFNRSA9ICduYW1lJztcblxuLy8gMTkuMi40LjIgbmFtZVxuTkFNRSBpbiBGUHJvdG8gfHwgcmVxdWlyZSgnLi9fZGVzY3JpcHRvcnMnKSAmJiBkUChGUHJvdG8sIE5BTUUsIHtcbiAgY29uZmlndXJhYmxlOiB0cnVlLFxuICBnZXQ6IGZ1bmN0aW9uICgpIHtcbiAgICB0cnkge1xuICAgICAgcmV0dXJuICgnJyArIHRoaXMpLm1hdGNoKG5hbWVSRSlbMV07XG4gICAgfSBjYXRjaCAoZSkge1xuICAgICAgcmV0dXJuICcnO1xuICAgIH1cbiAgfVxufSk7XG4iLCIvLyAxOS4yLjMuMiAvIDE1LjMuNC41IEZ1bmN0aW9uLnByb3RvdHlwZS5iaW5kKHRoaXNBcmcsIGFyZ3MuLi4pXG52YXIgJGV4cG9ydCA9IHJlcXVpcmUoJy4vX2V4cG9ydCcpO1xuXG4kZXhwb3J0KCRleHBvcnQuUCwgJ0Z1bmN0aW9uJywgeyBiaW5kOiByZXF1aXJlKCcuL19iaW5kJykgfSk7XG4iLCIndXNlIHN0cmljdCc7XG4vLyAxOS4xLjMuNiBPYmplY3QucHJvdG90eXBlLnRvU3RyaW5nKClcbnZhciBjbGFzc29mID0gcmVxdWlyZSgnLi9fY2xhc3NvZicpO1xudmFyIHRlc3QgPSB7fTtcbnRlc3RbcmVxdWlyZSgnLi9fd2tzJykoJ3RvU3RyaW5nVGFnJyldID0gJ3onO1xuaWYgKHRlc3QgKyAnJyAhPSAnW29iamVjdCB6XScpIHtcbiAgcmVxdWlyZSgnLi9fcmVkZWZpbmUnKShPYmplY3QucHJvdG90eXBlLCAndG9TdHJpbmcnLCBmdW5jdGlvbiB0b1N0cmluZygpIHtcbiAgICByZXR1cm4gJ1tvYmplY3QgJyArIGNsYXNzb2YodGhpcykgKyAnXSc7XG4gIH0sIHRydWUpO1xufVxuIiwiLy8gMTkuMS4zLjE5IE9iamVjdC5zZXRQcm90b3R5cGVPZihPLCBwcm90bylcbnZhciAkZXhwb3J0ID0gcmVxdWlyZSgnLi9fZXhwb3J0Jyk7XG4kZXhwb3J0KCRleHBvcnQuUywgJ09iamVjdCcsIHsgc2V0UHJvdG90eXBlT2Y6IHJlcXVpcmUoJy4vX3NldC1wcm90bycpLnNldCB9KTtcbiIsIi8vIDcuMi45IFNhbWVWYWx1ZSh4LCB5KVxubW9kdWxlLmV4cG9ydHMgPSBPYmplY3QuaXMgfHwgZnVuY3Rpb24gaXMoeCwgeSkge1xuICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgbm8tc2VsZi1jb21wYXJlXG4gIHJldHVybiB4ID09PSB5ID8geCAhPT0gMCB8fCAxIC8geCA9PT0gMSAvIHkgOiB4ICE9IHggJiYgeSAhPSB5O1xufTtcbiIsIi8vIDE5LjEuMy4xMCBPYmplY3QuaXModmFsdWUxLCB2YWx1ZTIpXG52YXIgJGV4cG9ydCA9IHJlcXVpcmUoJy4vX2V4cG9ydCcpO1xuJGV4cG9ydCgkZXhwb3J0LlMsICdPYmplY3QnLCB7IGlzOiByZXF1aXJlKCcuL19zYW1lLXZhbHVlJykgfSk7XG4iLCIvLyAxOS4xLjMuMSBPYmplY3QuYXNzaWduKHRhcmdldCwgc291cmNlKVxudmFyICRleHBvcnQgPSByZXF1aXJlKCcuL19leHBvcnQnKTtcblxuJGV4cG9ydCgkZXhwb3J0LlMgKyAkZXhwb3J0LkYsICdPYmplY3QnLCB7IGFzc2lnbjogcmVxdWlyZSgnLi9fb2JqZWN0LWFzc2lnbicpIH0pO1xuIiwiLy8gMTkuMS4yLjExIE9iamVjdC5pc0V4dGVuc2libGUoTylcbnZhciBpc09iamVjdCA9IHJlcXVpcmUoJy4vX2lzLW9iamVjdCcpO1xuXG5yZXF1aXJlKCcuL19vYmplY3Qtc2FwJykoJ2lzRXh0ZW5zaWJsZScsIGZ1bmN0aW9uICgkaXNFeHRlbnNpYmxlKSB7XG4gIHJldHVybiBmdW5jdGlvbiBpc0V4dGVuc2libGUoaXQpIHtcbiAgICByZXR1cm4gaXNPYmplY3QoaXQpID8gJGlzRXh0ZW5zaWJsZSA/ICRpc0V4dGVuc2libGUoaXQpIDogdHJ1ZSA6IGZhbHNlO1xuICB9O1xufSk7XG4iLCIvLyAxOS4xLjIuMTMgT2JqZWN0LmlzU2VhbGVkKE8pXG52YXIgaXNPYmplY3QgPSByZXF1aXJlKCcuL19pcy1vYmplY3QnKTtcblxucmVxdWlyZSgnLi9fb2JqZWN0LXNhcCcpKCdpc1NlYWxlZCcsIGZ1bmN0aW9uICgkaXNTZWFsZWQpIHtcbiAgcmV0dXJuIGZ1bmN0aW9uIGlzU2VhbGVkKGl0KSB7XG4gICAgcmV0dXJuIGlzT2JqZWN0KGl0KSA/ICRpc1NlYWxlZCA/ICRpc1NlYWxlZChpdCkgOiBmYWxzZSA6IHRydWU7XG4gIH07XG59KTtcbiIsIi8vIDE5LjEuMi4xMiBPYmplY3QuaXNGcm96ZW4oTylcbnZhciBpc09iamVjdCA9IHJlcXVpcmUoJy4vX2lzLW9iamVjdCcpO1xuXG5yZXF1aXJlKCcuL19vYmplY3Qtc2FwJykoJ2lzRnJvemVuJywgZnVuY3Rpb24gKCRpc0Zyb3plbikge1xuICByZXR1cm4gZnVuY3Rpb24gaXNGcm96ZW4oaXQpIHtcbiAgICByZXR1cm4gaXNPYmplY3QoaXQpID8gJGlzRnJvemVuID8gJGlzRnJvemVuKGl0KSA6IGZhbHNlIDogdHJ1ZTtcbiAgfTtcbn0pO1xuIiwiLy8gMTkuMS4yLjE1IE9iamVjdC5wcmV2ZW50RXh0ZW5zaW9ucyhPKVxudmFyIGlzT2JqZWN0ID0gcmVxdWlyZSgnLi9faXMtb2JqZWN0Jyk7XG52YXIgbWV0YSA9IHJlcXVpcmUoJy4vX21ldGEnKS5vbkZyZWV6ZTtcblxucmVxdWlyZSgnLi9fb2JqZWN0LXNhcCcpKCdwcmV2ZW50RXh0ZW5zaW9ucycsIGZ1bmN0aW9uICgkcHJldmVudEV4dGVuc2lvbnMpIHtcbiAgcmV0dXJuIGZ1bmN0aW9uIHByZXZlbnRFeHRlbnNpb25zKGl0KSB7XG4gICAgcmV0dXJuICRwcmV2ZW50RXh0ZW5zaW9ucyAmJiBpc09iamVjdChpdCkgPyAkcHJldmVudEV4dGVuc2lvbnMobWV0YShpdCkpIDogaXQ7XG4gIH07XG59KTtcbiIsIi8vIDE5LjEuMi4xNyBPYmplY3Quc2VhbChPKVxudmFyIGlzT2JqZWN0ID0gcmVxdWlyZSgnLi9faXMtb2JqZWN0Jyk7XG52YXIgbWV0YSA9IHJlcXVpcmUoJy4vX21ldGEnKS5vbkZyZWV6ZTtcblxucmVxdWlyZSgnLi9fb2JqZWN0LXNhcCcpKCdzZWFsJywgZnVuY3Rpb24gKCRzZWFsKSB7XG4gIHJldHVybiBmdW5jdGlvbiBzZWFsKGl0KSB7XG4gICAgcmV0dXJuICRzZWFsICYmIGlzT2JqZWN0KGl0KSA/ICRzZWFsKG1ldGEoaXQpKSA6IGl0O1xuICB9O1xufSk7XG4iLCIvLyAxOS4xLjIuNSBPYmplY3QuZnJlZXplKE8pXG52YXIgaXNPYmplY3QgPSByZXF1aXJlKCcuL19pcy1vYmplY3QnKTtcbnZhciBtZXRhID0gcmVxdWlyZSgnLi9fbWV0YScpLm9uRnJlZXplO1xuXG5yZXF1aXJlKCcuL19vYmplY3Qtc2FwJykoJ2ZyZWV6ZScsIGZ1bmN0aW9uICgkZnJlZXplKSB7XG4gIHJldHVybiBmdW5jdGlvbiBmcmVlemUoaXQpIHtcbiAgICByZXR1cm4gJGZyZWV6ZSAmJiBpc09iamVjdChpdCkgPyAkZnJlZXplKG1ldGEoaXQpKSA6IGl0O1xuICB9O1xufSk7XG4iLCIvLyAxOS4xLjIuNyBPYmplY3QuZ2V0T3duUHJvcGVydHlOYW1lcyhPKVxucmVxdWlyZSgnLi9fb2JqZWN0LXNhcCcpKCdnZXRPd25Qcm9wZXJ0eU5hbWVzJywgZnVuY3Rpb24gKCkge1xuICByZXR1cm4gcmVxdWlyZSgnLi9fb2JqZWN0LWdvcG4tZXh0JykuZjtcbn0pO1xuIiwiLy8gMTkuMS4yLjE0IE9iamVjdC5rZXlzKE8pXG52YXIgdG9PYmplY3QgPSByZXF1aXJlKCcuL190by1vYmplY3QnKTtcbnZhciAka2V5cyA9IHJlcXVpcmUoJy4vX29iamVjdC1rZXlzJyk7XG5cbnJlcXVpcmUoJy4vX29iamVjdC1zYXAnKSgna2V5cycsIGZ1bmN0aW9uICgpIHtcbiAgcmV0dXJuIGZ1bmN0aW9uIGtleXMoaXQpIHtcbiAgICByZXR1cm4gJGtleXModG9PYmplY3QoaXQpKTtcbiAgfTtcbn0pO1xuIiwiLy8gMTkuMS4yLjkgT2JqZWN0LmdldFByb3RvdHlwZU9mKE8pXG52YXIgdG9PYmplY3QgPSByZXF1aXJlKCcuL190by1vYmplY3QnKTtcbnZhciAkZ2V0UHJvdG90eXBlT2YgPSByZXF1aXJlKCcuL19vYmplY3QtZ3BvJyk7XG5cbnJlcXVpcmUoJy4vX29iamVjdC1zYXAnKSgnZ2V0UHJvdG90eXBlT2YnLCBmdW5jdGlvbiAoKSB7XG4gIHJldHVybiBmdW5jdGlvbiBnZXRQcm90b3R5cGVPZihpdCkge1xuICAgIHJldHVybiAkZ2V0UHJvdG90eXBlT2YodG9PYmplY3QoaXQpKTtcbiAgfTtcbn0pO1xuIiwiLy8gMTkuMS4yLjYgT2JqZWN0LmdldE93blByb3BlcnR5RGVzY3JpcHRvcihPLCBQKVxudmFyIHRvSU9iamVjdCA9IHJlcXVpcmUoJy4vX3RvLWlvYmplY3QnKTtcbnZhciAkZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yID0gcmVxdWlyZSgnLi9fb2JqZWN0LWdvcGQnKS5mO1xuXG5yZXF1aXJlKCcuL19vYmplY3Qtc2FwJykoJ2dldE93blByb3BlcnR5RGVzY3JpcHRvcicsIGZ1bmN0aW9uICgpIHtcbiAgcmV0dXJuIGZ1bmN0aW9uIGdldE93blByb3BlcnR5RGVzY3JpcHRvcihpdCwga2V5KSB7XG4gICAgcmV0dXJuICRnZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3IodG9JT2JqZWN0KGl0KSwga2V5KTtcbiAgfTtcbn0pO1xuIiwidmFyICRleHBvcnQgPSByZXF1aXJlKCcuL19leHBvcnQnKTtcbi8vIDE5LjEuMi4zIC8gMTUuMi4zLjcgT2JqZWN0LmRlZmluZVByb3BlcnRpZXMoTywgUHJvcGVydGllcylcbiRleHBvcnQoJGV4cG9ydC5TICsgJGV4cG9ydC5GICogIXJlcXVpcmUoJy4vX2Rlc2NyaXB0b3JzJyksICdPYmplY3QnLCB7IGRlZmluZVByb3BlcnRpZXM6IHJlcXVpcmUoJy4vX29iamVjdC1kcHMnKSB9KTtcbiIsInZhciAkZXhwb3J0ID0gcmVxdWlyZSgnLi9fZXhwb3J0Jyk7XG4vLyAxOS4xLjIuNCAvIDE1LjIuMy42IE9iamVjdC5kZWZpbmVQcm9wZXJ0eShPLCBQLCBBdHRyaWJ1dGVzKVxuJGV4cG9ydCgkZXhwb3J0LlMgKyAkZXhwb3J0LkYgKiAhcmVxdWlyZSgnLi9fZGVzY3JpcHRvcnMnKSwgJ09iamVjdCcsIHsgZGVmaW5lUHJvcGVydHk6IHJlcXVpcmUoJy4vX29iamVjdC1kcCcpLmYgfSk7XG4iLCJ2YXIgJGV4cG9ydCA9IHJlcXVpcmUoJy4vX2V4cG9ydCcpO1xuLy8gMTkuMS4yLjIgLyAxNS4yLjMuNSBPYmplY3QuY3JlYXRlKE8gWywgUHJvcGVydGllc10pXG4kZXhwb3J0KCRleHBvcnQuUywgJ09iamVjdCcsIHsgY3JlYXRlOiByZXF1aXJlKCcuL19vYmplY3QtY3JlYXRlJykgfSk7XG4iLCIvLyBhbGwgZW51bWVyYWJsZSBvYmplY3Qga2V5cywgaW5jbHVkZXMgc3ltYm9sc1xudmFyIGdldEtleXMgPSByZXF1aXJlKCcuL19vYmplY3Qta2V5cycpO1xudmFyIGdPUFMgPSByZXF1aXJlKCcuL19vYmplY3QtZ29wcycpO1xudmFyIHBJRSA9IHJlcXVpcmUoJy4vX29iamVjdC1waWUnKTtcbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKGl0KSB7XG4gIHZhciByZXN1bHQgPSBnZXRLZXlzKGl0KTtcbiAgdmFyIGdldFN5bWJvbHMgPSBnT1BTLmY7XG4gIGlmIChnZXRTeW1ib2xzKSB7XG4gICAgdmFyIHN5bWJvbHMgPSBnZXRTeW1ib2xzKGl0KTtcbiAgICB2YXIgaXNFbnVtID0gcElFLmY7XG4gICAgdmFyIGkgPSAwO1xuICAgIHZhciBrZXk7XG4gICAgd2hpbGUgKHN5bWJvbHMubGVuZ3RoID4gaSkgaWYgKGlzRW51bS5jYWxsKGl0LCBrZXkgPSBzeW1ib2xzW2krK10pKSByZXN1bHQucHVzaChrZXkpO1xuICB9IHJldHVybiByZXN1bHQ7XG59O1xuIiwiJ3VzZSBzdHJpY3QnO1xuLy8gRUNNQVNjcmlwdCA2IHN5bWJvbHMgc2hpbVxudmFyIGdsb2JhbCA9IHJlcXVpcmUoJy4vX2dsb2JhbCcpO1xudmFyIGhhcyA9IHJlcXVpcmUoJy4vX2hhcycpO1xudmFyIERFU0NSSVBUT1JTID0gcmVxdWlyZSgnLi9fZGVzY3JpcHRvcnMnKTtcbnZhciAkZXhwb3J0ID0gcmVxdWlyZSgnLi9fZXhwb3J0Jyk7XG52YXIgcmVkZWZpbmUgPSByZXF1aXJlKCcuL19yZWRlZmluZScpO1xudmFyIE1FVEEgPSByZXF1aXJlKCcuL19tZXRhJykuS0VZO1xudmFyICRmYWlscyA9IHJlcXVpcmUoJy4vX2ZhaWxzJyk7XG52YXIgc2hhcmVkID0gcmVxdWlyZSgnLi9fc2hhcmVkJyk7XG52YXIgc2V0VG9TdHJpbmdUYWcgPSByZXF1aXJlKCcuL19zZXQtdG8tc3RyaW5nLXRhZycpO1xudmFyIHVpZCA9IHJlcXVpcmUoJy4vX3VpZCcpO1xudmFyIHdrcyA9IHJlcXVpcmUoJy4vX3drcycpO1xudmFyIHdrc0V4dCA9IHJlcXVpcmUoJy4vX3drcy1leHQnKTtcbnZhciB3a3NEZWZpbmUgPSByZXF1aXJlKCcuL193a3MtZGVmaW5lJyk7XG52YXIgZW51bUtleXMgPSByZXF1aXJlKCcuL19lbnVtLWtleXMnKTtcbnZhciBpc0FycmF5ID0gcmVxdWlyZSgnLi9faXMtYXJyYXknKTtcbnZhciBhbk9iamVjdCA9IHJlcXVpcmUoJy4vX2FuLW9iamVjdCcpO1xudmFyIGlzT2JqZWN0ID0gcmVxdWlyZSgnLi9faXMtb2JqZWN0Jyk7XG52YXIgdG9JT2JqZWN0ID0gcmVxdWlyZSgnLi9fdG8taW9iamVjdCcpO1xudmFyIHRvUHJpbWl0aXZlID0gcmVxdWlyZSgnLi9fdG8tcHJpbWl0aXZlJyk7XG52YXIgY3JlYXRlRGVzYyA9IHJlcXVpcmUoJy4vX3Byb3BlcnR5LWRlc2MnKTtcbnZhciBfY3JlYXRlID0gcmVxdWlyZSgnLi9fb2JqZWN0LWNyZWF0ZScpO1xudmFyIGdPUE5FeHQgPSByZXF1aXJlKCcuL19vYmplY3QtZ29wbi1leHQnKTtcbnZhciAkR09QRCA9IHJlcXVpcmUoJy4vX29iamVjdC1nb3BkJyk7XG52YXIgJERQID0gcmVxdWlyZSgnLi9fb2JqZWN0LWRwJyk7XG52YXIgJGtleXMgPSByZXF1aXJlKCcuL19vYmplY3Qta2V5cycpO1xudmFyIGdPUEQgPSAkR09QRC5mO1xudmFyIGRQID0gJERQLmY7XG52YXIgZ09QTiA9IGdPUE5FeHQuZjtcbnZhciAkU3ltYm9sID0gZ2xvYmFsLlN5bWJvbDtcbnZhciAkSlNPTiA9IGdsb2JhbC5KU09OO1xudmFyIF9zdHJpbmdpZnkgPSAkSlNPTiAmJiAkSlNPTi5zdHJpbmdpZnk7XG52YXIgUFJPVE9UWVBFID0gJ3Byb3RvdHlwZSc7XG52YXIgSElEREVOID0gd2tzKCdfaGlkZGVuJyk7XG52YXIgVE9fUFJJTUlUSVZFID0gd2tzKCd0b1ByaW1pdGl2ZScpO1xudmFyIGlzRW51bSA9IHt9LnByb3BlcnR5SXNFbnVtZXJhYmxlO1xudmFyIFN5bWJvbFJlZ2lzdHJ5ID0gc2hhcmVkKCdzeW1ib2wtcmVnaXN0cnknKTtcbnZhciBBbGxTeW1ib2xzID0gc2hhcmVkKCdzeW1ib2xzJyk7XG52YXIgT1BTeW1ib2xzID0gc2hhcmVkKCdvcC1zeW1ib2xzJyk7XG52YXIgT2JqZWN0UHJvdG8gPSBPYmplY3RbUFJPVE9UWVBFXTtcbnZhciBVU0VfTkFUSVZFID0gdHlwZW9mICRTeW1ib2wgPT0gJ2Z1bmN0aW9uJztcbnZhciBRT2JqZWN0ID0gZ2xvYmFsLlFPYmplY3Q7XG4vLyBEb24ndCB1c2Ugc2V0dGVycyBpbiBRdCBTY3JpcHQsIGh0dHBzOi8vZ2l0aHViLmNvbS96bG9pcm9jay9jb3JlLWpzL2lzc3Vlcy8xNzNcbnZhciBzZXR0ZXIgPSAhUU9iamVjdCB8fCAhUU9iamVjdFtQUk9UT1RZUEVdIHx8ICFRT2JqZWN0W1BST1RPVFlQRV0uZmluZENoaWxkO1xuXG4vLyBmYWxsYmFjayBmb3Igb2xkIEFuZHJvaWQsIGh0dHBzOi8vY29kZS5nb29nbGUuY29tL3AvdjgvaXNzdWVzL2RldGFpbD9pZD02ODdcbnZhciBzZXRTeW1ib2xEZXNjID0gREVTQ1JJUFRPUlMgJiYgJGZhaWxzKGZ1bmN0aW9uICgpIHtcbiAgcmV0dXJuIF9jcmVhdGUoZFAoe30sICdhJywge1xuICAgIGdldDogZnVuY3Rpb24gKCkgeyByZXR1cm4gZFAodGhpcywgJ2EnLCB7IHZhbHVlOiA3IH0pLmE7IH1cbiAgfSkpLmEgIT0gNztcbn0pID8gZnVuY3Rpb24gKGl0LCBrZXksIEQpIHtcbiAgdmFyIHByb3RvRGVzYyA9IGdPUEQoT2JqZWN0UHJvdG8sIGtleSk7XG4gIGlmIChwcm90b0Rlc2MpIGRlbGV0ZSBPYmplY3RQcm90b1trZXldO1xuICBkUChpdCwga2V5LCBEKTtcbiAgaWYgKHByb3RvRGVzYyAmJiBpdCAhPT0gT2JqZWN0UHJvdG8pIGRQKE9iamVjdFByb3RvLCBrZXksIHByb3RvRGVzYyk7XG59IDogZFA7XG5cbnZhciB3cmFwID0gZnVuY3Rpb24gKHRhZykge1xuICB2YXIgc3ltID0gQWxsU3ltYm9sc1t0YWddID0gX2NyZWF0ZSgkU3ltYm9sW1BST1RPVFlQRV0pO1xuICBzeW0uX2sgPSB0YWc7XG4gIHJldHVybiBzeW07XG59O1xuXG52YXIgaXNTeW1ib2wgPSBVU0VfTkFUSVZFICYmIHR5cGVvZiAkU3ltYm9sLml0ZXJhdG9yID09ICdzeW1ib2wnID8gZnVuY3Rpb24gKGl0KSB7XG4gIHJldHVybiB0eXBlb2YgaXQgPT0gJ3N5bWJvbCc7XG59IDogZnVuY3Rpb24gKGl0KSB7XG4gIHJldHVybiBpdCBpbnN0YW5jZW9mICRTeW1ib2w7XG59O1xuXG52YXIgJGRlZmluZVByb3BlcnR5ID0gZnVuY3Rpb24gZGVmaW5lUHJvcGVydHkoaXQsIGtleSwgRCkge1xuICBpZiAoaXQgPT09IE9iamVjdFByb3RvKSAkZGVmaW5lUHJvcGVydHkoT1BTeW1ib2xzLCBrZXksIEQpO1xuICBhbk9iamVjdChpdCk7XG4gIGtleSA9IHRvUHJpbWl0aXZlKGtleSwgdHJ1ZSk7XG4gIGFuT2JqZWN0KEQpO1xuICBpZiAoaGFzKEFsbFN5bWJvbHMsIGtleSkpIHtcbiAgICBpZiAoIUQuZW51bWVyYWJsZSkge1xuICAgICAgaWYgKCFoYXMoaXQsIEhJRERFTikpIGRQKGl0LCBISURERU4sIGNyZWF0ZURlc2MoMSwge30pKTtcbiAgICAgIGl0W0hJRERFTl1ba2V5XSA9IHRydWU7XG4gICAgfSBlbHNlIHtcbiAgICAgIGlmIChoYXMoaXQsIEhJRERFTikgJiYgaXRbSElEREVOXVtrZXldKSBpdFtISURERU5dW2tleV0gPSBmYWxzZTtcbiAgICAgIEQgPSBfY3JlYXRlKEQsIHsgZW51bWVyYWJsZTogY3JlYXRlRGVzYygwLCBmYWxzZSkgfSk7XG4gICAgfSByZXR1cm4gc2V0U3ltYm9sRGVzYyhpdCwga2V5LCBEKTtcbiAgfSByZXR1cm4gZFAoaXQsIGtleSwgRCk7XG59O1xudmFyICRkZWZpbmVQcm9wZXJ0aWVzID0gZnVuY3Rpb24gZGVmaW5lUHJvcGVydGllcyhpdCwgUCkge1xuICBhbk9iamVjdChpdCk7XG4gIHZhciBrZXlzID0gZW51bUtleXMoUCA9IHRvSU9iamVjdChQKSk7XG4gIHZhciBpID0gMDtcbiAgdmFyIGwgPSBrZXlzLmxlbmd0aDtcbiAgdmFyIGtleTtcbiAgd2hpbGUgKGwgPiBpKSAkZGVmaW5lUHJvcGVydHkoaXQsIGtleSA9IGtleXNbaSsrXSwgUFtrZXldKTtcbiAgcmV0dXJuIGl0O1xufTtcbnZhciAkY3JlYXRlID0gZnVuY3Rpb24gY3JlYXRlKGl0LCBQKSB7XG4gIHJldHVybiBQID09PSB1bmRlZmluZWQgPyBfY3JlYXRlKGl0KSA6ICRkZWZpbmVQcm9wZXJ0aWVzKF9jcmVhdGUoaXQpLCBQKTtcbn07XG52YXIgJHByb3BlcnR5SXNFbnVtZXJhYmxlID0gZnVuY3Rpb24gcHJvcGVydHlJc0VudW1lcmFibGUoa2V5KSB7XG4gIHZhciBFID0gaXNFbnVtLmNhbGwodGhpcywga2V5ID0gdG9QcmltaXRpdmUoa2V5LCB0cnVlKSk7XG4gIGlmICh0aGlzID09PSBPYmplY3RQcm90byAmJiBoYXMoQWxsU3ltYm9scywga2V5KSAmJiAhaGFzKE9QU3ltYm9scywga2V5KSkgcmV0dXJuIGZhbHNlO1xuICByZXR1cm4gRSB8fCAhaGFzKHRoaXMsIGtleSkgfHwgIWhhcyhBbGxTeW1ib2xzLCBrZXkpIHx8IGhhcyh0aGlzLCBISURERU4pICYmIHRoaXNbSElEREVOXVtrZXldID8gRSA6IHRydWU7XG59O1xudmFyICRnZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3IgPSBmdW5jdGlvbiBnZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3IoaXQsIGtleSkge1xuICBpdCA9IHRvSU9iamVjdChpdCk7XG4gIGtleSA9IHRvUHJpbWl0aXZlKGtleSwgdHJ1ZSk7XG4gIGlmIChpdCA9PT0gT2JqZWN0UHJvdG8gJiYgaGFzKEFsbFN5bWJvbHMsIGtleSkgJiYgIWhhcyhPUFN5bWJvbHMsIGtleSkpIHJldHVybjtcbiAgdmFyIEQgPSBnT1BEKGl0LCBrZXkpO1xuICBpZiAoRCAmJiBoYXMoQWxsU3ltYm9scywga2V5KSAmJiAhKGhhcyhpdCwgSElEREVOKSAmJiBpdFtISURERU5dW2tleV0pKSBELmVudW1lcmFibGUgPSB0cnVlO1xuICByZXR1cm4gRDtcbn07XG52YXIgJGdldE93blByb3BlcnR5TmFtZXMgPSBmdW5jdGlvbiBnZXRPd25Qcm9wZXJ0eU5hbWVzKGl0KSB7XG4gIHZhciBuYW1lcyA9IGdPUE4odG9JT2JqZWN0KGl0KSk7XG4gIHZhciByZXN1bHQgPSBbXTtcbiAgdmFyIGkgPSAwO1xuICB2YXIga2V5O1xuICB3aGlsZSAobmFtZXMubGVuZ3RoID4gaSkge1xuICAgIGlmICghaGFzKEFsbFN5bWJvbHMsIGtleSA9IG5hbWVzW2krK10pICYmIGtleSAhPSBISURERU4gJiYga2V5ICE9IE1FVEEpIHJlc3VsdC5wdXNoKGtleSk7XG4gIH0gcmV0dXJuIHJlc3VsdDtcbn07XG52YXIgJGdldE93blByb3BlcnR5U3ltYm9scyA9IGZ1bmN0aW9uIGdldE93blByb3BlcnR5U3ltYm9scyhpdCkge1xuICB2YXIgSVNfT1AgPSBpdCA9PT0gT2JqZWN0UHJvdG87XG4gIHZhciBuYW1lcyA9IGdPUE4oSVNfT1AgPyBPUFN5bWJvbHMgOiB0b0lPYmplY3QoaXQpKTtcbiAgdmFyIHJlc3VsdCA9IFtdO1xuICB2YXIgaSA9IDA7XG4gIHZhciBrZXk7XG4gIHdoaWxlIChuYW1lcy5sZW5ndGggPiBpKSB7XG4gICAgaWYgKGhhcyhBbGxTeW1ib2xzLCBrZXkgPSBuYW1lc1tpKytdKSAmJiAoSVNfT1AgPyBoYXMoT2JqZWN0UHJvdG8sIGtleSkgOiB0cnVlKSkgcmVzdWx0LnB1c2goQWxsU3ltYm9sc1trZXldKTtcbiAgfSByZXR1cm4gcmVzdWx0O1xufTtcblxuLy8gMTkuNC4xLjEgU3ltYm9sKFtkZXNjcmlwdGlvbl0pXG5pZiAoIVVTRV9OQVRJVkUpIHtcbiAgJFN5bWJvbCA9IGZ1bmN0aW9uIFN5bWJvbCgpIHtcbiAgICBpZiAodGhpcyBpbnN0YW5jZW9mICRTeW1ib2wpIHRocm93IFR5cGVFcnJvcignU3ltYm9sIGlzIG5vdCBhIGNvbnN0cnVjdG9yIScpO1xuICAgIHZhciB0YWcgPSB1aWQoYXJndW1lbnRzLmxlbmd0aCA+IDAgPyBhcmd1bWVudHNbMF0gOiB1bmRlZmluZWQpO1xuICAgIHZhciAkc2V0ID0gZnVuY3Rpb24gKHZhbHVlKSB7XG4gICAgICBpZiAodGhpcyA9PT0gT2JqZWN0UHJvdG8pICRzZXQuY2FsbChPUFN5bWJvbHMsIHZhbHVlKTtcbiAgICAgIGlmIChoYXModGhpcywgSElEREVOKSAmJiBoYXModGhpc1tISURERU5dLCB0YWcpKSB0aGlzW0hJRERFTl1bdGFnXSA9IGZhbHNlO1xuICAgICAgc2V0U3ltYm9sRGVzYyh0aGlzLCB0YWcsIGNyZWF0ZURlc2MoMSwgdmFsdWUpKTtcbiAgICB9O1xuICAgIGlmIChERVNDUklQVE9SUyAmJiBzZXR0ZXIpIHNldFN5bWJvbERlc2MoT2JqZWN0UHJvdG8sIHRhZywgeyBjb25maWd1cmFibGU6IHRydWUsIHNldDogJHNldCB9KTtcbiAgICByZXR1cm4gd3JhcCh0YWcpO1xuICB9O1xuICByZWRlZmluZSgkU3ltYm9sW1BST1RPVFlQRV0sICd0b1N0cmluZycsIGZ1bmN0aW9uIHRvU3RyaW5nKCkge1xuICAgIHJldHVybiB0aGlzLl9rO1xuICB9KTtcblxuICAkR09QRC5mID0gJGdldE93blByb3BlcnR5RGVzY3JpcHRvcjtcbiAgJERQLmYgPSAkZGVmaW5lUHJvcGVydHk7XG4gIHJlcXVpcmUoJy4vX29iamVjdC1nb3BuJykuZiA9IGdPUE5FeHQuZiA9ICRnZXRPd25Qcm9wZXJ0eU5hbWVzO1xuICByZXF1aXJlKCcuL19vYmplY3QtcGllJykuZiA9ICRwcm9wZXJ0eUlzRW51bWVyYWJsZTtcbiAgcmVxdWlyZSgnLi9fb2JqZWN0LWdvcHMnKS5mID0gJGdldE93blByb3BlcnR5U3ltYm9scztcblxuICBpZiAoREVTQ1JJUFRPUlMgJiYgIXJlcXVpcmUoJy4vX2xpYnJhcnknKSkge1xuICAgIHJlZGVmaW5lKE9iamVjdFByb3RvLCAncHJvcGVydHlJc0VudW1lcmFibGUnLCAkcHJvcGVydHlJc0VudW1lcmFibGUsIHRydWUpO1xuICB9XG5cbiAgd2tzRXh0LmYgPSBmdW5jdGlvbiAobmFtZSkge1xuICAgIHJldHVybiB3cmFwKHdrcyhuYW1lKSk7XG4gIH07XG59XG5cbiRleHBvcnQoJGV4cG9ydC5HICsgJGV4cG9ydC5XICsgJGV4cG9ydC5GICogIVVTRV9OQVRJVkUsIHsgU3ltYm9sOiAkU3ltYm9sIH0pO1xuXG5mb3IgKHZhciBlczZTeW1ib2xzID0gKFxuICAvLyAxOS40LjIuMiwgMTkuNC4yLjMsIDE5LjQuMi40LCAxOS40LjIuNiwgMTkuNC4yLjgsIDE5LjQuMi45LCAxOS40LjIuMTAsIDE5LjQuMi4xMSwgMTkuNC4yLjEyLCAxOS40LjIuMTMsIDE5LjQuMi4xNFxuICAnaGFzSW5zdGFuY2UsaXNDb25jYXRTcHJlYWRhYmxlLGl0ZXJhdG9yLG1hdGNoLHJlcGxhY2Usc2VhcmNoLHNwZWNpZXMsc3BsaXQsdG9QcmltaXRpdmUsdG9TdHJpbmdUYWcsdW5zY29wYWJsZXMnXG4pLnNwbGl0KCcsJyksIGogPSAwOyBlczZTeW1ib2xzLmxlbmd0aCA+IGo7KXdrcyhlczZTeW1ib2xzW2orK10pO1xuXG5mb3IgKHZhciB3ZWxsS25vd25TeW1ib2xzID0gJGtleXMod2tzLnN0b3JlKSwgayA9IDA7IHdlbGxLbm93blN5bWJvbHMubGVuZ3RoID4gazspIHdrc0RlZmluZSh3ZWxsS25vd25TeW1ib2xzW2srK10pO1xuXG4kZXhwb3J0KCRleHBvcnQuUyArICRleHBvcnQuRiAqICFVU0VfTkFUSVZFLCAnU3ltYm9sJywge1xuICAvLyAxOS40LjIuMSBTeW1ib2wuZm9yKGtleSlcbiAgJ2Zvcic6IGZ1bmN0aW9uIChrZXkpIHtcbiAgICByZXR1cm4gaGFzKFN5bWJvbFJlZ2lzdHJ5LCBrZXkgKz0gJycpXG4gICAgICA/IFN5bWJvbFJlZ2lzdHJ5W2tleV1cbiAgICAgIDogU3ltYm9sUmVnaXN0cnlba2V5XSA9ICRTeW1ib2woa2V5KTtcbiAgfSxcbiAgLy8gMTkuNC4yLjUgU3ltYm9sLmtleUZvcihzeW0pXG4gIGtleUZvcjogZnVuY3Rpb24ga2V5Rm9yKHN5bSkge1xuICAgIGlmICghaXNTeW1ib2woc3ltKSkgdGhyb3cgVHlwZUVycm9yKHN5bSArICcgaXMgbm90IGEgc3ltYm9sIScpO1xuICAgIGZvciAodmFyIGtleSBpbiBTeW1ib2xSZWdpc3RyeSkgaWYgKFN5bWJvbFJlZ2lzdHJ5W2tleV0gPT09IHN5bSkgcmV0dXJuIGtleTtcbiAgfSxcbiAgdXNlU2V0dGVyOiBmdW5jdGlvbiAoKSB7IHNldHRlciA9IHRydWU7IH0sXG4gIHVzZVNpbXBsZTogZnVuY3Rpb24gKCkgeyBzZXR0ZXIgPSBmYWxzZTsgfVxufSk7XG5cbiRleHBvcnQoJGV4cG9ydC5TICsgJGV4cG9ydC5GICogIVVTRV9OQVRJVkUsICdPYmplY3QnLCB7XG4gIC8vIDE5LjEuMi4yIE9iamVjdC5jcmVhdGUoTyBbLCBQcm9wZXJ0aWVzXSlcbiAgY3JlYXRlOiAkY3JlYXRlLFxuICAvLyAxOS4xLjIuNCBPYmplY3QuZGVmaW5lUHJvcGVydHkoTywgUCwgQXR0cmlidXRlcylcbiAgZGVmaW5lUHJvcGVydHk6ICRkZWZpbmVQcm9wZXJ0eSxcbiAgLy8gMTkuMS4yLjMgT2JqZWN0LmRlZmluZVByb3BlcnRpZXMoTywgUHJvcGVydGllcylcbiAgZGVmaW5lUHJvcGVydGllczogJGRlZmluZVByb3BlcnRpZXMsXG4gIC8vIDE5LjEuMi42IE9iamVjdC5nZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3IoTywgUClcbiAgZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yOiAkZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yLFxuICAvLyAxOS4xLjIuNyBPYmplY3QuZ2V0T3duUHJvcGVydHlOYW1lcyhPKVxuICBnZXRPd25Qcm9wZXJ0eU5hbWVzOiAkZ2V0T3duUHJvcGVydHlOYW1lcyxcbiAgLy8gMTkuMS4yLjggT2JqZWN0LmdldE93blByb3BlcnR5U3ltYm9scyhPKVxuICBnZXRPd25Qcm9wZXJ0eVN5bWJvbHM6ICRnZXRPd25Qcm9wZXJ0eVN5bWJvbHNcbn0pO1xuXG4vLyAyNC4zLjIgSlNPTi5zdHJpbmdpZnkodmFsdWUgWywgcmVwbGFjZXIgWywgc3BhY2VdXSlcbiRKU09OICYmICRleHBvcnQoJGV4cG9ydC5TICsgJGV4cG9ydC5GICogKCFVU0VfTkFUSVZFIHx8ICRmYWlscyhmdW5jdGlvbiAoKSB7XG4gIHZhciBTID0gJFN5bWJvbCgpO1xuICAvLyBNUyBFZGdlIGNvbnZlcnRzIHN5bWJvbCB2YWx1ZXMgdG8gSlNPTiBhcyB7fVxuICAvLyBXZWJLaXQgY29udmVydHMgc3ltYm9sIHZhbHVlcyB0byBKU09OIGFzIG51bGxcbiAgLy8gVjggdGhyb3dzIG9uIGJveGVkIHN5bWJvbHNcbiAgcmV0dXJuIF9zdHJpbmdpZnkoW1NdKSAhPSAnW251bGxdJyB8fCBfc3RyaW5naWZ5KHsgYTogUyB9KSAhPSAne30nIHx8IF9zdHJpbmdpZnkoT2JqZWN0KFMpKSAhPSAne30nO1xufSkpLCAnSlNPTicsIHtcbiAgc3RyaW5naWZ5OiBmdW5jdGlvbiBzdHJpbmdpZnkoaXQpIHtcbiAgICB2YXIgYXJncyA9IFtpdF07XG4gICAgdmFyIGkgPSAxO1xuICAgIHZhciByZXBsYWNlciwgJHJlcGxhY2VyO1xuICAgIHdoaWxlIChhcmd1bWVudHMubGVuZ3RoID4gaSkgYXJncy5wdXNoKGFyZ3VtZW50c1tpKytdKTtcbiAgICAkcmVwbGFjZXIgPSByZXBsYWNlciA9IGFyZ3NbMV07XG4gICAgaWYgKCFpc09iamVjdChyZXBsYWNlcikgJiYgaXQgPT09IHVuZGVmaW5lZCB8fCBpc1N5bWJvbChpdCkpIHJldHVybjsgLy8gSUU4IHJldHVybnMgc3RyaW5nIG9uIHVuZGVmaW5lZFxuICAgIGlmICghaXNBcnJheShyZXBsYWNlcikpIHJlcGxhY2VyID0gZnVuY3Rpb24gKGtleSwgdmFsdWUpIHtcbiAgICAgIGlmICh0eXBlb2YgJHJlcGxhY2VyID09ICdmdW5jdGlvbicpIHZhbHVlID0gJHJlcGxhY2VyLmNhbGwodGhpcywga2V5LCB2YWx1ZSk7XG4gICAgICBpZiAoIWlzU3ltYm9sKHZhbHVlKSkgcmV0dXJuIHZhbHVlO1xuICAgIH07XG4gICAgYXJnc1sxXSA9IHJlcGxhY2VyO1xuICAgIHJldHVybiBfc3RyaW5naWZ5LmFwcGx5KCRKU09OLCBhcmdzKTtcbiAgfVxufSk7XG5cbi8vIDE5LjQuMy40IFN5bWJvbC5wcm90b3R5cGVbQEB0b1ByaW1pdGl2ZV0oaGludClcbiRTeW1ib2xbUFJPVE9UWVBFXVtUT19QUklNSVRJVkVdIHx8IHJlcXVpcmUoJy4vX2hpZGUnKSgkU3ltYm9sW1BST1RPVFlQRV0sIFRPX1BSSU1JVElWRSwgJFN5bWJvbFtQUk9UT1RZUEVdLnZhbHVlT2YpO1xuLy8gMTkuNC4zLjUgU3ltYm9sLnByb3RvdHlwZVtAQHRvU3RyaW5nVGFnXVxuc2V0VG9TdHJpbmdUYWcoJFN5bWJvbCwgJ1N5bWJvbCcpO1xuLy8gMjAuMi4xLjkgTWF0aFtAQHRvU3RyaW5nVGFnXVxuc2V0VG9TdHJpbmdUYWcoTWF0aCwgJ01hdGgnLCB0cnVlKTtcbi8vIDI0LjMuMyBKU09OW0BAdG9TdHJpbmdUYWddXG5zZXRUb1N0cmluZ1RhZyhnbG9iYWwuSlNPTiwgJ0pTT04nLCB0cnVlKTtcbiIsInJlcXVpcmUoJy4vbW9kdWxlcy9lczYuc3ltYm9sJyk7XG5yZXF1aXJlKCcuL21vZHVsZXMvZXM2Lm9iamVjdC5jcmVhdGUnKTtcbnJlcXVpcmUoJy4vbW9kdWxlcy9lczYub2JqZWN0LmRlZmluZS1wcm9wZXJ0eScpO1xucmVxdWlyZSgnLi9tb2R1bGVzL2VzNi5vYmplY3QuZGVmaW5lLXByb3BlcnRpZXMnKTtcbnJlcXVpcmUoJy4vbW9kdWxlcy9lczYub2JqZWN0LmdldC1vd24tcHJvcGVydHktZGVzY3JpcHRvcicpO1xucmVxdWlyZSgnLi9tb2R1bGVzL2VzNi5vYmplY3QuZ2V0LXByb3RvdHlwZS1vZicpO1xucmVxdWlyZSgnLi9tb2R1bGVzL2VzNi5vYmplY3Qua2V5cycpO1xucmVxdWlyZSgnLi9tb2R1bGVzL2VzNi5vYmplY3QuZ2V0LW93bi1wcm9wZXJ0eS1uYW1lcycpO1xucmVxdWlyZSgnLi9tb2R1bGVzL2VzNi5vYmplY3QuZnJlZXplJyk7XG5yZXF1aXJlKCcuL21vZHVsZXMvZXM2Lm9iamVjdC5zZWFsJyk7XG5yZXF1aXJlKCcuL21vZHVsZXMvZXM2Lm9iamVjdC5wcmV2ZW50LWV4dGVuc2lvbnMnKTtcbnJlcXVpcmUoJy4vbW9kdWxlcy9lczYub2JqZWN0LmlzLWZyb3plbicpO1xucmVxdWlyZSgnLi9tb2R1bGVzL2VzNi5vYmplY3QuaXMtc2VhbGVkJyk7XG5yZXF1aXJlKCcuL21vZHVsZXMvZXM2Lm9iamVjdC5pcy1leHRlbnNpYmxlJyk7XG5yZXF1aXJlKCcuL21vZHVsZXMvZXM2Lm9iamVjdC5hc3NpZ24nKTtcbnJlcXVpcmUoJy4vbW9kdWxlcy9lczYub2JqZWN0LmlzJyk7XG5yZXF1aXJlKCcuL21vZHVsZXMvZXM2Lm9iamVjdC5zZXQtcHJvdG90eXBlLW9mJyk7XG5yZXF1aXJlKCcuL21vZHVsZXMvZXM2Lm9iamVjdC50by1zdHJpbmcnKTtcbnJlcXVpcmUoJy4vbW9kdWxlcy9lczYuZnVuY3Rpb24uYmluZCcpO1xucmVxdWlyZSgnLi9tb2R1bGVzL2VzNi5mdW5jdGlvbi5uYW1lJyk7XG5yZXF1aXJlKCcuL21vZHVsZXMvZXM2LmZ1bmN0aW9uLmhhcy1pbnN0YW5jZScpO1xucmVxdWlyZSgnLi9tb2R1bGVzL2VzNi5wYXJzZS1pbnQnKTtcbnJlcXVpcmUoJy4vbW9kdWxlcy9lczYucGFyc2UtZmxvYXQnKTtcbnJlcXVpcmUoJy4vbW9kdWxlcy9lczYubnVtYmVyLmNvbnN0cnVjdG9yJyk7XG5yZXF1aXJlKCcuL21vZHVsZXMvZXM2Lm51bWJlci50by1maXhlZCcpO1xucmVxdWlyZSgnLi9tb2R1bGVzL2VzNi5udW1iZXIudG8tcHJlY2lzaW9uJyk7XG5yZXF1aXJlKCcuL21vZHVsZXMvZXM2Lm51bWJlci5lcHNpbG9uJyk7XG5yZXF1aXJlKCcuL21vZHVsZXMvZXM2Lm51bWJlci5pcy1maW5pdGUnKTtcbnJlcXVpcmUoJy4vbW9kdWxlcy9lczYubnVtYmVyLmlzLWludGVnZXInKTtcbnJlcXVpcmUoJy4vbW9kdWxlcy9lczYubnVtYmVyLmlzLW5hbicpO1xucmVxdWlyZSgnLi9tb2R1bGVzL2VzNi5udW1iZXIuaXMtc2FmZS1pbnRlZ2VyJyk7XG5yZXF1aXJlKCcuL21vZHVsZXMvZXM2Lm51bWJlci5tYXgtc2FmZS1pbnRlZ2VyJyk7XG5yZXF1aXJlKCcuL21vZHVsZXMvZXM2Lm51bWJlci5taW4tc2FmZS1pbnRlZ2VyJyk7XG5yZXF1aXJlKCcuL21vZHVsZXMvZXM2Lm51bWJlci5wYXJzZS1mbG9hdCcpO1xucmVxdWlyZSgnLi9tb2R1bGVzL2VzNi5udW1iZXIucGFyc2UtaW50Jyk7XG5yZXF1aXJlKCcuL21vZHVsZXMvZXM2Lm1hdGguYWNvc2gnKTtcbnJlcXVpcmUoJy4vbW9kdWxlcy9lczYubWF0aC5hc2luaCcpO1xucmVxdWlyZSgnLi9tb2R1bGVzL2VzNi5tYXRoLmF0YW5oJyk7XG5yZXF1aXJlKCcuL21vZHVsZXMvZXM2Lm1hdGguY2JydCcpO1xucmVxdWlyZSgnLi9tb2R1bGVzL2VzNi5tYXRoLmNsejMyJyk7XG5yZXF1aXJlKCcuL21vZHVsZXMvZXM2Lm1hdGguY29zaCcpO1xucmVxdWlyZSgnLi9tb2R1bGVzL2VzNi5tYXRoLmV4cG0xJyk7XG5yZXF1aXJlKCcuL21vZHVsZXMvZXM2Lm1hdGguZnJvdW5kJyk7XG5yZXF1aXJlKCcuL21vZHVsZXMvZXM2Lm1hdGguaHlwb3QnKTtcbnJlcXVpcmUoJy4vbW9kdWxlcy9lczYubWF0aC5pbXVsJyk7XG5yZXF1aXJlKCcuL21vZHVsZXMvZXM2Lm1hdGgubG9nMTAnKTtcbnJlcXVpcmUoJy4vbW9kdWxlcy9lczYubWF0aC5sb2cxcCcpO1xucmVxdWlyZSgnLi9tb2R1bGVzL2VzNi5tYXRoLmxvZzInKTtcbnJlcXVpcmUoJy4vbW9kdWxlcy9lczYubWF0aC5zaWduJyk7XG5yZXF1aXJlKCcuL21vZHVsZXMvZXM2Lm1hdGguc2luaCcpO1xucmVxdWlyZSgnLi9tb2R1bGVzL2VzNi5tYXRoLnRhbmgnKTtcbnJlcXVpcmUoJy4vbW9kdWxlcy9lczYubWF0aC50cnVuYycpO1xucmVxdWlyZSgnLi9tb2R1bGVzL2VzNi5zdHJpbmcuZnJvbS1jb2RlLXBvaW50Jyk7XG5yZXF1aXJlKCcuL21vZHVsZXMvZXM2LnN0cmluZy5yYXcnKTtcbnJlcXVpcmUoJy4vbW9kdWxlcy9lczYuc3RyaW5nLnRyaW0nKTtcbnJlcXVpcmUoJy4vbW9kdWxlcy9lczYuc3RyaW5nLml0ZXJhdG9yJyk7XG5yZXF1aXJlKCcuL21vZHVsZXMvZXM2LnN0cmluZy5jb2RlLXBvaW50LWF0Jyk7XG5yZXF1aXJlKCcuL21vZHVsZXMvZXM2LnN0cmluZy5lbmRzLXdpdGgnKTtcbnJlcXVpcmUoJy4vbW9kdWxlcy9lczYuc3RyaW5nLmluY2x1ZGVzJyk7XG5yZXF1aXJlKCcuL21vZHVsZXMvZXM2LnN0cmluZy5yZXBlYXQnKTtcbnJlcXVpcmUoJy4vbW9kdWxlcy9lczYuc3RyaW5nLnN0YXJ0cy13aXRoJyk7XG5yZXF1aXJlKCcuL21vZHVsZXMvZXM2LnN0cmluZy5hbmNob3InKTtcbnJlcXVpcmUoJy4vbW9kdWxlcy9lczYuc3RyaW5nLmJpZycpO1xucmVxdWlyZSgnLi9tb2R1bGVzL2VzNi5zdHJpbmcuYmxpbmsnKTtcbnJlcXVpcmUoJy4vbW9kdWxlcy9lczYuc3RyaW5nLmJvbGQnKTtcbnJlcXVpcmUoJy4vbW9kdWxlcy9lczYuc3RyaW5nLmZpeGVkJyk7XG5yZXF1aXJlKCcuL21vZHVsZXMvZXM2LnN0cmluZy5mb250Y29sb3InKTtcbnJlcXVpcmUoJy4vbW9kdWxlcy9lczYuc3RyaW5nLmZvbnRzaXplJyk7XG5yZXF1aXJlKCcuL21vZHVsZXMvZXM2LnN0cmluZy5pdGFsaWNzJyk7XG5yZXF1aXJlKCcuL21vZHVsZXMvZXM2LnN0cmluZy5saW5rJyk7XG5yZXF1aXJlKCcuL21vZHVsZXMvZXM2LnN0cmluZy5zbWFsbCcpO1xucmVxdWlyZSgnLi9tb2R1bGVzL2VzNi5zdHJpbmcuc3RyaWtlJyk7XG5yZXF1aXJlKCcuL21vZHVsZXMvZXM2LnN0cmluZy5zdWInKTtcbnJlcXVpcmUoJy4vbW9kdWxlcy9lczYuc3RyaW5nLnN1cCcpO1xucmVxdWlyZSgnLi9tb2R1bGVzL2VzNi5kYXRlLm5vdycpO1xucmVxdWlyZSgnLi9tb2R1bGVzL2VzNi5kYXRlLnRvLWpzb24nKTtcbnJlcXVpcmUoJy4vbW9kdWxlcy9lczYuZGF0ZS50by1pc28tc3RyaW5nJyk7XG5yZXF1aXJlKCcuL21vZHVsZXMvZXM2LmRhdGUudG8tc3RyaW5nJyk7XG5yZXF1aXJlKCcuL21vZHVsZXMvZXM2LmRhdGUudG8tcHJpbWl0aXZlJyk7XG5yZXF1aXJlKCcuL21vZHVsZXMvZXM2LmFycmF5LmlzLWFycmF5Jyk7XG5yZXF1aXJlKCcuL21vZHVsZXMvZXM2LmFycmF5LmZyb20nKTtcbnJlcXVpcmUoJy4vbW9kdWxlcy9lczYuYXJyYXkub2YnKTtcbnJlcXVpcmUoJy4vbW9kdWxlcy9lczYuYXJyYXkuam9pbicpO1xucmVxdWlyZSgnLi9tb2R1bGVzL2VzNi5hcnJheS5zbGljZScpO1xucmVxdWlyZSgnLi9tb2R1bGVzL2VzNi5hcnJheS5zb3J0Jyk7XG5yZXF1aXJlKCcuL21vZHVsZXMvZXM2LmFycmF5LmZvci1lYWNoJyk7XG5yZXF1aXJlKCcuL21vZHVsZXMvZXM2LmFycmF5Lm1hcCcpO1xucmVxdWlyZSgnLi9tb2R1bGVzL2VzNi5hcnJheS5maWx0ZXInKTtcbnJlcXVpcmUoJy4vbW9kdWxlcy9lczYuYXJyYXkuc29tZScpO1xucmVxdWlyZSgnLi9tb2R1bGVzL2VzNi5hcnJheS5ldmVyeScpO1xucmVxdWlyZSgnLi9tb2R1bGVzL2VzNi5hcnJheS5yZWR1Y2UnKTtcbnJlcXVpcmUoJy4vbW9kdWxlcy9lczYuYXJyYXkucmVkdWNlLXJpZ2h0Jyk7XG5yZXF1aXJlKCcuL21vZHVsZXMvZXM2LmFycmF5LmluZGV4LW9mJyk7XG5yZXF1aXJlKCcuL21vZHVsZXMvZXM2LmFycmF5Lmxhc3QtaW5kZXgtb2YnKTtcbnJlcXVpcmUoJy4vbW9kdWxlcy9lczYuYXJyYXkuY29weS13aXRoaW4nKTtcbnJlcXVpcmUoJy4vbW9kdWxlcy9lczYuYXJyYXkuZmlsbCcpO1xucmVxdWlyZSgnLi9tb2R1bGVzL2VzNi5hcnJheS5maW5kJyk7XG5yZXF1aXJlKCcuL21vZHVsZXMvZXM2LmFycmF5LmZpbmQtaW5kZXgnKTtcbnJlcXVpcmUoJy4vbW9kdWxlcy9lczYuYXJyYXkuc3BlY2llcycpO1xucmVxdWlyZSgnLi9tb2R1bGVzL2VzNi5hcnJheS5pdGVyYXRvcicpO1xucmVxdWlyZSgnLi9tb2R1bGVzL2VzNi5yZWdleHAuY29uc3RydWN0b3InKTtcbnJlcXVpcmUoJy4vbW9kdWxlcy9lczYucmVnZXhwLnRvLXN0cmluZycpO1xucmVxdWlyZSgnLi9tb2R1bGVzL2VzNi5yZWdleHAuZmxhZ3MnKTtcbnJlcXVpcmUoJy4vbW9kdWxlcy9lczYucmVnZXhwLm1hdGNoJyk7XG5yZXF1aXJlKCcuL21vZHVsZXMvZXM2LnJlZ2V4cC5yZXBsYWNlJyk7XG5yZXF1aXJlKCcuL21vZHVsZXMvZXM2LnJlZ2V4cC5zZWFyY2gnKTtcbnJlcXVpcmUoJy4vbW9kdWxlcy9lczYucmVnZXhwLnNwbGl0Jyk7XG5yZXF1aXJlKCcuL21vZHVsZXMvZXM2LnByb21pc2UnKTtcbnJlcXVpcmUoJy4vbW9kdWxlcy9lczYubWFwJyk7XG5yZXF1aXJlKCcuL21vZHVsZXMvZXM2LnNldCcpO1xucmVxdWlyZSgnLi9tb2R1bGVzL2VzNi53ZWFrLW1hcCcpO1xucmVxdWlyZSgnLi9tb2R1bGVzL2VzNi53ZWFrLXNldCcpO1xucmVxdWlyZSgnLi9tb2R1bGVzL2VzNi50eXBlZC5hcnJheS1idWZmZXInKTtcbnJlcXVpcmUoJy4vbW9kdWxlcy9lczYudHlwZWQuZGF0YS12aWV3Jyk7XG5yZXF1aXJlKCcuL21vZHVsZXMvZXM2LnR5cGVkLmludDgtYXJyYXknKTtcbnJlcXVpcmUoJy4vbW9kdWxlcy9lczYudHlwZWQudWludDgtYXJyYXknKTtcbnJlcXVpcmUoJy4vbW9kdWxlcy9lczYudHlwZWQudWludDgtY2xhbXBlZC1hcnJheScpO1xucmVxdWlyZSgnLi9tb2R1bGVzL2VzNi50eXBlZC5pbnQxNi1hcnJheScpO1xucmVxdWlyZSgnLi9tb2R1bGVzL2VzNi50eXBlZC51aW50MTYtYXJyYXknKTtcbnJlcXVpcmUoJy4vbW9kdWxlcy9lczYudHlwZWQuaW50MzItYXJyYXknKTtcbnJlcXVpcmUoJy4vbW9kdWxlcy9lczYudHlwZWQudWludDMyLWFycmF5Jyk7XG5yZXF1aXJlKCcuL21vZHVsZXMvZXM2LnR5cGVkLmZsb2F0MzItYXJyYXknKTtcbnJlcXVpcmUoJy4vbW9kdWxlcy9lczYudHlwZWQuZmxvYXQ2NC1hcnJheScpO1xucmVxdWlyZSgnLi9tb2R1bGVzL2VzNi5yZWZsZWN0LmFwcGx5Jyk7XG5yZXF1aXJlKCcuL21vZHVsZXMvZXM2LnJlZmxlY3QuY29uc3RydWN0Jyk7XG5yZXF1aXJlKCcuL21vZHVsZXMvZXM2LnJlZmxlY3QuZGVmaW5lLXByb3BlcnR5Jyk7XG5yZXF1aXJlKCcuL21vZHVsZXMvZXM2LnJlZmxlY3QuZGVsZXRlLXByb3BlcnR5Jyk7XG5yZXF1aXJlKCcuL21vZHVsZXMvZXM2LnJlZmxlY3QuZW51bWVyYXRlJyk7XG5yZXF1aXJlKCcuL21vZHVsZXMvZXM2LnJlZmxlY3QuZ2V0Jyk7XG5yZXF1aXJlKCcuL21vZHVsZXMvZXM2LnJlZmxlY3QuZ2V0LW93bi1wcm9wZXJ0eS1kZXNjcmlwdG9yJyk7XG5yZXF1aXJlKCcuL21vZHVsZXMvZXM2LnJlZmxlY3QuZ2V0LXByb3RvdHlwZS1vZicpO1xucmVxdWlyZSgnLi9tb2R1bGVzL2VzNi5yZWZsZWN0LmhhcycpO1xucmVxdWlyZSgnLi9tb2R1bGVzL2VzNi5yZWZsZWN0LmlzLWV4dGVuc2libGUnKTtcbnJlcXVpcmUoJy4vbW9kdWxlcy9lczYucmVmbGVjdC5vd24ta2V5cycpO1xucmVxdWlyZSgnLi9tb2R1bGVzL2VzNi5yZWZsZWN0LnByZXZlbnQtZXh0ZW5zaW9ucycpO1xucmVxdWlyZSgnLi9tb2R1bGVzL2VzNi5yZWZsZWN0LnNldCcpO1xucmVxdWlyZSgnLi9tb2R1bGVzL2VzNi5yZWZsZWN0LnNldC1wcm90b3R5cGUtb2YnKTtcbnJlcXVpcmUoJy4vbW9kdWxlcy9lczcuYXJyYXkuaW5jbHVkZXMnKTtcbnJlcXVpcmUoJy4vbW9kdWxlcy9lczcuYXJyYXkuZmxhdC1tYXAnKTtcbnJlcXVpcmUoJy4vbW9kdWxlcy9lczcuYXJyYXkuZmxhdHRlbicpO1xucmVxdWlyZSgnLi9tb2R1bGVzL2VzNy5zdHJpbmcuYXQnKTtcbnJlcXVpcmUoJy4vbW9kdWxlcy9lczcuc3RyaW5nLnBhZC1zdGFydCcpO1xucmVxdWlyZSgnLi9tb2R1bGVzL2VzNy5zdHJpbmcucGFkLWVuZCcpO1xucmVxdWlyZSgnLi9tb2R1bGVzL2VzNy5zdHJpbmcudHJpbS1sZWZ0Jyk7XG5yZXF1aXJlKCcuL21vZHVsZXMvZXM3LnN0cmluZy50cmltLXJpZ2h0Jyk7XG5yZXF1aXJlKCcuL21vZHVsZXMvZXM3LnN0cmluZy5tYXRjaC1hbGwnKTtcbnJlcXVpcmUoJy4vbW9kdWxlcy9lczcuc3ltYm9sLmFzeW5jLWl0ZXJhdG9yJyk7XG5yZXF1aXJlKCcuL21vZHVsZXMvZXM3LnN5bWJvbC5vYnNlcnZhYmxlJyk7XG5yZXF1aXJlKCcuL21vZHVsZXMvZXM3Lm9iamVjdC5nZXQtb3duLXByb3BlcnR5LWRlc2NyaXB0b3JzJyk7XG5yZXF1aXJlKCcuL21vZHVsZXMvZXM3Lm9iamVjdC52YWx1ZXMnKTtcbnJlcXVpcmUoJy4vbW9kdWxlcy9lczcub2JqZWN0LmVudHJpZXMnKTtcbnJlcXVpcmUoJy4vbW9kdWxlcy9lczcub2JqZWN0LmRlZmluZS1nZXR0ZXInKTtcbnJlcXVpcmUoJy4vbW9kdWxlcy9lczcub2JqZWN0LmRlZmluZS1zZXR0ZXInKTtcbnJlcXVpcmUoJy4vbW9kdWxlcy9lczcub2JqZWN0Lmxvb2t1cC1nZXR0ZXInKTtcbnJlcXVpcmUoJy4vbW9kdWxlcy9lczcub2JqZWN0Lmxvb2t1cC1zZXR0ZXInKTtcbnJlcXVpcmUoJy4vbW9kdWxlcy9lczcubWFwLnRvLWpzb24nKTtcbnJlcXVpcmUoJy4vbW9kdWxlcy9lczcuc2V0LnRvLWpzb24nKTtcbnJlcXVpcmUoJy4vbW9kdWxlcy9lczcubWFwLm9mJyk7XG5yZXF1aXJlKCcuL21vZHVsZXMvZXM3LnNldC5vZicpO1xucmVxdWlyZSgnLi9tb2R1bGVzL2VzNy53ZWFrLW1hcC5vZicpO1xucmVxdWlyZSgnLi9tb2R1bGVzL2VzNy53ZWFrLXNldC5vZicpO1xucmVxdWlyZSgnLi9tb2R1bGVzL2VzNy5tYXAuZnJvbScpO1xucmVxdWlyZSgnLi9tb2R1bGVzL2VzNy5zZXQuZnJvbScpO1xucmVxdWlyZSgnLi9tb2R1bGVzL2VzNy53ZWFrLW1hcC5mcm9tJyk7XG5yZXF1aXJlKCcuL21vZHVsZXMvZXM3LndlYWstc2V0LmZyb20nKTtcbnJlcXVpcmUoJy4vbW9kdWxlcy9lczcuZ2xvYmFsJyk7XG5yZXF1aXJlKCcuL21vZHVsZXMvZXM3LnN5c3RlbS5nbG9iYWwnKTtcbnJlcXVpcmUoJy4vbW9kdWxlcy9lczcuZXJyb3IuaXMtZXJyb3InKTtcbnJlcXVpcmUoJy4vbW9kdWxlcy9lczcubWF0aC5jbGFtcCcpO1xucmVxdWlyZSgnLi9tb2R1bGVzL2VzNy5tYXRoLmRlZy1wZXItcmFkJyk7XG5yZXF1aXJlKCcuL21vZHVsZXMvZXM3Lm1hdGguZGVncmVlcycpO1xucmVxdWlyZSgnLi9tb2R1bGVzL2VzNy5tYXRoLmZzY2FsZScpO1xucmVxdWlyZSgnLi9tb2R1bGVzL2VzNy5tYXRoLmlhZGRoJyk7XG5yZXF1aXJlKCcuL21vZHVsZXMvZXM3Lm1hdGguaXN1YmgnKTtcbnJlcXVpcmUoJy4vbW9kdWxlcy9lczcubWF0aC5pbXVsaCcpO1xucmVxdWlyZSgnLi9tb2R1bGVzL2VzNy5tYXRoLnJhZC1wZXItZGVnJyk7XG5yZXF1aXJlKCcuL21vZHVsZXMvZXM3Lm1hdGgucmFkaWFucycpO1xucmVxdWlyZSgnLi9tb2R1bGVzL2VzNy5tYXRoLnNjYWxlJyk7XG5yZXF1aXJlKCcuL21vZHVsZXMvZXM3Lm1hdGgudW11bGgnKTtcbnJlcXVpcmUoJy4vbW9kdWxlcy9lczcubWF0aC5zaWduYml0Jyk7XG5yZXF1aXJlKCcuL21vZHVsZXMvZXM3LnByb21pc2UuZmluYWxseScpO1xucmVxdWlyZSgnLi9tb2R1bGVzL2VzNy5wcm9taXNlLnRyeScpO1xucmVxdWlyZSgnLi9tb2R1bGVzL2VzNy5yZWZsZWN0LmRlZmluZS1tZXRhZGF0YScpO1xucmVxdWlyZSgnLi9tb2R1bGVzL2VzNy5yZWZsZWN0LmRlbGV0ZS1tZXRhZGF0YScpO1xucmVxdWlyZSgnLi9tb2R1bGVzL2VzNy5yZWZsZWN0LmdldC1tZXRhZGF0YScpO1xucmVxdWlyZSgnLi9tb2R1bGVzL2VzNy5yZWZsZWN0LmdldC1tZXRhZGF0YS1rZXlzJyk7XG5yZXF1aXJlKCcuL21vZHVsZXMvZXM3LnJlZmxlY3QuZ2V0LW93bi1tZXRhZGF0YScpO1xucmVxdWlyZSgnLi9tb2R1bGVzL2VzNy5yZWZsZWN0LmdldC1vd24tbWV0YWRhdGEta2V5cycpO1xucmVxdWlyZSgnLi9tb2R1bGVzL2VzNy5yZWZsZWN0Lmhhcy1tZXRhZGF0YScpO1xucmVxdWlyZSgnLi9tb2R1bGVzL2VzNy5yZWZsZWN0Lmhhcy1vd24tbWV0YWRhdGEnKTtcbnJlcXVpcmUoJy4vbW9kdWxlcy9lczcucmVmbGVjdC5tZXRhZGF0YScpO1xucmVxdWlyZSgnLi9tb2R1bGVzL2VzNy5hc2FwJyk7XG5yZXF1aXJlKCcuL21vZHVsZXMvZXM3Lm9ic2VydmFibGUnKTtcbnJlcXVpcmUoJy4vbW9kdWxlcy93ZWIudGltZXJzJyk7XG5yZXF1aXJlKCcuL21vZHVsZXMvd2ViLmltbWVkaWF0ZScpO1xucmVxdWlyZSgnLi9tb2R1bGVzL3dlYi5kb20uaXRlcmFibGUnKTtcbm1vZHVsZS5leHBvcnRzID0gcmVxdWlyZSgnLi9tb2R1bGVzL19jb3JlJyk7XG4iLCJcInVzZSBzdHJpY3RcIjtcblxucmVxdWlyZShcImNvcmUtanMvc2hpbVwiKTtcblxucmVxdWlyZShcInJlZ2VuZXJhdG9yLXJ1bnRpbWUvcnVudGltZVwiKTtcblxucmVxdWlyZShcImNvcmUtanMvZm4vcmVnZXhwL2VzY2FwZVwiKTtcblxuaWYgKGdsb2JhbC5fYmFiZWxQb2x5ZmlsbCkge1xuICB0aHJvdyBuZXcgRXJyb3IoXCJvbmx5IG9uZSBpbnN0YW5jZSBvZiBiYWJlbC1wb2x5ZmlsbCBpcyBhbGxvd2VkXCIpO1xufVxuZ2xvYmFsLl9iYWJlbFBvbHlmaWxsID0gdHJ1ZTtcblxudmFyIERFRklORV9QUk9QRVJUWSA9IFwiZGVmaW5lUHJvcGVydHlcIjtcbmZ1bmN0aW9uIGRlZmluZShPLCBrZXksIHZhbHVlKSB7XG4gIE9ba2V5XSB8fCBPYmplY3RbREVGSU5FX1BST1BFUlRZXShPLCBrZXksIHtcbiAgICB3cml0YWJsZTogdHJ1ZSxcbiAgICBjb25maWd1cmFibGU6IHRydWUsXG4gICAgdmFsdWU6IHZhbHVlXG4gIH0pO1xufVxuXG5kZWZpbmUoU3RyaW5nLnByb3RvdHlwZSwgXCJwYWRMZWZ0XCIsIFwiXCIucGFkU3RhcnQpO1xuZGVmaW5lKFN0cmluZy5wcm90b3R5cGUsIFwicGFkUmlnaHRcIiwgXCJcIi5wYWRFbmQpO1xuXG5cInBvcCxyZXZlcnNlLHNoaWZ0LGtleXMsdmFsdWVzLGVudHJpZXMsaW5kZXhPZixldmVyeSxzb21lLGZvckVhY2gsbWFwLGZpbHRlcixmaW5kLGZpbmRJbmRleCxpbmNsdWRlcyxqb2luLHNsaWNlLGNvbmNhdCxwdXNoLHNwbGljZSx1bnNoaWZ0LHNvcnQsbGFzdEluZGV4T2YscmVkdWNlLHJlZHVjZVJpZ2h0LGNvcHlXaXRoaW4sZmlsbFwiLnNwbGl0KFwiLFwiKS5mb3JFYWNoKGZ1bmN0aW9uIChrZXkpIHtcbiAgW11ba2V5XSAmJiBkZWZpbmUoQXJyYXksIGtleSwgRnVuY3Rpb24uY2FsbC5iaW5kKFtdW2tleV0pKTtcbn0pOyIsIi8qKiBEZXRlY3QgZnJlZSB2YXJpYWJsZSBgZ2xvYmFsYCBmcm9tIE5vZGUuanMuICovXG52YXIgZnJlZUdsb2JhbCA9IHR5cGVvZiBnbG9iYWwgPT0gJ29iamVjdCcgJiYgZ2xvYmFsICYmIGdsb2JhbC5PYmplY3QgPT09IE9iamVjdCAmJiBnbG9iYWw7XG5cbmV4cG9ydCBkZWZhdWx0IGZyZWVHbG9iYWw7XG4iXSwic291cmNlUm9vdCI6IiJ9